/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class Drago extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [
          { name: "_newSellPrice", type: "uint256" },
          { name: "_newBuyPrice", type: "uint256" }
        ],
        name: "setPrices",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_transactionFee", type: "uint256" }],
        name: "setTransactionFee",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getVersion",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_new", type: "address" }],
        name: "setOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "totalSupply",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "buyDrago",
        outputs: [{ name: "success", type: "bool" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getData",
        outputs: [
          { name: "name", type: "string" },
          { name: "symbol", type: "string" },
          { name: "sellPrice", type: "uint256" },
          { name: "buyPrice", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_minPeriod", type: "uint32" }],
        name: "changeMinPeriod",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_amount", type: "uint256" }],
        name: "sellDrago",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_hodler", type: "address" }],
        name: "buyDragoOnBehalf",
        outputs: [{ name: "success", type: "bool" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_who", type: "address" }],
        name: "balanceOf",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getEventful",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_exchange", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "depositToExchange",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getAdminData",
        outputs: [
          { name: "", type: "address" },
          { name: "feeCollector", type: "address" },
          { name: "dragoDao", type: "address" },
          { name: "ratio", type: "uint256" },
          { name: "transactionFee", type: "uint256" },
          { name: "minPeriod", type: "uint32" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_feeCollector", type: "address" }],
        name: "changeFeeCollector",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_dragoDao", type: "address" }],
        name: "changeDragoDao",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_exchange", type: "address" }],
        name: "operateOnExchange",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_ratio", type: "uint256" }],
        name: "changeRatio",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          { name: "_dragoName", type: "string" },
          { name: "_dragoSymbol", type: "string" },
          { name: "_dragoId", type: "uint256" },
          { name: "_owner", type: "address" },
          { name: "_authority", type: "address" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      { payable: true, stateMutability: "payable", type: "fallback" },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "old", type: "address" },
          { indexed: true, name: "current", type: "address" }
        ],
        name: "NewOwner",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Drago> {
    const contract = new Drago(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get getVersion(): Promise<string> {
    return promisify(this.rawWeb3Contract.getVersion, []);
  }
  public get totalSupply(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.totalSupply, []);
  }
  public get getEventful(): Promise<string> {
    return promisify(this.rawWeb3Contract.getEventful, []);
  }
  public get owner(): Promise<string> {
    return promisify(this.rawWeb3Contract.owner, []);
  }
  public getData(): Promise<[string, string, BigNumber, BigNumber]> {
    return promisify(this.rawWeb3Contract.getData, []);
  }
  public balanceOf(_who: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.balanceOf, [_who.toString()]);
  }
  public getAdminData(): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber]
  > {
    return promisify(this.rawWeb3Contract.getAdminData, []);
  }

  public setPricesTx(
    _newSellPrice: BigNumber | number,
    _newBuyPrice: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setPrices", [
      _newSellPrice.toString(),
      _newBuyPrice.toString()
    ]);
  }
  public setTransactionFeeTx(
    _transactionFee: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "setTransactionFee",
      [_transactionFee.toString()]
    );
  }
  public setOwnerTx(
    _new: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setOwner", [
      _new.toString()
    ]);
  }
  public buyDragoTx(): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(
      this,
      "buyDrago",
      []
    );
  }
  public changeMinPeriodTx(
    _minPeriod: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeMinPeriod", [
      _minPeriod.toString()
    ]);
  }
  public sellDragoTx(
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "sellDrago", [
      _amount.toString()
    ]);
  }
  public buyDragoOnBehalfTx(
    _hodler: BigNumber | string
  ): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(
      this,
      "buyDragoOnBehalf",
      [_hodler.toString()]
    );
  }
  public depositToExchangeTx(
    _exchange: BigNumber | string,
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "depositToExchange",
      [_exchange.toString(), _amount.toString()]
    );
  }
  public changeFeeCollectorTx(
    _feeCollector: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "changeFeeCollector",
      [_feeCollector.toString()]
    );
  }
  public changeDragoDaoTx(
    _dragoDao: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeDragoDao", [
      _dragoDao.toString()
    ]);
  }
  public operateOnExchangeTx(
    _exchange: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "operateOnExchange",
      [_exchange.toString()]
    );
  }
  public changeRatioTx(
    _ratio: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeRatio", [
      _ratio.toString()
    ]);
  }
}
