/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class Authority extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "getVaultEventful",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_new", type: "address" }],
        name: "setOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_vaultEventful", type: "address" }],
        name: "setVaultEventful",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "isCasperInitialized",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getCasper",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_authority", type: "address" }],
        name: "isAuthority",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getDragoEventful",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getExchangeEventful",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_casper", type: "address" }],
        name: "setCasper",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_drago", type: "address" }],
        name: "isWhitelistedDrago",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_exchange", type: "address" }],
        name: "getExchangeAdapter",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_registry", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistRegistry",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_dragoEventful", type: "address" }],
        name: "setDragoEventful",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_factory", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistFactory",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_exchange", type: "address" }],
        name: "isWhitelistedExchange",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_registry", type: "address" }],
        name: "isWhitelistedRegistry",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_target", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistUser",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_vault", type: "address" }],
        name: "isWhitelistedVault",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_exchange", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistExchange",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_asset", type: "address" }],
        name: "isWhitelistedAsset",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_drago", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistDrago",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_exchangeEventful", type: "address" }],
        name: "setExchangeEventful",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_authority", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "setAuthority",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_exchange", type: "address" },
          { name: "_adapter", type: "address" }
        ],
        name: "setExchangeAdapter",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_whitelister", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "setWhitelister",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_asset", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistAsset",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_target", type: "address" }],
        name: "isWhitelistedUser",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_factory", type: "address" }],
        name: "isWhitelistedFactory",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_group", type: "string" }],
        name: "getListsByGroups",
        outputs: [{ name: "", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_vault", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistVault",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "authority", type: "address" }],
        name: "SetAuthority",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "whitelister", type: "address" }],
        name: "SetWhitelister",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "target", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedUser",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "asset", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedAsset",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "exchange", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedExchange",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "registry", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedRegistry",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "factory", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedFactory",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "vault", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedVault",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "drago", type: "address" },
          { indexed: false, name: "isWhitelisted", type: "bool" }
        ],
        name: "WhitelistedDrago",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "dragoEventful", type: "address" }],
        name: "NewDragoEventful",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "vaultEventful", type: "address" }],
        name: "NewVaultEventful",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "exchangeEventful", type: "address" }],
        name: "NewExchangeEventful",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "casper", type: "address" }],
        name: "NewCasper",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "old", type: "address" },
          { indexed: true, name: "current", type: "address" }
        ],
        name: "NewOwner",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Authority> {
    const contract = new Authority(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get getVaultEventful(): Promise<string> {
    return promisify(this.rawWeb3Contract.getVaultEventful, []);
  }
  public get isCasperInitialized(): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isCasperInitialized, []);
  }
  public get getCasper(): Promise<string> {
    return promisify(this.rawWeb3Contract.getCasper, []);
  }
  public get getDragoEventful(): Promise<string> {
    return promisify(this.rawWeb3Contract.getDragoEventful, []);
  }
  public get getExchangeEventful(): Promise<string> {
    return promisify(this.rawWeb3Contract.getExchangeEventful, []);
  }
  public get owner(): Promise<string> {
    return promisify(this.rawWeb3Contract.owner, []);
  }
  public isAuthority(_authority: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isAuthority, [_authority.toString()]);
  }
  public isWhitelistedDrago(_drago: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isWhitelistedDrago, [
      _drago.toString()
    ]);
  }
  public getExchangeAdapter(_exchange: BigNumber | string): Promise<string> {
    return promisify(this.rawWeb3Contract.getExchangeAdapter, [
      _exchange.toString()
    ]);
  }
  public isWhitelistedExchange(
    _exchange: BigNumber | string
  ): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isWhitelistedExchange, [
      _exchange.toString()
    ]);
  }
  public isWhitelistedRegistry(
    _registry: BigNumber | string
  ): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isWhitelistedRegistry, [
      _registry.toString()
    ]);
  }
  public isWhitelistedVault(_vault: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isWhitelistedVault, [
      _vault.toString()
    ]);
  }
  public isWhitelistedAsset(_asset: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isWhitelistedAsset, [
      _asset.toString()
    ]);
  }
  public isWhitelistedUser(_target: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isWhitelistedUser, [
      _target.toString()
    ]);
  }
  public isWhitelistedFactory(_factory: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isWhitelistedFactory, [
      _factory.toString()
    ]);
  }
  public getListsByGroups(_group: string): Promise<string[]> {
    return promisify(this.rawWeb3Contract.getListsByGroups, [
      _group.toString()
    ]);
  }

  public setOwnerTx(
    _new: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setOwner", [
      _new.toString()
    ]);
  }
  public setVaultEventfulTx(
    _vaultEventful: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setVaultEventful", [
      _vaultEventful.toString()
    ]);
  }
  public setCasperTx(
    _casper: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setCasper", [
      _casper.toString()
    ]);
  }
  public whitelistRegistryTx(
    _registry: BigNumber | string,
    _isWhitelisted: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "whitelistRegistry",
      [_registry.toString(), _isWhitelisted.toString()]
    );
  }
  public setDragoEventfulTx(
    _dragoEventful: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setDragoEventful", [
      _dragoEventful.toString()
    ]);
  }
  public whitelistFactoryTx(
    _factory: BigNumber | string,
    _isWhitelisted: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "whitelistFactory", [
      _factory.toString(),
      _isWhitelisted.toString()
    ]);
  }
  public whitelistUserTx(
    _target: BigNumber | string,
    _isWhitelisted: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "whitelistUser", [
      _target.toString(),
      _isWhitelisted.toString()
    ]);
  }
  public whitelistExchangeTx(
    _exchange: BigNumber | string,
    _isWhitelisted: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "whitelistExchange",
      [_exchange.toString(), _isWhitelisted.toString()]
    );
  }
  public whitelistDragoTx(
    _drago: BigNumber | string,
    _isWhitelisted: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "whitelistDrago", [
      _drago.toString(),
      _isWhitelisted.toString()
    ]);
  }
  public setExchangeEventfulTx(
    _exchangeEventful: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "setExchangeEventful",
      [_exchangeEventful.toString()]
    );
  }
  public setAuthorityTx(
    _authority: BigNumber | string,
    _isWhitelisted: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setAuthority", [
      _authority.toString(),
      _isWhitelisted.toString()
    ]);
  }
  public setExchangeAdapterTx(
    _exchange: BigNumber | string,
    _adapter: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "setExchangeAdapter",
      [_exchange.toString(), _adapter.toString()]
    );
  }
  public setWhitelisterTx(
    _whitelister: BigNumber | string,
    _isWhitelisted: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setWhitelister", [
      _whitelister.toString(),
      _isWhitelisted.toString()
    ]);
  }
  public whitelistAssetTx(
    _asset: BigNumber | string,
    _isWhitelisted: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "whitelistAsset", [
      _asset.toString(),
      _isWhitelisted.toString()
    ]);
  }
  public whitelistVaultTx(
    _vault: BigNumber | string,
    _isWhitelisted: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "whitelistVault", [
      _vault.toString(),
      _isWhitelisted.toString()
    ]);
  }
}
