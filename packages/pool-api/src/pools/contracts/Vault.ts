/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class Vault extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "_transactionFee", type: "uint256" }],
        name: "setTransactionFee",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getVersion",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_new", type: "address" }],
        name: "setOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "totalSupply",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_validation", type: "address" },
          { name: "_withdrawal", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "depositCasper",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_amount", type: "uint256" }],
        name: "sellVault",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getData",
        outputs: [
          { name: "name", type: "string" },
          { name: "symbol", type: "string" },
          { name: "sellPrice", type: "uint256" },
          { name: "buyPrice", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_vaultDao", type: "address" }],
        name: "changeVaultDao",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_minPeriod", type: "uint32" }],
        name: "changeMinPeriod",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "updatePrice",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_from", type: "address" }],
        name: "balanceOf",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getCasperDeposit",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "withdrawCasper",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getEventful",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getAdminData",
        outputs: [
          { name: "", type: "address" },
          { name: "feeCollector", type: "address" },
          { name: "vaultDao", type: "address" },
          { name: "ratio", type: "uint256" },
          { name: "transactionFee", type: "uint256" },
          { name: "minPeriod", type: "uint32" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_feeCollector", type: "address" }],
        name: "changeFeeCollector",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_hodler", type: "address" }],
        name: "buyVaultOnBehalf",
        outputs: [{ name: "success", type: "bool" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "buyVault",
        outputs: [{ name: "success", type: "bool" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_ratio", type: "uint256" }],
        name: "changeRatio",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          { name: "_vaultName", type: "string" },
          { name: "_vaultSymbol", type: "string" },
          { name: "_vaultId", type: "uint256" },
          { name: "_owner", type: "address" },
          { name: "_authority", type: "address" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      { payable: true, stateMutability: "payable", type: "fallback" },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "old", type: "address" },
          { indexed: true, name: "current", type: "address" }
        ],
        name: "NewOwner",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Vault> {
    const contract = new Vault(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get getVersion(): Promise<string> {
    return promisify(this.rawWeb3Contract.getVersion, []);
  }
  public get totalSupply(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.totalSupply, []);
  }
  public get getCasperDeposit(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getCasperDeposit, []);
  }
  public get getEventful(): Promise<string> {
    return promisify(this.rawWeb3Contract.getEventful, []);
  }
  public get owner(): Promise<string> {
    return promisify(this.rawWeb3Contract.owner, []);
  }
  public getData(): Promise<[string, string, BigNumber, BigNumber]> {
    return promisify(this.rawWeb3Contract.getData, []);
  }
  public balanceOf(_from: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.balanceOf, [_from.toString()]);
  }
  public getAdminData(): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber]
  > {
    return promisify(this.rawWeb3Contract.getAdminData, []);
  }

  public setTransactionFeeTx(
    _transactionFee: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "setTransactionFee",
      [_transactionFee.toString()]
    );
  }
  public setOwnerTx(
    _new: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setOwner", [
      _new.toString()
    ]);
  }
  public depositCasperTx(
    _validation: BigNumber | string,
    _withdrawal: BigNumber | string,
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "depositCasper", [
      _validation.toString(),
      _withdrawal.toString(),
      _amount.toString()
    ]);
  }
  public sellVaultTx(
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "sellVault", [
      _amount.toString()
    ]);
  }
  public changeVaultDaoTx(
    _vaultDao: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeVaultDao", [
      _vaultDao.toString()
    ]);
  }
  public changeMinPeriodTx(
    _minPeriod: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeMinPeriod", [
      _minPeriod.toString()
    ]);
  }
  public updatePriceTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "updatePrice", []);
  }
  public withdrawCasperTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "withdrawCasper",
      []
    );
  }
  public changeFeeCollectorTx(
    _feeCollector: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "changeFeeCollector",
      [_feeCollector.toString()]
    );
  }
  public buyVaultOnBehalfTx(
    _hodler: BigNumber | string
  ): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(
      this,
      "buyVaultOnBehalf",
      [_hodler.toString()]
    );
  }
  public buyVaultTx(): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(
      this,
      "buyVault",
      []
    );
  }
  public changeRatioTx(
    _ratio: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeRatio", [
      _ratio.toString()
    ]);
  }
}
