/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class ProofOfPerformance extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [
          { name: "_ofGroup", type: "address" },
          { name: "_ratio", type: "uint256" }
        ],
        name: "setRatio",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_ofPool", type: "uint256" }],
        name: "getHwm",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "rigoblockDao",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getPoolPrices",
        outputs: [
          { name: "pools", type: "address[]" },
          { name: "poolPrices", type: "uint256[]" },
          { name: "totalTokens", type: "uint256[]" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_amount", type: "uint256" }],
        name: "setMinimumRigo",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "RIGOTOKENADDRESS",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_dragoRegistry", type: "address" }],
        name: "setRegistry",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_rigoblockDao", type: "address" }],
        name: "setRigoblockDao",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "dragoRegistry",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "minimumRigo",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_ofPool", type: "uint256" }],
        name: "getPoolData",
        outputs: [
          { name: "active", type: "bool" },
          { name: "thePoolAddress", type: "address" },
          { name: "thePoolGroup", type: "address" },
          { name: "thePoolPrice", type: "uint256" },
          { name: "thePoolSupply", type: "uint256" },
          { name: "poolValue", type: "uint256" },
          { name: "epochReward", type: "uint256" },
          { name: "ratio", type: "uint256" },
          { name: "pop", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_ofPool", type: "uint256" }],
        name: "claimPop",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "calcNetworkValue",
        outputs: [
          { name: "networkValue", type: "uint256" },
          { name: "numberOfFunds", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          { name: "_rigoTokenAddress", type: "address" },
          { name: "_rigoblockDao", type: "address" },
          { name: "_dragoRegistry", type: "address" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<ProofOfPerformance> {
    const contract = new ProofOfPerformance(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get rigoblockDao(): Promise<string> {
    return promisify(this.rawWeb3Contract.rigoblockDao, []);
  }
  public get RIGOTOKENADDRESS(): Promise<string> {
    return promisify(this.rawWeb3Contract.RIGOTOKENADDRESS, []);
  }
  public get dragoRegistry(): Promise<string> {
    return promisify(this.rawWeb3Contract.dragoRegistry, []);
  }
  public get minimumRigo(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.minimumRigo, []);
  }
  public getHwm(_ofPool: BigNumber | number): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getHwm, [_ofPool.toString()]);
  }
  public getPoolPrices(): Promise<[string[], BigNumber[], BigNumber[]]> {
    return promisify(this.rawWeb3Contract.getPoolPrices, []);
  }
  public getPoolData(
    _ofPool: BigNumber | number
  ): Promise<
    [
      boolean,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  > {
    return promisify(this.rawWeb3Contract.getPoolData, [_ofPool.toString()]);
  }
  public calcNetworkValue(): Promise<[BigNumber, BigNumber]> {
    return promisify(this.rawWeb3Contract.calcNetworkValue, []);
  }

  public setRatioTx(
    _ofGroup: BigNumber | string,
    _ratio: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setRatio", [
      _ofGroup.toString(),
      _ratio.toString()
    ]);
  }
  public setMinimumRigoTx(
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setMinimumRigo", [
      _amount.toString()
    ]);
  }
  public setRegistryTx(
    _dragoRegistry: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setRegistry", [
      _dragoRegistry.toString()
    ]);
  }
  public setRigoblockDaoTx(
    _rigoblockDao: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setRigoblockDao", [
      _rigoblockDao.toString()
    ]);
  }
  public claimPopTx(
    _ofPool: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "claimPop", [
      _ofPool.toString()
    ]);
  }
}
