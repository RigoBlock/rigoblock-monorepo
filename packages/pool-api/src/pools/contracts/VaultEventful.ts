/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class VaultEventful extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [
          { name: "_who", type: "address" },
          { name: "_newVault", type: "address" },
          { name: "_name", type: "string" },
          { name: "_symbol", type: "string" },
          { name: "_vaultId", type: "uint256" }
        ],
        name: "createVault",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_who", type: "address" },
          { name: "_targetVault", type: "address" },
          { name: "_value", type: "uint256" },
          { name: "_amount", type: "uint256" },
          { name: "_name", type: "bytes" },
          { name: "_symbol", type: "bytes" }
        ],
        name: "buyVault",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_who", type: "address" },
          { name: "_targetVault", type: "address" },
          { name: "_casper", type: "address" },
          { name: "_validatorIndex", type: "uint256" }
        ],
        name: "withdrawFromCasper",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_who", type: "address" },
          { name: "_targetVault", type: "address" },
          { name: "_casper", type: "address" },
          { name: "_validation", type: "address" },
          { name: "_withdrawal", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "depositToCasper",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "AUTHORITY",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_who", type: "address" },
          { name: "_targetVault", type: "address" },
          { name: "_vaultDao", type: "address" }
        ],
        name: "changeVaultDao",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_who", type: "address" },
          { name: "_targetVault", type: "address" },
          { name: "_ratio", type: "uint256" }
        ],
        name: "changeRatio",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_who", type: "address" },
          { name: "_targetVault", type: "address" },
          { name: "_transactionFee", type: "uint256" }
        ],
        name: "setTransactionFee",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_who", type: "address" },
          { name: "_targetVault", type: "address" },
          { name: "_feeCollector", type: "address" }
        ],
        name: "changeFeeCollector",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_who", type: "address" },
          { name: "_targetVault", type: "address" },
          { name: "_amount", type: "uint256" },
          { name: "_revenue", type: "uint256" },
          { name: "_name", type: "bytes" },
          { name: "_symbol", type: "bytes" }
        ],
        name: "sellVault",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [{ name: "_authority", type: "address" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "vault", type: "address" },
          { indexed: true, name: "from", type: "address" },
          { indexed: true, name: "to", type: "address" },
          { indexed: false, name: "amount", type: "uint256" },
          { indexed: false, name: "revenue", type: "uint256" },
          { indexed: false, name: "name", type: "bytes" },
          { indexed: false, name: "symbol", type: "bytes" }
        ],
        name: "BuyVault",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "vault", type: "address" },
          { indexed: true, name: "from", type: "address" },
          { indexed: true, name: "to", type: "address" },
          { indexed: false, name: "amount", type: "uint256" },
          { indexed: false, name: "revenue", type: "uint256" },
          { indexed: false, name: "name", type: "bytes" },
          { indexed: false, name: "symbol", type: "bytes" }
        ],
        name: "SellVault",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "vault", type: "address" },
          { indexed: true, name: "from", type: "address" },
          { indexed: false, name: "newRatio", type: "uint256" }
        ],
        name: "NewRatio",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "vault", type: "address" },
          { indexed: true, name: "from", type: "address" },
          { indexed: true, name: "to", type: "address" },
          { indexed: false, name: "fee", type: "uint256" }
        ],
        name: "NewFee",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "vault", type: "address" },
          { indexed: true, name: "from", type: "address" },
          { indexed: true, name: "to", type: "address" },
          { indexed: false, name: "collector", type: "address" }
        ],
        name: "NewCollector",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "vault", type: "address" },
          { indexed: true, name: "from", type: "address" },
          { indexed: true, name: "to", type: "address" },
          { indexed: false, name: "vaultDao", type: "address" }
        ],
        name: "VaultDao",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "vault", type: "address" },
          { indexed: true, name: "validator", type: "address" },
          { indexed: true, name: "casper", type: "address" },
          { indexed: false, name: "withdrawal", type: "address" },
          { indexed: false, name: "amount", type: "uint256" }
        ],
        name: "DepositCasper",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "vault", type: "address" },
          { indexed: true, name: "validator", type: "address" },
          { indexed: true, name: "casper", type: "address" },
          { indexed: false, name: "validatorIndex", type: "uint256" }
        ],
        name: "WithdrawCasper",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "vault", type: "address" },
          { indexed: true, name: "group", type: "address" },
          { indexed: true, name: "owner", type: "address" },
          { indexed: false, name: "vaultId", type: "uint256" },
          { indexed: false, name: "name", type: "string" },
          { indexed: false, name: "symbol", type: "string" }
        ],
        name: "VaultCreated",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<VaultEventful> {
    const contract = new VaultEventful(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get AUTHORITY(): Promise<string> {
    return promisify(this.rawWeb3Contract.AUTHORITY, []);
  }
  public get VERSION(): Promise<string> {
    return promisify(this.rawWeb3Contract.VERSION, []);
  }

  public createVaultTx(
    _who: BigNumber | string,
    _newVault: BigNumber | string,
    _name: string,
    _symbol: string,
    _vaultId: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "createVault", [
      _who.toString(),
      _newVault.toString(),
      _name.toString(),
      _symbol.toString(),
      _vaultId.toString()
    ]);
  }
  public buyVaultTx(
    _who: BigNumber | string,
    _targetVault: BigNumber | string,
    _value: BigNumber | number,
    _amount: BigNumber | number,
    _name: BigNumber[],
    _symbol: BigNumber[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "buyVault", [
      _who.toString(),
      _targetVault.toString(),
      _value.toString(),
      _amount.toString(),
      _name.map(val => val.toString()),
      _symbol.map(val => val.toString())
    ]);
  }
  public withdrawFromCasperTx(
    _who: BigNumber | string,
    _targetVault: BigNumber | string,
    _casper: BigNumber | string,
    _validatorIndex: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "withdrawFromCasper",
      [
        _who.toString(),
        _targetVault.toString(),
        _casper.toString(),
        _validatorIndex.toString()
      ]
    );
  }
  public depositToCasperTx(
    _who: BigNumber | string,
    _targetVault: BigNumber | string,
    _casper: BigNumber | string,
    _validation: BigNumber | string,
    _withdrawal: BigNumber | string,
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "depositToCasper", [
      _who.toString(),
      _targetVault.toString(),
      _casper.toString(),
      _validation.toString(),
      _withdrawal.toString(),
      _amount.toString()
    ]);
  }
  public changeVaultDaoTx(
    _who: BigNumber | string,
    _targetVault: BigNumber | string,
    _vaultDao: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeVaultDao", [
      _who.toString(),
      _targetVault.toString(),
      _vaultDao.toString()
    ]);
  }
  public changeRatioTx(
    _who: BigNumber | string,
    _targetVault: BigNumber | string,
    _ratio: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeRatio", [
      _who.toString(),
      _targetVault.toString(),
      _ratio.toString()
    ]);
  }
  public setTransactionFeeTx(
    _who: BigNumber | string,
    _targetVault: BigNumber | string,
    _transactionFee: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "setTransactionFee",
      [_who.toString(), _targetVault.toString(), _transactionFee.toString()]
    );
  }
  public changeFeeCollectorTx(
    _who: BigNumber | string,
    _targetVault: BigNumber | string,
    _feeCollector: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "changeFeeCollector",
      [_who.toString(), _targetVault.toString(), _feeCollector.toString()]
    );
  }
  public sellVaultTx(
    _who: BigNumber | string,
    _targetVault: BigNumber | string,
    _amount: BigNumber | number,
    _revenue: BigNumber | number,
    _name: BigNumber[],
    _symbol: BigNumber[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "sellVault", [
      _who.toString(),
      _targetVault.toString(),
      _amount.toString(),
      _revenue.toString(),
      _name.map(val => val.toString()),
      _symbol.map(val => val.toString())
    ]);
  }
}
