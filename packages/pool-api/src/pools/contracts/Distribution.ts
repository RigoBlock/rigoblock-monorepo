/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class Distribution extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [
          { name: "_fee", type: "uint256" },
          { name: "_distributor", type: "address" }
        ],
        name: "setFee",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_distributor", type: "address" }],
        name: "getFee",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_pool", type: "address" },
          { name: "_distributor", type: "address" },
          { name: "_buyer", type: "address" }
        ],
        name: "subscribe",
        outputs: [],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "buyer", type: "address" },
          { indexed: true, name: "distributor", type: "address" },
          { indexed: false, name: "amount", type: "uint256" }
        ],
        name: "Subscription",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Distribution> {
    const contract = new Distribution(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public getFee(_distributor: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getFee, [_distributor.toString()]);
  }

  public setFeeTx(
    _fee: BigNumber | number,
    _distributor: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setFee", [
      _fee.toString(),
      _distributor.toString()
    ]);
  }
  public subscribeTx(
    _pool: BigNumber | string,
    _distributor: BigNumber | string,
    _buyer: BigNumber | string
  ): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(this, "subscribe", [
      _pool.toString(),
      _distributor.toString(),
      _buyer.toString()
    ]);
  }
}
