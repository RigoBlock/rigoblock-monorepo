{
	"language": "Solidity",
	"sources": {
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/examples/helpers/HGetDragoData.sol": {
			"content": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.2;\npragma experimental ABIEncoderV2;\n\n/// @title Drago Interface - Allows interaction with the Drago contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface DragoFace {\n\n    struct Transaction {\n        bytes assembledData;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    //function() external payable;\n    function buyDrago() external payable returns (bool success);\n    function buyDragoOnBehalf(address _hodler) external payable returns (bool success);\n    function sellDrago(uint256 _amount) external returns (bool success);\n    function setPrices(uint256 _newSellPrice, uint256 _newBuyPrice, uint256 _signaturevaliduntilBlock, bytes32 _hash, bytes calldata _signedData) external;\n    function changeMinPeriod(uint32 _minPeriod) external;\n    function changeRatio(uint256 _ratio) external;\n    function setTransactionFee(uint256 _transactionFee) external;\n    function changeFeeCollector(address _feeCollector) external;\n    function changeDragoDao(address _dragoDao) external;\n    function enforceKyc(bool _enforced, address _kycProvider) external;\n    function setAllowance(address _tokenTransferProxy, address _token, uint256 _amount) external;\n    function setMultipleAllowances(address _tokenTransferProxy, address[] calldata _tokens, uint256[] calldata _amounts) external;\n    function operateOnExchange(address _exchange, Transaction calldata transaction) external returns (bool success);\n    function batchOperateOnExchange(address _exchange, Transaction[] calldata transactions) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function balanceOf(address _who) external view returns (uint256);\n    function getEventful() external view returns (address);\n    function getData() external view returns (string memory name, string memory symbol, uint256 sellPrice, uint256 buyPrice);\n    function calcSharePrice() external view returns (uint256);\n    function getAdminData() external view returns (address, address feeCollector, address dragoDao, uint256 ratio, uint256 transactionFee, uint32 minPeriod);\n    function getKycProvider() external view returns (address);\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bool isValid);\n    function totalSupply() external view returns (uint256);\n}\n\n/// @title Drago Registry Interface - Allows external interaction with Drago Registry.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface DragoRegistryFace {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function register(address _drago, string calldata _name, string calldata _symbol, uint256 _dragoId, address _owner) external payable returns (bool);\n    function unregister(uint256 _id) external;\n    function setMeta(uint256 _id, bytes32 _key, bytes32 _value) external;\n    function addGroup(address _group) external;\n    function setFee(uint256 _fee) external;\n    function updateOwner(uint256 _id) external;\n    function updateOwners(uint256[] calldata _id) external;\n    function upgrade(address _newAddress) external payable; //payable as there is a transfer of value, otherwise opcode might throw an error\n    function setUpgraded(uint256 _version) external;\n    function drain() external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function dragoCount() external view returns (uint256);\n    function fromId(uint256 _id) external view returns (address drago, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromAddress(address _drago) external view returns (uint256 id, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromName(string calldata _name) external view returns (uint256 id, address drago, string memory symbol, uint256 dragoId, address owner, address group);\n    function getNameFromAddress(address _pool) external view returns (string memory);\n    function getSymbolFromAddress(address _pool) external view returns (string memory);\n    function meta(uint256 _id, bytes32 _key) external view returns (bytes32);\n    function getGroups() external view returns (address[] memory);\n    function getFee() external view returns (uint256);\n}\n\n/// @title Drago Data Helper - Allows to query multiple data of a drago at once.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract HGetDragoData {\n    \n    struct DragoData {\n        string name;\n        string symbol;\n        uint256 sellPrice;\n        uint256 buyPrice;\n        address owner;\n        address feeCollector;\n        address dragoDao;\n        uint256 ratio;\n        uint256 transactionFee;\n        uint256 totalSupply;\n        uint256 ethBalance;\n        uint32 minPeriod;\n        uint256 id;\n        address drago;\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Returns structs of infos on a drago from its ID.\n    /// @param _dragoRegistry Address of the target drago.\n    /// @param _dragoId Number of the target drago ID.\n    /// @return Structs of data.\n    function queryDataFromId(\n        address _dragoRegistry,\n        uint256 _dragoId)\n        external\n        view\n        returns (\n            DragoData memory dragoData\n        )\n    {\n        address drago;\n        DragoRegistryFace dragoRegistryInstance = DragoRegistryFace(_dragoRegistry);\n        (drago, , , , , ) = dragoRegistryInstance.fromId(_dragoId);\n        (\n            dragoData\n        ) = queryDataInternal(drago);\n        dragoData.id = _dragoId;\n        dragoData.drago = drago;\n    }\n\n    /// @dev Returns structs of infos on a drago from its address.\n    /// @param _dragoAddress Array of addresses of the target dragos.\n    /// @return Arrays of structs of data.\n    function queryDataFromAddress(\n        address _dragoRegistry,\n        address _dragoAddress)\n        external\n        view\n        returns (\n            DragoData memory dragoData\n        )\n    {\n        uint256 dragoId;\n        DragoRegistryFace dragoRegistryInstance = DragoRegistryFace(_dragoRegistry);\n        (dragoId, , , , , ) = dragoRegistryInstance.fromAddress(_dragoAddress);\n        (\n            dragoData\n        ) = queryDataInternal(_dragoAddress);\n        dragoData.id = dragoId;\n        dragoData.drago = _dragoAddress;\n    }\n\n    /// @dev Returns structs of infos on a drago from its ID.\n    /// @param _dragoRegistry Address of the drago registry.\n    /// @param _dragoIds Array of IDs of the target dragos.\n    /// @return Arrays of structs of data and related address of a drago.\n    function queryMultiDataFromId(\n        address _dragoRegistry,\n        uint256[] calldata _dragoIds)\n        external\n        view\n        returns (\n            DragoData[] memory\n        )\n    {\n        uint256 length = _dragoIds.length;\n        DragoData[] memory dragoData = new DragoData[](length);\n        address[] memory dragos = new address[](length);\n        address dragoRegistry = _dragoRegistry;\n        DragoRegistryFace dragoRegistryInstance = DragoRegistryFace(dragoRegistry);\n        for (uint256 i = 0; i < length; i++) {\n            uint256 dragoId = _dragoIds[i];\n            (dragos[i], , , , , ) = dragoRegistryInstance.fromId(dragoId);\n            (\n                dragoData[i]\n            ) = queryDataInternal(dragos[i]);\n            dragoData[i].id = dragoId;\n            dragoData[i].drago = dragos[i];\n        }\n        return(dragoData);\n    }\n\n    /// @dev Returns structs of infos on a drago from its address.\n    /// @param _dragoAddresses Array of addresses of the target dragos.\n    /// @return Arrays of structs of data and related address of a drago.\n    function queryMultiDataFromAddress(\n        address _dragoRegistry,\n        address[] calldata _dragoAddresses)\n        external\n        view\n        returns (\n            DragoData[] memory\n        )\n    {\n        uint256 length = _dragoAddresses.length;\n        DragoData[] memory dragoData = new DragoData[](length);\n        uint256[] memory dragoIds = new uint256[](length);\n        address[] memory dragos = _dragoAddresses;\n        address dragoRegistry = _dragoRegistry;\n        DragoRegistryFace dragoRegistryInstance = DragoRegistryFace(dragoRegistry);\n        for (uint256 i = 0; i < length; i++) {\n            address dragoAddress = dragos[i];\n            (dragoIds[i], , , , , ) = dragoRegistryInstance.fromAddress(dragoAddress);\n            (\n                dragoData[i]\n            ) = queryDataInternal(dragos[i]);\n            dragoData[i].id = dragoIds[i];\n            dragoData[i].drago = dragos[i];\n        }\n        return(dragoData);\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Returns structs of infos on a drago.\n    /// @param _drago Array of addresses of the target dragos.\n    /// @return Structs of data.\n    function queryDataInternal(\n        address _drago)\n        internal\n        view\n        returns (\n            DragoData memory dragoData\n        )\n    {\n        DragoFace dragoInstance = DragoFace(_drago);\n        (\n            dragoData.name,\n            dragoData.symbol,\n            dragoData.sellPrice,\n            dragoData.buyPrice\n        ) = dragoInstance.getData();\n        (\n            dragoData.owner,\n            dragoData.feeCollector,\n            dragoData.dragoDao,\n            dragoData.ratio,\n            dragoData.transactionFee,\n            dragoData.minPeriod\n        ) = dragoInstance.getAdminData();\n        dragoData.totalSupply = dragoInstance.totalSupply();\n        dragoData.ethBalance = address(_drago).balance;\n    }\n}"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/rigoToken/Inflation/Inflation.sol": {
			"content": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.2;\n\nimport { Owned } from \"../../utils/Owned/Owned.sol\";\nimport { AuthorityFace as Authority } from \"../../protocol/authorities/Authority/AuthorityFace.sol\";\nimport { SafeMath } from \"../../utils/SafeMath/SafeMath.sol\";\nimport { InflationFace } from \"./InflationFace.sol\";\n\ninterface RigoToken {\n\n    function mintToken(address _recipient, uint256 _amount) external;\n    function changeMintingAddress(address _newAddress) external;\n    function changeRigoblockAddress(address _newAddress) external;\n\n    function balanceOf(address _who) external view returns (uint256);\n}\n\n/// @title Inflation - Allows ProofOfPerformance to mint tokens.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract Inflation is\n    SafeMath,\n    InflationFace\n{\n    address public RIGOTOKENADDRESS;\n\n    uint256 public period = 1 days;\n    uint256 public minimumGRG = 0;\n    address public proofOfPerformance;\n    address public authority;\n    address public rigoblockDao;\n\n    mapping(address => Performer) performers;\n    mapping(address => Group) groups;\n\n    struct Performer {\n        uint256 claimedTokens;\n        mapping(uint256 => bool) claim;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 epoch;\n    }\n\n    struct Group {\n        uint256 epochReward;\n    }\n\n    /// @notice in order to qualify for PoP user has to told minimum rigo token\n    modifier minimumRigo(address _ofPool) {\n        RigoToken rigoToken = RigoToken(RIGOTOKENADDRESS);\n        require(\n            rigoToken.balanceOf(getPoolOwner(_ofPool)) >= minimumGRG,\n            \"BELOW_MINIMUM_GRG\"\n        );\n        _;\n    }\n\n    modifier onlyRigoblockDao {\n        require(\n            msg.sender == rigoblockDao,\n            \"ONLY_RIGOBLOCK_DAO\"\n        );\n        _;\n    }\n\n    modifier onlyProofOfPerformance {\n        require(\n            msg.sender == proofOfPerformance,\n            \"ONLY_POP_CONTRACT\"\n        );\n        _;\n    }\n\n    modifier isApprovedFactory(address _factory) {\n        Authority auth = Authority(authority);\n        require(\n            auth.isWhitelistedFactory(_factory),\n            \"NOT_APPROVED_AUTHORITY\"\n        );\n        _;\n    }\n\n    modifier timeAtLeast(address _thePool) {\n        require(\n            now >= performers[_thePool].endTime,\n            \"TIME_NOT_ENOUGH\"\n        );\n        _;\n    }\n\n    constructor(\n        address _rigoTokenAddress,\n        address _proofOfPerformance,\n        address _authority)\n        public\n    {\n        RIGOTOKENADDRESS = _rigoTokenAddress;\n        rigoblockDao = msg.sender;\n        proofOfPerformance = _proofOfPerformance;\n        authority = _authority;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows ProofOfPerformance to mint rewards\n    /// @param _thePool Address of the target pool\n    /// @param _reward Number of reward in Rigo tokens\n    /// @return Bool the transaction executed correctly\n    function mintInflation(address _thePool, uint256 _reward)\n        external\n        onlyProofOfPerformance\n        minimumRigo(_thePool)\n        timeAtLeast(_thePool)\n        returns (bool)\n    {\n        performers[_thePool].startTime = now;\n        performers[_thePool].endTime = now + period;\n        ++performers[_thePool].epoch;\n        uint256 reward = _reward * 95 / 100; //5% royalty to rigoblock dao\n        uint256 rigoblockReward = safeSub(_reward, reward);\n        RigoToken rigoToken = RigoToken(RIGOTOKENADDRESS);\n        rigoToken.mintToken(getPoolOwner(_thePool), reward);\n        rigoToken.mintToken(rigoblockDao, rigoblockReward);\n        return true;\n    }\n\n    /// @dev Allows rigoblock dao to set the inflation factor for a group\n    /// @param _group Address of the group/factory\n    /// @param _inflationFactor Value of the reward factor\n    function setInflationFactor(address _group, uint256 _inflationFactor)\n        external\n        onlyRigoblockDao\n        isApprovedFactory(_group)\n    {\n        groups[_group].epochReward = _inflationFactor;\n    }\n\n    /// @dev Allows rigoblock dao to set the minimum number of required tokens\n    /// @param _minimum Number of minimum tokens\n    function setMinimumRigo(uint256 _minimum)\n        external\n        onlyRigoblockDao\n    {\n        minimumGRG = _minimum;\n    }\n\n    /// @dev Allows rigoblock dao to upgrade its address\n    /// @param _newRigoblock Address of the new rigoblock dao\n    function setRigoblock(address _newRigoblock)\n        external\n        onlyRigoblockDao\n    {\n        rigoblockDao = _newRigoblock;\n    }\n\n    /// @dev Allows rigoblock dao to update the authority\n    /// @param _authority Address of the authority\n    function setAuthority(address _authority)\n        external\n        onlyRigoblockDao\n    {\n        authority = _authority;\n    }\n\n    /// @dev Allows rigoblock dao to update proof of performance\n    /// @param _pop Address of the Proof of Performance contract\n    function setProofOfPerformance(address _pop)\n        external\n        onlyRigoblockDao\n    {\n        proofOfPerformance = _pop;\n    }\n\n    /// @dev Allows rigoblock dao to set the minimum time between reward collection\n    /// @param _newPeriod Number of seconds between 2 rewards\n    /// @notice set period on shorter subsets of time for testing\n    function setPeriod(uint256 _newPeriod)\n        external\n        onlyRigoblockDao\n    {\n        period = _newPeriod;\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Returns whether a wizard can claim reward tokens\n    /// @param _thePool Address of the target pool\n    /// @return Bool the wizard can claim\n    function canWithdraw(address _thePool)\n        external\n        view\n        returns (bool)\n    {\n        if (now >= performers[_thePool].endTime) {\n            return true;\n        }\n    }\n\n    /// @dev Returns how much time needed until next claim\n    /// @param _thePool Address of the target pool\n    /// @return Number in seconds\n    function timeUntilClaim(address _thePool)\n        external\n        view\n        returns (uint256)\n    {\n        if (now < performers[_thePool].endTime) {\n            return (performers[_thePool].endTime);\n        }\n    }\n\n    /// @dev Return the reward factor for a group\n    /// @param _group Address of the group\n    /// @return Value of the reward factor\n    function getInflationFactor(address _group)\n        external\n        view\n        returns (uint256)\n    {\n        return groups[_group].epochReward;\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Returns the address of the pool owner\n    /// @param _ofPool Number of the registered pool\n    /// @return Address of the pool owner\n    function getPoolOwner(address _ofPool)\n        internal\n        view\n        returns (address)\n    {\n        return Owned(_ofPool).owner();\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/Owned/Owned.sol": {
			"content": "pragma solidity >=0.4.22 <0.6.0;\n\ncontract Owned {\n\n    address public owner;\n\n    event NewOwner(address indexed old, address indexed current);\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address _new)\n        public\n        onlyOwner\n    {\n        require(_new != address(0));\n        owner = _new;\n        emit NewOwner(owner, _new);\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/authorities/Authority/AuthorityFace.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/// @title Authority Interface - Allows interaction with the Authority contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface AuthorityFace {\n\n    /*\n     * EVENTS\n     */\n    event AuthoritySet(address indexed authority);\n    event WhitelisterSet(address indexed whitelister);\n    event WhitelistedUser(address indexed target, bool approved);\n    event WhitelistedRegistry(address indexed registry, bool approved);\n    event WhitelistedFactory(address indexed factory, bool approved);\n    event WhitelistedVault(address indexed vault, bool approved);\n    event WhitelistedDrago(address indexed drago, bool isWhitelisted);\n    event NewDragoEventful(address indexed dragoEventful);\n    event NewVaultEventful(address indexed vaultEventful);\n    event NewNavVerifier(address indexed navVerifier);\n    event NewExchangesAuthority(address indexed exchangesAuthority);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function setAuthority(address _authority, bool _isWhitelisted) external;\n    function setWhitelister(address _whitelister, bool _isWhitelisted) external;\n    function whitelistUser(address _target, bool _isWhitelisted) external;\n    function whitelistDrago(address _drago, bool _isWhitelisted) external;\n    function whitelistVault(address _vault, bool _isWhitelisted) external;\n    function whitelistRegistry(address _registry, bool _isWhitelisted) external;\n    function whitelistFactory(address _factory, bool _isWhitelisted) external;\n    function setDragoEventful(address _dragoEventful) external;\n    function setVaultEventful(address _vaultEventful) external;\n    function setNavVerifier(address _navVerifier) external;\n    function setExchangesAuthority(address _exchangesAuthority) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function isWhitelistedUser(address _target) external view returns (bool);\n    function isAuthority(address _authority) external view returns (bool);\n    function isWhitelistedRegistry(address _registry) external view returns (bool);\n    function isWhitelistedDrago(address _drago) external view returns (bool);\n    function isWhitelistedVault(address _vault) external view returns (bool);\n    function isWhitelistedFactory(address _factory) external view returns (bool);\n    function getDragoEventful() external view returns (address);\n    function getVaultEventful() external view returns (address);\n    function getNavVerifier() external view returns (address);\n    function getExchangesAuthority() external view returns (address);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/SafeMath/SafeMath.sol": {
			"content": "pragma solidity >=0.4.22 <0.6.0;\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/rigoToken/Inflation/InflationFace.sol": {
			"content": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/// @title Inflation Interface - Allows interaction with the Inflation contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface InflationFace {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function mintInflation(address _thePool, uint256 _reward) external returns (bool);\n    function setInflationFactor(address _group, uint256 _inflationFactor) external;\n    function setMinimumRigo(uint256 _minimum) external;\n    function setRigoblock(address _newRigoblock) external;\n    function setAuthority(address _authority) external;\n    function setProofOfPerformance(address _pop) external;\n    function setPeriod(uint256 _newPeriod) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function canWithdraw(address _thePool) external view returns (bool);\n    function timeUntilClaim(address _thePool) external view returns (uint256);\n    function getInflationFactor(address _group) external view returns (uint256);\n}\n"
		}
	},
	"settings": {
		"remappings": [],
		"optimizer": {
			"enabled": true,
			"runs": 1000000
		},
		"outputSelection": {
			"*": {
				"*": [
					"abi",
					"devdoc",
					"evm.bytecode.object",
					"evm.bytecode.sourceMap",
					"evm.deployedBytecode.object",
					"evm.deployedBytecode.sourceMap"
				]
			}
		},
		"version": "0.5.2+commit.1df8f40c"
	}
}