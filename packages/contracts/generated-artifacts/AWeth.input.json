{
	"language": "Solidity",
	"sources": {
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/examples/Distribution/Distribution.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { VaultFace as Vault } from \"../../protocol/Vault/Vault.sol\";\nimport { DistributionFace } from \"./DistributionFace.sol\";\nimport { SafeMathLight as SafeMath } from \"../../utils/SafeMath/SafeMathLight.sol\";\n\n/// @title Distribution - Allows to collect subscription fees on vaults.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\ncontract Distribution is\n    SafeMath\n{\n    event Subscription(\n        address indexed buyer,\n        address indexed distributor,\n        uint256 amount\n    );\n\n    mapping (address => Distributor) distributor;\n\n    struct Distributor {\n        uint256 fee;\n    }\n\n    modifier addressFree(address _distributor) {\n        require(distributor[_distributor].fee == 0);\n        _;\n    }\n\n    modifier nonZeroAddress(address _target) {\n        require(_target != address(0));\n        _;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function subscribe(\n        address payable _pool,\n        address payable _distributor,\n        address _buyer\n    )\n        external\n        payable\n    {\n        Vault(_pool).buyVaultOnBehalf(_buyer);\n        uint256 feeAmount = safeDiv(safeMul(msg.value, distributor[_distributor].fee), 10000); //fee is in basis points\n        uint256 netAmount = safeSub(msg.value, feeAmount);\n        _pool.transfer(netAmount);\n        _distributor.transfer(feeAmount);\n        emit Subscription(_buyer, _distributor, netAmount);\n    }\n\n    function setFee(\n        uint256 _fee,\n        address _distributor\n    )\n        external\n        addressFree(_distributor)\n        nonZeroAddress(_distributor)\n    {\n        distributor[_distributor].fee = _fee;\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function getFee(address _distributor)\n        external view\n        returns (uint256)\n    {\n        return distributor[_distributor].fee;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/Vault/Vault.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { AuthorityFace as Authority } from \"../authorities/Authority/AuthorityFace.sol\";\nimport { VaultEventfulFace as VaultEventful } from \"../VaultEventful/VaultEventfulFace.sol\";\nimport { ERC20Face as Token } from \"../../tokens/ERC20/ERC20Face.sol\";\nimport { ReentrancyGuard } from \"../../utils/ReentrancyGuard//ReentrancyGuard.sol\";\nimport { VaultFace } from \"./VaultFace.sol\";\nimport { OwnedUninitialized as Owned } from \"../../utils/Owned/OwnedUninitialized.sol\";\nimport { SafeMathLight as SafeMath } from \"../../utils/SafeMath/SafeMathLight.sol\";\n\n/// @title Vault - contract for creating a vault type of pool.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract Vault is Owned, SafeMath, ReentrancyGuard, VaultFace {\n\n    string constant VERSION = 'VC 0.5.2';\n    uint256 constant BASE = 1000000; //tokens are divisible by 1 million\n\n    VaultData data;\n    Admin admin;\n\n    mapping (address => Account) accounts;\n\n    mapping (address => uint256) totalTokens;\n    mapping (address => mapping (address => uint256)) public depositLock;\n    mapping (address => mapping (address => uint256)) public tokenBalances;\n\n    struct Receipt {\n        uint32 activation;\n    }\n\n    struct Account {\n        uint256 balance;\n        Receipt receipt;\n    }\n\n    struct VaultData {\n        string name;\n        string symbol;\n        uint256 vaultId;\n        uint256 totalSupply;\n        uint256 price;\n        uint256 transactionFee; // fee is in basis points (1 bps = 0.01%)\n        uint32 minPeriod;\n        uint128 validatorIndex;\n    }\n\n    struct Admin {\n        address authority;\n        address vaultDao;\n        address feeCollector;\n        uint256 minOrder; // minimum stake to avoid dust clogging things up\n        uint256 ratio; // ratio is 80%\n    }\n\n    modifier onlyVaultDao {\n        require(msg.sender == admin.vaultDao);\n        _;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier minimumStake(uint256 _amount) {\n        require(_amount >= admin.minOrder);\n        _;\n    }\n\n    modifier hasEnough(uint256 _amount) {\n        require(accounts[msg.sender].balance >= _amount);\n        _;\n    }\n\n    modifier positiveAmount(uint256 _amount) {\n        require(accounts[msg.sender].balance + _amount > accounts[msg.sender].balance);\n        _;\n    }\n\n    modifier minimumPeriodPast {\n        require(now >= accounts[msg.sender].receipt.activation);\n        _;\n    }\n\n    constructor(\n        string memory _vaultName,\n        string memory _vaultSymbol,\n        uint256 _vaultId,\n        address _owner,\n        address _authority)\n        public\n    {\n        data.name = _vaultName;\n        data.symbol = _vaultSymbol;\n        data.vaultId = _vaultId;\n        data.price = 1 ether; //initial price is 1 Ether\n        owner = _owner;\n        admin.authority = _authority;\n        admin.vaultDao = msg.sender;\n        admin.minOrder = 1 finney;\n        admin.feeCollector = _owner;\n        admin.ratio = 80;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows a user to buy into a vault\n    /// @return Bool the function executed correctly\n    function buyVault()\n        external\n        payable\n        minimumStake(msg.value)\n        returns (bool success)\n    {\n        require(buyVaultInternal(msg.sender, msg.value));\n        return true;\n    }\n\n    /// @dev Allows a user to buy into a vault on behalf of an address\n    /// @param _hodler Address of the target user\n    /// @return Bool the function executed correctly\n    function buyVaultOnBehalf(address _hodler)\n        external\n        payable\n        minimumStake(msg.value)\n        returns (bool success)\n    {\n        require(buyVaultInternal(_hodler, msg.value));\n        return true;\n    }\n\n    /// @dev Allows a user to sell from a vault\n    /// @param _amount Number of shares to sell\n    /// @return Bool the function executed correctly\n    function sellVault(uint256 _amount)\n        external\n        nonReentrant\n        hasEnough(_amount)\n        positiveAmount(_amount)\n        minimumPeriodPast\n        returns (bool success)\n    {\n        updatePriceInternal();\n        uint256 feeVault;\n        uint256 feeVaultDao;\n        uint256 netAmount;\n        uint256 netRevenue;\n        (feeVault, feeVaultDao, netAmount, netRevenue) = getSaleAmounts(_amount);\n        addSaleLog(_amount, netRevenue);\n        allocateSaleTokens(msg.sender, _amount, feeVault, feeVaultDao);\n        data.totalSupply = safeSub(data.totalSupply, netAmount);\n        msg.sender.transfer(netRevenue);\n        return true;\n    }\n\n    /// @dev Allows vault dao/factory to change fee split ratio\n    /// @param _ratio Number of ratio for wizard, from 0 to 100\n    function changeRatio(uint256 _ratio)\n        external\n        onlyVaultDao\n    {\n        Authority auth = Authority(admin.authority);\n        VaultEventful events = VaultEventful(auth.getVaultEventful());\n        require(events.changeRatio(msg.sender, address(this), _ratio));\n        admin.ratio = _ratio;\n    }\n\n    /// @dev Allows vault owner to set the transaction fee\n    /// @param _transactionFee Value of the transaction fee in basis points\n    function setTransactionFee(uint256 _transactionFee)\n        external\n        onlyOwner\n    {\n        require(_transactionFee <= 100); //fee cannot be higher than 1%\n        Authority auth = Authority(admin.authority);\n        VaultEventful events = VaultEventful(auth.getVaultEventful());\n        require(events.setTransactionFee(msg.sender, address(this), _transactionFee));\n        data.transactionFee = _transactionFee;\n    }\n\n    /// @dev Allows owner to decide where to receive the fee\n    /// @param _feeCollector Address of the fee receiver\n    function changeFeeCollector(address _feeCollector)\n        external\n        onlyOwner\n    {\n        Authority auth = Authority(admin.authority);\n        VaultEventful events = VaultEventful(auth.getVaultEventful());\n        require(events.changeFeeCollector(msg.sender, address(this), _feeCollector));\n        admin.feeCollector = _feeCollector;\n    }\n\n    /// @dev Allows vault dao/factory to upgrade its address\n    /// @param _vaultDao Address of the new vault dao\n    function changeVaultDao(address _vaultDao)\n        external\n        onlyVaultDao\n    {\n        Authority auth = Authority(admin.authority);\n        VaultEventful events = VaultEventful(auth.getVaultEventful());\n        require(events.changeVaultDao(msg.sender, address(this), _vaultDao));\n        admin.vaultDao = _vaultDao;\n    }\n\n    /// @dev Allows anyone to pay and update the price\n    /// @dev This function allows to write the new nav\n    /// @dev NAV is provided by view functions\n    function updatePrice()\n        external\n        nonReentrant\n    {\n        updatePriceInternal();\n    }\n\n    /// @dev Allows vault dao/factory to change the minimum holding period\n    /// @param _minPeriod Lockup time in seconds\n    function changeMinPeriod(uint32 _minPeriod)\n        external\n        onlyVaultDao\n    {\n        data.minPeriod = _minPeriod;\n    }\n\n    /// @dev Allows anyone to deposit tokens to a vault\n    /// @param _token Address of the token\n    /// @param _value Amount to deposit\n    /// @param _forTime Lockup time in seconds\n    /// @notice lockup time can be zero\n    function depositToken(\n        address _token,\n        uint256 _value,\n        uint8 _forTime)\n        external\n        nonReentrant\n        returns (bool success)\n    {\n        require(depositTokenInternal(_token, msg.sender, _value, _forTime));\n        return true;\n    }\n\n    /// @dev Allows anyone to deposit tokens to a vault on behalf of someone\n    /// @param _token Address of the token\n    /// @param _value Amount to deposit\n    /// @param _forTime Lockup time in seconds\n    /// @notice lockup time can be zero\n    function depositTokenOnBehalf(\n        address _token,\n        address _hodler,\n        uint256 _value,\n        uint8 _forTime)\n        external\n        returns (bool success)\n    {\n        require(depositTokenInternal(_token, _hodler, _value, _forTime));\n        return true;\n    }\n\n    /// @dev Allows anyone to withdraw tokens from a vault\n    /// @param _token Address of the token\n    /// @param _value Amount to withdraw\n    /// @return Bool the transaction was successful\n    function withdrawToken(\n        address _token,\n        uint256 _value)\n        external\n        nonReentrant\n        returns\n        (bool success)\n    {\n        require(tokenBalances[_token][msg.sender] >= _value);\n        require(uint32(now) > depositLock[_token][msg.sender]);\n        tokenBalances[_token][msg.sender] = safeSub(tokenBalances[_token][msg.sender], _value);\n        totalTokens[_token] = safeSub(totalTokens[_token], _value);\n        require(Token(_token).transfer(msg.sender, _value));\n        return true;\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Calculates how many shares a user holds\n    /// @param _from Address of the target account\n    /// @return Number of shares\n    function balanceOf(address _from)\n        external\n        view\n        returns (uint256)\n    {\n        return accounts[_from].balance;\n    }\n\n    /// @dev Returns a user balance of a certain deposited token\n    /// @param _token Address of the token\n    /// @param _owner Address of the user\n    /// @return Number of tokens\n    function tokenBalanceOf(\n        address _token,\n        address _owner)\n        external\n        view\n        returns (uint256)\n    {\n        return tokenBalances[_token][_owner];\n    }\n\n    /// @dev Returns the time needed to withdraw\n    /// @param _token Address of the token\n    /// @param _user Address of the user\n    /// @return Time in seconds\n    function timeToUnlock(\n        address _token,\n        address _user)\n        external\n        view\n        returns (uint256)\n    {\n        return depositLock[_token][_user];\n    }\n\n    /// @dev Returns the amount of tokens of a certain token in vault\n    /// @param _token Address of the token\n    /// @return _value in custody\n    function tokensInVault(address _token)\n        external\n        view\n        returns (uint256)\n    {\n        return totalTokens[_token];\n    }\n\n    /// @dev Gets the address of the logger contract\n    /// @return Address of the logger contrac\n    function getEventful()\n        external\n        view\n        returns (address)\n    {\n        Authority auth = Authority(admin.authority);\n        return auth.getVaultEventful();\n    }\n\n    /// @dev Finds details of a vault pool\n    /// @return String name of a vault\n    /// @return String symbol of a vault\n    /// @return Value of the share price in wei\n    /// @return Value of the share price in wei\n    function getData()\n        external\n        view\n        returns (\n            string memory name,\n            string memory symbol,\n            uint256 sellPrice,\n            uint256 buyPrice\n        )\n    {\n        return(\n            name = data.name,\n            symbol = data.symbol,\n            sellPrice = getNav(),\n            buyPrice = getNav()\n        );\n    }\n\n    /// @dev Returns the price of a pool\n    /// @return Value of the share price in wei\n    function calcSharePrice()\n        external\n        view\n        returns (uint256)\n    {\n        return getNav();\n    }\n\n    /// @dev Finds the administrative data of the pool\n    /// @return Address of the account where a user collects fees\n    /// @return Address of the vault dao/factory\n    /// @return Number of the fee split ratio\n    /// @return Value of the transaction fee in basis points\n    /// @return Number of the minimum holding period for shares\n    function getAdminData()\n        external\n        view\n        returns (\n            address,\n            address feeCollector,\n            address vaultDao,\n            uint256 ratio,\n            uint256 transactionFee,\n            uint32 minPeriod\n        )\n    {\n        return (\n            owner,\n            admin.feeCollector,\n            admin.vaultDao,\n            admin.ratio,\n            data.transactionFee,\n            data.minPeriod\n        );\n    }\n\n    /// @dev Returns the total amount of issued tokens for this vault\n    /// @return Number of shares\n    function totalSupply()\n        external\n        view\n        returns (uint256)\n    {\n        return data.totalSupply;\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Executes purchase function\n    /// @param _hodler Address of the target user\n    /// @return Bool the function executed correctly\n    function buyVaultInternal(\n        address _hodler,\n        uint256 _totalEth)\n        internal\n        returns (bool success)\n    {\n        updatePriceInternal();\n        uint256 grossAmount;\n        uint256 feeVault;\n        uint256 feeVaultDao;\n        uint256 amount;\n        (grossAmount, feeVault, feeVaultDao, amount) = getPurchaseAmounts(_totalEth);\n        addPurchaseLog(amount);\n        allocatePurchaseTokens(_hodler, amount, feeVault, feeVaultDao);\n        data.totalSupply = safeAdd(data.totalSupply, grossAmount);\n        return true;\n    }\n\n    /// @dev Updates the price\n    function updatePriceInternal()\n        internal\n    {\n        if (address(this).balance > 0) {\n            data.price = getNav();\n        }\n    }\n\n    /// @dev Allocates tokens to buyer, splits fee in tokens to wizard and dao\n    /// @param _hodler Address of the buyer\n    /// @param _amount Value of issued tokens\n    /// @param _feeVault Number of shares as fee\n    /// @param _feeVaultDao Number of shares as fee to dao\n    function allocatePurchaseTokens(\n        address _hodler,\n        uint256 _amount,\n        uint256 _feeVault,\n        uint256 _feeVaultDao)\n        internal\n    {\n        accounts[_hodler].balance = safeAdd(accounts[_hodler].balance, _amount);\n        accounts[admin.feeCollector].balance = safeAdd(accounts[admin.feeCollector].balance, _feeVault);\n        accounts[admin.vaultDao].balance = safeAdd(accounts[admin.vaultDao].balance, _feeVaultDao);\n        accounts[_hodler].receipt.activation = uint32(now) + data.minPeriod;\n    }\n\n    /// @dev Destroys tokens from buyer, splits fee in tokens to wizard and dao\n    /// @param _hodler Address of the seller\n    /// @param _amount Value of burnt tokens\n    /// @param _feeVault Number of shares as fee\n    /// @param _feeVaultDao Number of shares as fee to dao\n    function allocateSaleTokens(\n        address _hodler,\n        uint256 _amount,\n        uint256 _feeVault,\n        uint256 _feeVaultDao)\n        internal\n    {\n        accounts[_hodler].balance = safeSub(accounts[_hodler].balance, _amount);\n        accounts[admin.feeCollector].balance = safeAdd(accounts[admin.feeCollector].balance, _feeVault);\n        accounts[admin.vaultDao].balance = safeAdd(accounts[admin.vaultDao].balance, _feeVaultDao);\n    }\n\n    /// @dev Sends a buy log to the eventful contract\n    /// @param _amount Number of purchased shares\n    function addPurchaseLog(uint256 _amount)\n        internal\n    {\n        bytes memory name = bytes(data.name);\n        bytes memory symbol = bytes(data.symbol);\n        Authority auth = Authority(admin.authority);\n        VaultEventful events = VaultEventful(auth.getVaultEventful());\n        require(events.buyVault(msg.sender, address(this), msg.value, _amount, name, symbol));\n    }\n\n    /// @dev Sends a sell log to the eventful contract\n    /// @param _amount Number of sold shares\n    /// @param _netRevenue Value of sale for hodler\n    function addSaleLog(\n        uint256 _amount,\n        uint256 _netRevenue)\n        internal\n    {\n        bytes memory name = bytes(data.name);\n        bytes memory symbol = bytes(data.symbol);\n        Authority auth = Authority(admin.authority);\n        VaultEventful events = VaultEventful(auth.getVaultEventful());\n        require(events.sellVault(msg.sender, address(this), _amount, _netRevenue, name, symbol));\n    }\n\n    /// @dev Executes a deposit\n    /// @param _token Address of the token to be deposited\n    /// @param _hodler Address of the hodler\n    /// @param _value Amount of tokens\n    /// @param _forTime Time in seconds of lockup\n    /// @return Bool the transaction was successful\n    function depositTokenInternal(\n        address _token,\n        address _hodler,\n        uint256 _value,\n        uint8 _forTime)\n        internal\n        returns (bool success)\n    {\n        require(now + _forTime >= depositLock[_token][_hodler]);\n        require(Token(_token).approve(address(this), _value));\n        require(Token(_token).transferFrom(msg.sender, address(this), _value));\n        tokenBalances[_token][_hodler] = safeAdd(tokenBalances[_token][_hodler], _value);\n        totalTokens[_token] = safeAdd(totalTokens[_token], _value);\n        depositLock[_token][_hodler] = safeAdd(uint(now), _forTime);\n        return true;\n    }\n\n    /// @dev Calculates the correct purchase amounts\n    /// @return Number of new shares\n    /// @return Value of fee in shares\n    /// @return Value of fee in shares to dao\n    /// @return Value of net purchased shares\n    function getPurchaseAmounts(uint256 _totalEth)\n        internal\n        view\n        returns (\n            uint256 grossAmount,\n            uint256 feeVault,\n            uint256 feeVaultDao,\n            uint256 amount\n        )\n    {\n        grossAmount = safeDiv(_totalEth * BASE, data.price);\n        uint256 fee = safeMul(grossAmount, data.transactionFee) / 10000; //fee is in basis points\n        return (\n            grossAmount,\n            feeVault = safeMul(fee , admin.ratio) / 100,\n            feeVaultDao = safeSub(fee, feeVault),\n            amount = safeSub(grossAmount, fee)\n        );\n    }\n\n    /// @dev Calculates the correct sale amounts\n    /// @return Value of fee in shares\n    /// @return Value of fee in shares to dao\n    /// @return Value of net sold shares\n    /// @return Value of sale amount for hodler\n    function getSaleAmounts(uint256 _amount)\n        internal\n        view\n        returns (\n            uint256 feeVault,\n            uint256 feeVaultDao,\n            uint256 netAmount,\n            uint256 netRevenue\n        )\n    {\n        uint256 fee = safeMul(_amount, data.transactionFee) / 10000; //fee is in basis points\n        return (\n            feeVault = safeMul(fee, admin.ratio) / 100,\n            feeVaultDao = safeSub(fee, feeVaultDao),\n            netAmount = safeSub(_amount, fee),\n            netRevenue = (safeMul(netAmount, data.price) / BASE)\n        );\n    }\n\n    /// @dev Calculates the value of the shares\n    /// @return Value of the shares in wei\n    function getNav()\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 aum = address(this).balance - msg.value;\n        return (data.totalSupply == 0 ? data.price : safeDiv(aum * BASE, data.totalSupply));\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/authorities/Authority/AuthorityFace.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.8.0;\n\n/// @title Authority Interface - Allows interaction with the Authority contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface AuthorityFace {\n\n    /*\n     * EVENTS\n     */\n    event AuthoritySet(address indexed authority);\n    event WhitelisterSet(address indexed whitelister);\n    event WhitelistedUser(address indexed target, bool approved);\n    event WhitelistedRegistry(address indexed registry, bool approved);\n    event WhitelistedFactory(address indexed factory, bool approved);\n    event WhitelistedVault(address indexed vault, bool approved);\n    event WhitelistedDrago(address indexed drago, bool isWhitelisted);\n    event NewDragoEventful(address indexed dragoEventful);\n    event NewVaultEventful(address indexed vaultEventful);\n    event NewNavVerifier(address indexed navVerifier);\n    event NewExchangesAuthority(address indexed exchangesAuthority);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function setAuthority(address _authority, bool _isWhitelisted) external;\n    function setWhitelister(address _whitelister, bool _isWhitelisted) external;\n    function whitelistUser(address _target, bool _isWhitelisted) external;\n    function whitelistDrago(address _drago, bool _isWhitelisted) external;\n    function whitelistVault(address _vault, bool _isWhitelisted) external;\n    function whitelistRegistry(address _registry, bool _isWhitelisted) external;\n    function whitelistFactory(address _factory, bool _isWhitelisted) external;\n    function setDragoEventful(address _dragoEventful) external;\n    function setVaultEventful(address _vaultEventful) external;\n    function setNavVerifier(address _navVerifier) external;\n    function setExchangesAuthority(address _exchangesAuthority) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function isWhitelistedUser(address _target) external view returns (bool);\n    function isAuthority(address _authority) external view returns (bool);\n    function isWhitelistedRegistry(address _registry) external view returns (bool);\n    function isWhitelistedDrago(address _drago) external view returns (bool);\n    function isWhitelistedVault(address _vault) external view returns (bool);\n    function isWhitelistedFactory(address _factory) external view returns (bool);\n    function getDragoEventful() external view returns (address);\n    function getVaultEventful() external view returns (address);\n    function getNavVerifier() external view returns (address);\n    function getExchangesAuthority() external view returns (address);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/VaultEventful/VaultEventfulFace.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Vault Eventful Interface - Logs all vaults transactions.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface VaultEventfulFace {\n\n    /*\n     * EVENTS\n     */\n    event BuyVault(address indexed vault, address indexed from, address indexed to, uint256 amount, uint256 revenue, bytes name, bytes symbol);\n    event SellVault(address indexed vault, address indexed from, address indexed to, uint256 amount, uint256 revenue, bytes name, bytes symbol);\n    event NewRatio(address indexed vault, address indexed from, uint256 newRatio);\n    event NewFee(address indexed vault, address indexed from, address indexed to, uint256 fee);\n    event NewCollector(address indexed vault, address indexed from, address indexed to, address collector);\n    event VaultDao(address indexed vault, address indexed from, address indexed to, address vaultDao);\n    event VaultCreated(address indexed vault, address indexed group, address indexed owner, uint256 vaultId, string name, string symbol);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function buyVault(address _who, address _targetVault, uint256 _value, uint256 _amount, bytes calldata _name, bytes calldata _symbol) external returns (bool success);\n    function sellVault(address _who, address _targetVault, uint256 _amount, uint256 _revenue, bytes calldata _name, bytes calldata _symbol) external returns(bool success);\n    function changeRatio(address _who, address _targetVault, uint256 _ratio) external returns(bool success);\n    function setTransactionFee(address _who, address _targetVault, uint256 _transactionFee) external returns(bool success);\n    function changeFeeCollector(address _who, address _targetVault, address _feeCollector) external returns(bool success);\n    function changeVaultDao(address _who, address _targetVault, address _vaultDao) external returns(bool success);\n    function createVault(address _who, address _newVault, string calldata _name, string calldata _symbol, uint256 _vaultId) external returns(bool success);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/tokens/ERC20/ERC20Face.sol": {
			"content": "pragma solidity >=0.5.0;\n\ninterface ERC20Face {\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function balanceOf(address _who) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/ReentrancyGuard/ReentrancyGuard.sol": {
			"content": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ncontract ReentrancyGuard {\n\n    // Locked state of mutex\n    bool private locked = false;\n\n    /// @dev Functions with this modifer cannot be reentered. The mutex will be locked\n    ///      before function execution and unlocked after.\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(\n            !locked,\n            \"REENTRANCY_ILLEGAL\"\n        );\n\n        // Lock mutex before function call\n        locked = true;\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        locked = false;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/Vault/VaultFace.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Vault Interface - Allows interaction with the Vault contracts.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface VaultFace {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function buyVault() external payable returns (bool success);\n    function buyVaultOnBehalf(address _hodler) external payable returns (bool success);\n    function sellVault(uint256 amount) external returns (bool success);\n    function changeRatio(uint256 _ratio) external;\n    function setTransactionFee(uint256 _transactionFee) external;\n    function changeFeeCollector(address _feeCollector) external;\n    function changeVaultDao(address _vaultDao) external;\n    function updatePrice() external;\n    function changeMinPeriod(uint32 _minPeriod) external;\n    function depositToken(address _token, uint256 _value, uint8 _forTime) external returns (bool success);\n    function depositTokenOnBehalf(address _token, address _hodler, uint256 _value, uint8 _forTime) external returns (bool success);\n    function withdrawToken(address _token, uint256 _value) external returns (bool success);\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function balanceOf(address _who) external view returns (uint256);\n    function tokenBalanceOf(address _token, address _owner) external view returns (uint256);\n    function timeToUnlock(address _token, address _user) external view returns (uint256);\n    function tokensInVault(address _token) external view returns (uint256);\n    function getEventful() external view returns (address);\n    function getData() external view returns (string memory name, string memory symbol, uint256 sellPrice, uint256 buyPrice);\n    function calcSharePrice() external view returns (uint256);\n    function getAdminData() external view returns (address, address feeCollector, address vaultDao, uint256 ratio, uint256 transactionFee, uint32 minPeriod);\n    function totalSupply() external view returns (uint256);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/Owned/OwnedUninitialized.sol": {
			"content": "pragma solidity >=0.4.22 <0.6.0;\n\ncontract OwnedUninitialized {\n\n    address public owner;\n\n    event NewOwner(address indexed old, address indexed current);\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setOwner(address _new) public onlyOwner {\n        require(_new != address(0));\n        owner = _new;\n        emit  NewOwner(owner, _new);\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/SafeMath/SafeMathLight.sol": {
			"content": "pragma solidity 0.5.0;\n\ncontract SafeMathLight {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/examples/Distribution/DistributionFace.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Distribution Interface - Allows to interact with the distribution.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\ninterface DistributionFace {\n\n    event Subscription(address indexed buyer, address indexed distributor, uint256 amount);\n\n    function subscribe(address _pool, address _distributor, address _buyer) external payable;\n    function setFee(uint256 _fee, address _distributor) external;\n    function getFee(address _distributor) external view returns (uint256);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/examples/Faucet/Faucet.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\n/**\n * Faucet smart contract for RigoBlock protocol\n * allows users to receive erc20Basic tokens\n * Inspired by https://github.com/AvocadoNetwork\n */\n\npragma solidity 0.5.0;\n\nimport { ERC20Face as Token } from \"../../tokens/ERC20/ERC20Face.sol\";\nimport { Owned as Owned } from \"../../utils/Owned/Owned.sol\";\n\n/// @title Faucet - Allows to automatically distribute GRGs.\n/// @author David Fava - <david@rigoblock.com>\ncontract Faucet is Owned {\n\n\n   /*\n    * EVENTS\n    */\n    event Deposit(address indexed sender, uint256 value);\n    event OneTokenSent(address indexed receiver);\n    event FaucetOn(bool status);\n    event FaucetOff(bool status);\n\n    uint256 constant oneToken = 1000000000000000000;\n    uint256 constant twentyFourHours = 24 hours;\n    string public faucetName;\n    Token public tokenInstance;\n    bool public faucetStatus;\n    mapping(address => uint256) status;\n\n\n   /*\n    * MODIFIERS\n    */\n    modifier faucetOn() {\n        require(faucetStatus,\"Faucet has to be on\");\n        _;\n    }\n\n    modifier faucetOff() {\n        require(!faucetStatus, \"Faucet has to be off\");\n        _;\n    }\n\n    /// @dev Contract constructor\n    /// @param _tokenInstance address of ERC20Basic token\n    /// @param _faucetName sets the name for the faucet\n    constructor(address _tokenInstance, string memory _faucetName)\n      public\n    {\n        tokenInstance = Token(_tokenInstance);\n        faucetName = _faucetName;\n        faucetStatus = true;\n\n        emit FaucetOn(faucetStatus);\n    }\n\n   /*\n    * CORE FUNCTIONS\n    */\n    /// @dev send 1000 Token with a minimum time lock of 1 hour\n    /// @return bool on success\n    function drip1Token()\n      external\n      faucetOn\n      returns (bool success)\n    {\n        require(!checkStatus(msg.sender),\"Required too early.\");\n        updateStatus(msg.sender, twentyFourHours);\n        tokenInstance.transfer(msg.sender, oneToken);\n        emit OneTokenSent(msg.sender);\n        return true;\n    }\n\n    /// @dev turn faucet on\n    /// @return bool on success\n    function turnFaucetOn()\n      external\n      onlyOwner\n      faucetOff\n      returns (bool success)\n    {\n        faucetStatus = true;\n        emit FaucetOn(faucetStatus);\n        return true;\n    }\n\n    /// @dev turn faucet off\n    /// @return bool on success\n    function turnFaucetOff()\n      external\n      onlyOwner\n      faucetOn\n      returns (bool success)\n    {\n        faucetStatus = false;\n        emit FaucetOff(faucetStatus);\n        return true;\n    }\n\n    /// @dev allow withdrawal from the owner\n    /// @return bool on success\n    function withdraw(\n        uint _value\n    )\n        external\n        onlyOwner\n        returns\n        (bool success)\n    {\n        require(tokenInstance.transfer(msg.sender, _value),\"Cannot withdraw.\");\n        return true;\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev locks and unlocks account based on time range\n    /// @param _address of msg.sender\n    /// @return bool of current lock status of address\n    function checkStatus(address _address)\n      internal\n      view\n      returns (bool)\n    {\n        //check if first time address is requesting\n        if(status[_address] == 0) {\n            return false;\n        }\n        //if not first time check the timeLock\n        else {\n            // solium-disable-next-line security/no-block-members\n            if(block.timestamp >= status[_address]) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n    }\n\n    /// @dev updates timeLock for account\n    /// @param _address of msg.sender\n    /// @param _timelock of sender address\n    /// @return bool on success\n    function updateStatus(address _address, uint256 _timelock)\n      internal\n      returns (bool)\n    {   // solium-disable-next-line security/no-block-members\n        status[_address] = block.timestamp + _timelock;\n        return true;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/Owned/Owned.sol": {
			"content": "pragma solidity >=0.4.22 <0.6.0;\n\ncontract Owned {\n\n    address public owner;\n\n    event NewOwner(address indexed old, address indexed current);\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address _new)\n        public\n        onlyOwner\n    {\n        require(_new != address(0));\n        owner = _new;\n        emit NewOwner(owner, _new);\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/Drago/Drago.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\npragma experimental ABIEncoderV2;\n\nimport { AuthorityFace as Authority } from \"../authorities/Authority/AuthorityFace.sol\";\nimport { ExchangesAuthorityFace as ExchangesAuthority } from \"../authorities/ExchangesAuthority/ExchangesAuthorityFace.sol\";\nimport { SigVerifierFace as SigVerifier } from \"../extensions/SigVerifier/SigVerifierFace.sol\";\nimport { NavVerifierFace as NavVerifier } from \"../extensions/NavVerifier/NavVerifierFace.sol\";\nimport { KycFace as Kyc } from \"../Kyc/KycFace.sol\";\nimport { DragoEventfulFace as DragoEventful } from \"../DragoEventful/DragoEventfulFace.sol\";\nimport { ERC20Face as Token } from \"../../tokens/ERC20/ERC20Face.sol\";\nimport { ReentrancyGuard } from \"../../utils/ReentrancyGuard//ReentrancyGuard.sol\";\nimport { OwnedUninitialized as Owned } from \"../../utils/Owned/OwnedUninitialized.sol\";\nimport { SafeMathLight as SafeMath } from \"../../utils/SafeMath/SafeMathLight.sol\";\nimport { LibFindMethod } from \"../../utils/LibFindMethod/LibFindMethod.sol\";\n\n/// @title Drago - A set of rules for a drago.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract Drago is Owned, SafeMath, ReentrancyGuard {\n\n    using LibFindMethod for *;\n\n    string constant VERSION = 'HF 0.5.2';\n    uint256 constant BASE = 1000000; // tokens are divisible by 1 million\n\n    mapping (address => Account) accounts;\n\n    DragoData data;\n    Admin admin;\n\n    struct Receipt {\n        uint256 units;\n        uint32 activation;\n    }\n\n    struct Account {\n        uint256 balance;\n        Receipt receipt;\n        mapping(address => address[]) approvedAccount;\n    }\n\n    struct Transaction {\n        bytes assembledData;\n    }\n\n    struct DragoData {\n        string name;\n        string symbol;\n        uint256 dragoId;\n        uint256 totalSupply;\n        uint256 sellPrice;\n        uint256 buyPrice;\n        uint256 transactionFee; // in basis points 1 = 0.01%\n        uint32 minPeriod;\n    }\n\n    struct Admin {\n        address authority;\n        address dragoDao;\n        address feeCollector;\n        address kycProvider;\n        bool kycEnforced;\n        uint256 minOrder; // minimum stake to avoid dust clogging things up\n        uint256 ratio; // ratio is 80%\n    }\n\n    modifier onlyDragoDao() {\n        require(msg.sender == admin.dragoDao);\n        _;\n    }\n\n    modifier onlyOwnerOrAuthority() {\n        Authority auth = Authority(admin.authority);\n        require(auth.isAuthority(msg.sender) || msg.sender == owner);\n        _;\n    }\n\n    modifier whenApprovedExchangeOrWrapper(address _target) {\n        bool approvedExchange = ExchangesAuthority(getExchangesAuthority())\n            .isWhitelistedExchange(_target);\n        bool approvedWrapper = ExchangesAuthority(getExchangesAuthority())\n            .isWhitelistedWrapper(_target);\n        require(approvedWrapper || approvedExchange);\n        _;\n    }\n\n    modifier whenApprovedProxy(address _proxy) {\n        bool approved = ExchangesAuthority(getExchangesAuthority())\n            .isWhitelistedProxy(_proxy);\n        require(approved);\n        _;\n    }\n\n    modifier minimumStake(uint256 amount) {\n        require (amount >= admin.minOrder);\n        _;\n    }\n\n    modifier hasEnough(uint256 _amount) {\n        require(accounts[msg.sender].balance >= _amount);\n        _;\n    }\n\n    modifier positiveAmount(uint256 _amount) {\n        require(accounts[msg.sender].balance + _amount > accounts[msg.sender].balance);\n        _;\n    }\n\n    modifier minimumPeriodPast() {\n        require(block.timestamp >= accounts[msg.sender].receipt.activation);\n        _;\n    }\n\n    modifier buyPriceHigherOrEqual(uint256 _sellPrice, uint256 _buyPrice) {\n        require(_sellPrice <= _buyPrice);\n        _;\n    }\n\n    modifier notPriceError(uint256 _sellPrice, uint256 _buyPrice) {\n        if (_sellPrice <= data.sellPrice / 10 || _buyPrice >= data.buyPrice * 10) return;\n        _;\n    }\n\n    constructor(\n        string memory _dragoName,\n        string memory _dragoSymbol,\n        uint256 _dragoId,\n        address _owner,\n        address _authority)\n        public\n    {\n        data.name = _dragoName;\n        data.symbol = _dragoSymbol;\n        data.dragoId = _dragoId;\n        data.sellPrice = 1 ether;\n        data.buyPrice = 1 ether;\n        owner = _owner;\n        admin.authority = _authority;\n        admin.dragoDao = msg.sender;\n        admin.minOrder = 1 finney;\n        admin.feeCollector = _owner;\n        admin.ratio = 80;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows Ether to be received.\n    /// @notice Used for settlements and withdrawals.\n    function()\n        external\n        payable\n    {\n        require(msg.value != 0);\n    }\n\n    /// @dev Allows a user to buy into a drago.\n    /// @return Bool the function executed correctly.\n    function buyDrago()\n        external\n        payable\n        minimumStake(msg.value)\n        returns (bool success)\n    {\n        require(buyDragoInternal(msg.sender));\n        return true;\n    }\n\n    /// @dev Allows a user to buy into a drago on behalf of an address.\n    /// @param _hodler Address of the target user.\n    /// @return Bool the function executed correctly.\n    function buyDragoOnBehalf(address _hodler)\n        external\n        payable\n        minimumStake(msg.value)\n        returns (bool success)\n    {\n        require(buyDragoInternal(_hodler));\n        return true;\n    }\n\n    /// @dev Allows a user to sell from a drago.\n    /// @param _amount Number of shares to sell.\n    /// @return Bool the function executed correctly.\n    function sellDrago(uint256 _amount)\n        external\n        nonReentrant\n        hasEnough(_amount)\n        positiveAmount(_amount)\n        minimumPeriodPast\n        returns (bool success)\n    {\n        uint256 feeDrago;\n        uint256 feeDragoDao;\n        uint256 netAmount;\n        uint256 netRevenue;\n        (feeDrago, feeDragoDao, netAmount, netRevenue) = getSaleAmounts(_amount);\n        addSaleLog(_amount, netRevenue);\n        allocateSaleTokens(msg.sender, _amount, feeDrago, feeDragoDao);\n        data.totalSupply = safeSub(data.totalSupply, netAmount);\n        msg.sender.transfer(netRevenue);\n        return true;\n    }\n\n    /// @dev Allows drago owner or authority to set the price for a drago.\n    /// @param _newSellPrice Price in wei.\n    /// @param _newBuyPrice Price in wei.\n    /// @param _signaturevaliduntilBlock Number of blocks till expiry of new data.\n    /// @param _hash Bytes32 of the transaction hash.\n    /// @param _signedData Bytes of extradata and signature.\n    function setPrices(\n        uint256 _newSellPrice,\n        uint256 _newBuyPrice,\n        uint256 _signaturevaliduntilBlock,\n        bytes32 _hash,\n        bytes calldata _signedData)\n        external\n        nonReentrant\n        onlyOwnerOrAuthority\n        buyPriceHigherOrEqual(_newSellPrice, _newBuyPrice)\n        notPriceError(_newSellPrice, _newBuyPrice)\n    {\n        require(\n            isValidNav(\n                _newSellPrice,\n                _newBuyPrice,\n                _signaturevaliduntilBlock,\n                _hash,\n                _signedData\n            )\n        );\n        DragoEventful events = DragoEventful(getDragoEventful());\n        require(events.setDragoPrice(msg.sender, address(this), _newSellPrice, _newBuyPrice));\n        data.sellPrice = _newSellPrice;\n        data.buyPrice = _newBuyPrice;\n    }\n\n    /// @dev Allows drago dao/factory to change fee split ratio.\n    /// @param _ratio Number of ratio for wizard, from 0 to 100.\n    function changeRatio(uint256 _ratio)\n        external\n        onlyDragoDao\n    {\n        DragoEventful events = DragoEventful(getDragoEventful());\n        require(events.changeRatio(msg.sender, address(this), _ratio));\n        admin.ratio = _ratio;\n    }\n\n    /// @dev Allows drago owner to set the transaction fee.\n    /// @param _transactionFee Value of the transaction fee in basis points.\n    function setTransactionFee(uint256 _transactionFee)\n        external\n        onlyOwner\n    {\n        require(_transactionFee <= 100); //fee cannot be higher than 1%\n        DragoEventful events = DragoEventful(getDragoEventful());\n        require(events.setTransactionFee(msg.sender, address(this), _transactionFee));\n        data.transactionFee = _transactionFee;\n    }\n\n    /// @dev Allows owner to decide where to receive the fee.\n    /// @param _feeCollector Address of the fee receiver.\n    function changeFeeCollector(address _feeCollector)\n        external\n        onlyOwner\n    {\n        DragoEventful events = DragoEventful(getDragoEventful());\n        events.changeFeeCollector(msg.sender, address(this), _feeCollector);\n        admin.feeCollector = _feeCollector;\n    }\n\n    /// @dev Allows drago dao/factory to upgrade its address.\n    /// @param _dragoDao Address of the new drago dao.\n    function changeDragoDao(address _dragoDao)\n        external\n        onlyDragoDao\n    {\n        DragoEventful events = DragoEventful(getDragoEventful());\n        require(events.changeDragoDao(msg.sender, address(this), _dragoDao));\n        admin.dragoDao = _dragoDao;\n    }\n\n    /// @dev Allows drago dao/factory to change the minimum holding period.\n    /// @param _minPeriod Time in seconds.\n    function changeMinPeriod(uint32 _minPeriod)\n        external\n        onlyDragoDao\n    {\n        data.minPeriod = _minPeriod;\n    }\n\n    function enforceKyc(\n        bool _enforced,\n        address _kycProvider)\n        external\n        onlyOwner\n    {\n        admin.kycEnforced = _enforced;\n        admin.kycProvider = _kycProvider;\n    }\n\n    /// @dev Allows owner to set an allowance to an approved token transfer proxy.\n    /// @param _tokenTransferProxy Address of the proxy to be approved.\n    /// @param _token Address of the token to receive allowance for.\n    /// @param _amount Number of tokens approved for spending.\n    function setAllowance(\n        address _tokenTransferProxy,\n        address _token,\n        uint256 _amount)\n        external\n        onlyOwner\n        whenApprovedProxy(_tokenTransferProxy)\n    {\n        require(setAllowancesInternal(_tokenTransferProxy, _token, _amount));\n    }\n\n    /// @dev Allows owner to set allowances to multiple approved tokens with one call.\n    /// @param _tokenTransferProxy Address of the proxy to be approved.\n    /// @param _tokens Address of the token to receive allowance for.\n    /// @param _amounts Array of number of tokens to be approved.\n    function setMultipleAllowances(\n        address _tokenTransferProxy,\n        address[] calldata _tokens,\n        uint256[] calldata _amounts)\n        external\n    {\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            if (!setAllowancesInternal(_tokenTransferProxy, _tokens[i], _amounts[i])) continue;\n        }\n    }\n\n    /// @dev Allows owner to operate on exchange through extension.\n    /// @param _exchange Address of the target exchange.\n    /// @param transaction ABIencoded transaction.\n    function operateOnExchange(\n        address _exchange,\n        Transaction memory transaction)\n        public\n        onlyOwner\n        nonReentrant\n        whenApprovedExchangeOrWrapper(_exchange)\n        returns (bool success)\n    {\n        address adapter = getExchangeAdapter(_exchange);\n        bytes memory transactionData = transaction.assembledData;\n        require(\n            methodAllowedOnExchange(\n                findMethod(transactionData),\n                adapter\n            )\n        );\n\n        bytes memory response;\n        bool failed = true;\n\n        assembly {\n\n            let succeeded := delegatecall(\n                sub(gas, 5000),\n                adapter,\n                add(transactionData, 0x20),\n                mload(transactionData),\n                0,\n                32) // 0x0\n\n            // load delegatecall output\n            response := mload(0)\n            failed := iszero(succeeded)\n\n            switch failed\n            case 1 {\n                // throw if delegatecall failed\n                revert(0, 0)\n            }\n        }\n\n        return (success = true);\n    }\n\n    /// @dev Allows owner or approved exchange to send a transaction to exchange\n    /// @dev With data of signed/unsigned transaction\n    /// @param _exchange Address of the exchange\n    /// @param transactions Array of ABI encoded transactions\n    function batchOperateOnExchange(\n        address _exchange,\n        Transaction[] memory transactions)\n        public\n        onlyOwner\n        nonReentrant\n        whenApprovedExchangeOrWrapper(_exchange)\n    {\n        for (uint256 i = 0; i < transactions.length; i++) {\n            if (!operateOnExchange(_exchange, transactions[i])) continue;\n        }\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Calculates how many shares a user holds.\n    /// @param _who Address of the target account.\n    /// @return Number of shares.\n    function balanceOf(address _who)\n        external\n        view\n        returns (uint256)\n    {\n        return accounts[_who].balance;\n    }\n\n    /// @dev Gets the address of the logger contract.\n    /// @return Address of the logger contrac.\n    function getEventful()\n        external\n        view\n        returns (address)\n    {\n        Authority auth = Authority(admin.authority);\n        return auth.getDragoEventful();\n    }\n\n    /// @dev Finds details of a drago pool.\n    /// @return String name of a drago.\n    /// @return String symbol of a drago.\n    /// @return Value of the share price in wei.\n    /// @return Value of the share price in wei.\n    function getData()\n        external\n        view\n        returns (\n            string memory name,\n            string memory symbol,\n            uint256 sellPrice,\n            uint256 buyPrice\n        )\n    {\n        name = data.name;\n        symbol = data.symbol;\n        sellPrice = data.sellPrice;\n        buyPrice = data.buyPrice;\n    }\n\n    /// @dev Returns the price of a pool.\n    /// @return Value of the share price in wei.\n    function calcSharePrice()\n        external\n        view\n        returns (uint256)\n    {\n        return data.sellPrice;\n    }\n\n    /// @dev Finds the administrative data of the pool.\n    /// @return Address of the account where a user collects fees.\n    /// @return Address of the drago dao/factory.\n    /// @return Number of the fee split ratio.\n    /// @return Value of the transaction fee in basis points.\n    /// @return Number of the minimum holding period for shares.\n    function getAdminData()\n        external\n        view\n        returns (\n            address, //owner\n            address feeCollector,\n            address dragoDao,\n            uint256 ratio,\n            uint256 transactionFee,\n            uint32 minPeriod\n        )\n    {\n        return (\n            owner,\n            admin.feeCollector,\n            admin.dragoDao,\n            admin.ratio,\n            data.transactionFee,\n            data.minPeriod\n        );\n    }\n\n    function getKycProvider()\n        external\n        view\n        returns (address)\n    {\n        if(admin.kycEnforced) {\n            return admin.kycProvider;\n        }\n    }\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid)\n    {\n        isValid = SigVerifier(getSigVerifier())\n            .isValidSignature(hash, signature);\n        return isValid;\n    }\n\n    /// @dev Finds the exchanges authority.\n    /// @return Address of the exchanges authority.\n    function getExchangesAuth()\n        external\n        view\n        returns (address)\n    {\n        return getExchangesAuthority();\n    }\n\n    /// @dev Returns the total amount of issued tokens for this drago.\n    /// @return Number of shares.\n    function totalSupply()\n        external view\n        returns (uint256)\n    {\n        return data.totalSupply;\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n\n    /// @dev Executes the pool purchase.\n    /// @param _hodler Address of the target user.\n    /// @return Bool the function executed correctly.\n    function buyDragoInternal(address _hodler)\n        internal\n        returns (bool success)\n    {\n        if (admin.kycProvider != address(0)) {\n            require(Kyc(admin.kycProvider).isWhitelistedUser(_hodler));\n        }\n        uint256 grossAmount;\n        uint256 feeDrago;\n        uint256 feeDragoDao;\n        uint256 amount;\n        (grossAmount, feeDrago, feeDragoDao, amount) = getPurchaseAmounts();\n        addPurchaseLog(amount);\n        allocatePurchaseTokens(_hodler, amount, feeDrago, feeDragoDao);\n        data.totalSupply = safeAdd(data.totalSupply, grossAmount);\n        return true;\n    }\n\n    /// @dev Allocates tokens to buyer, splits fee in tokens to wizard and dao.\n    /// @param _hodler Address of the buyer.\n    /// @param _amount Value of issued tokens.\n    /// @param _feeDrago Number of shares as fee.\n    /// @param _feeDragoDao Number of shares as fee to dao.\n    function allocatePurchaseTokens(\n        address _hodler,\n        uint256 _amount,\n        uint256 _feeDrago,\n        uint256 _feeDragoDao)\n        internal\n    {\n        accounts[_hodler].balance = safeAdd(accounts[_hodler].balance, _amount);\n        accounts[admin.feeCollector].balance = safeAdd(accounts[admin.feeCollector].balance, _feeDrago);\n        accounts[admin.dragoDao].balance = safeAdd(accounts[admin.dragoDao].balance, _feeDragoDao);\n        accounts[_hodler].receipt.activation = uint32(now) + data.minPeriod;\n    }\n\n    /// @dev Destroys tokens of seller, splits fee in tokens to wizard and dao.\n    /// @param _hodler Address of the seller.\n    /// @param _amount Value of burnt tokens.\n    /// @param _feeDrago Number of shares as fee.\n    /// @param _feeDragoDao Number of shares as fee to dao.\n    function allocateSaleTokens(\n        address _hodler,\n        uint256 _amount,\n        uint256 _feeDrago,\n        uint256 _feeDragoDao)\n        internal\n    {\n        accounts[_hodler].balance = safeSub(accounts[_hodler].balance, _amount);\n        accounts[admin.feeCollector].balance = safeAdd(accounts[admin.feeCollector].balance, _feeDrago);\n        accounts[admin.dragoDao].balance = safeAdd(accounts[admin.dragoDao].balance, _feeDragoDao);\n    }\n\n    /// @dev Sends a buy log to the eventful contract.\n    /// @param _amount Number of purchased shares.\n    function addPurchaseLog(uint256 _amount)\n        internal\n    {\n        bytes memory name = bytes(data.name);\n        bytes memory symbol = bytes(data.symbol);\n        Authority auth = Authority(admin.authority);\n        DragoEventful events = DragoEventful(auth.getDragoEventful());\n        require(events.buyDrago(msg.sender, address(this), msg.value, _amount, name, symbol));\n    }\n\n    /// @dev Sends a sell log to the eventful contract.\n    /// @param _amount Number of sold shares.\n    /// @param _netRevenue Value of sale for hodler.\n    function addSaleLog(uint256 _amount, uint256 _netRevenue)\n        internal\n    {\n        bytes memory name = bytes(data.name);\n        bytes memory symbol = bytes(data.symbol);\n        Authority auth = Authority(admin.authority);\n        DragoEventful events = DragoEventful(auth.getDragoEventful());\n        require(events.sellDrago(msg.sender, address(this), _amount, _netRevenue, name, symbol));\n    }\n\n    /// @dev Allows owner to set an infinite allowance to an approved exchange.\n    /// @param _tokenTransferProxy Address of the proxy to be approved.\n    /// @param _token Address of the token to receive allowance for.\n    function setAllowancesInternal(\n        address _tokenTransferProxy,\n        address _token,\n        uint256 _amount)\n        internal\n        returns (bool)\n    {\n        require(Token(_token)\n            .approve(_tokenTransferProxy, _amount));\n        return true;\n    }\n\n    /// @dev Calculates the correct purchase amounts.\n    /// @return Number of new shares.\n    /// @return Value of fee in shares.\n    /// @return Value of fee in shares to dao.\n    /// @return Value of net purchased shares.\n    function getPurchaseAmounts()\n        internal\n        view\n        returns (\n            uint256 grossAmount,\n            uint256 feeDrago,\n            uint256 feeDragoDao,\n            uint256 amount\n        )\n    {\n        grossAmount = safeDiv(msg.value * BASE, data.buyPrice);\n        uint256 fee = safeMul(grossAmount, data.transactionFee) / 10000; //fee is in basis points\n        return (\n            grossAmount,\n            feeDrago = safeMul(fee , admin.ratio) / 100,\n            feeDragoDao = safeSub(fee, feeDrago),\n            amount = safeSub(grossAmount, fee)\n        );\n    }\n\n    /// @dev Calculates the correct sale amounts.\n    /// @return Value of fee in shares.\n    /// @return Value of fee in shares to dao.\n    /// @return Value of net sold shares.\n    /// @return Value of sale amount for hodler.\n    function getSaleAmounts(uint256 _amount)\n        internal\n        view\n        returns (\n            uint256 feeDrago,\n            uint256 feeDragoDao,\n            uint256 netAmount,\n            uint256 netRevenue\n        )\n    {\n        uint256 fee = safeMul(_amount, data.transactionFee) / 10000; //fee is in basis points\n        return (\n            feeDrago = safeMul(fee, admin.ratio) / 100,\n            feeDragoDao = safeSub(fee, feeDragoDao),\n            netAmount = safeSub(_amount, fee),\n            netRevenue = (safeMul(netAmount, data.sellPrice) / BASE)\n        );\n    }\n\n    /// @dev Gets the address of the logger contract.\n    /// @return Address of the logger contrac.\n    function getDragoEventful()\n        internal\n        view\n        returns (address)\n    {\n        Authority auth = Authority(admin.authority);\n        return auth.getDragoEventful();\n    }\n\n    /// @dev Returns the address of the signature verifier.\n    /// @return Address of the verifier contract.\n    function getSigVerifier()\n        internal\n        view\n        returns (address)\n    {\n        return ExchangesAuthority(\n            Authority(admin.authority)\n            .getExchangesAuthority())\n            .getSigVerifier();\n    }\n\n    /// @dev Returns the address of the price verifier.\n    /// @return Address of the verifier contract.\n    function getNavVerifier()\n        internal\n        view\n        returns (address)\n    {\n        return Authority(admin.authority)\n            .getNavVerifier();\n    }\n\n    /// @dev Verifies that a signature is valid.\n    /// @param sellPrice Price in wei.\n    /// @param buyPrice Price in wei.\n    /// @param signaturevaliduntilBlock Number of blocks till price expiry.\n    /// @param hash Message hash that is signed.\n    /// @param signedData Proof of nav validity.\n    /// @return Bool validity of signed price update.\n    function isValidNav(\n        uint256 sellPrice,\n        uint256 buyPrice,\n        uint256 signaturevaliduntilBlock,\n        bytes32 hash,\n        bytes memory signedData)\n        internal\n        view\n        returns (bool isValid)\n    {\n        isValid = NavVerifier(getNavVerifier()).isValidNav(\n            sellPrice,\n            buyPrice,\n            signaturevaliduntilBlock,\n            hash,\n            signedData\n        );\n        return isValid;\n    }\n\n    /// @dev Finds the exchanges authority.\n    /// @return Address of the exchanges authority.\n    function getExchangesAuthority()\n        internal\n        view\n        returns (address)\n    {\n        return Authority(admin.authority).getExchangesAuthority();\n    }\n\n    /// @dev Returns the address of the exchange adapter.\n    /// @param _exchange Address of the target exchange.\n    /// @return Address of the exchange adapter.\n    function getExchangeAdapter(address _exchange)\n        internal\n        view\n        returns (address)\n    {\n        return ExchangesAuthority(\n            Authority(admin.authority)\n            .getExchangesAuthority())\n            .getExchangeAdapter(_exchange);\n    }\n\n    /// @dev Returns the method of a call.\n    /// @param assembledData Bytes of the encoded transaction.\n    /// @return Bytes4 function signature.\n    function findMethod(bytes memory assembledData)\n        internal\n        pure\n        returns (bytes4 method)\n    {\n        return method = LibFindMethod.findMethod(assembledData);\n    }\n\n    /// @dev Finds if a method is allowed on an exchange.\n    /// @param _adapter Address of the target exchange.\n    /// @return Bool the method is allowed.\n    function methodAllowedOnExchange(\n        bytes4 _method,\n        address _adapter)\n        internal\n        view\n        returns (bool)\n    {\n        return ExchangesAuthority(\n            Authority(admin.authority)\n            .getExchangesAuthority())\n            .isMethodAllowed(_method, _adapter);\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/authorities/ExchangesAuthority/ExchangesAuthorityFace.sol": {
			"content": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Exchange Authority Interface - A helper contract for the exchange adapters.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface ExchangesAuthorityFace {\n\n    /*\n     * EVENTS\n     */\n    event AuthoritySet(address indexed authority);\n    event WhitelisterSet(address indexed whitelister);\n    event WhitelistedAsset(address indexed asset, bool approved);\n    event WhitelistedExchange(address indexed exchange, bool approved);\n    event WhitelistedWrapper(address indexed wrapper, bool approved);\n    event WhitelistedProxy(address indexed proxy, bool approved);\n    event WhitelistedMethod(bytes4 indexed method, address indexed exchange, bool approved);\n    event NewSigVerifier(address indexed sigVerifier);\n    event NewExchangeEventful(address indexed exchangeEventful);\n    event NewCasper(address indexed casper);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows the owner to whitelist an authority\n    /// @param _authority Address of the authority\n    /// @param _isWhitelisted Bool whitelisted\n    function setAuthority(address _authority, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows the owner to whitelist a whitelister\n    /// @param _whitelister Address of the whitelister\n    /// @param _isWhitelisted Bool whitelisted\n    function setWhitelister(address _whitelister, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to whitelist an asset\n    /// @param _asset Address of the token\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistAsset(address _asset, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to whitelist an exchange\n    /// @param _exchange Address of the target exchange\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistExchange(address _exchange, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to whitelist an token wrapper\n    /// @param _wrapper Address of the target token wrapper\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistWrapper(address _wrapper, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to whitelist a tokenTransferProxy\n    /// @param _tokenTransferProxy Address of the proxy\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistTokenTransferProxy(\n        address _tokenTransferProxy, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to enable trading on a particular exchange\n    /// @param _asset Address of the token\n    /// @param _exchange Address of the exchange\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistAssetOnExchange(\n        address _asset,\n        address _exchange,\n        bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to enable assiciate wrappers to a token\n    /// @param _token Address of the token\n    /// @param _wrapper Address of the exchange\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistTokenOnWrapper(\n        address _token,\n        address _wrapper,\n        bool _isWhitelisted)\n        external;\n\n    /// @dev Allows an admin to whitelist a factory\n    /// @param _method Hex of the function ABI\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistMethod(\n        bytes4 _method,\n        address _adapter,\n        bool _isWhitelisted)\n        external;\n\n    /// @dev Allows the owner to set the signature verifier\n    /// @param _sigVerifier Address of the logs contract\n    function setSignatureVerifier(address _sigVerifier)\n        external;\n\n    /// @dev Allows the owner to set the exchange eventful\n    /// @param _exchangeEventful Address of the exchange logs contract\n    function setExchangeEventful(address _exchangeEventful)\n        external;\n\n    /// @dev Allows the owner to associate an exchange to its adapter\n    /// @param _exchange Address of the exchange\n    /// @param _adapter Address of the adapter\n    function setExchangeAdapter(address _exchange, address _adapter)\n        external;\n\n    /// @dev Allows the owner to set the casper contract\n    /// @param _casper Address of the casper contract\n    function setCasper(address _casper)\n        external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Provides whether an address is an authority\n    /// @param _authority Address of the target authority\n    /// @return Bool is whitelisted\n    function isAuthority(address _authority)\n        external view\n        returns (bool);\n\n    /// @dev Provides whether an asset is whitelisted\n    /// @param _asset Address of the target asset\n    /// @return Bool is whitelisted\n    function isWhitelistedAsset(address _asset)\n        external view\n        returns (bool);\n\n    /// @dev Provides whether an exchange is whitelisted\n    /// @param _exchange Address of the target exchange\n    /// @return Bool is whitelisted\n    function isWhitelistedExchange(address _exchange)\n        external view\n        returns (bool);\n\n    /// @dev Provides whether a token wrapper is whitelisted\n    /// @param _wrapper Address of the target exchange\n    /// @return Bool is whitelisted\n    function isWhitelistedWrapper(address _wrapper)\n        external view\n        returns (bool);\n\n    /// @dev Provides whether a proxy is whitelisted\n    /// @param _tokenTransferProxy Address of the proxy\n    /// @return Bool is whitelisted\n    function isWhitelistedProxy(address _tokenTransferProxy)\n        external view\n        returns (bool);\n\n    /// @dev Provides the address of the exchange adapter\n    /// @param _exchange Address of the exchange\n    /// @return Address of the adapter\n    function getExchangeAdapter(address _exchange)\n        external view\n        returns (address);\n\n    /// @dev Provides the address of the signature verifier\n    /// @return Address of the verifier\n    function getSigVerifier()\n        external view\n        returns (address);\n\n    /// @dev Checkes whether a token is allowed on an exchange\n    /// @param _token Address of the token\n    /// @param _exchange Address of the exchange\n    /// @return Bool the token is whitelisted on the exchange\n    function canTradeTokenOnExchange(address _token, address _exchange)\n        external view\n        returns (bool);\n\n    /// @dev Checkes whether a token is allowed on a wrapper\n    /// @param _token Address of the token\n    /// @return Bool the token is whitelisted on the exchange\n    function canWrapTokenOnWrapper(address _token, address _wrapper)\n        external view\n        returns (bool);\n\n    /// @dev Checkes whether a method is allowed on an exchange\n    function isMethodAllowed(bytes4 _method, address _exchange)\n        external view\n        returns (bool);\n\n    /// @dev Checkes whether casper has been inizialized\n    /// @return Bool the casper contract has been initialized\n    function isCasperInitialized()\n        external view\n        returns (bool);\n\n    /// @dev Provides the address of the casper contract\n    /// @return Address of the casper contract\n    function getCasper()\n        external view\n        returns (address);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/extensions/SigVerifier/SigVerifierFace.sol": {
			"content": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl, ZeroEx Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.25;\n\n/// @title SigVerifier Interface - Allows interaction with the signature verifier contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface SigVerifierFace {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/extensions/NavVerifier/NavVerifierFace.sol": {
			"content": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.25;\n\n/// @title Nav Verifier Interface - Allows to check if new NAV comes from approved authority.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface NavVerifierFace {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param sellPrice Price in wei\n    /// @param buyPrice Price in wei\n    /// @param signaturevaliduntilBlock Number of blocks till price expiry\n    /// @param hash Message hash that is signed.\n    /// @param signedData Proof of nav validity.\n    /// @notice mock function which returns true\n    function isValidNav(\n        uint256 sellPrice,\n        uint256 buyPrice,\n        uint256 signaturevaliduntilBlock,\n        bytes32 hash,\n        bytes calldata signedData)\n        external\n        view\n        returns (bool isValid);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/Kyc/KycFace.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title KycFace - allows interaction with a Kyc provider.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface KycFace\n\n{\n    function isWhitelistedUser(address hodler) external view returns (bool);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/DragoEventful/DragoEventfulFace.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Drago Eventful Interface contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface DragoEventfulFace {\n\n    /*\n     * EVENTS\n     */\n    event BuyDrago(address indexed drago, address indexed from, address indexed to, uint256 amount, uint256 revenue, bytes name, bytes symbol);\n    event SellDrago(address indexed drago, address indexed from, address indexed to, uint256 amount, uint256 revenue, bytes name, bytes symbol);\n    event NewRatio(address indexed drago, address indexed from, uint256 newRatio);\n    event NewNAV(address indexed drago, address indexed from, address indexed to, uint256 sellPrice, uint256 buyPrice);\n    event NewFee(address indexed drago, address indexed group, address indexed who, uint256 transactionFee);\n    event NewCollector( address indexed drago, address indexed group, address indexed who, address feeCollector);\n    event DragoDao(address indexed drago, address indexed from, address indexed to, address dragoDao);\n    event DepositExchange(address indexed drago, address indexed exchange, address indexed token, uint256 value, uint256 amount);\n    event WithdrawExchange(address indexed drago, address indexed exchange, address indexed token, uint256 value, uint256 amount);\n    event OrderExchange(address indexed drago, address indexed exchange, address indexed cfd, uint256 value, uint256 revenue);\n    event TradeExchange(address indexed drago, address indexed exchange, address tokenGet, address tokenGive, uint256 amountGet, uint256 amountGive, address get);\n    event CancelOrder(address indexed drago, address indexed exchange, address indexed cfd, uint256 value, uint256 id);\n    event DealFinalized(address indexed drago, address indexed exchange, address indexed cfd, uint256 value, uint256 id);\n    event CustomDragoLog(bytes4 indexed methodHash, bytes encodedParams);\n    event CustomDragoLog2(bytes4 indexed methodHash,  bytes32 topic2, bytes32 topic3, bytes encodedParams);\n    event DragoCreated(address indexed drago, address indexed group, address indexed owner, uint256 dragoId, string name, string symbol);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function buyDrago(address _who, address _targetDrago, uint256 _value, uint256 _amount, bytes calldata _name, bytes calldata _symbol) external returns (bool success);\n    function sellDrago(address _who, address _targetDrago, uint256 _amount, uint256 _revenue, bytes calldata _name, bytes calldata _symbol) external returns(bool success);\n    function changeRatio(address _who, address _targetDrago, uint256 _ratio) external returns(bool success);\n    function changeFeeCollector(address _who, address _targetDrago, address _feeCollector) external returns(bool success);\n    function changeDragoDao(address _who, address _targetDrago, address _dragoDao) external returns(bool success);\n    function setDragoPrice(address _who, address _targetDrago, uint256 _sellPrice, uint256 _buyPrice) external returns(bool success);\n    function setTransactionFee(address _who, address _targetDrago, uint256 _transactionFee) external returns(bool success);\n    function depositToExchange(address _who, address _targetDrago, address _exchange, address _token, uint256 _value) external returns(bool success);\n    function withdrawFromExchange(address _who, address _targetDrago, address _exchange, address _token, uint256 _value) external returns(bool success);\n    function customDragoLog(bytes4 _methodHash, bytes calldata _encodedParams) external returns (bool success);\n    function customDragoLog2(bytes4 _methodHash, bytes32 topic2, bytes32 topic3, bytes calldata _encodedParams) external returns (bool success);\n    function customExchangeLog(bytes4 _methodHash, bytes calldata _encodedParams) external returns (bool success);\n    function customExchangeLog2(bytes4 _methodHash, bytes32 topic2, bytes32 topic3,bytes calldata _encodedParams) external returns (bool success);\n    function createDrago(address _who, address _newDrago, string calldata _name, string calldata _symbol, uint256 _dragoId) external returns(bool success);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/LibFindMethod/LibFindMethod.sol": {
			"content": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Find Method Library - library to find the method of a call.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\nlibrary LibFindMethod {\n\n    /// @dev Returns the method of an ABIencoded call\n    /// @param assembledData Bytes of the call data\n    /// @return Bytes4 of the function signature\n    function findMethod(bytes memory assembledData)\n        internal\n        pure\n        returns (bytes4 method)\n    {\n        // find the bytes4(keccak256('functionABI')) of the function\n        assembly {\n            // Load free memory pointer\n            method := mload(0x00)\n            let transaction := assembledData\n            method := mload(add(transaction, 0x20))\n        }\n        return method;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/DragoEventful/DragoEventful.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { AuthorityFace as Authority } from \"../authorities/Authority/AuthorityFace.sol\";\nimport { ExchangesAuthorityFace as DexAuth } from \"../authorities/ExchangesAuthority/ExchangesAuthorityFace.sol\";\nimport { DragoEventfulFace } from \"./DragoEventfulFace.sol\";\n\n/// @title Drago Eventful contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract DragoEventful is DragoEventfulFace {\n\n    string public constant VERSION = 'DH0.4.2';\n\n    address public AUTHORITY;\n\n    event BuyDrago(\n        address indexed drago,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        uint256 revenue,\n        bytes name,\n        bytes symbol\n    );\n\n    event SellDrago(\n        address indexed drago,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        uint256 revenue,\n        bytes name,\n        bytes symbol\n    );\n\n    event NewRatio(\n        address indexed drago,\n        address indexed from,\n        uint256 newRatio\n    );\n\n    event NewNAV(\n        address indexed drago,\n        address indexed from,\n        address indexed to,\n        uint256 sellPrice,\n        uint256 buyPrice\n    );\n\n    event NewFee(\n        address indexed drago,\n        address indexed group,\n        address indexed who,\n        uint256 transactionFee\n    );\n\n    event NewCollector(\n        address indexed drago,\n        address indexed group,\n        address indexed who,\n        address feeCollector\n    );\n\n    event DragoDao(\n        address indexed drago,\n        address indexed from,\n        address indexed to,\n        address dragoDao\n    );\n\n    event DepositExchange(\n        address indexed drago,\n        address indexed exchange,\n        address indexed token,\n        uint256 value,\n        uint256 amount\n    );\n\n    event WithdrawExchange(\n        address indexed drago,\n        address indexed exchange,\n        address indexed token,\n        uint256 value,\n        uint256 amount\n    );\n\n    event OrderExchange(\n        address indexed drago,\n        address indexed exchange,\n        address indexed cfd,\n        uint256 value,\n        uint256 revenue\n    );\n\n    event TradeExchange(\n        address indexed drago,\n        address indexed exchange,\n        address tokenGet,\n        address tokenGive,\n        uint256 amountGet,\n        uint256 amountGive,\n        address get\n    );\n\n    event CancelOrder(\n        address indexed drago,\n        address indexed exchange,\n        address indexed cfd,\n        uint256 value,\n        uint256 id\n    );\n\n    event DealFinalized(\n        address indexed drago,\n        address indexed exchange,\n        address indexed cfd,\n        uint256 value,\n        uint256 id\n    );\n\n    event CustomDragoLog(\n        bytes4 indexed method,\n        bytes encodedParams\n    );\n\n    event CustomDragoLog2(\n        bytes4 indexed methodHash,\n        bytes32 indexed topic2,\n        bytes32 indexed topic3,\n        bytes encodedParams\n    );\n\n    event DragoCreated(\n        address indexed drago,\n        address indexed group,\n        address indexed owner,\n        uint256 dragoId,\n        string name,\n        string symbol\n    );\n\n    modifier approvedFactoryOnly(address _factory) {\n        Authority auth = Authority(AUTHORITY);\n        require(auth.isWhitelistedFactory(_factory));\n        _;\n    }\n\n    modifier approvedDragoOnly(address _drago) {\n        Authority auth = Authority(AUTHORITY);\n        require(auth.isWhitelistedDrago(_drago));\n        _;\n    }\n\n    modifier approvedExchangeOnly(address _exchange) {\n        Authority auth = Authority(AUTHORITY);\n        require(\n            DexAuth(auth.getExchangesAuthority())\n                .isWhitelistedExchange(_exchange));\n        _;\n    }\n\n    modifier approvedUserOnly(address _user) {\n        Authority auth = Authority(AUTHORITY);\n        require(auth.isWhitelistedUser(_user));\n        _;\n    }\n\n    modifier approvedAsset(address _asset) {\n        Authority auth = Authority(AUTHORITY);\n        require(\n            DexAuth(auth.getExchangesAuthority())\n                .isWhitelistedAsset(_asset));\n        _;\n    }\n\n    constructor(address _authority) public {\n        AUTHORITY = _authority;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Logs a Buy Drago event.\n    /// @param _who Address of who is buying\n    /// @param _targetDrago Address of the target drago\n    /// @param _value Value of the transaction in Ether\n    /// @param _amount Number of shares purchased\n    /// @return Bool the transaction executed successfully\n    function buyDrago(\n        address _who,\n        address _targetDrago,\n        uint256 _value,\n        uint256 _amount,\n        bytes calldata _name,\n        bytes calldata _symbol)\n        external\n        approvedDragoOnly(msg.sender)\n        returns (bool success)\n    {\n        buyDragoInternal(_targetDrago, _who, msg.sender, _value, _amount, _name, _symbol);\n        return true;\n    }\n\n    /// @dev Logs a Sell Drago event.\n    /// @param _who Address of who is selling\n    /// @param _targetDrago Address of the target drago\n    /// @param _amount Number of shares purchased\n    /// @param _revenue Value of the transaction in Ether\n    /// @return Bool the transaction executed successfully\n    function sellDrago(\n        address _who,\n        address _targetDrago,\n        uint256 _amount,\n        uint256 _revenue,\n        bytes calldata _name,\n        bytes calldata _symbol)\n        external\n        approvedDragoOnly(msg.sender)\n        returns(bool success)\n    {\n        require(_amount > 0);\n        sellDragoInternal(_targetDrago, _who, msg.sender, _amount, _revenue, _name, _symbol);\n        return true;\n    }\n\n    /// @dev Logswhen rigoblock dao changes fee split.\n    /// @param _who Address of the caller\n    /// @param _targetDrago Address of the target drago\n    /// @param _ratio Ratio number from 0 to 100\n    /// @return Bool the transaction executed successfully\n    function changeRatio(\n        address _who,\n        address _targetDrago,\n        uint256 _ratio)\n        external\n        approvedDragoOnly(msg.sender)\n        returns(bool success)\n    {\n        require(_ratio > 0);\n        emit NewRatio(_targetDrago, _who, _ratio);\n        return true;\n    }\n\n    /// @dev Logs when wizard changes fee collector address\n    /// @param _who Address of the caller\n    /// @param _targetDrago Address of the target Drago\n    /// @param _feeCollector Address of the new fee collector\n    /// @return Bool the transaction executed successfully\n    function changeFeeCollector(\n        address _who,\n        address _targetDrago,\n        address _feeCollector)\n        external\n        approvedDragoOnly(msg.sender)\n        approvedUserOnly(_who)\n        returns(bool success)\n    {\n        emit NewCollector(_targetDrago, msg.sender, _who, _feeCollector);\n        return true;\n    }\n\n    /// @dev Logs a change in the drago dao of an approved vault\n    /// @param _who Address of the caller\n    /// @param _targetDrago Address of the drago\n    /// @param _dragoDao Address of the new drago dao\n    /// @return Bool the transaction executed successfully\n    function changeDragoDao(\n        address _who,\n        address _targetDrago,\n        address _dragoDao)\n        external\n        approvedDragoOnly(msg.sender)\n        approvedUserOnly(_who)\n        returns(bool success)\n    {\n        emit DragoDao(_targetDrago, msg.sender, _who, _dragoDao);\n        return true;\n    }\n\n    /// @dev Logs a Set Drago Price event\n    /// @param _who Address of the caller\n    /// @param _targetDrago Address of the target Drago\n    /// @param _sellPrice Value of the price of one share in wei\n    /// @param _buyPrice Value of the price of one share in wei\n    /// @return Bool the transaction executed successfully\n    function setDragoPrice(\n        address _who,\n        address _targetDrago,\n        uint256 _sellPrice,\n        uint256 _buyPrice)\n        external\n        approvedDragoOnly(msg.sender)\n        returns(bool success)\n    {\n        require(_sellPrice > 10 finney && _buyPrice > 10 finney);\n        emit NewNAV(_targetDrago, msg.sender, _who, _sellPrice, _buyPrice);\n        return true;\n    }\n\n    /// @dev Logs a modification of the transaction fee event\n    /// @param _who Address of the caller\n    /// @param _targetDrago Address of the target Drago\n    /// @param _transactionFee Value of the transaction fee in basis points\n    /// @return Bool the transaction executed successfully\n    function setTransactionFee(\n        address _who,\n        address _targetDrago,\n        uint256 _transactionFee)\n        external\n        approvedDragoOnly(msg.sender)\n        approvedUserOnly(_who)\n        returns(bool success)\n    {\n        emit NewFee(_targetDrago, msg.sender, _who, _transactionFee);\n        return true;\n    }\n\n    /// @dev Logs a Drago Deposit To Exchange event\n    /// @param _who Address of the caller\n    /// @param _targetDrago Address of the target Drago\n    /// @param _exchange Address of the exchange\n    /// @param _token Address of the deposited token\n    /// @param _value Number of deposited tokens\n    /// @return Bool the transaction executed successfully\n    function depositToExchange(\n        address _who,\n        address _targetDrago,\n        address _exchange,\n        address _token,\n        uint256 _value)\n        external\n        approvedUserOnly(_who)\n        approvedDragoOnly(msg.sender)\n        approvedExchangeOnly(_exchange)\n        returns(bool success)\n    {\n        emit DepositExchange(_targetDrago, _exchange, _token, _value, 0);\n        return true;\n    }\n\n    /// @dev Logs a Drago Withdraw From Exchange event\n    /// @param _who Address of the caller\n    /// @param _targetDrago Address of the target Drago\n    /// @param _exchange Address of the exchange\n    /// @param _token Address of the withdrawn token\n    /// @param _value Number of withdrawn tokens\n    /// @return Bool the transaction executed successfully\n    function withdrawFromExchange(\n        address _who,\n        address _targetDrago,\n        address _exchange,\n        address _token,\n        uint256 _value)\n        external\n        approvedUserOnly(_who)\n        approvedDragoOnly(msg.sender)\n        approvedExchangeOnly(_exchange)\n        returns(bool success)\n    {\n        emit WithdrawExchange(_targetDrago, _exchange, _token, _value, 0);\n        return true;\n    }\n\n    /// @dev Logs an event sent from a drago\n    /// @param _methodHash the method of the call\n    /// @param _encodedParams the arbitrary data array\n    /// @return Bool the transaction executed successfully\n    function customDragoLog(\n        bytes4 _methodHash,\n        bytes calldata _encodedParams)\n        external\n        approvedDragoOnly(msg.sender)\n        returns (bool success)\n    {\n        emit CustomDragoLog(_methodHash, _encodedParams);\n        return true;\n    }\n\n    /// @dev Logs an event sent from a drago\n    /// @param _methodHash the method of the call\n    /// @param _encodedParams the arbitrary data array\n    /// @return Bool the transaction executed successfully\n    function customDragoLog2(\n        bytes4 _methodHash,\n        bytes32 topic2,\n        bytes32 topic3,\n        bytes calldata _encodedParams)\n        external\n        approvedDragoOnly(msg.sender)\n        returns (bool success)\n    {\n        emit CustomDragoLog2(_methodHash, topic2, topic3, _encodedParams);\n        return true;\n    }\n\n    /// @dev Logs an event sent from an approved exchange\n    /// @param _methodHash the method of the call\n    /// @param _encodedParams the arbitrary data array\n    /// @return Bool the transaction executed successfully\n    function customExchangeLog(\n        bytes4 _methodHash,\n        bytes calldata _encodedParams)\n        external\n        approvedExchangeOnly(msg.sender)\n        returns (bool success)\n    {\n        emit CustomDragoLog(_methodHash, _encodedParams);\n        return true;\n    }\n\n    /// @dev Logs an event sent from an approved exchange\n    /// @param _methodHash the method of the call\n    /// @param _encodedParams the arbitrary data array\n    /// @return Bool the transaction executed successfully\n    function customExchangeLog2(\n        bytes4 _methodHash,\n        bytes32 topic2,\n        bytes32 topic3,\n        bytes calldata _encodedParams)\n        external\n        approvedExchangeOnly(msg.sender)\n        returns (bool success)\n    {\n        emit CustomDragoLog2(_methodHash, topic2, topic3, _encodedParams);\n        return true;\n    }\n\n    /// @dev Logs a new Drago creation by factory\n    /// @param _who Address of the caller\n    /// @param _newDrago Address of the new Drago\n    /// @param _name String of the name of the new drago\n    /// @param _symbol String of the symbol of the new drago\n    /// @param _dragoId Number of the new drago Id\n    /// @return Bool the transaction executed successfully\n    function createDrago(\n        address _who,\n        address _newDrago,\n        string calldata _name,\n        string calldata _symbol,\n        uint256 _dragoId)\n        external\n        approvedFactoryOnly(msg.sender)\n        returns(bool success)\n    {\n        createDragoInternal(_newDrago, msg.sender, _who, _dragoId, _name, _symbol);\n        return true;\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Logs a purchase event\n    /// @param _who Address of the caller\n    /// @param _targetDrago Address of the drago\n    /// @param _factory Address of the factory\n    /// @param _value Value of transaction in wei\n    /// @param _amount Number of new tokens\n    /// @param _name Hex encoded bytes of the name\n    /// @param _symbol Hex encoded bytes of the symbol\n    function buyDragoInternal(\n        address _targetDrago,\n        address _who,\n        address _factory,\n        uint256 _value,\n        uint256 _amount,\n        bytes memory _name,\n        bytes memory _symbol)\n        internal\n    {\n        emit BuyDrago(_targetDrago, _who, _factory, _value, _amount, _name, _symbol);\n    }\n\n    /// @dev Logs a sale event\n    /// @param _who Address of the caller\n    /// @param _targetDrago Address of the drago\n    /// @param _factory Address of the factory\n    /// @param _amount Number of burnt tokens\n    /// @param _revenue Value of transaction in wei\n    /// @param _name Hex encoded bytes of the name\n    /// @param _symbol Hex encoded bytes of the symbol\n    function sellDragoInternal(\n        address _targetDrago,\n        address _who,\n        address _factory,\n        uint256 _amount,\n        uint256 _revenue,\n        bytes memory _name,\n        bytes memory _symbol)\n        internal\n    {\n        emit SellDrago(_targetDrago, _who, _factory, _amount, _revenue, _name, _symbol);\n    }\n\n    /// @dev Logs a new drago creation by factory\n    /// @param _who Address of the caller\n    /// @param _newDrago Address of the new drago\n    /// @param _factory Address of the factory\n    /// @param _name Bytes array of the name\n    /// @param _symbol Bytes array of the symbol\n    /// @param _dragoId Number of the pool in registry\n    function createDragoInternal(\n        address _newDrago,\n        address _factory,\n        address _who,\n        uint256 _dragoId,\n        string memory _name,\n        string memory _symbol)\n        internal\n    {\n        emit DragoCreated(_newDrago, _factory, _who, _dragoId, _name, _symbol);\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/DragoRegistry/DragoRegistry.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { Owned } from \"../../utils/Owned/Owned.sol\";\nimport { DragoRegistryFace } from \"./DragoRegistryFace.sol\";\nimport { AuthorityFace as Authority } from \"../authorities/Authority/AuthorityFace.sol\";\nimport { LibSanitize } from \"../../utils/LibSanitize/LibSanitize.sol\";\n\n/// @title Drago Registry - Allows registration of pools.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract DragoRegistry is DragoRegistryFace, Owned {\n\n    using LibSanitize for bool;\n\n    address public AUTHORITY;\n    uint256 public VERSION;\n\n    uint256 public fee = 0;\n\n    address[] groups;\n\n    Drago[] dragos;\n\n    mapping (bytes32 => address) mapFromKey;\n    mapping (address => uint256) mapFromAddress;\n    mapping (string => uint256) mapFromName;\n\n    struct Drago {\n        address drago;\n        string name;\n        string symbol;\n        uint256 dragoId;\n        address owner;\n        address group;\n        mapping (bytes32 => bytes32) meta;\n    }\n\n    /*\n     * EVENTS\n     */\n    event Registered(string name, string symbol, uint256 id, address indexed drago, address indexed owner, address indexed group);\n    event Unregistered(string indexed name, string indexed symbol, uint256 indexed id);\n    event MetaChanged(uint256 indexed id, bytes32 indexed key, bytes32 value);\n\n    /*\n     * MODIFIERS\n     */\n    modifier whenFeePaid {\n        require(msg.value >= fee);\n        _;\n    }\n\n    modifier whenAddressFree(address _drago) {\n        require(mapFromAddress[_drago] == 0);\n        _;\n    }\n\n    modifier onlyDragoOwner(uint256 _id) {\n        require(dragos[_id].owner == msg.sender);\n        _;\n    }\n\n    modifier whenNameFree(string memory _name) {\n        require(mapFromName[_name] == 0);\n        _;\n    }\n\n    modifier whenNameSanitized(string memory _input) {\n        require(bytes(_input).length >= 4 && bytes(_input).length <= 50);\n        require(LibSanitize.isValidCheck(_input));\n        _;\n    }\n\n    modifier whenSymbolSanitized(string memory _input) {\n        require(bytes(_input).length >= 3 && bytes(_input).length <= 5);\n        require(LibSanitize.isValidCheck(_input));\n        require(LibSanitize.isUppercase(_input));\n        _;\n    }\n\n    modifier whenHasName(string memory _name) {\n        require(mapFromName[_name] != 0);\n        _;\n    }\n\n    modifier onlyAuthority {\n        Authority auth = Authority(AUTHORITY);\n        require(auth.isAuthority(msg.sender) == true);\n        _;\n    }\n\n    constructor(address _authority) public {\n        AUTHORITY = _authority;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows a factory which is an authority to register a pool\n    /// @param _drago Address of the pool\n    /// @param _name Name of the pool\n    /// @param _symbol Symbol of the pool\n    /// @param _dragoId Id number of the pool\n    /// @param _owner Address of the pool owner\n    function register(\n        address _drago,\n        string calldata _name,\n        string calldata _symbol,\n        uint256 _dragoId,\n        address _owner)\n        external\n        payable\n        onlyAuthority\n        whenFeePaid\n        whenAddressFree(_drago)\n        whenNameSanitized(_name)\n        whenSymbolSanitized(_symbol)\n        whenNameFree(_name)\n        returns (bool)\n    {\n        return registerAs(_drago, _name, _symbol, _dragoId, _owner, msg.sender);\n    }\n\n    /// @dev Allows owner to unregister a pool\n    /// @param _id Number of the pool\n    function unregister(uint256 _id)\n        external\n        onlyOwner\n    {\n        emit Unregistered(dragos[_id].name, dragos[_id].symbol, _id);\n        delete mapFromAddress[dragos[_id].drago];\n        delete mapFromName[dragos[_id].name];\n        delete dragos[_id];\n    }\n\n    /// @dev Allows pool owner to set metadata for a pool\n    /// @param _id Number corresponding to pool id\n    /// @param _key Bytes32 of the key\n    /// @param _value Bytes32 of the value\n    function setMeta(uint256 _id, bytes32 _key, bytes32 _value)\n        external\n        onlyDragoOwner(_id)\n    {\n        dragos[_id].meta[_key] = _value;\n        emit MetaChanged(_id, _key, _value);\n    }\n\n    /// @dev Allows owner to add a group of pools (a factory)\n    /// @param _group Address of the new group\n    function addGroup(address _group)\n        external\n        onlyOwner\n    {\n        groups.push(_group);\n    }\n\n    /// @dev Allows owner to set a fee to register pools\n    /// @param _fee Value of the fee in wei\n    function setFee(uint256 _fee)\n        external\n        onlyOwner\n    {\n        fee = _fee;\n    }\n\n    /// @dev Allows anyone to update the owner in the registry\n    /// @notice pool owner can change; gets written in registry only when needed\n    /// @param _id uint256 of the target pool\n    function updateOwner(uint256 _id)\n        external\n    {\n        updateOwnerInternal(_id);\n    }\n\n    /// @dev Allows anyone to update many owners if they differ from registered\n    /// @param _id uint256 of the target pool\n    function updateOwners(uint256[] calldata _id)\n        external\n    {\n        for (uint256 i = 0; i < _id.length; ++i) {\n            if (!updateOwnerInternal(_id[i])) continue;\n        }\n    }\n\n    /// @dev Allows owner to create a new registry.\n    /// @dev When the registry gets upgraded, a migration of all funds is required\n    /// @param _newAddress Address of new registry.\n    function upgrade(address _newAddress)\n        external\n        payable\n        onlyOwner\n    {\n        DragoRegistry registry = DragoRegistry(_newAddress);\n        ++VERSION;\n        registry.setUpgraded(VERSION);\n        address payable registryAddress = address(uint160(address(registry)));\n        registryAddress.transfer(address(this).balance);\n    }\n\n    /// @dev Allows owner to update version on registry upgrade\n    /// @param _version Number of the new version\n    function setUpgraded(uint256 _version)\n        external\n        onlyOwner\n    {\n        VERSION = _version;\n    }\n\n    /// @dev Allows owner to collect fees by draining the balance\n    function drain()\n        external\n        onlyOwner\n    {\n        msg.sender.transfer(address(this).balance);\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Provides the total number of registered pools\n    /// @return Number of pools\n    function dragoCount()\n        external view\n        returns (uint256)\n    {\n        return dragos.length;\n    }\n\n    /// @dev Provides a pool's struct data\n    /// @param _id Registration number of the pool\n    /// @return Pool struct data\n    function fromId(uint256 _id)\n        public view //prev external\n        returns (\n            address drago,\n            string memory name,\n            string memory symbol,\n            uint256 dragoId,\n            address owner,\n            address group\n        )\n    {\n        Drago memory pool = dragos[_id];\n        return (\n            drago = pool.drago,\n            name = pool.name,\n            symbol = pool.symbol,\n            dragoId = pool.dragoId,\n            owner = getPoolOwner(drago),\n            group = pool.group\n        );\n    }\n\n    /// @dev Provides a pool's struct data\n    /// @param _drago Address of the pool\n    /// @return Pool struct data\n    function fromAddress(address _drago)\n        external view\n        returns (\n            uint256 id,\n            string memory name,\n            string memory symbol,\n            uint256 dragoId,\n            address owner,\n            address group\n        )\n    {\n        id = mapFromAddress[_drago] - 1;\n        Drago memory pool = dragos[id];\n        return (\n            id,\n            name = pool.name,\n            symbol = pool.symbol,\n            dragoId = pool.dragoId,\n            owner = getPoolOwner(_drago),\n            group = pool.group\n        );\n    }\n\n    /// @dev Provides a pool's struct data\n    /// @param _name Name of the pool\n    /// @return Pool struct data\n    function fromName(string calldata _name)\n        external view\n        returns (\n            uint256 id,\n            address drago,\n            string memory symbol,\n            uint256 dragoId,\n            address owner,\n            address group\n        )\n    {\n        id = mapFromName[_name] - 1;\n        Drago memory pool = dragos[id];\n        return (\n            id,\n            drago = pool.drago,\n            symbol = pool.symbol,\n            dragoId = pool.dragoId,\n            owner = getPoolOwner(drago),\n            group = pool.group\n        );\n    }\n\n    /// @dev Provides a pool's name from its address\n    /// @param _pool Address of the pool\n    /// @return Name of the pool\n    function getNameFromAddress(address _pool)\n        external view\n        returns (string memory)\n    {\n        uint256 id = mapFromAddress[_pool] - 1;\n        Drago memory pool = dragos[id];\n        return pool.name;\n    }\n\n    /// @dev Provides a pool's symbol from its address\n    /// @param _pool Address of the pool\n    /// @return Symbol of the pool\n    function getSymbolFromAddress(address _pool)\n        external view\n        returns (string memory)\n    {\n        uint256 id = mapFromAddress[_pool] - 1;\n        Drago memory pool = dragos[id];\n        return pool.symbol;\n    }\n\n    /// @dev Provides a pool's metadata\n    /// @param _id Id number of the pool\n    /// @param _key Bytes32 key\n    /// @return Pool metadata\n    function meta(uint256 _id, bytes32 _key)\n        external view\n        returns (bytes32)\n    {\n        return dragos[_id].meta[_key];\n    }\n\n    /// @dev Provides the addresses of the groups/factories\n    /// @return Array of addresses of the groups\n    function getGroups()\n        external view\n        returns (address[] memory)\n    {\n        return groups;\n    }\n\n    /// @dev Provides the fee required to register a pool\n    /// @return Number of the fee in wei\n    function getFee()\n        external view\n        returns (uint256)\n    {\n        return fee;\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Allows authority to register a pool for a certain group\n    /// @param _drago Address of the pool\n    /// @param _name Name of the pool\n    /// @param _symbol Symbol of the pool\n    /// @param _dragoId Id number of the pool\n    /// @param _owner Address of the pool owner\n    /// @param _group Address of the group/factory\n    function registerAs(\n        address _drago,\n        string memory _name,\n        string memory _symbol,\n        uint256 _dragoId,\n        address _owner,\n        address _group)\n        internal\n        returns (bool)\n    {\n        dragos.push(Drago(_drago, _name, _symbol, _dragoId, _owner, _group));\n        mapFromAddress[_drago] = dragos.length;\n        mapFromName[_name] = dragos.length;\n        emit Registered(_name, _symbol, dragos.length - 1, _drago, _owner, _group);\n        return true;\n    }\n\n    /// @dev Allows anyone to update the owner in the registry\n    /// @notice pool owner can change, but gets written in registry only when needed\n    /// @param _id uint256 of the target pool\n    /// @return Bollean the transaction was successful\n    function updateOwnerInternal(uint256 _id)\n        internal\n        returns (bool)\n    {\n        Drago storage pool = dragos[_id];\n        address targetPool;\n        ( targetPool, , , , , ) = fromId(_id);\n        require(getPoolOwner(targetPool) != pool.owner);\n        pool.owner = getPoolOwner(targetPool);\n        return true;\n    }\n\n    /// @dev Returns the actual owner of a pool\n    /// @notice queries from the target pool contract itself\n    /// @param pool Address of the target pool\n    /// @return Address of the pool owner\n    function getPoolOwner(address pool)\n        internal view\n        returns (address)\n    {\n        return Owned(pool).owner();\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/DragoRegistry/DragoRegistryFace.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Drago Registry Interface - Allows external interaction with Drago Registry.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface DragoRegistryFace {\n\n    //EVENTS\n\n    event Registered(string name, string symbol, uint256 id, address indexed drago, address indexed owner, address indexed group);\n    event Unregistered(string indexed name, string indexed symbol, uint256 indexed id);\n    event MetaChanged(uint256 indexed id, bytes32 indexed key, bytes32 value);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function register(address _drago, string calldata _name, string calldata _symbol, uint256 _dragoId, address _owner) external payable returns (bool);\n    function unregister(uint256 _id) external;\n    function setMeta(uint256 _id, bytes32 _key, bytes32 _value) external;\n    function addGroup(address _group) external;\n    function setFee(uint256 _fee) external;\n    function updateOwner(uint256 _id) external;\n    function updateOwners(uint256[] calldata _id) external;\n    function upgrade(address _newAddress) external payable; //payable as there is a transfer of value, otherwise opcode might throw an error\n    function setUpgraded(uint256 _version) external;\n    function drain() external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function dragoCount() external view returns (uint256);\n    function fromId(uint256 _id) external view returns (address drago, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromAddress(address _drago) external view returns (uint256 id, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromName(string calldata _name) external view returns (uint256 id, address drago, string memory symbol, uint256 dragoId, address owner, address group);\n    function getNameFromAddress(address _pool) external view returns (string memory);\n    function getSymbolFromAddress(address _pool) external view returns (string memory);\n    function meta(uint256 _id, bytes32 _key) external view returns (bytes32);\n    function getGroups() external view returns (address[] memory);\n    function getFee() external view returns (uint256);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/LibSanitize/LibSanitize.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Lib Sanitize - Sanitize strings in smart contracts.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\nlibrary LibSanitize {\n\n    function isValidCheck(string memory str)\n        internal\n        pure\n        returns (bool)\n    {\n        bytes memory bStr = bytes(str);\n        uint arrayLength = bStr.length;\n        require(\n            bStr[0] != byte(uint8(32))\n        );    \n        require(\n            bStr[arrayLength - 1] != byte(uint8(32))\n        );    \n        for (uint i =0; i < arrayLength; i++) {\n            if (\n                (\n                    bStr[i] < byte(uint8(48)) ||\n                    bStr[i] > byte(uint8(122)) ||\n                    bStr[i] > byte(uint8(57)) && bStr[i] < byte(uint8(65)) ||\n                    bStr[i] > byte(uint8(90)) && bStr[i] < byte(uint8(97))\n                ) && bStr[i] != byte(uint8(32))\n            ) return false;\n        } return true;\n    }\n\n    function isLowercase(string memory str)\n        internal\n        pure\n        returns (bool)\n    {\n        bytes memory bStr = bytes(str);\n        uint arrayLength = bStr.length;\n\t\t    for (uint i = 0; i < arrayLength; i++) {\n\t\t\t     if ((bStr[i] >= byte(uint8(65))) && (bStr[i] <= byte(uint8(90)))) return false;\n\t\t    } return true;\n    }\n\n    function isUppercase(string memory str)\n        internal\n        pure\n        returns (bool)\n    {\n        bytes memory bStr = bytes(str);\n        uint arrayLength = bStr.length;\n        for (uint i = 0; i < arrayLength; i++) {\n            if ((bStr[i] >= byte(uint8(97))) && (bStr[i] <= byte(uint8(122)))) return false;\n        } return true;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/VaultEventful/VaultEventful.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { AuthorityFace as Authority } from \"../authorities/Authority/AuthorityFace.sol\";\nimport { VaultEventfulFace } from \"./VaultEventfulFace.sol\";\n\n/// @title Vault Eventful - Logs events for all vaults.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract VaultEventful is VaultEventfulFace {\n\n    string public constant VERSION = 'DH 0.4.2';\n\n    address public AUTHORITY;\n\n    event BuyVault(\n        address indexed vault,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        uint256 revenue,\n        bytes name,\n        bytes symbol\n    );\n\n    event SellVault(\n        address indexed vault,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        uint256 revenue,\n        bytes name,\n        bytes symbol\n    );\n\n    event NewRatio(\n        address indexed vault,\n        address indexed from,\n        uint256 newRatio\n    );\n\n\n    event NewFee(\n        address indexed vault,\n        address indexed from,\n        address indexed to,\n        uint256 fee\n    );\n\n    event NewCollector(\n        address indexed vault,\n        address indexed from,\n        address indexed to,\n        address collector\n    );\n\n    event VaultDao(\n        address indexed vault,\n        address indexed from,\n        address indexed to,\n        address vaultDao\n    );\n\n    event VaultCreated(\n        address indexed vault,\n        address indexed group,\n        address indexed owner,\n        uint256 vaultId,\n        string name,\n        string symbol\n    );\n\n    modifier approvedFactoryOnly(address _factory) {\n        Authority auth = Authority(AUTHORITY);\n        require(auth.isWhitelistedFactory(_factory));\n        _;\n    }\n\n    modifier approvedVaultOnly(address _vault) {\n        Authority auth = Authority(AUTHORITY);\n        require(auth.isWhitelistedVault(_vault));\n        _;\n    }\n\n    modifier approvedUserOnly(address _user) {\n        Authority auth = Authority(AUTHORITY);\n        require(auth.isWhitelistedUser(_user));\n        _;\n    }\n\n    constructor(address _authority) public {\n        AUTHORITY = _authority;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Logs a Buy Vault event.\n    /// @param _who Address of who is buying\n    /// @param _targetVault Address of the target vault\n    /// @param _value Value of the transaction in Ether\n    /// @param _amount Number of shares purchased\n    /// @return Bool the transaction executed successfully\n    /// @notice transform name and symbol in .js with web3.toAscii(bytes32_date)\n    function buyVault(\n        address _who,\n        address _targetVault,\n        uint256 _value,\n        uint256 _amount,\n        bytes calldata _name,\n        bytes calldata _symbol)\n        external\n        approvedVaultOnly(msg.sender)\n        returns (bool success)\n    {\n        buyVaultInternal(_targetVault, _who, msg.sender, _value, _amount, _name, _symbol);\n        return true;\n    }\n\n    /// @dev Logs a Sell Vault event.\n    /// @param _who Address of who is selling\n    /// @param _targetVault Address of the target vault\n    /// @param _amount Number of shares purchased\n    /// @param _revenue Value of the transaction in Ether\n    /// @return Bool the transaction executed successfully\n    /// @notice transform name and symbol in .js with web3.toAscii(bytes32_date)\n    function sellVault(\n        address _who,\n        address _targetVault,\n        uint256 _amount,\n        uint256 _revenue,\n        bytes calldata _name,\n        bytes calldata _symbol)\n        external\n        approvedVaultOnly(msg.sender)\n        returns(bool success)\n    {\n        require(_amount > 0);\n        sellVaultInternal(_targetVault, _who, msg.sender, _amount, _revenue, _name, _symbol);\n        return true;\n    }\n\n    /// @dev Logswhen rigoblock dao changes fee split.\n    /// @param _who Address of the caller\n    /// @param _targetVault Address of the target vault\n    /// @param _ratio Ratio number from 0 to 100\n    /// @return Bool the transaction executed successfully\n    function changeRatio(\n        address _who,\n        address _targetVault,\n        uint256 _ratio)\n        external\n        approvedVaultOnly(msg.sender)\n        returns(bool success)\n    {\n        require(_ratio > 0);\n        emit NewRatio(_targetVault, _who, _ratio);\n        return true;\n    }\n\n\n    /// @dev Logs a modification of the transaction fee event\n    /// @param _who Address of the caller\n    /// @param _targetVault Address of the target Vault\n    /// @param _transactionFee Value of the transaction fee in basis points\n    /// @return Bool the transaction executed successfully\n    function setTransactionFee(\n        address _who,\n        address _targetVault,\n        uint256 _transactionFee)\n        external\n        approvedVaultOnly(msg.sender)\n        approvedUserOnly(_who)\n        returns(bool success)\n    {\n        emit NewFee(_targetVault, msg.sender, _who, _transactionFee);\n        return true;\n    }\n\n    /// @dev Logs when wizard changes fee collector address\n    /// @param _who Address of the caller\n    /// @param _targetVault Address of the target Vault\n    /// @param _feeCollector Address of the new fee collector\n    /// @return Bool the transaction executed successfully\n    function changeFeeCollector(\n        address _who,\n        address _targetVault,\n        address _feeCollector)\n        external\n        approvedVaultOnly(msg.sender)\n        approvedUserOnly(_who)\n        returns(bool success)\n    {\n        emit NewCollector(_targetVault, msg.sender, _who, _feeCollector);\n        return true;\n    }\n\n    /// @dev Logs a change in the vault dao of an approved vault\n    /// @param _who Address of the caller\n    /// @param _targetVault Address of the vault\n    /// @param _vaultDao Address of the new vault dao\n    /// @return Bool the transaction executed successfully\n    function changeVaultDao(\n        address _who,\n        address _targetVault,\n        address _vaultDao)\n        external\n        approvedVaultOnly(msg.sender)\n        approvedUserOnly(_who)\n        returns(bool success)\n    {\n        emit VaultDao(_targetVault, msg.sender, _who, _vaultDao);\n        return true;\n    }\n\n    /// @dev Logs a new Vault creation by factory\n    /// @param _who Address of the caller\n    /// @param _newVault Address of the new vault\n    /// @param _name String of the name of the new vault\n    /// @param _symbol String of the symbol of the new vault\n    /// @param _vaultId Number of the new vault Id\n    /// @return Bool the transaction executed successfully\n    function createVault(\n        address _who,\n        address _newVault,\n        string calldata _name,\n        string calldata _symbol,\n        uint256 _vaultId)\n        external\n        approvedFactoryOnly(msg.sender)\n        returns(bool success)\n    {\n        createVaultInternal(_newVault, msg.sender, _who, _name, _symbol, _vaultId);\n        return true;\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Logs a purchase event\n    /// @param _who Address of the caller\n    /// @param _targetVault Address of the vault\n    /// @param _factory Address of the factory\n    /// @param _value Value of transaction in wei\n    /// @param _amount Number of new tokens\n    /// @param _name Hex encoded bytes of the name\n    /// @param _symbol Hex encoded bytes of the symbol\n    function buyVaultInternal(\n        address _targetVault,\n        address _who,\n        address _factory,\n        uint256 _value,\n        uint256 _amount,\n        bytes memory _name,\n        bytes memory _symbol)\n        internal\n    {\n        emit BuyVault(_targetVault, _who, _factory, _value, _amount, _name, _symbol);\n    }\n\n    /// @dev Logs a sale event\n    /// @param _who Address of the caller\n    /// @param _targetVault Address of the vault\n    /// @param _factory Address of the factory\n    /// @param _amount Number of burnt tokens\n    /// @param _revenue Value of transaction in wei\n    /// @param _name Hex encoded bytes of the name\n    /// @param _symbol Hex encoded bytes of the symbol\n    function sellVaultInternal(\n        address _targetVault,\n        address _who,\n        address _factory,\n        uint256 _amount,\n        uint256 _revenue,\n        bytes memory _name,\n        bytes memory _symbol)\n        internal\n    {\n        emit SellVault(_targetVault, _who, _factory, _amount, _revenue, _name, _symbol);\n    }\n\n    /// @dev Logs a new vault creation by factory\n    /// @param _who Address of the caller\n    /// @param _newVault Address of the new vault\n    /// @param _factory Address of the factory\n    /// @param _name Bytes array of the name\n    /// @param _symbol Bytes array of the symbol\n    /// @param _vaultId Number of the pool in registry\n    function createVaultInternal(\n        address _newVault,\n        address _factory,\n        address _who,\n        string memory _name,\n        string memory _symbol,\n        uint256 _vaultId)\n        internal\n    {\n        emit VaultCreated(_newVault, _factory, _who, _vaultId, _name, _symbol);\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/authorities/Authority/Authority.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { Owned } from \"../../../utils/Owned/Owned.sol\";\nimport { AuthorityFace } from \"./AuthorityFace.sol\";\n\n/// @title Authority - Allows to set up the base rules of the protocol.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract Authority is\n    Owned,\n    AuthorityFace\n{\n    BuildingBlocks public blocks;\n    Type public types;\n\n    mapping (address => Account) public accounts;\n\n    struct List {\n        address target;\n    }\n\n    struct Type {\n        string types;\n        List[] list;\n    }\n\n    struct Group {\n        bool whitelister;\n        bool drago;\n        bool vault;\n        bool user;\n        bool registry;\n        bool factory;\n        bool authority;\n    }\n\n    struct Account {\n        address account;\n        bool authorized;\n        mapping (bool => Group) groups; //mapping account to bool authorized to bool group\n    }\n\n    struct BuildingBlocks {\n        address dragoEventful;\n        address vaultEventful;\n        address navVerifier;\n        address exchangesAuthority;\n        address casper;\n        mapping (address => bool) initialized;\n    }\n\n    /*\n     * EVENTS\n     */\n    event AuthoritySet(address indexed authority);\n    event WhitelisterSet(address indexed whitelister);\n    event WhitelistedUser(address indexed target, bool approved);\n    event WhitelistedRegistry(address indexed registry, bool approved);\n    event WhitelistedFactory(address indexed factory, bool approved);\n    event WhitelistedVault(address indexed vault, bool approved);\n    event WhitelistedDrago(address indexed drago, bool isWhitelisted);\n    event NewDragoEventful(address indexed dragoEventful);\n    event NewVaultEventful(address indexed vaultEventful);\n    event NewNavVerifier(address indexed navVerifier);\n    event NewExchangesAuthority(address indexed exchangesAuthority);\n\n    /*\n     * MODIFIERS\n     */\n    modifier onlyAdmin {\n        require(msg.sender == owner || isWhitelister(msg.sender));\n        _;\n    }\n\n    modifier onlyWhitelister {\n        require(isWhitelister(msg.sender));\n        _;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows the owner to whitelist an authority\n    /// @param _authority Address of the authority\n    /// @param _isWhitelisted Bool whitelisted\n    function setAuthority(address _authority, bool _isWhitelisted)\n        external\n        onlyOwner\n    {\n        setAuthorityInternal(_authority, _isWhitelisted);\n    }\n\n    /// @dev Allows the owner to whitelist a whitelister\n    /// @param _whitelister Address of the whitelister\n    /// @param _isWhitelisted Bool whitelisted\n    function setWhitelister(address _whitelister, bool _isWhitelisted)\n        external\n        onlyOwner\n    {\n        setWhitelisterInternal(_whitelister, _isWhitelisted);\n    }\n\n    /// @dev Allows a whitelister to whitelist a user\n    /// @param _target Address of the target user\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistUser(address _target, bool _isWhitelisted)\n        external\n        onlyWhitelister\n    {\n        accounts[_target].account = _target;\n        accounts[_target].authorized = _isWhitelisted;\n        accounts[_target].groups[_isWhitelisted].user = _isWhitelisted;\n        types.list.push(List(_target));\n        emit WhitelistedUser(_target, _isWhitelisted);\n    }\n\n    /// @dev Allows an admin to whitelist a drago\n    /// @param _drago Address of the target drago\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistDrago(address _drago, bool _isWhitelisted)\n        external\n        onlyAdmin\n    {\n        accounts[_drago].account = _drago;\n        accounts[_drago].authorized = _isWhitelisted;\n        accounts[_drago].groups[_isWhitelisted].drago = _isWhitelisted;\n        types.list.push(List(_drago));\n        emit WhitelistedDrago(_drago, _isWhitelisted);\n    }\n\n    /// @dev Allows an admin to whitelist a vault\n    /// @param _vault Address of the target vault\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistVault(address _vault, bool _isWhitelisted)\n        external\n        onlyAdmin\n    {\n        accounts[_vault].account = _vault;\n        accounts[_vault].authorized = _isWhitelisted;\n        accounts[_vault].groups[_isWhitelisted].vault = _isWhitelisted;\n        types.list.push(List(_vault));\n        emit WhitelistedVault(_vault, _isWhitelisted);\n    }\n\n    /// @dev Allows an admin to whitelist a registry\n    /// @param _registry Address of the target registry\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistRegistry(address _registry, bool _isWhitelisted)\n        external\n        onlyAdmin\n    {\n        accounts[_registry].account = _registry;\n        accounts[_registry].authorized = _isWhitelisted;\n        accounts[_registry].groups[_isWhitelisted].registry = _isWhitelisted;\n        types.list.push(List(_registry));\n        emit WhitelistedRegistry(_registry, _isWhitelisted);\n    }\n\n    /// @dev Allows an admin to whitelist a factory\n    /// @param _factory Address of the target factory\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistFactory(address _factory, bool _isWhitelisted)\n        external\n        onlyAdmin\n    {\n        accounts[_factory].account = _factory;\n        accounts[_factory].authorized = _isWhitelisted;\n        accounts[_factory].groups[_isWhitelisted].registry = _isWhitelisted;\n        types.list.push(List(_factory));\n        setAuthorityInternal(_factory, _isWhitelisted);\n        emit WhitelistedFactory(_factory, _isWhitelisted);\n    }\n\n    /// @dev Allows the owner to set the drago eventful\n    /// @param _dragoEventful Address of the logs contract\n    function setDragoEventful(address _dragoEventful)\n        external\n        onlyOwner\n    {\n        blocks.dragoEventful = _dragoEventful;\n        emit NewDragoEventful(blocks.dragoEventful);\n    }\n\n    /// @dev Allows the owner to set the vault eventful\n    /// @param _vaultEventful Address of the vault logs contract\n    function setVaultEventful(address _vaultEventful)\n        external\n        onlyOwner\n    {\n        blocks.vaultEventful = _vaultEventful;\n        emit NewVaultEventful(blocks.vaultEventful);\n    }\n\n    /// @dev Allows the owner to set the nav verifier\n    /// @param _navVerifier Address of the verifier\n    function setNavVerifier(address _navVerifier)\n        external\n        onlyOwner\n    {\n        blocks.navVerifier = _navVerifier;\n        emit NewNavVerifier(blocks.navVerifier);\n    }\n\n    /// @dev Allows the owner to set the exchanges authority\n    /// @param _exchangesAuthority Address of the exchanges authority\n    function setExchangesAuthority(address _exchangesAuthority)\n        external\n        onlyOwner\n    {\n        blocks.exchangesAuthority = _exchangesAuthority;\n        emit NewExchangesAuthority(blocks.exchangesAuthority);\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Provides whether a user is whitelisted\n    /// @param _target Address of the target user\n    /// @return Bool is whitelisted\n    function isWhitelistedUser(address _target)\n        external view\n        returns (bool)\n    {\n        return accounts[_target].groups[true].user;\n    }\n\n    /// @dev Provides whether an address is an authority\n    /// @param _authority Address of the target authority\n    /// @return Bool is whitelisted\n    function isAuthority(address _authority)\n        external view\n        returns (bool)\n    {\n        return accounts[_authority].groups[true].authority;\n    }\n\n    /// @dev Provides whether a drago is whitelisted\n    /// @param _drago Address of the target drago\n    /// @return Bool is whitelisted\n    function isWhitelistedDrago(address _drago)\n        external view\n        returns (bool)\n    {\n        return accounts[_drago].groups[true].drago;\n    }\n\n    /// @dev Provides whether a vault is whitelisted\n    /// @param _vault Address of the target vault\n    /// @return Bool is whitelisted\n    function isWhitelistedVault(address _vault)\n        external view\n        returns (bool)\n    {\n        return accounts[_vault].groups[true].vault;\n    }\n\n    /// @dev Provides whether a registry is whitelisted\n    /// @param _registry Address of the target registry\n    /// @return Bool is whitelisted\n    function isWhitelistedRegistry(address _registry)\n        external view\n        returns (bool)\n    {\n        return accounts[_registry].groups[true].registry;\n    }\n\n    /// @dev Provides whether a factory is whitelisted\n    /// @param _factory Address of the target factory\n    /// @return Bool is whitelisted\n    function isWhitelistedFactory(address _factory)\n        external view\n        returns (bool)\n    {\n        return accounts[_factory].groups[true].registry;\n    }\n\n    /// @dev Provides the address of the drago logs contract\n    /// @return Address of the drago logs contract\n    function getDragoEventful()\n        external view\n        returns (address)\n    {\n        return blocks.dragoEventful;\n    }\n\n    /// @dev Provides the address of the vault logs contract\n    /// @return Address of the vault logs contract\n    function getVaultEventful()\n        external view\n        returns (address)\n    {\n        return blocks.vaultEventful;\n    }\n\n    /// @dev Provides the address of the nav verifier\n    /// @return Address of the verifier\n    function getNavVerifier()\n        external view\n        returns (address)\n    {\n        return blocks.navVerifier;\n    }\n\n    /// @dev Provides the address of the exchangee authority\n    /// @return Address of the adapter\n    function getExchangesAuthority()\n        external view\n        returns (address)\n    {\n        return blocks.exchangesAuthority;\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Allows to whitelist an authority\n    /// @param _authority Address of the authority\n    /// @param _isWhitelisted Bool whitelisted\n    function setAuthorityInternal(\n        address _authority,\n        bool _isWhitelisted)\n        internal\n    {\n        accounts[_authority].account = _authority;\n        accounts[_authority].authorized = _isWhitelisted;\n        accounts[_authority].groups[_isWhitelisted].authority = _isWhitelisted;\n        setWhitelisterInternal(_authority, _isWhitelisted);\n        types.list.push(List(_authority));\n        emit AuthoritySet(_authority);\n    }\n\n    /// @dev Allows the owner to whitelist a whitelister\n    /// @param _whitelister Address of the whitelister\n    /// @param _isWhitelisted Bool whitelisted\n    function setWhitelisterInternal(\n        address _whitelister,\n        bool _isWhitelisted)\n        internal\n    {\n        accounts[_whitelister].account = _whitelister;\n        accounts[_whitelister].authorized = _isWhitelisted;\n        accounts[_whitelister].groups[_isWhitelisted].whitelister = _isWhitelisted;\n        types.list.push(List(_whitelister));\n        emit WhitelisterSet(_whitelister);\n    }\n\n    /// @dev Provides whether an address is whitelister\n    /// @param _whitelister Address of the target whitelister\n    /// @return Bool is whitelisted\n    function isWhitelister(address _whitelister)\n        internal view\n        returns (bool)\n    {\n        return accounts[_whitelister].groups[true].whitelister;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/authorities/ExchangesAuthority/ExchangesAuthority.sol": {
			"content": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { Owned } from \"../../../utils/Owned/Owned.sol\";\nimport { ExchangesAuthorityFace } from \"./ExchangesAuthorityFace.sol\";\n\n/// @title Exchanges Authority - A helper contract for the exchange adapters.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract ExchangesAuthority is Owned, ExchangesAuthorityFace {\n\n    BuildingBlocks public blocks;\n    Type public types;\n\n    mapping (address => Account) public accounts;\n\n    struct List {\n        address target;\n    }\n\n    struct Type {\n        string types;\n        List[] list;\n    }\n\n    struct Group {\n        bool whitelister;\n        bool exchange;\n        bool asset;\n        bool authority;\n        bool wrapper;\n        bool proxy;\n    }\n\n    struct Account {\n        address account;\n        bool authorized;\n        mapping (bool => Group) groups; //mapping account to bool authorized to bool group\n    }\n\n    struct BuildingBlocks {\n        address exchangeEventful;\n        address sigVerifier;\n        address casper;\n        mapping (address => bool) initialized;\n        mapping (address => address) adapter;\n        // Mapping of exchange => method => approved\n        mapping (address => mapping (bytes4 => bool)) allowedMethods;\n        mapping (address => mapping (address => bool)) allowedTokens;\n        mapping (address => mapping (address => bool)) allowedWrappers;\n    }\n\n    /*\n     * EVENTS\n     */\n    event AuthoritySet(address indexed authority);\n    event WhitelisterSet(address indexed whitelister);\n    event WhitelistedAsset(address indexed asset, bool approved);\n    event WhitelistedExchange(address indexed exchange, bool approved);\n    event WhitelistedWrapper(address indexed wrapper, bool approved);\n    event WhitelistedProxy(address indexed proxy, bool approved);\n    event WhitelistedMethod(bytes4 indexed method, address indexed adapter, bool approved);\n    event NewSigVerifier(address indexed sigVerifier);\n    event NewExchangeEventful(address indexed exchangeEventful);\n    event NewCasper(address indexed casper);\n\n    /*\n     * MODIFIERS\n     */\n    modifier onlyAdmin {\n        require(msg.sender == owner || isWhitelister(msg.sender));\n        _;\n    }\n\n    modifier onlyWhitelister {\n        require(isWhitelister(msg.sender));\n        _;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows the owner to whitelist an authority\n    /// @param _authority Address of the authority\n    /// @param _isWhitelisted Bool whitelisted\n    function setAuthority(address _authority, bool _isWhitelisted)\n        external\n        onlyOwner\n    {\n        setAuthorityInternal(_authority, _isWhitelisted);\n    }\n\n    /// @dev Allows the owner to whitelist a whitelister\n    /// @param _whitelister Address of the whitelister\n    /// @param _isWhitelisted Bool whitelisted\n    function setWhitelister(address _whitelister, bool _isWhitelisted)\n        external\n        onlyOwner\n    {\n        setWhitelisterInternal(_whitelister, _isWhitelisted);\n    }\n\n    /// @dev Allows a whitelister to whitelist an asset\n    /// @param _asset Address of the token\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistAsset(address _asset, bool _isWhitelisted)\n        external\n        onlyWhitelister\n    {\n        accounts[_asset].account = _asset;\n        accounts[_asset].authorized = _isWhitelisted;\n        accounts[_asset].groups[_isWhitelisted].asset = _isWhitelisted;\n        types.list.push(List(_asset));\n        emit WhitelistedAsset(_asset, _isWhitelisted);\n    }\n\n    /// @dev Allows a whitelister to whitelist an exchange\n    /// @param _exchange Address of the target exchange\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistExchange(address _exchange, bool _isWhitelisted)\n        external\n        onlyWhitelister\n    {\n        accounts[_exchange].account = _exchange;\n        accounts[_exchange].authorized = _isWhitelisted;\n        accounts[_exchange].groups[_isWhitelisted].exchange = _isWhitelisted;\n        types.list.push(List(_exchange));\n        emit WhitelistedExchange(_exchange, _isWhitelisted);\n    }\n\n    /// @dev Allows a whitelister to whitelist an token wrapper\n    /// @param _wrapper Address of the target token wrapper\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistWrapper(address _wrapper, bool _isWhitelisted)\n        external\n        onlyWhitelister\n    {\n        accounts[_wrapper].account = _wrapper;\n        accounts[_wrapper].authorized = _isWhitelisted;\n        accounts[_wrapper].groups[_isWhitelisted].wrapper = _isWhitelisted;\n        types.list.push(List(_wrapper));\n        emit WhitelistedWrapper(_wrapper, _isWhitelisted);\n    }\n\n    /// @dev Allows a whitelister to whitelist a tokenTransferProxy\n    /// @param _tokenTransferProxy Address of the proxy\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistTokenTransferProxy(\n        address _tokenTransferProxy,\n        bool _isWhitelisted)\n        external\n        onlyWhitelister\n    {\n        accounts[_tokenTransferProxy].account = _tokenTransferProxy;\n        accounts[_tokenTransferProxy].authorized = _isWhitelisted;\n        accounts[_tokenTransferProxy].groups[_isWhitelisted].proxy = _isWhitelisted;\n        types.list.push(List(_tokenTransferProxy));\n        emit WhitelistedProxy(_tokenTransferProxy, _isWhitelisted);\n    }\n\n    /// @dev Allows a whitelister to enable trading on a particular exchange\n    /// @param _asset Address of the token\n    /// @param _exchange Address of the exchange\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistAssetOnExchange(\n        address _asset,\n        address _exchange,\n        bool _isWhitelisted)\n        external\n        onlyAdmin\n    {\n        blocks.allowedTokens[_exchange][_asset] = _isWhitelisted;\n        emit WhitelistedAsset(_asset, _isWhitelisted);\n    }\n\n    /// @dev Allows a whitelister to enable assiciate wrappers to a token\n    /// @param _token Address of the token\n    /// @param _wrapper Address of the exchange\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistTokenOnWrapper(address _token, address _wrapper, bool _isWhitelisted)\n        external\n        onlyAdmin\n    {\n        blocks.allowedWrappers[_wrapper][_token] = _isWhitelisted;\n        emit WhitelistedAsset(_token, _isWhitelisted);\n    }\n\n    /// @dev Allows an admin to whitelist a factory\n    /// @param _method Hex of the function ABI\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistMethod(\n        bytes4 _method,\n        address _adapter,\n        bool _isWhitelisted)\n        external\n        onlyAdmin\n    {\n        blocks.allowedMethods[_adapter][_method] = _isWhitelisted;\n        emit WhitelistedMethod(_method, _adapter, _isWhitelisted);\n    }\n\n    /// @dev Allows the owner to set the signature verifier\n    /// @param _sigVerifier Address of the verifier contract\n    function setSignatureVerifier(address _sigVerifier)\n        external\n        onlyOwner\n    {\n        blocks.sigVerifier = _sigVerifier;\n        emit NewSigVerifier(blocks.sigVerifier);\n    }\n\n    /// @dev Allows the owner to set the exchange eventful\n    /// @param _exchangeEventful Address of the exchange logs contract\n    function setExchangeEventful(address _exchangeEventful)\n        external\n        onlyOwner\n    {\n        blocks.exchangeEventful = _exchangeEventful;\n        emit NewExchangeEventful(blocks.exchangeEventful);\n    }\n\n    /// @dev Allows the owner to associate an exchange to its adapter\n    /// @param _exchange Address of the exchange\n    /// @param _adapter Address of the adapter\n    function setExchangeAdapter(address _exchange, address _adapter)\n        external\n        onlyOwner\n    {\n        require(_exchange != _adapter);\n        blocks.adapter[_exchange] = _adapter;\n    }\n\n    /// @dev Allows the owner to set the casper contract\n    /// @param _casper Address of the casper contract\n    function setCasper(address _casper)\n        external\n        onlyOwner\n    {\n        blocks.casper = _casper;\n        blocks.initialized[_casper] = true;\n        emit NewCasper(blocks.casper);\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Provides whether an address is an authority\n    /// @param _authority Address of the target authority\n    /// @return Bool is whitelisted\n    function isAuthority(address _authority)\n        external view\n        returns (bool)\n    {\n        return accounts[_authority].groups[true].authority;\n    }\n\n    /// @dev Provides whether an asset is whitelisted\n    /// @param _asset Address of the target asset\n    /// @return Bool is whitelisted\n    function isWhitelistedAsset(address _asset)\n        external view\n        returns (bool)\n    {\n        return accounts[_asset].groups[true].asset;\n    }\n\n    /// @dev Provides whether an exchange is whitelisted\n    /// @param _exchange Address of the target exchange\n    /// @return Bool is whitelisted\n    function isWhitelistedExchange(address _exchange)\n        external view\n        returns (bool)\n    {\n        return accounts[_exchange].groups[true].exchange;\n    }\n\n    /// @dev Provides whether a token wrapper is whitelisted\n    /// @param _wrapper Address of the target exchange\n    /// @return Bool is whitelisted\n    function isWhitelistedWrapper(address _wrapper)\n        external view\n        returns (bool)\n    {\n        return accounts[_wrapper].groups[true].wrapper;\n    }\n\n    /// @dev Provides whether a proxy is whitelisted\n    /// @param _tokenTransferProxy Address of the proxy\n    /// @return Bool is whitelisted\n    function isWhitelistedProxy(address _tokenTransferProxy)\n        external view\n        returns (bool)\n    {\n        return accounts[_tokenTransferProxy].groups[true].proxy;\n    }\n\n    /// @dev Provides the address of the exchange adapter\n    /// @param _exchange Address of the exchange\n    /// @return Address of the adapter\n    function getExchangeAdapter(address _exchange)\n        external view\n        returns (address)\n    {\n        return blocks.adapter[_exchange];\n    }\n\n    /// @dev Provides the address of the signature verifier\n    /// @return Address of the verifier\n    function getSigVerifier()\n        external view\n        returns (address)\n    {\n        return blocks.sigVerifier;\n    }\n\n    /// @dev Checkes whether a token is allowed on an exchange\n    /// @param _token Address of the token\n    /// @param _exchange Address of the exchange\n    /// @return Bool the token is whitelisted on the exchange\n    function canTradeTokenOnExchange(address _token, address _exchange)\n        external view\n        returns (bool)\n    {\n        return blocks.allowedTokens[_exchange][_token];\n    }\n\n    /// @dev Checkes whether a token is allowed on a wrapper\n    /// @param _token Address of the token\n    /// @param _wrapper Address of the token wrapper\n    /// @return Bool the token is whitelisted on the exchange\n    function canWrapTokenOnWrapper(address _token, address _wrapper)\n        external view\n        returns (bool)\n    {\n        return blocks.allowedWrappers[_wrapper][_token];\n    }\n\n    /// @dev Checkes whether a method is allowed on an exchange\n    /// @param _method Bytes of the function signature\n    /// @param _adapter Address of the exchange\n    /// @return Bool the method is allowed\n    function isMethodAllowed(bytes4 _method, address _adapter)\n        external view\n        returns (bool)\n    {\n        return blocks.allowedMethods[_adapter][_method];\n    }\n\n    /// @dev Checkes whether casper has been inizialized\n    /// @return Bool the casper contract has been initialized\n    function isCasperInitialized()\n        external view\n        returns (bool)\n    {\n        address casper = blocks.casper;\n        return blocks.initialized[casper];\n    }\n\n    /// @dev Provides the address of the casper contract\n    /// @return Address of the casper contract\n    function getCasper()\n        external view\n        returns (address)\n    {\n        return blocks.casper;\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Allows to whitelist an authority\n    /// @param _authority Address of the authority\n    /// @param _isWhitelisted Bool whitelisted\n    function setAuthorityInternal(\n        address _authority,\n        bool _isWhitelisted)\n        internal\n    {\n        accounts[_authority].account = _authority;\n        accounts[_authority].authorized = _isWhitelisted;\n        accounts[_authority].groups[_isWhitelisted].authority = _isWhitelisted;\n        setWhitelisterInternal(_authority, _isWhitelisted);\n        types.list.push(List(_authority));\n        emit AuthoritySet(_authority);\n    }\n\n    /// @dev Allows the owner to whitelist a whitelister\n    /// @param _whitelister Address of the whitelister\n    /// @param _isWhitelisted Bool whitelisted\n    function setWhitelisterInternal(\n        address _whitelister,\n        bool _isWhitelisted)\n        internal\n    {\n        accounts[_whitelister].account = _whitelister;\n        accounts[_whitelister].authorized = _isWhitelisted;\n        accounts[_whitelister].groups[_isWhitelisted].whitelister = _isWhitelisted;\n        types.list.push(List(_whitelister));\n        emit WhitelisterSet(_whitelister);\n    }\n\n    /// @dev Provides whether an address is whitelister\n    /// @param _whitelister Address of the target whitelister\n    /// @return Bool is whitelisted\n    function isWhitelister(address _whitelister)\n        internal view\n        returns (bool)\n    {\n        return accounts[_whitelister].groups[true].whitelister;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/dragoFactory/DragoFactory/DragoFactory.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { DragoRegistryFace as DragoRegistry } from \"../../DragoRegistry/DragoRegistryFace.sol\";\nimport { AuthorityFace as Authority } from \"../../authorities/Authority/AuthorityFace.sol\";\nimport { DragoEventfulFace as DragoEventful } from \"../../DragoEventful/DragoEventfulFace.sol\";\nimport { DragoFactoryLibrary, Drago } from \"../DragoFactoryLibrary/DragoFactoryLibrary.sol\";\nimport { OwnedUninitialized as Owned } from \"../../../utils/Owned/OwnedUninitialized.sol\";\nimport { DragoFactoryFace } from \"./DragoFactoryFace.sol\";\n\n/// @title Drago Factory contract - allows creation of new dragos.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract DragoFactory is Owned, DragoFactoryFace {\n\n    DragoFactoryLibrary.NewDrago private libraryData;\n\n    string public constant VERSION = \"DF 0.5.2\";\n\n    Data private data;\n\n    struct Data {\n        uint256 fee;\n        address dragoRegistry;\n        address payable dragoDao;\n        address authority;\n        mapping(address => address[]) dragos;\n    }\n\n    event DragoCreated(\n        string name,\n        string symbol,\n        address indexed drago,\n        address indexed owner,\n        uint256 dragoId\n    );\n\n    modifier whitelistedFactory(address _authority) {\n        Authority auth = Authority(_authority);\n        if (auth.isWhitelistedFactory(address(this))) _;\n    }\n\n    modifier whenFeePaid {\n        require(msg.value >= data.fee);\n        _;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyDragoDao {\n        require(msg.sender == data.dragoDao);\n        _;\n    }\n\n    constructor(\n        address _registry,\n        address payable _dragoDao,\n        address _authority)\n        public\n    {\n        data.dragoRegistry = _registry;\n        data.dragoDao = _dragoDao;\n        data.authority = _authority;\n        owner = msg.sender;\n    }\n\n    /*\n     * PUBLIC FUNCTIONS\n     */\n    /// @dev allows creation of a new drago\n    /// @param _name String of the name\n    /// @param _symbol String of the symbol\n    /// @return Bool the transaction executed correctly\n    function createDrago(string calldata _name, string calldata _symbol)\n        external\n        payable\n        whenFeePaid\n        returns (bool success)\n    {\n        DragoRegistry registry = DragoRegistry(data.dragoRegistry);\n        uint256 regFee = registry.getFee();\n        uint256 dragoId = registry.dragoCount();\n        require(createDragoInternal(_name, _symbol, msg.sender, dragoId));\n        assert(registry.register.value(regFee)(\n            libraryData.newAddress,\n            _name,\n            _symbol,\n            dragoId,\n            msg.sender)\n        );\n        return true;\n    }\n\n    /// @dev Allows factory owner to update the address of the dao/factory\n    /// @dev Enables manual update of dao for single dragos\n    /// @param _targetDrago Address of the target drago\n    /// @param _dragoDao Address of the new drago dao\n    function setTargetDragoDao(address payable _targetDrago, address _dragoDao)\n        external\n        onlyOwner\n    {\n        Drago drago = Drago(_targetDrago);\n        drago.changeDragoDao(_dragoDao);\n    }\n\n    /// @dev Allows drago dao/factory to update its address\n    /// @dev Creates internal record\n    /// @param _newDragoDao Address of the drago dao\n    function changeDragoDao(address payable _newDragoDao)\n        external\n        onlyDragoDao\n    {\n        data.dragoDao = _newDragoDao;\n    }\n\n    /// @dev Allows owner to update the registry\n    /// @param _newRegistry Address of the new registry\n    function setRegistry(address _newRegistry)\n        external\n        onlyOwner\n    {\n        data.dragoRegistry = _newRegistry;\n    }\n\n    /// @dev Allows owner to set the address which can collect creation fees\n    /// @param _dragoDao Address of the new drago dao/factory\n    function setBeneficiary(address payable _dragoDao)\n        external\n        onlyOwner\n    {\n        data.dragoDao = _dragoDao;\n    }\n\n    /// @dev Allows owner to set the drago creation fee\n    /// @param _fee Value of the fee in wei\n    function setFee(uint256 _fee)\n        external\n        onlyOwner\n    {\n        data.fee = _fee;\n    }\n\n    /// @dev Allows owner to collect fees\n    function drain()\n        external\n        onlyOwner\n    {\n        data.dragoDao.transfer(address(this).balance);\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Returns the address of the pool registry\n    /// @return Address of the registry\n    function getRegistry()\n        external view\n        returns (address)\n    {\n        return (data.dragoRegistry);\n    }\n\n    /// @dev Returns administrative data for this factory\n    /// @return Address of the drago dao\n    /// @return String of the version\n    /// @return Number of the next drago from the registry\n    function getStorage()\n        external\n        view\n        returns (\n            address dragoDao,\n            string memory version,\n            uint256 nextDragoId\n        )\n    {\n        return (\n            dragoDao = data.dragoDao,\n            version = VERSION,\n            nextDragoId = getNextId()\n        );\n    }\n\n    /// @dev Returns the address of the logger contract\n    /// @dev Queries from authority contract\n    /// @return Address of the eventful contract\n    function getEventful()\n        external view\n        returns (address)\n    {\n        Authority auth = Authority(data.authority);\n        return auth.getDragoEventful();\n    }\n\n    /// @dev Returns an array of dragos the owner has created\n    /// @param _owner Address of the queried owner\n    /// @return Array of drago addresses\n    function getDragosByAddress(address _owner)\n        external\n        view\n        returns (address[] memory)\n    {\n        return data.dragos[_owner];\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Creates a drago and routes to eventful\n    /// @param _name String of the name\n    /// @param _symbol String of the symbol\n    /// @param _owner Address of the owner\n    /// @param _dragoId Number of the new drago Id\n    /// @return Bool the transaction executed correctly\n    function createDragoInternal(\n        string memory _name,\n        string memory _symbol,\n        address _owner,\n        uint256 _dragoId)\n        internal\n        returns (bool success)\n    {\n        Authority auth = Authority(data.authority);\n        require(DragoFactoryLibrary.createDrago(\n            libraryData,\n            _name,\n            _symbol,\n            _owner,\n            _dragoId,\n            data.authority)\n        );\n        data.dragos[_owner].push(libraryData.newAddress);\n        DragoEventful events = DragoEventful(auth.getDragoEventful());\n        require(events.createDrago(\n            _owner,\n            libraryData.newAddress,\n            _name,\n            _symbol,\n            _dragoId)\n        );\n        auth.whitelistDrago(libraryData.newAddress, true);\n        auth.whitelistUser(_owner, true);\n        emit DragoCreated(_name, _symbol, libraryData.newAddress, _owner, _dragoId);\n        return true;\n    }\n\n    /// @dev Returns the next Id for a drago\n    /// @return Number of the next Id from the registry\n    function getNextId()\n        internal view\n        returns (uint256 nextDragoId)\n    {\n        DragoRegistry registry = DragoRegistry(data.dragoRegistry);\n        nextDragoId = registry.dragoCount();\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/dragoFactory/DragoFactoryLibrary/DragoFactoryLibrary.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { AuthorityFace as Authority } from \"../../authorities/Authority/AuthorityFace.sol\";\nimport { Drago } from \"../../Drago/Drago.sol\";\n\n/// @title Drago Factory library - Reduces size of drago factory.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\nlibrary DragoFactoryLibrary {\n\n    struct NewDrago {\n        string name;\n        string symbol;\n        uint256 dragoId;\n        address owner;\n        address newAddress;\n    }\n\n    /// @dev Allows an approved factory to create new dragos\n    /// @param _name String of the name\n    /// @param _symbol String of the symbol\n    /// @param _dragoId Number of Id of the drago from the registry\n    /// @param _authority Address of the respective authority\n    /// @return Bool the function executed\n    function createDrago(\n        NewDrago storage self,\n        string memory _name,\n        string memory _symbol,\n        address _owner,\n        uint256 _dragoId,\n        address _authority)\n        internal\n        returns (bool success)\n    {\n        Drago drago = new Drago(\n            self.name = _name,\n            self.symbol = _symbol,\n            self.dragoId = _dragoId,\n            self.owner = _owner,\n            _authority\n        );\n        self.newAddress = address(drago);\n        return true;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/dragoFactory/DragoFactory/DragoFactoryFace.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Drago Factory Interface - Allows external interaction with Drago Factory.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface DragoFactoryFace {\n\n    event DragoCreated(string name, string symbol, address indexed drago, address indexed owner, uint256 dragoId);\n\n    function createDrago(string calldata _name, string calldata _symbol) external payable returns (bool success);\n    function setTargetDragoDao(address payable _targetDrago, address _dragoDao) external;\n    function changeDragoDao(address payable _newDragoDao) external;\n    function setRegistry(address _newRegistry) external;\n    function setBeneficiary(address payable _dragoDao) external;\n    function setFee(uint256 _fee) external;\n    function drain() external;\n\n    function getRegistry() external view returns (address);\n    function getStorage() external view returns (address dragoDao, string memory version, uint256 nextDragoId);\n    function getEventful() external view returns (address);\n    function getDragosByAddress(address _owner) external view returns (address[] memory);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/extensions/NavVerifier/NavVerifier.sol": {
			"content": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Nav Verifier - Allows to check if new NAV comes from approved authority.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract NavVerifier {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param sellPrice Price in wei\n    /// @param buyPrice Price in wei\n    /// @param signaturevaliduntilBlock Number of blocks till price expiry\n    /// @param hash Message hash that is signed.\n    /// @param signedData Proof of nav validity.\n    /// @notice mock function which returns true\n    function isValidNav(\n        /* solhint-disable */\n        uint256 sellPrice,\n        uint256 buyPrice,\n        uint256 signaturevaliduntilBlock,\n        bytes32 hash,\n        bytes calldata signedData\n        /* solhint-disable */\n    )\n        external\n        view\n        returns (bool isValid)\n    {\n        return isValid = true;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/extensions/SigVerifier/SigVerifier.sol": {
			"content": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { LibBytes } from \"../../../utils/LibBytes/LibBytes.sol\";\nimport { ERC20Face as RigoToken } from \"../../../tokens/ERC20/ERC20.sol\";\nimport { Drago } from \"../../Drago/Drago.sol\";\nimport { ExchangesAuthorityFace as ExchangesAuthority } from \"../../authorities/ExchangesAuthority/ExchangesAuthorityFace.sol\";\n\n/// @title SigVerifier - Allows verify whether a transaction has been signed correctly.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract SigVerifier {\n\n    using LibBytes for bytes;\n\n    address public GRGTokenAddress;\n\n    constructor(\n        address _GRGTokenAddress)\n        public\n    {\n        GRGTokenAddress = _GRGTokenAddress;\n    }\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    /// @notice mock function whici returns false\n    function isValidSignature(\n        /* solhint-disable */\n        bytes32 hash,\n        bytes calldata signature\n        /* solhint-disable */\n    )\n        external\n        view\n        returns (bool isValid)\n    {\n        address recoveredEIP712 = returnRecoveredEIP712Internal(hash, signature);\n        address recoveredETHSIGN = returnRecoveredETHSIGNInternal(hash, signature);\n\n        if (recoveredEIP712 != address(0)) {\n            require(\n                isValid = recoveredEIP712 == Drago(address(msg.sender)).owner(),\n                \"EIP712_SIGNER_INVALID\"\n            );\n\n            // if operator holds at least 100 GRG, valid, otherwise require whitelisted signer\n            if (RigoToken(GRGTokenAddress).balanceOf(Drago(address(msg.sender)).owner()) >= 100 * 10 ** 18) {\n                isValid = true;\n\n            } else {\n                require(\n                    ExchangesAuthority(\n                        Drago(address(msg.sender)).getExchangesAuth()\n                    )\n                    .getExchangeAdapter(address(tx.origin)) != address(0),\n                    \"VALID_EIP712_BUT_ORIGIN_NOT_WHITELISTED\"\n                );\n            }\n\n        } else if (recoveredETHSIGN != address(0)) {\n            require(\n                isValid = recoveredETHSIGN == Drago(address(msg.sender)).owner(),\n                \"EIP712_SIGNER_INVALID\"\n            );\n\n            // if operator holds at least 100 GRG, valid, otherwise require whitelisted signer\n            if (RigoToken(GRGTokenAddress).balanceOf(Drago(address(msg.sender)).owner()) >= 100 * 10 ** 18) {\n                isValid = true;\n\n            } else {\n                require(\n                    ExchangesAuthority(\n                        Drago(address(msg.sender)).getExchangesAuth()\n                    )\n                    .getExchangeAdapter(address(tx.origin)) != address(0),\n                    \"VALID_ETHSIGN_BUT_ORIGIN_NOT_WHITELISTED\"\n                );\n            }\n        }\n\n        revert(\"SIGNATURE_INVALID2\");\n    }\n\n    function returnRecoveredEIP712(\n        bytes32 hash,\n        bytes calldata signature)\n        external\n        pure\n        returns (address recovered)\n    {\n        return returnRecoveredEIP712Internal(hash, signature);\n    }\n\n    function returnRecoveredETHSIGN(\n        bytes32 hash,\n        bytes calldata signature)\n        external\n        pure\n        returns (address recovered)\n    {\n        return returnRecoveredETHSIGNInternal(hash, signature);\n    }\n\n    // INTERNAL FUNCTIONS\n\n    function returnRecoveredEIP712Internal(\n        bytes32 hash,\n        bytes memory signature)\n        internal\n        pure\n        returns (address recovered)\n    {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n\n        v = uint8(signature[0]);\n        r = signature.readBytes32(1);\n        s = signature.readBytes32(33);\n\n        recovered = ecrecover(\n                hash,\n                v,\n                r,\n                s\n            );\n        return recovered;\n    }\n\n    function returnRecoveredETHSIGNInternal(\n        bytes32 hash,\n        bytes memory signature)\n        internal\n        pure\n        returns (address recovered)\n    {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n\n        v = uint8(signature[0]);\n        r = signature.readBytes32(1);\n        s = signature.readBytes32(33);\n\n        recovered = ecrecover(\n                keccak256(abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    hash\n                )),\n                v,\n                r,\n                s\n            );\n        return recovered;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/LibBytes/LibBytes.sol": {
			"content": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.4.25;\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to <= b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to <= b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/tokens/ERC20/ERC20.sol": {
			"content": "pragma solidity >=0.5.0 <0.6.0;\n\nimport { ERC20Face } from \"./ERC20Face.sol\";\n\ncontract ERC20 is ERC20Face {\n\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool success)\n    {\n        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        external\n        returns (bool success)\n    {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool success)\n    {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256)\n    {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    uint256 public totalSupply;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/extensions/adapters/AWeth.sol": {
			"content": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { Drago } from \"../../Drago/Drago.sol\";\nimport { AuthorityFace as Authority } from \"../../authorities/Authority/AuthorityFace.sol\";\nimport { ExchangesAuthorityFace as ExchangesAuthority } from \"../../authorities/ExchangesAuthority/ExchangesAuthorityFace.sol\";\nimport { WETH9 } from \"../../../tokens/WETH9/WETH9.sol\";\n\n/// @title Weth adapter - A helper to wrap eth to the 0x wrapper token.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract AWeth {\n\n    /// @dev allows a manager to deposit eth to an approved exchange/wrap eth\n    /// @param wrapper Address of the target exchange\n    /// @param amount Value of the Eth in wei\n    function wrapEth(\n        address payable wrapper,\n        uint256 amount)\n        external\n    {\n        require(\n            Drago(\n                address(uint160(address(this)))\n            )\n            .owner() == msg.sender\n        );\n        require(\n            ExchangesAuthority(\n                Drago(\n                    address(uint160(address(this)))\n                )\n                .getExchangesAuth()\n            )\n            .isWhitelistedWrapper(wrapper)\n        );\n        require(\n            ExchangesAuthority(\n                Drago(\n                    address(uint160(address(this)))\n                )\n                .getExchangesAuth()\n            )\n            .canWrapTokenOnWrapper(address(0), wrapper)\n        );\n        WETH9(wrapper).deposit.value(amount)();\n    }\n\n    /// @dev allows a manager to withdraw ETH from WETH9\n    /// @param wrapper Address of the weth9 contract\n    /// @param amount Value of the Eth in wei\n    function unwrapEth(\n        address payable wrapper,\n        uint256 amount)\n        external\n    {\n        require(\n            Drago(\n                address(uint160(address(this)))\n            )\n            .owner() == msg.sender\n        );\n        require(\n            ExchangesAuthority(\n                Drago(\n                    address(uint160(address(this)))\n                )\n                .getExchangesAuth()\n            )\n            .isWhitelistedWrapper(wrapper)\n        );\n        require(\n            ExchangesAuthority(\n                Drago(\n                    address(uint160(address(this)))\n                )\n                .getExchangesAuth()\n            )\n            .canWrapTokenOnWrapper(address(0), wrapper)\n        );\n\n        WETH9(wrapper).withdraw(amount);\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/tokens/WETH9/WETH9.sol": {
			"content": "// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// solhint-disable\npragma solidity >=0.4.18 <0.6.0;\n\ncontract WETH9 {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed src, address indexed guy, uint wad);\n    event  Transfer(address indexed src, address indexed dst, uint wad);\n    event  Deposit(address indexed dst, uint wad);\n    event  Withdrawal(address indexed src, uint wad);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    function() external payable {\n        deposit();\n    }\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n*/\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/vaultFactory/VaultFactory/VaultFactory.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { DragoRegistryFace as DragoRegistry } from \"../../DragoRegistry/DragoRegistryFace.sol\";\nimport { AuthorityFace as Authority } from \"../../authorities/Authority/AuthorityFace.sol\";\nimport { VaultEventfulFace as VaultEventful } from \"../../VaultEventful/VaultEventfulFace.sol\";\nimport { VaultFactoryLibrary, Vault } from \"../VaultFactoryLibrary/VaultFactoryLibrary.sol\";\nimport { OwnedUninitialized as Owned } from \"../../../utils/Owned/OwnedUninitialized.sol\";\nimport { VaultFactoryFace } from \"./VaultFactoryFace.sol\";\n\n/// @title Vault Factory contract - allows creation of new vaults.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract VaultFactory is Owned, VaultFactoryFace {\n\n    VaultFactoryLibrary.NewVault private libraryData;\n\n    string public constant VERSION = \"VF 0.5.2\";\n\n    Data private data;\n\n    struct Data {\n        uint256 fee;\n        address vaultRegistry;\n        address payable vaultDao;\n        address authority;\n        mapping(address => address[]) vaults;\n    }\n\n    event VaultCreated(\n        string name,\n        string symbol,\n        address indexed vault,\n        address indexed owner,\n        uint256 vaultId\n    );\n\n    modifier whitelistedFactory(address _authority) {\n        Authority auth = Authority(_authority);\n        require(auth.isWhitelistedFactory(address(this)));\n        _;\n    }\n\n    modifier whenFeePaid {\n        require(msg.value >= data.fee);\n        _;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyVaultDao {\n        require(msg.sender == data.vaultDao);\n        _;\n    }\n\n    constructor(\n        address _registry,\n        address payable _vaultDao,\n        address _authority)\n        public\n    {\n        data.vaultRegistry = _registry;\n        data.vaultDao = _vaultDao;\n        data.authority = _authority;\n        owner = msg.sender;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev allows creation of a new vault\n    /// @param _name String of the name\n    /// @param _symbol String of the symbol\n    /// @return Bool the transaction executed correctly\n    function createVault(string calldata _name, string calldata _symbol)\n        external\n        payable\n        whenFeePaid\n        returns (bool success)\n    {\n        DragoRegistry registry = DragoRegistry(data.vaultRegistry);\n        uint256 regFee = registry.getFee();\n        uint256 vaultId = registry.dragoCount();\n        require(createVaultInternal(_name, _symbol, msg.sender, vaultId));\n        assert(registry.register.value(regFee)(\n            libraryData.newAddress,\n            _name,\n            _symbol,\n            vaultId,\n            msg.sender)\n        );\n        return true;\n    }\n\n    /// @dev Allows factory owner to update the address of the dao/factory\n    /// @dev Enables manual update of dao for single vaults\n    /// @param _targetVault Address of the target vault\n    /// @param _vaultDao Address of the new vault dao\n    function setTargetVaultDao(address _targetVault, address _vaultDao)\n        external\n        onlyOwner\n    {\n        Vault vault = Vault(_targetVault);\n        vault.changeVaultDao(_vaultDao);\n    }\n\n    /// @dev Allows vault dao/factory to update its address\n    /// @dev Creates internal record\n    /// @param _newVaultDao Address of the vault dao\n    function changeVaultDao(address payable _newVaultDao)\n        external\n        onlyVaultDao\n    {\n        data.vaultDao = _newVaultDao;\n    }\n\n    /// @dev Allows owner to update the registry\n    /// @param _newRegistry Address of the new registry\n    function setRegistry(address _newRegistry)\n        external\n        onlyOwner\n    {\n        data.vaultRegistry = _newRegistry;\n    }\n\n    /// @dev Allows owner to set the address which can collect creation fees\n    /// @param _vaultDao Address of the new vault dao/factory\n    function setBeneficiary(address payable _vaultDao)\n        external\n        onlyOwner\n    {\n        data.vaultDao = _vaultDao;\n    }\n\n    /// @dev Allows owner to set the vault creation fee\n    /// @param _fee Value of the fee in wei\n    function setFee(uint256 _fee)\n        external\n        onlyOwner\n    {\n        data.fee = _fee;\n    }\n\n    /// @dev Allows owner to collect fees\n    function drain()\n        external\n        onlyOwner\n    {\n        data.vaultDao.transfer(address(this).balance);\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Returns the address of the pool registry\n    /// @return Address of the registry\n    function getRegistry()\n        external view\n        returns (address)\n    {\n        return (data.vaultRegistry);\n    }\n\n    /// @dev Returns administrative data for this factory\n    /// @return Address of the vault dao\n    /// @return String of the version\n    /// @return Number of the next vault from the registry\n    function getStorage()\n        external view\n        returns (\n            address vaultDao,\n            string memory version,\n            uint256 nextVaultId\n        )\n    {\n        return (\n            vaultDao = data.vaultDao,\n            version = VERSION,\n            nextVaultId = getNextId()\n        );\n    }\n\n    /// @dev Returns the address of the logger contract\n    /// @dev Queries from authority contract\n    /// @return Address of the eventful contract\n    function getEventful()\n        external view\n        returns (address)\n    {\n        Authority auth = Authority(data.authority);\n        return auth.getVaultEventful();\n    }\n\n    /// @dev Returns an array of vaults the owner has created\n    /// @param _owner Address of the queried owner\n    /// @return Array of vault addresses\n    function getVaultsByAddress(address _owner)\n        external view\n        returns (address[] memory)\n    {\n        return data.vaults[_owner];\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Creates a vault and routes to eventful\n    /// @param _name String of the name\n    /// @param _symbol String of the symbol\n    /// @param _owner Address of the owner\n    /// @param _vaultId Number of the new vault Id\n    /// @return Bool the transaction executed correctly\n    function createVaultInternal(\n        string memory _name,\n        string memory _symbol,\n        address _owner,\n        uint256 _vaultId)\n        internal\n        returns (bool success)\n    {\n        Authority auth = Authority(data.authority);\n        require(VaultFactoryLibrary.createVault(\n            libraryData,\n            _name,\n            _symbol,\n            _owner,\n            _vaultId,\n            data.authority)\n        );\n        data.vaults[_owner].push(libraryData.newAddress);\n        VaultEventful events = VaultEventful(auth.getVaultEventful());\n        require(events.createVault(\n            _owner,\n            libraryData.newAddress,\n            _name,\n            _symbol,\n            _vaultId)\n        );\n        auth.whitelistVault(libraryData.newAddress, true);\n        auth.whitelistUser(_owner, true);\n        emit VaultCreated(_name, _symbol, libraryData.newAddress, _owner, _vaultId);\n        return true;\n    }\n\n    /// @dev Returns the next Id for a vault\n    /// @return Number of the next Id from the registry\n    function getNextId()\n        internal view\n        returns (uint256 nextVaultId)\n    {\n        DragoRegistry registry = DragoRegistry(data.vaultRegistry);\n        nextVaultId = registry.dragoCount();\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/vaultFactory/VaultFactoryLibrary/VaultFactoryLibrary.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { AuthorityFace as Authority } from \"../../authorities/Authority/AuthorityFace.sol\";\nimport { Vault } from \"../../Vault/Vault.sol\";\n\n/// @title Vault Factory library - Reduces size of vault factory.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\nlibrary VaultFactoryLibrary {\n\n    struct NewVault {\n        string name;\n        string symbol;\n        uint256 vaultId;\n        address owner;\n        address newAddress;\n    }\n\n    /// @dev Allows an approved factory to create new vaults\n    /// @param _name String of the name\n    /// @param _symbol String of the symbol\n    /// @param _vaultId Number of Id of the vault from the registry\n    /// @param _authority Address of the respective authority\n    /// @return Bool the function executed\n    function createVault(\n        NewVault storage self,\n        string memory _name,\n        string memory _symbol,\n        address _owner,\n        uint256 _vaultId,\n        address _authority)\n        internal\n        returns (bool success)\n    {\n        Vault vault = new Vault(\n            self.name = _name,\n            self.symbol = _symbol,\n            self.vaultId = _vaultId,\n            self.owner = _owner,\n            _authority\n        );\n        self.newAddress = address(vault);\n        return true;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/vaultFactory/VaultFactory/VaultFactoryFace.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Vault Factory Interface - Allows external interaction with Vault Factory.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface VaultFactoryFace {\n\n    event VaultCreated(string name, string symbol, address indexed vault, address indexed owner, uint256 vaultId);\n\n    function createVault(string calldata _name, string calldata _symbol) external payable returns (bool success);\n    function setTargetVaultDao(address _targetVault, address _vaultDao) external;\n    function changeVaultDao(address payable _newVaultDao) external;\n    function setRegistry(address _newRegistry) external;\n    function setBeneficiary(address payable _vaultDao) external;\n    function setFee(uint256 _fee) external;\n    function drain() external;\n\n    function getRegistry() external view returns (address);\n    function getStorage() external view returns (address vaultDao, string memory version, uint256 nextVaultId);\n    function getEventful() external view returns (address);\n    function getVaultsByAddress(address _owner) external view returns (address[] memory);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/rigoToken/RigoToken/RigoToken.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { SafeMath } from \"../../utils/SafeMath/SafeMath.sol\";\nimport { UnlimitedAllowanceToken } from \"../../tokens/UnlimitedAllowanceToken/UnlimitedAllowanceToken.sol\";\n\n/// @title Rigo Token - Rules of the Rigo token.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n/// @notice UnlimitedAllowanceToken is ERC20\ncontract RigoToken is UnlimitedAllowanceToken, SafeMath {\n\n    string constant public name = \"Rigo Token\";\n    string constant public symbol = \"GRG\";\n    uint8 constant public decimals = 18;\n\n    uint256 public totalSupply = 10**25; // 10 million tokens, 18 decimal places\n    address public minter;\n    address public rigoblock;\n\n    /*\n     * EVENTS\n     */\n    event TokenMinted(address indexed recipient, uint256 amount);\n\n    /*\n     * MODIFIERS\n     */\n    modifier onlyMinter {\n        require(msg.sender == minter);\n        _;\n    }\n\n    modifier onlyRigoblock {\n        require(msg.sender == rigoblock);\n        _;\n    }\n\n    constructor(address _setMinter, address _setRigoblock) public {\n        minter = _setMinter;\n        rigoblock = _setRigoblock;\n        balances[msg.sender] = totalSupply;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows minter to create new tokens\n    /// @param _recipient Address of who receives new tokens\n    /// @param _amount Number of new tokens\n    function mintToken(\n        address _recipient,\n        uint256 _amount)\n        external\n        onlyMinter\n    {\n        balances[_recipient] = safeAdd(balances[_recipient], _amount);\n        totalSupply = safeAdd(totalSupply, _amount);\n        emit TokenMinted(_recipient, _amount);\n    }\n\n    /// @dev Allows rigoblock dao to change minter\n    /// @param _newAddress Address of the new minter\n    function changeMintingAddress(address _newAddress)\n        external\n        onlyRigoblock\n    {\n        minter = _newAddress;\n    }\n\n    /// @dev Allows rigoblock dao to upgrade dao\n    /// @param _newAddress Address of the new rigoblock dao\n    function changeRigoblockAddress(address _newAddress)\n        external\n        onlyRigoblock\n    {\n        rigoblock = _newAddress;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/SafeMath/SafeMath.sol": {
			"content": "pragma solidity >=0.4.22 <0.8.0;\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/tokens/UnlimitedAllowanceToken/UnlimitedAllowanceToken.sol": {
			"content": "pragma solidity 0.5.0;\n\nimport { ERC20 } from \"../ERC20/ERC20.sol\";\n\ncontract UnlimitedAllowanceToken is ERC20 {\n\n    uint256 constant MAX_UINT = 2**256 - 1;\n\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited allowance.\n    /// @param _from Address to transfer from.\n    /// @param _to Address to transfer to.\n    /// @param _value Amount to transfer.\n    /// @return Success of transfer.\n    function transferFrom(address _from, address _to, uint256 _value)\n        external\n        returns (bool)\n    {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(\n            balances[_from] >= _value\n            && allowance >= _value\n            && balances[_to] + _value >= balances[_to]\n        );\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/AbiEncoder/AbiEncoder.sol": {
			"content": "/*\n\n Copyright 2019 RigoBlock.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title ABI Encoder - return an array of encoded parameters.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\ncontract AbiEncoder {\n\n    struct HandlerMockOrder {\n        uint256 orderAmount;\n    }\n\n    struct ZeroExOrder {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n        bytes signature;\n    }\n\n    struct TotleOrder {\n        address exchangeHandler;\n        bytes genericPayload;\n    }\n\n    struct TotleTrade {\n        bool isSell;\n        address tokenAddress;\n        uint256 tokenAmount;\n        bool optionalTrade;\n        uint256 minimumExchangeRate;\n        uint256 minimumAcceptableTokenAmount;\n        TotleOrder[] orders;\n    }\n\n/*\n    /// @dev Gets the Abi encoded bytes array of an integer.\n    /// @param orderAmount integer of amount.\n    /// @return Byte array of the ABI encoded struct.\n    function abiEncodeHandlerMockOrder(uint256 orderAmount)\n        external\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        HandlerMockOrder memory order;\n        order.orderAmount = orderAmount;\n        encodedOrder = abi.encode(order);\n        return encodedOrder;\n    }\n*/\n\n/*\n    // @notice: following structs not supported yet\n    // @notice: pragma ABIEncoderV2 prompts stack-too-deep error\n    function abiEncodePackedHandlerMockOrder(uint256 orderAmount)\n        external\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        HandlerMockOrder memory order;\n        order.orderAmount = orderAmount;\n        encodedOrder = abi.encodePacked(order);\n        return encodedOrder;\n    }\n*/\n\n    function abiEncodeZeroExOrder(\n        address makerAddress,\n        address takerAddress,\n        address feeRecipientAddress,\n        address senderAddress,\n        uint256 makerAssetAmount,\n        uint256 takerAssetAmount,\n        uint256 makerFee,\n        uint256 takerFee,\n        uint256 expirationTimeSeconds,\n        // uint256 salt,\n        // bytes makerAssetData,\n        bytes calldata takerAssetData,\n        bytes calldata signature)\n        external\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        return encodedOrder = abi.encode(\n                makerAddress,\n                takerAddress,\n                feeRecipientAddress,\n                senderAddress,\n                makerAssetAmount,\n                takerAssetAmount,\n                makerFee,\n                takerFee,\n                expirationTimeSeconds,\n                //salt,\n                //makerAssetData,\n                takerAssetData,\n                signature\n        );\n    }\n/*\n    function abiEncodePackedZeroExOrder(\n        address makerAddress,\n        address takerAddress,\n        address feeRecipientAddress,\n        address senderAddress,\n        uint256 makerAssetAmount,\n        uint256 takerAssetAmount,\n        uint256 makerFee,\n        uint256 takerFee,\n        uint256 expirationTimeSeconds,\n        uint256 salt,\n        bytes memory makerAssetData,\n        bytes memory takerAssetData)\n        public\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        ZeroExOrder memory order;\n        order.makerAddress = makerAddress;\n        order.takerAddress = takerAddress;\n        order.feeRecipientAddress = feeRecipientAddress;\n        order.senderAddress = senderAddress;\n        order.makerAssetAmount = makerAssetAmount;\n        order.takerAssetAmount = takerAssetAmount;\n        order.makerFee = makerFee;\n        order.takerFee = takerFee;\n        order.expirationTimeSeconds = expirationTimeSeconds;\n        order.salt = salt;\n        order.makerAssetData = makerAssetData;\n        order.takerAssetData = takerAssetData;\n        encodedOrder = abi.encodePacked(\n            \"ZeroExOrder(\",\n                \"address makerAddress,\",\n                \"address takerAddress,\",\n                \"address feeRecipientAddress,\",\n                \"address senderAddress,\",\n                \"uint256 makerAssetAmount,\",\n                \"uint256 takerAssetAmount,\",\n                \"uint256 makerFee,\",\n                \"uint256 takerFee,\",\n                \"uint256 expirationTimeSeconds,\",\n                \"uint256 salt,\",\n                \"bytes makerAssetData,\",\n                \"bytes takerAssetData\",\n            \")\"\n        );\n        return encodedOrder;\n    }\n\n    function abiEncodeTotleOrder(\n        address exchangeHandler,\n        bytes memory genericPayload)\n        public\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        TotleOrder memory order;\n        order.exchangeHandler = exchangeHandler;\n        order.genericPayload = genericPayload;\n        encodedOrder = abi.encodePacked(\n            \"TotleOrder(\",\n                \"address exchangeHandler,\",\n                \"bytes genericPayload,\",\n            \")\"\n        );\n    }\n\n    function abiEncodePackedTotleOrder(\n        address exchangeHandler,\n        bytes memory genericPayload)\n        public\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        TotleOrder memory order;\n        order.exchangeHandler = exchangeHandler;\n        order.genericPayload = genericPayload;\n        encodedOrder = abi.encodePacked(\n            \"TotleOrder(\",\n                \"address exchangeHandler,\",\n                \"bytes genericPayload,\",\n            \")\"\n        );\n        return encodedOrder;\n    }\n\n    // @notice the following two functions require ABIencoderV2, which is not optimized\n    // @notice switch to ABIencoderV2 results in stack-too-deep error\n    function abiEncodeTotleTrade(\n        bool isSell,\n        address tokenAddress,\n        uint256 tokenAmount,\n        bool optionalTrade,\n        uint256 minimumExchangeRate,\n        uint256 minimumAcceptableTokenAmount,\n        TotleOrder[] memory orders)\n        public\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        TotleTrade memory order;\n        order.isSell = isSell;\n        order.tokenAddress = tokenAddress;\n        order.tokenAmount = tokenAmount;\n        order.optionalTrade = optionalTrade;\n        order.minimumExchangeRate = minimumExchangeRate;\n        order.minimumAcceptableTokenAmount = minimumAcceptableTokenAmount;\n        order.orders = orders;\n        encodedOrder = abi.encodePacked(\n            \"TotleTrade(\",\n                \"bool isSell,\",\n                \"address tokenAddress,\",\n                \"uint256 tokenAmount,\",\n                \"bool optionalTrade,\",\n                \"uint256 minimumExchangeRate,\",\n                \"uint256 minimumAcceptableTokenAmount,\",\n                \"TotleOrder[] orders,\",\n            \")\"\n        );\n        return encodedOrder;\n    }\n\n    function abiEncodePackedTotleTrade(\n        bool isSell,\n        address tokenAddress,\n        uint256 tokenAmount,\n        bool optionalTrade,\n        uint256 minimumExchangeRate,\n        uint256 minimumAcceptableTokenAmount,\n        TotleOrder[] memory orders)\n        public\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        TotleTrade memory order;\n        order.isSell = isSell;\n        order.tokenAddress = tokenAddress;\n        order.tokenAmount = tokenAmount;\n        order.optionalTrade = optionalTrade;\n        order.minimumExchangeRate = minimumExchangeRate;\n        order.minimumAcceptableTokenAmount = minimumAcceptableTokenAmount;\n        order.orders = orders;\n        encodedOrder = abi.encodePacked(\n            \"TotleTrade(\",\n                \"bool isSell,\",\n                \"address tokenAddress,\",\n                \"uint256 tokenAmount,\",\n                \"bool optionalTrade,\",\n                \"uint256 minimumExchangeRate,\",\n                \"uint256 minimumAcceptableTokenAmount,\",\n                \"TotleOrder[] orders,\",\n            \")\"\n        );\n        return encodedOrder;\n    }\n*/\n}\n"
		}
	},
	"settings": {
		"remappings": [],
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"outputSelection": {
			"*": {
				"*": [
					"abi",
					"devdoc",
					"evm.bytecode.object",
					"evm.bytecode.sourceMap",
					"evm.deployedBytecode.object",
					"evm.deployedBytecode.sourceMap"
				]
			}
		},
		"version": "0.5.0+commit.1d4f565a"
	}
}