{
	"schemaVersion": "2.0.0",
	"contractName": "ZeroExExchangeHandler",
	"compilerOutput": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"name": "genericPayload",
						"type": "bytes"
					},
					{
						"name": "availableToSpend",
						"type": "uint256"
					},
					{
						"name": "targetAmount",
						"type": "uint256"
					},
					{
						"name": "targetAmountIsSource",
						"type": "bool"
					}
				],
				"name": "performOrder",
				"outputs": [
					{
						"name": "amountSpentOnOrder",
						"type": "uint256"
					},
					{
						"name": "amountReceivedFromOrder",
						"type": "uint256"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_token",
						"type": "address"
					},
					{
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawToken",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "exchange",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawETH",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_exchange",
						"type": "address"
					},
					{
						"name": "_weth",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"payable": true,
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "previousOwner",
						"type": "address"
					}
				],
				"name": "OwnershipRenounced",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"constructor": {
					"params": {
						"_exchange": "Address of the IExchangeCore exchange"
					}
				},
				"pause()": {
					"details": "called by the owner to pause, triggers stopped state"
				},
				"paused()": {
					"return": "true if the contract is paused, false otherwise."
				},
				"renounceOwnership()": {
					"details": "Allows the current owner to relinquish control of the contract."
				},
				"transferOwnership(address)": {
					"details": "Allows the current owner to transfer control of the contract to a newOwner.",
					"params": {
						"_newOwner": "The address to transfer ownership to."
					}
				},
				"unpause()": {
					"details": "called by the owner to unpause, returns to normal state"
				},
				"withdrawETH(uint256)": {
					"details": "onlyOwner modifier only allows the contract owner to run the code",
					"params": {
						"_amount": "The amount of ether that the caller wants to withdraw"
					}
				},
				"withdrawToken(address,uint256)": {
					"details": "onlyOwner modifier only allows the contract owner to run the code",
					"params": {
						"_amount": "The amount of tokens that the caller wants to withdraw",
						"_token": "The address of the token that the user wants to withdraw"
					},
					"return": "bool value indicating whether the transfer was successful"
				}
			},
			"title": "ZeroExExchangeHandler"
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60806040526000805460a060020a60ff02191690553480156200002157600080fd5b5060405160408062001dd08339810180604052620000439190810190620001d2565b60008054600160a060020a0319908116331790915560018054600160a060020a03858116919093161790819055604080516060810190915260248082529190921691636070410891620000ab919062001dac602083013960006401000000006200016f810204565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620000e5919062000222565b60206040518083038186803b158015620000fe57600080fd5b505afa15801562000113573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001399190810190620001a9565b60028054600160a060020a03928316600160a060020a031991821617909155600380549390921692169190911790555062000270565b6000816004018351101515156200018557600080fd5b50818101602001515b92915050565b6000620001a2825162000263565b9392505050565b600060208284031215620001bc57600080fd5b6000620001ca848462000194565b949350505050565b60008060408385031215620001e657600080fd5b6000620001f4858562000194565b9250506020620002078582860162000194565b9150509250929050565b6200021c8162000232565b82525050565b602081016200018e828462000211565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b600160a060020a031690565b60006200018e8262000257565b611b2c80620002806000396000f3fe6080604052600436106100ce576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b11610086578063d2f7265a1161006b578063d2f7265a146101c1578063f14210a6146101e3578063f2fde38b14610203576100ce565b80638da5cb5b1461017f5780639e281a98146101a1576100ce565b80635c975abb116100b75780635c975abb14610133578063715018a6146101555780638456cb591461016a576100ce565b80630345c2a6146100f45780633f4ba83a1461011e575b60035473ffffffffffffffffffffffffffffffffffffffff1633146100f257600080fd5b005b6101076101023660046115cf565b610223565b6040516101159291906119d8565b60405180910390f35b34801561012a57600080fd5b506100f26105da565b34801561013f57600080fd5b506101486106ae565b604051610115919061193c565b34801561016157600080fd5b506100f26106cf565b34801561017657600080fd5b506100f2610760565b34801561018b57600080fd5b50610194610841565b60405161011591906118f8565b3480156101ad57600080fd5b506101486101bc366004611595565b61085d565b3480156101cd57600080fd5b506101d66108b0565b604051610115919061194a565b3480156101ef57600080fd5b506100f26101fe36600461169a565b6108cc565b34801561020f57600080fd5b506100f261021e36600461156f565b61093a565b60008061022e61110f565b868060200190516102429190810190611665565b90506000610256826101600151601061096a565b905061026182610998565b15156102d95760035473ffffffffffffffffffffffffffffffffffffffff828116911614156102bd57604051339088156108fc029089906000818181858888f193505050501580156102b7573d6000803e3d6000fd5b506102ca565b6102c8813389610afd565b505b50600092508291506105d19050565b6002546102fc9073ffffffffffffffffffffffffffffffffffffffff1682610c9f565b6103046111d0565b60015473ffffffffffffffffffffffffffffffffffffffff1663b4be83d561032b85610d7f565b6103358a8c610e6d565b8661018001516040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161037593929190611998565b608060405180830381600087803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103c79190810190611647565b6020810151815190965094509050878510156104cc5760035473ffffffffffffffffffffffffffffffffffffffff838116911614156104bd576003546040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d9061045890888c03906004016119ca565b600060405180830381600087803b15801561047257600080fd5b505af1158015610486573d6000803e3d6000fd5b505060405133925087156108fc02915087906000818181858888f193505050501580156104b7573d6000803e3d6000fd5b506104cc565b6104ca8233878b03610afd565b505b60006104de846101400151601061096a565b60035490915073ffffffffffffffffffffffffffffffffffffffff808316911614156105bf576003546040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d9061055a9088906004016119ca565b600060405180830381600087803b15801561057457600080fd5b505af1158015610588573d6000803e3d6000fd5b505060405133925087156108fc02915087906000818181858888f193505050501580156105b9573d6000803e3d6000fd5b506105cc565b6105ca813387610afd565b505b505050505b94509492505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105fe57600080fd5b60005474010000000000000000000000000000000000000000900460ff16151561065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490611958565b60405180910390fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1681556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d169339190a1565b60005474010000000000000000000000000000000000000000900460ff1690565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106f357600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a2600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461078457600080fd5b60005474010000000000000000000000000000000000000000900460ff16156107d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490611988565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e7529190a1565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000805473ffffffffffffffffffffffffffffffffffffffff16331461088257600080fd5b6000546108a790849073ffffffffffffffffffffffffffffffffffffffff1684610afd565b90505b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f057600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff9091169183156108fc02918491818181858888f19350505050158015610936573d6000803e3d6000fd5b5050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461095e57600080fd5b61096781610e83565b50565b60008160140183511015151561097f57600080fd5b5001602001516c01000000000000000000000000900490565b60008161010001514211158015610a0157506101608201517ff47261b000000000000000000000000000000000000000000000000000000000906109dd906000610f32565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b8015610a5f57506101408201517ff47261b00000000000000000000000000000000000000000000000000000000090610a3b906000610f32565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b8015610a6d575060e0820151155b8015610ab45750602082015173ffffffffffffffffffffffffffffffffffffffff161580610ab45750602082015173ffffffffffffffffffffffffffffffffffffffff1630145b80156108aa5750606082015173ffffffffffffffffffffffffffffffffffffffff1615806108aa5750506060015173ffffffffffffffffffffffffffffffffffffffff16301490565b60008373ffffffffffffffffffffffffffffffffffffffff168383604051602401610b29929190611921565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017815290518251909182918083835b60208310610be857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610bab565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610c4a576040519150601f19603f3d011682016040523d82523d6000602084013e610c4f565b606091505b5090915050801515610c8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490611968565b610c95610f50565b90505b9392505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063dd62ed3e90610cf39030908690600401611906565b60206040518083038186803b158015610d0b57600080fd5b505afa158015610d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d4391908101906116b8565b151561093657610d7481837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610f7f565b151561093657600080fd5b610d876111f9565b61018060405190810160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015173ffffffffffffffffffffffffffffffffffffffff168152602001836040015173ffffffffffffffffffffffffffffffffffffffff168152602001836060015173ffffffffffffffffffffffffffffffffffffffff168152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152602001836101200151815260200183610140015181526020018361016001518152509050919050565b6000818310610e7c57816108a7565b5090919050565b73ffffffffffffffffffffffffffffffffffffffff81161515610ea557600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600081600401835110151515610f4757600080fd5b50016020015190565b60003d8015610f665760208114610f6f57600080fd5b60019150610f7b565b60206000803e60005191505b5090565b60008373ffffffffffffffffffffffffffffffffffffffff168383604051602401610fab929190611921565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017815290518251909182918083835b6020831061106a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161102d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146110cc576040519150601f19603f3d011682016040523d82523d6000602084013e6110d1565b606091505b5090915050801515610c8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490611978565b6101a060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001606081525090565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b61018060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b60006108a78235611a57565b60006108a78251611a57565b60006108a78235611a62565b6000601f820183136112e857600080fd5b81516112fb6112f682611a0d565b6119e6565b9150808252602083016020830185838301111561131757600080fd5b611322838284611a9a565b50505092915050565b6000601f8201831361133c57600080fd5b813561134a6112f682611a0d565b9150808252602083016020830185838301111561136657600080fd5b611322838284611a8e565b60006080828403121561138357600080fd5b61138d60806119e6565b9050600061139b8484611563565b82525060206113ac84848301611563565b60208301525060406113c084828501611563565b60408301525060606113d484828501611563565b60608301525092915050565b60006101a082840312156113f357600080fd5b6113fe6101a06119e6565b9050600061140c84846112bf565b825250602061141d848483016112bf565b6020830152506040611431848285016112bf565b6040830152506060611445848285016112bf565b606083015250608061145984828501611563565b60808301525060a061146d84828501611563565b60a08301525060c061148184828501611563565b60c08301525060e061149584828501611563565b60e0830152506101006114aa84828501611563565b610100830152506101206114c084828501611563565b6101208301525061014082015167ffffffffffffffff8111156114e257600080fd5b6114ee848285016112d7565b6101408301525061016082015167ffffffffffffffff81111561151057600080fd5b61151c848285016112d7565b6101608301525061018082015167ffffffffffffffff81111561153e57600080fd5b61154a848285016112d7565b6101808301525092915050565b60006108a78235611a80565b60006108a78251611a80565b60006020828403121561158157600080fd5b600061158d84846112b3565b949350505050565b600080604083850312156115a857600080fd5b60006115b485856112b3565b92505060206115c585828601611557565b9150509250929050565b600080600080608085870312156115e557600080fd5b843567ffffffffffffffff8111156115fc57600080fd5b6116088782880161132b565b945050602061161987828801611557565b935050604061162a87828801611557565b925050606061163b878288016112cb565b91505092959194509250565b60006080828403121561165957600080fd5b600061158d8484611371565b60006020828403121561167757600080fd5b815167ffffffffffffffff81111561168e57600080fd5b61158d848285016113e0565b6000602082840312156116ac57600080fd5b600061158d8484611557565b6000602082840312156116ca57600080fd5b600061158d8484611563565b6116df81611a57565b82525050565b6116df81611a62565b60006116f982611a53565b80845261170d816020860160208601611a9a565b61171681611aca565b9093016020019392505050565b6116df81611a83565b601481527f436f6e7472616374206e6f74207061757365642e000000000000000000000000602082015260400190565b600f81527f5472616e73666572206661696c65640000000000000000000000000000000000602082015260400190565b600e81527f417070726f7665206661696c6564000000000000000000000000000000000000602082015260400190565b601381527f436f6e7472616374206973207061757365642e00000000000000000000000000602082015260400190565b805160009061018084019061180185826116d6565b50602083015161181460208601826116d6565b50604083015161182760408601826116d6565b50606083015161183a60608601826116d6565b50608083015161184d60808601826118ef565b5060a083015161186060a08601826118ef565b5060c083015161187360c08601826118ef565b5060e083015161188660e08601826118ef565b5061010083015161189b6101008601826118ef565b506101208301516118b06101208601826118ef565b506101408301518482036101408601526118ca82826116ee565b9150506101608301518482036101608601526118e682826116ee565b95945050505050565b6116df81611a80565b602081016108aa82846116d6565b6040810161191482856116d6565b610c9860208301846116d6565b6040810161192f82856116d6565b610c9860208301846118ef565b602081016108aa82846116e5565b602081016108aa8284611723565b602080825281016108aa8161172c565b602080825281016108aa8161175c565b602080825281016108aa8161178c565b602080825281016108aa816117bc565b606080825281016119a981866117ec565b90506119b860208301856118ef565b81810360408301526118e681846116ee565b602081016108aa82846118ef565b6040810161192f82856118ef565b60405181810167ffffffffffffffff81118282101715611a0557600080fd5b604052919050565b600067ffffffffffffffff821115611a2457600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b5190565b60006108aa82611a67565b151590565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b60006108aa82611a57565b82818337506000910152565b60005b83811015611ab5578181015183820152602001611a9d565b83811115611ac4576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169056fea265627a7a72305820458fd976705be9f66ce39221160fcb077379e20d890d07a2aebdf98aa48d9ebd6c6578706572696d656e74616cf50037f47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP PUSH1 0xFF MUL NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x40 DUP1 PUSH3 0x1DD0 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x43 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x1D2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT SWAP1 DUP2 AND CALLER OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 DUP2 AND SWAP2 SWAP1 SWAP4 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP1 DUP3 MSTORE SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x60704108 SWAP2 PUSH3 0xAB SWAP2 SWAP1 PUSH3 0x1DAC PUSH1 0x20 DUP4 ADD CODECOPY PUSH1 0x0 PUSH5 0x100000000 PUSH3 0x16F DUP2 MUL DIV JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xE5 SWAP2 SWAP1 PUSH3 0x222 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x113 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x139 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x1A9 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP4 SWAP1 SWAP3 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x270 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH3 0x185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 DUP2 ADD PUSH1 0x20 ADD MLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1A2 DUP3 MLOAD PUSH3 0x263 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x1CA DUP5 DUP5 PUSH3 0x194 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x1F4 DUP6 DUP6 PUSH3 0x194 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x207 DUP6 DUP3 DUP7 ADD PUSH3 0x194 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH3 0x21C DUP2 PUSH3 0x232 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH3 0x18E DUP3 DUP5 PUSH3 0x211 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x18E DUP3 PUSH3 0x257 JUMP JUMPDEST PUSH2 0x1B2C DUP1 PUSH3 0x280 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCE JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x86 JUMPI DUP1 PUSH4 0xD2F7265A GT PUSH2 0x6B JUMPI DUP1 PUSH4 0xD2F7265A EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0xF14210A6 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x203 JUMPI PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x17F JUMPI DUP1 PUSH4 0x9E281A98 EQ PUSH2 0x1A1 JUMPI PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH4 0x5C975ABB GT PUSH2 0xB7 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x16A JUMPI PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH4 0x345C2A6 EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x11E JUMPI JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH2 0x107 PUSH2 0x102 CALLDATASIZE PUSH1 0x4 PUSH2 0x15CF JUMP JUMPDEST PUSH2 0x223 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP3 SWAP2 SWAP1 PUSH2 0x19D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x5DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 PUSH2 0x6AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP2 SWAP1 PUSH2 0x193C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x6CF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x760 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x194 PUSH2 0x841 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP2 SWAP1 PUSH2 0x18F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 PUSH2 0x1BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1595 JUMP JUMPDEST PUSH2 0x85D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D6 PUSH2 0x8B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP2 SWAP1 PUSH2 0x194A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x169A JUMP JUMPDEST PUSH2 0x8CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x21E CALLDATASIZE PUSH1 0x4 PUSH2 0x156F JUMP JUMPDEST PUSH2 0x93A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x22E PUSH2 0x110F JUMP JUMPDEST DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x242 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1665 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x256 DUP3 PUSH2 0x160 ADD MLOAD PUSH1 0x10 PUSH2 0x96A JUMP JUMPDEST SWAP1 POP PUSH2 0x261 DUP3 PUSH2 0x998 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x2BD JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP9 ISZERO PUSH2 0x8FC MUL SWAP1 DUP10 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x2B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x2CA JUMP JUMPDEST PUSH2 0x2C8 DUP2 CALLER DUP10 PUSH2 0xAFD JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP PUSH2 0x5D1 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x2FC SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0xC9F JUMP JUMPDEST PUSH2 0x304 PUSH2 0x11D0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB4BE83D5 PUSH2 0x32B DUP6 PUSH2 0xD7F JUMP JUMPDEST PUSH2 0x335 DUP11 DUP13 PUSH2 0xE6D JUMP JUMPDEST DUP7 PUSH2 0x180 ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x375 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3C7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1647 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP1 SWAP7 POP SWAP5 POP SWAP1 POP DUP8 DUP6 LT ISZERO PUSH2 0x4CC JUMPI PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x4BD JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x458 SWAP1 DUP9 DUP13 SUB SWAP1 PUSH1 0x4 ADD PUSH2 0x19CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x486 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD CALLER SWAP3 POP DUP8 ISZERO PUSH2 0x8FC MUL SWAP2 POP DUP8 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x4CC JUMP JUMPDEST PUSH2 0x4CA DUP3 CALLER DUP8 DUP12 SUB PUSH2 0xAFD JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH2 0x4DE DUP5 PUSH2 0x140 ADD MLOAD PUSH1 0x10 PUSH2 0x96A JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP2 AND EQ ISZERO PUSH2 0x5BF JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x55A SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x19CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x588 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD CALLER SWAP3 POP DUP8 ISZERO PUSH2 0x8FC MUL SWAP2 POP DUP8 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x5B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x5CC JUMP JUMPDEST PUSH2 0x5CA DUP2 CALLER DUP8 PUSH2 0xAFD JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x5FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x65D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x654 SWAP1 PUSH2 0x1958 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xA45F47FDEA8A1EFDD9029A5691C7F759C32B7C698632B563573E155625D16933 SWAP2 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH32 0xF8DF31144D9C2F0F6B59D69B8B98ABD5459D07F2742C4DF920B25AAE33C64820 SWAP2 LOG2 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x7D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x654 SWAP1 PUSH2 0x1988 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x9E87FAC88FF661F02D44F95383C817FECE4BCE600A3DAB7A54406878B965E752 SWAP2 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x8A7 SWAP1 DUP5 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0xAFD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x8F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x936 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x95E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x967 DUP2 PUSH2 0xE83 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x97F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH13 0x1000000000000000000000000 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x100 ADD MLOAD TIMESTAMP GT ISZERO DUP1 ISZERO PUSH2 0xA01 JUMPI POP PUSH2 0x160 DUP3 ADD MLOAD PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x9DD SWAP1 PUSH1 0x0 PUSH2 0xF32 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ JUMPDEST DUP1 ISZERO PUSH2 0xA5F JUMPI POP PUSH2 0x140 DUP3 ADD MLOAD PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0xA3B SWAP1 PUSH1 0x0 PUSH2 0xF32 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ JUMPDEST DUP1 ISZERO PUSH2 0xA6D JUMPI POP PUSH1 0xE0 DUP3 ADD MLOAD ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xAB4 JUMPI POP PUSH1 0x20 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0xAB4 JUMPI POP PUSH1 0x20 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ JUMPDEST DUP1 ISZERO PUSH2 0x8AA JUMPI POP PUSH1 0x60 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x8AA JUMPI POP POP PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB29 SWAP3 SWAP2 SWAP1 PUSH2 0x1921 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR DUP2 MSTORE SWAP1 MLOAD DUP3 MLOAD SWAP1 SWAP2 DUP3 SWAP2 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xBE8 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xBAB JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC4A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP2 POP POP DUP1 ISZERO ISZERO PUSH2 0xC8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x654 SWAP1 PUSH2 0x1968 JUMP JUMPDEST PUSH2 0xC95 PUSH2 0xF50 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0xCF3 SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1906 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD1F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD43 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16B8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x936 JUMPI PUSH2 0xD74 DUP2 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xF7F JUMP JUMPDEST ISZERO ISZERO PUSH2 0x936 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD87 PUSH2 0x11F9 JUMP JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x80 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xE0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x100 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x120 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x140 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x160 ADD MLOAD DUP2 MSTORE POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xE7C JUMPI DUP2 PUSH2 0x8A7 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO ISZERO PUSH2 0xEA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0xF47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 RETURNDATASIZE DUP1 ISZERO PUSH2 0xF66 JUMPI PUSH1 0x20 DUP2 EQ PUSH2 0xF6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 POP PUSH2 0xF7B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 MLOAD SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFAB SWAP3 SWAP2 SWAP1 PUSH2 0x1921 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 OR DUP2 MSTORE SWAP1 MLOAD DUP3 MLOAD SWAP1 SWAP2 DUP3 SWAP2 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x106A JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x102D JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x10CC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP2 POP POP DUP1 ISZERO ISZERO PUSH2 0xC8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x654 SWAP1 PUSH2 0x1978 JUMP JUMPDEST PUSH2 0x1A0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 DUP3 CALLDATALOAD PUSH2 0x1A57 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 DUP3 MLOAD PUSH2 0x1A57 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 DUP3 CALLDATALOAD PUSH2 0x1A62 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x12E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12FB PUSH2 0x12F6 DUP3 PUSH2 0x1A0D JUMP JUMPDEST PUSH2 0x19E6 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1322 DUP4 DUP3 DUP5 PUSH2 0x1A9A JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x133C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x134A PUSH2 0x12F6 DUP3 PUSH2 0x1A0D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1322 DUP4 DUP3 DUP5 PUSH2 0x1A8E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x138D PUSH1 0x80 PUSH2 0x19E6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x139B DUP5 DUP5 PUSH2 0x1563 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x13AC DUP5 DUP5 DUP4 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x13C0 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x13D4 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13FE PUSH2 0x1A0 PUSH2 0x19E6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x140C DUP5 DUP5 PUSH2 0x12BF JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x141D DUP5 DUP5 DUP4 ADD PUSH2 0x12BF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1431 DUP5 DUP3 DUP6 ADD PUSH2 0x12BF JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1445 DUP5 DUP3 DUP6 ADD PUSH2 0x12BF JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1459 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x146D DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x1481 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x1495 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x14AA DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x14C0 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14EE DUP5 DUP3 DUP6 ADD PUSH2 0x12D7 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x151C DUP5 DUP3 DUP6 ADD PUSH2 0x12D7 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP PUSH2 0x180 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x153E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x154A DUP5 DUP3 DUP6 ADD PUSH2 0x12D7 JUMP JUMPDEST PUSH2 0x180 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 DUP3 CALLDATALOAD PUSH2 0x1A80 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 DUP3 MLOAD PUSH2 0x1A80 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x158D DUP5 DUP5 PUSH2 0x12B3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15B4 DUP6 DUP6 PUSH2 0x12B3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x15C5 DUP6 DUP3 DUP7 ADD PUSH2 0x1557 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x15E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1608 DUP8 DUP3 DUP9 ADD PUSH2 0x132B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1619 DUP8 DUP3 DUP9 ADD PUSH2 0x1557 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x162A DUP8 DUP3 DUP9 ADD PUSH2 0x1557 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x163B DUP8 DUP3 DUP9 ADD PUSH2 0x12CB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1659 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x158D DUP5 DUP5 PUSH2 0x1371 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x168E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x158D DUP5 DUP3 DUP6 ADD PUSH2 0x13E0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x158D DUP5 DUP5 PUSH2 0x1557 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x158D DUP5 DUP5 PUSH2 0x1563 JUMP JUMPDEST PUSH2 0x16DF DUP2 PUSH2 0x1A57 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x16DF DUP2 PUSH2 0x1A62 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16F9 DUP3 PUSH2 0x1A53 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x170D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1A9A JUMP JUMPDEST PUSH2 0x1716 DUP2 PUSH2 0x1ACA JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x16DF DUP2 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x14 DUP2 MSTORE PUSH32 0x436F6E7472616374206E6F74207061757365642E000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP2 MSTORE PUSH32 0x5472616E73666572206661696C65640000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE DUP2 MSTORE PUSH32 0x417070726F7665206661696C6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x13 DUP2 MSTORE PUSH32 0x436F6E7472616374206973207061757365642E00000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x180 DUP5 ADD SWAP1 PUSH2 0x1801 DUP6 DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1814 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1827 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x183A PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x184D PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x1860 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x1873 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x1886 PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH2 0x100 DUP4 ADD MLOAD PUSH2 0x189B PUSH2 0x100 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x18B0 PUSH2 0x120 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH2 0x140 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x18CA DUP3 DUP3 PUSH2 0x16EE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x18E6 DUP3 DUP3 PUSH2 0x16EE JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x16DF DUP2 PUSH2 0x1A80 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x8AA DUP3 DUP5 PUSH2 0x16D6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x1914 DUP3 DUP6 PUSH2 0x16D6 JUMP JUMPDEST PUSH2 0xC98 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x16D6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x192F DUP3 DUP6 PUSH2 0x16D6 JUMP JUMPDEST PUSH2 0xC98 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x18EF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x8AA DUP3 DUP5 PUSH2 0x16E5 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x8AA DUP3 DUP5 PUSH2 0x1723 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8AA DUP2 PUSH2 0x172C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8AA DUP2 PUSH2 0x175C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8AA DUP2 PUSH2 0x178C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8AA DUP2 PUSH2 0x17BC JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x19A9 DUP2 DUP7 PUSH2 0x17EC JUMP JUMPDEST SWAP1 POP PUSH2 0x19B8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x18EF JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x18E6 DUP2 DUP5 PUSH2 0x16EE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x8AA DUP3 DUP5 PUSH2 0x18EF JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x192F DUP3 DUP6 PUSH2 0x18EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1A05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AA DUP3 PUSH2 0x1A67 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AA DUP3 PUSH2 0x1A57 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1AB5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1A9D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1AC4 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 GASLIMIT DUP16 0xd9 PUSH23 0x705BE9F66CE39221160FCB077379E20D890D07A2AEBDF9 DUP11 LOG4 DUP14 SWAP15 0xbd PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY DELEGATECALL PUSH19 0x61B0000000000000000000000000E41D248957 SAR ORIGIN 0x21 DUP10 0x24 PUSH14 0xAFA5EBDE1F4699F4980000000000 ",
				"sourceMap": "477:10462:2:-;;;257:5:14;234:28;;-1:-1:-1;;;;;;234:28:14;;;1114:248:2;5:2:-1;;;;30:1;27;20:12;5:2;1114:248:2;;;;;;;;;;;;;;;;;;;;;;572:5:12;:18;;-1:-1:-1;;;;;;572:18:12;;;580:10;572:18;;;;;1211:35:2;;-1:-1:-1;;;;;1211:35:2;;;;;;;;;;;;1308:14;;;;;;;;;;;;;1276:8;;;;;:22;;1299:27;;1308:14;;;;;;1324:1;1299:8;;;;:27;:::i;:::-;1276:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1276:51:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1276:51:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1276:51:2;;;;;;;;;1256:17;:71;;-1:-1:-1;;;;;1256:71:2;;;-1:-1:-1;;;;;;1256:71:2;;;;;;;1337:4;:18;;;;;;;;;;;;;;-1:-1:-1;477:10462:2;;9786:286;9861:6;9905;9914:1;9905:10;9887:6;:13;:29;;9879:38;;;;;;;;-1:-1:-1;9998:30:2;;;10014:4;9998:30;9992:37;9786:286;;;;;:::o;5:122:-1:-;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:263;;249:2;237:9;228:7;224:23;220:32;217:2;;;265:1;262;255:12;217:2;300:1;317:64;373:7;353:9;317:64;;;307:74;211:186;-1:-1;;;;211:186;404:399;;;536:2;524:9;515:7;511:23;507:32;504:2;;;552:1;549;542:12;504:2;587:1;604:64;660:7;640:9;604:64;;;594:74;;566:108;705:2;723:64;779:7;770:6;759:9;755:22;723:64;;;713:74;;684:109;498:305;;;;;;810:117;891:30;915:5;891:30;;;886:3;879:43;873:54;;;934:209;1050:2;1035:18;;1064:69;1039:9;1106:6;1064:69;;1150:151;1229:66;1218:78;;1201:100;1308:128;-1:-1;;;;;1377:54;;1360:76;1443:105;;1512:31;1537:5;1512:31;;1495:53;477:10462:2;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100ce576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b11610086578063d2f7265a1161006b578063d2f7265a146101c1578063f14210a6146101e3578063f2fde38b14610203576100ce565b80638da5cb5b1461017f5780639e281a98146101a1576100ce565b80635c975abb116100b75780635c975abb14610133578063715018a6146101555780638456cb591461016a576100ce565b80630345c2a6146100f45780633f4ba83a1461011e575b60035473ffffffffffffffffffffffffffffffffffffffff1633146100f257600080fd5b005b6101076101023660046115cf565b610223565b6040516101159291906119d8565b60405180910390f35b34801561012a57600080fd5b506100f26105da565b34801561013f57600080fd5b506101486106ae565b604051610115919061193c565b34801561016157600080fd5b506100f26106cf565b34801561017657600080fd5b506100f2610760565b34801561018b57600080fd5b50610194610841565b60405161011591906118f8565b3480156101ad57600080fd5b506101486101bc366004611595565b61085d565b3480156101cd57600080fd5b506101d66108b0565b604051610115919061194a565b3480156101ef57600080fd5b506100f26101fe36600461169a565b6108cc565b34801561020f57600080fd5b506100f261021e36600461156f565b61093a565b60008061022e61110f565b868060200190516102429190810190611665565b90506000610256826101600151601061096a565b905061026182610998565b15156102d95760035473ffffffffffffffffffffffffffffffffffffffff828116911614156102bd57604051339088156108fc029089906000818181858888f193505050501580156102b7573d6000803e3d6000fd5b506102ca565b6102c8813389610afd565b505b50600092508291506105d19050565b6002546102fc9073ffffffffffffffffffffffffffffffffffffffff1682610c9f565b6103046111d0565b60015473ffffffffffffffffffffffffffffffffffffffff1663b4be83d561032b85610d7f565b6103358a8c610e6d565b8661018001516040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161037593929190611998565b608060405180830381600087803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103c79190810190611647565b6020810151815190965094509050878510156104cc5760035473ffffffffffffffffffffffffffffffffffffffff838116911614156104bd576003546040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d9061045890888c03906004016119ca565b600060405180830381600087803b15801561047257600080fd5b505af1158015610486573d6000803e3d6000fd5b505060405133925087156108fc02915087906000818181858888f193505050501580156104b7573d6000803e3d6000fd5b506104cc565b6104ca8233878b03610afd565b505b60006104de846101400151601061096a565b60035490915073ffffffffffffffffffffffffffffffffffffffff808316911614156105bf576003546040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d9061055a9088906004016119ca565b600060405180830381600087803b15801561057457600080fd5b505af1158015610588573d6000803e3d6000fd5b505060405133925087156108fc02915087906000818181858888f193505050501580156105b9573d6000803e3d6000fd5b506105cc565b6105ca813387610afd565b505b505050505b94509492505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105fe57600080fd5b60005474010000000000000000000000000000000000000000900460ff16151561065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490611958565b60405180910390fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1681556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d169339190a1565b60005474010000000000000000000000000000000000000000900460ff1690565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106f357600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a2600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461078457600080fd5b60005474010000000000000000000000000000000000000000900460ff16156107d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490611988565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e7529190a1565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000805473ffffffffffffffffffffffffffffffffffffffff16331461088257600080fd5b6000546108a790849073ffffffffffffffffffffffffffffffffffffffff1684610afd565b90505b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f057600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff9091169183156108fc02918491818181858888f19350505050158015610936573d6000803e3d6000fd5b5050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461095e57600080fd5b61096781610e83565b50565b60008160140183511015151561097f57600080fd5b5001602001516c01000000000000000000000000900490565b60008161010001514211158015610a0157506101608201517ff47261b000000000000000000000000000000000000000000000000000000000906109dd906000610f32565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b8015610a5f57506101408201517ff47261b00000000000000000000000000000000000000000000000000000000090610a3b906000610f32565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b8015610a6d575060e0820151155b8015610ab45750602082015173ffffffffffffffffffffffffffffffffffffffff161580610ab45750602082015173ffffffffffffffffffffffffffffffffffffffff1630145b80156108aa5750606082015173ffffffffffffffffffffffffffffffffffffffff1615806108aa5750506060015173ffffffffffffffffffffffffffffffffffffffff16301490565b60008373ffffffffffffffffffffffffffffffffffffffff168383604051602401610b29929190611921565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017815290518251909182918083835b60208310610be857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610bab565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610c4a576040519150601f19603f3d011682016040523d82523d6000602084013e610c4f565b606091505b5090915050801515610c8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490611968565b610c95610f50565b90505b9392505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063dd62ed3e90610cf39030908690600401611906565b60206040518083038186803b158015610d0b57600080fd5b505afa158015610d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d4391908101906116b8565b151561093657610d7481837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610f7f565b151561093657600080fd5b610d876111f9565b61018060405190810160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015173ffffffffffffffffffffffffffffffffffffffff168152602001836040015173ffffffffffffffffffffffffffffffffffffffff168152602001836060015173ffffffffffffffffffffffffffffffffffffffff168152602001836080015181526020018360a0015181526020018360c0015181526020018360e0015181526020018361010001518152602001836101200151815260200183610140015181526020018361016001518152509050919050565b6000818310610e7c57816108a7565b5090919050565b73ffffffffffffffffffffffffffffffffffffffff81161515610ea557600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600081600401835110151515610f4757600080fd5b50016020015190565b60003d8015610f665760208114610f6f57600080fd5b60019150610f7b565b60206000803e60005191505b5090565b60008373ffffffffffffffffffffffffffffffffffffffff168383604051602401610fab929190611921565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017815290518251909182918083835b6020831061106a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161102d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146110cc576040519150601f19603f3d011682016040523d82523d6000602084013e6110d1565b606091505b5090915050801515610c8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490611978565b6101a060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001606081525090565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b61018060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b60006108a78235611a57565b60006108a78251611a57565b60006108a78235611a62565b6000601f820183136112e857600080fd5b81516112fb6112f682611a0d565b6119e6565b9150808252602083016020830185838301111561131757600080fd5b611322838284611a9a565b50505092915050565b6000601f8201831361133c57600080fd5b813561134a6112f682611a0d565b9150808252602083016020830185838301111561136657600080fd5b611322838284611a8e565b60006080828403121561138357600080fd5b61138d60806119e6565b9050600061139b8484611563565b82525060206113ac84848301611563565b60208301525060406113c084828501611563565b60408301525060606113d484828501611563565b60608301525092915050565b60006101a082840312156113f357600080fd5b6113fe6101a06119e6565b9050600061140c84846112bf565b825250602061141d848483016112bf565b6020830152506040611431848285016112bf565b6040830152506060611445848285016112bf565b606083015250608061145984828501611563565b60808301525060a061146d84828501611563565b60a08301525060c061148184828501611563565b60c08301525060e061149584828501611563565b60e0830152506101006114aa84828501611563565b610100830152506101206114c084828501611563565b6101208301525061014082015167ffffffffffffffff8111156114e257600080fd5b6114ee848285016112d7565b6101408301525061016082015167ffffffffffffffff81111561151057600080fd5b61151c848285016112d7565b6101608301525061018082015167ffffffffffffffff81111561153e57600080fd5b61154a848285016112d7565b6101808301525092915050565b60006108a78235611a80565b60006108a78251611a80565b60006020828403121561158157600080fd5b600061158d84846112b3565b949350505050565b600080604083850312156115a857600080fd5b60006115b485856112b3565b92505060206115c585828601611557565b9150509250929050565b600080600080608085870312156115e557600080fd5b843567ffffffffffffffff8111156115fc57600080fd5b6116088782880161132b565b945050602061161987828801611557565b935050604061162a87828801611557565b925050606061163b878288016112cb565b91505092959194509250565b60006080828403121561165957600080fd5b600061158d8484611371565b60006020828403121561167757600080fd5b815167ffffffffffffffff81111561168e57600080fd5b61158d848285016113e0565b6000602082840312156116ac57600080fd5b600061158d8484611557565b6000602082840312156116ca57600080fd5b600061158d8484611563565b6116df81611a57565b82525050565b6116df81611a62565b60006116f982611a53565b80845261170d816020860160208601611a9a565b61171681611aca565b9093016020019392505050565b6116df81611a83565b601481527f436f6e7472616374206e6f74207061757365642e000000000000000000000000602082015260400190565b600f81527f5472616e73666572206661696c65640000000000000000000000000000000000602082015260400190565b600e81527f417070726f7665206661696c6564000000000000000000000000000000000000602082015260400190565b601381527f436f6e7472616374206973207061757365642e00000000000000000000000000602082015260400190565b805160009061018084019061180185826116d6565b50602083015161181460208601826116d6565b50604083015161182760408601826116d6565b50606083015161183a60608601826116d6565b50608083015161184d60808601826118ef565b5060a083015161186060a08601826118ef565b5060c083015161187360c08601826118ef565b5060e083015161188660e08601826118ef565b5061010083015161189b6101008601826118ef565b506101208301516118b06101208601826118ef565b506101408301518482036101408601526118ca82826116ee565b9150506101608301518482036101608601526118e682826116ee565b95945050505050565b6116df81611a80565b602081016108aa82846116d6565b6040810161191482856116d6565b610c9860208301846116d6565b6040810161192f82856116d6565b610c9860208301846118ef565b602081016108aa82846116e5565b602081016108aa8284611723565b602080825281016108aa8161172c565b602080825281016108aa8161175c565b602080825281016108aa8161178c565b602080825281016108aa816117bc565b606080825281016119a981866117ec565b90506119b860208301856118ef565b81810360408301526118e681846116ee565b602081016108aa82846118ef565b6040810161192f82856118ef565b60405181810167ffffffffffffffff81118282101715611a0557600080fd5b604052919050565b600067ffffffffffffffff821115611a2457600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b5190565b60006108aa82611a67565b151590565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b60006108aa82611a57565b82818337506000910152565b60005b83811015611ab5578181015183820152602001611a9d565b83811115611ac4576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169056fea265627a7a72305820458fd976705be9f66ce39221160fcb077379e20d890d07a2aebdf98aa48d9ebd6c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCE JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x86 JUMPI DUP1 PUSH4 0xD2F7265A GT PUSH2 0x6B JUMPI DUP1 PUSH4 0xD2F7265A EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0xF14210A6 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x203 JUMPI PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x17F JUMPI DUP1 PUSH4 0x9E281A98 EQ PUSH2 0x1A1 JUMPI PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH4 0x5C975ABB GT PUSH2 0xB7 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x16A JUMPI PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH4 0x345C2A6 EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x11E JUMPI JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH2 0x107 PUSH2 0x102 CALLDATASIZE PUSH1 0x4 PUSH2 0x15CF JUMP JUMPDEST PUSH2 0x223 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP3 SWAP2 SWAP1 PUSH2 0x19D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x5DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 PUSH2 0x6AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP2 SWAP1 PUSH2 0x193C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x6CF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x760 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x194 PUSH2 0x841 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP2 SWAP1 PUSH2 0x18F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 PUSH2 0x1BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1595 JUMP JUMPDEST PUSH2 0x85D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D6 PUSH2 0x8B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x115 SWAP2 SWAP1 PUSH2 0x194A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x169A JUMP JUMPDEST PUSH2 0x8CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x21E CALLDATASIZE PUSH1 0x4 PUSH2 0x156F JUMP JUMPDEST PUSH2 0x93A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x22E PUSH2 0x110F JUMP JUMPDEST DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x242 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1665 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x256 DUP3 PUSH2 0x160 ADD MLOAD PUSH1 0x10 PUSH2 0x96A JUMP JUMPDEST SWAP1 POP PUSH2 0x261 DUP3 PUSH2 0x998 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x2BD JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP9 ISZERO PUSH2 0x8FC MUL SWAP1 DUP10 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x2B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x2CA JUMP JUMPDEST PUSH2 0x2C8 DUP2 CALLER DUP10 PUSH2 0xAFD JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP PUSH2 0x5D1 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x2FC SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0xC9F JUMP JUMPDEST PUSH2 0x304 PUSH2 0x11D0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB4BE83D5 PUSH2 0x32B DUP6 PUSH2 0xD7F JUMP JUMPDEST PUSH2 0x335 DUP11 DUP13 PUSH2 0xE6D JUMP JUMPDEST DUP7 PUSH2 0x180 ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x375 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3C7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1647 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP1 SWAP7 POP SWAP5 POP SWAP1 POP DUP8 DUP6 LT ISZERO PUSH2 0x4CC JUMPI PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x4BD JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x458 SWAP1 DUP9 DUP13 SUB SWAP1 PUSH1 0x4 ADD PUSH2 0x19CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x486 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD CALLER SWAP3 POP DUP8 ISZERO PUSH2 0x8FC MUL SWAP2 POP DUP8 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x4CC JUMP JUMPDEST PUSH2 0x4CA DUP3 CALLER DUP8 DUP12 SUB PUSH2 0xAFD JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH2 0x4DE DUP5 PUSH2 0x140 ADD MLOAD PUSH1 0x10 PUSH2 0x96A JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP2 AND EQ ISZERO PUSH2 0x5BF JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x55A SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x19CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x588 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD CALLER SWAP3 POP DUP8 ISZERO PUSH2 0x8FC MUL SWAP2 POP DUP8 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x5B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x5CC JUMP JUMPDEST PUSH2 0x5CA DUP2 CALLER DUP8 PUSH2 0xAFD JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x5FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x65D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x654 SWAP1 PUSH2 0x1958 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xA45F47FDEA8A1EFDD9029A5691C7F759C32B7C698632B563573E155625D16933 SWAP2 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH32 0xF8DF31144D9C2F0F6B59D69B8B98ABD5459D07F2742C4DF920B25AAE33C64820 SWAP2 LOG2 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x7D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x654 SWAP1 PUSH2 0x1988 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x9E87FAC88FF661F02D44F95383C817FECE4BCE600A3DAB7A54406878B965E752 SWAP2 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x8A7 SWAP1 DUP5 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0xAFD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x8F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x936 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x95E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x967 DUP2 PUSH2 0xE83 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x97F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH13 0x1000000000000000000000000 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x100 ADD MLOAD TIMESTAMP GT ISZERO DUP1 ISZERO PUSH2 0xA01 JUMPI POP PUSH2 0x160 DUP3 ADD MLOAD PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x9DD SWAP1 PUSH1 0x0 PUSH2 0xF32 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ JUMPDEST DUP1 ISZERO PUSH2 0xA5F JUMPI POP PUSH2 0x140 DUP3 ADD MLOAD PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0xA3B SWAP1 PUSH1 0x0 PUSH2 0xF32 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ JUMPDEST DUP1 ISZERO PUSH2 0xA6D JUMPI POP PUSH1 0xE0 DUP3 ADD MLOAD ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xAB4 JUMPI POP PUSH1 0x20 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0xAB4 JUMPI POP PUSH1 0x20 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ JUMPDEST DUP1 ISZERO PUSH2 0x8AA JUMPI POP PUSH1 0x60 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x8AA JUMPI POP POP PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB29 SWAP3 SWAP2 SWAP1 PUSH2 0x1921 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR DUP2 MSTORE SWAP1 MLOAD DUP3 MLOAD SWAP1 SWAP2 DUP3 SWAP2 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xBE8 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xBAB JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC4A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP2 POP POP DUP1 ISZERO ISZERO PUSH2 0xC8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x654 SWAP1 PUSH2 0x1968 JUMP JUMPDEST PUSH2 0xC95 PUSH2 0xF50 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0xCF3 SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1906 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD1F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xD43 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16B8 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x936 JUMPI PUSH2 0xD74 DUP2 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xF7F JUMP JUMPDEST ISZERO ISZERO PUSH2 0x936 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD87 PUSH2 0x11F9 JUMP JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x80 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xE0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x100 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x120 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x140 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH2 0x160 ADD MLOAD DUP2 MSTORE POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xE7C JUMPI DUP2 PUSH2 0x8A7 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO ISZERO PUSH2 0xEA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0xF47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 RETURNDATASIZE DUP1 ISZERO PUSH2 0xF66 JUMPI PUSH1 0x20 DUP2 EQ PUSH2 0xF6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 POP PUSH2 0xF7B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 MLOAD SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFAB SWAP3 SWAP2 SWAP1 PUSH2 0x1921 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 OR DUP2 MSTORE SWAP1 MLOAD DUP3 MLOAD SWAP1 SWAP2 DUP3 SWAP2 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x106A JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x102D JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x10CC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP2 POP POP DUP1 ISZERO ISZERO PUSH2 0xC8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x654 SWAP1 PUSH2 0x1978 JUMP JUMPDEST PUSH2 0x1A0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 DUP3 CALLDATALOAD PUSH2 0x1A57 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 DUP3 MLOAD PUSH2 0x1A57 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 DUP3 CALLDATALOAD PUSH2 0x1A62 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x12E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12FB PUSH2 0x12F6 DUP3 PUSH2 0x1A0D JUMP JUMPDEST PUSH2 0x19E6 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1322 DUP4 DUP3 DUP5 PUSH2 0x1A9A JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x133C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x134A PUSH2 0x12F6 DUP3 PUSH2 0x1A0D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1322 DUP4 DUP3 DUP5 PUSH2 0x1A8E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x138D PUSH1 0x80 PUSH2 0x19E6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x139B DUP5 DUP5 PUSH2 0x1563 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x13AC DUP5 DUP5 DUP4 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x13C0 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x13D4 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13FE PUSH2 0x1A0 PUSH2 0x19E6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x140C DUP5 DUP5 PUSH2 0x12BF JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x141D DUP5 DUP5 DUP4 ADD PUSH2 0x12BF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1431 DUP5 DUP3 DUP6 ADD PUSH2 0x12BF JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1445 DUP5 DUP3 DUP6 ADD PUSH2 0x12BF JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x1459 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x146D DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x1481 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x1495 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x14AA DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x14C0 DUP5 DUP3 DUP6 ADD PUSH2 0x1563 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14EE DUP5 DUP3 DUP6 ADD PUSH2 0x12D7 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x151C DUP5 DUP3 DUP6 ADD PUSH2 0x12D7 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP PUSH2 0x180 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x153E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x154A DUP5 DUP3 DUP6 ADD PUSH2 0x12D7 JUMP JUMPDEST PUSH2 0x180 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 DUP3 CALLDATALOAD PUSH2 0x1A80 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A7 DUP3 MLOAD PUSH2 0x1A80 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x158D DUP5 DUP5 PUSH2 0x12B3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15B4 DUP6 DUP6 PUSH2 0x12B3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x15C5 DUP6 DUP3 DUP7 ADD PUSH2 0x1557 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x15E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1608 DUP8 DUP3 DUP9 ADD PUSH2 0x132B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1619 DUP8 DUP3 DUP9 ADD PUSH2 0x1557 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x162A DUP8 DUP3 DUP9 ADD PUSH2 0x1557 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x163B DUP8 DUP3 DUP9 ADD PUSH2 0x12CB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1659 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x158D DUP5 DUP5 PUSH2 0x1371 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x168E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x158D DUP5 DUP3 DUP6 ADD PUSH2 0x13E0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x158D DUP5 DUP5 PUSH2 0x1557 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x158D DUP5 DUP5 PUSH2 0x1563 JUMP JUMPDEST PUSH2 0x16DF DUP2 PUSH2 0x1A57 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x16DF DUP2 PUSH2 0x1A62 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16F9 DUP3 PUSH2 0x1A53 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x170D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1A9A JUMP JUMPDEST PUSH2 0x1716 DUP2 PUSH2 0x1ACA JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x16DF DUP2 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x14 DUP2 MSTORE PUSH32 0x436F6E7472616374206E6F74207061757365642E000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP2 MSTORE PUSH32 0x5472616E73666572206661696C65640000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE DUP2 MSTORE PUSH32 0x417070726F7665206661696C6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x13 DUP2 MSTORE PUSH32 0x436F6E7472616374206973207061757365642E00000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x180 DUP5 ADD SWAP1 PUSH2 0x1801 DUP6 DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1814 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1827 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x183A PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x184D PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x1860 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x1873 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x1886 PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH2 0x100 DUP4 ADD MLOAD PUSH2 0x189B PUSH2 0x100 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x18B0 PUSH2 0x120 DUP7 ADD DUP3 PUSH2 0x18EF JUMP JUMPDEST POP PUSH2 0x140 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x140 DUP7 ADD MSTORE PUSH2 0x18CA DUP3 DUP3 PUSH2 0x16EE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH2 0x160 DUP7 ADD MSTORE PUSH2 0x18E6 DUP3 DUP3 PUSH2 0x16EE JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x16DF DUP2 PUSH2 0x1A80 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x8AA DUP3 DUP5 PUSH2 0x16D6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x1914 DUP3 DUP6 PUSH2 0x16D6 JUMP JUMPDEST PUSH2 0xC98 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x16D6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x192F DUP3 DUP6 PUSH2 0x16D6 JUMP JUMPDEST PUSH2 0xC98 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x18EF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x8AA DUP3 DUP5 PUSH2 0x16E5 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x8AA DUP3 DUP5 PUSH2 0x1723 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8AA DUP2 PUSH2 0x172C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8AA DUP2 PUSH2 0x175C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8AA DUP2 PUSH2 0x178C JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8AA DUP2 PUSH2 0x17BC JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x19A9 DUP2 DUP7 PUSH2 0x17EC JUMP JUMPDEST SWAP1 POP PUSH2 0x19B8 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x18EF JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x18E6 DUP2 DUP5 PUSH2 0x16EE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x8AA DUP3 DUP5 PUSH2 0x18EF JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x192F DUP3 DUP6 PUSH2 0x18EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1A05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AA DUP3 PUSH2 0x1A67 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AA DUP3 PUSH2 0x1A57 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1AB5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1A9D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1AC4 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 GASLIMIT DUP16 0xd9 PUSH23 0x705BE9F66CE39221160FCB077379E20D890D07A2AEBDF9 DUP11 LOG4 DUP14 SWAP15 0xbd PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "477:10462:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10924:4;;;;10902:10;:27;10894:36;;;;;;477:10462;6656:1974;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1025:94:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1025:94:14;;;:::i;341:70::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;341:70:14;;;:::i;:::-;;;;;;;;1006:111:12;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1006:111:12;;;:::i;851:92:14:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;851:92:14;;;:::i;235:28:12:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;235:28:12;;;:::i;:::-;;;;;;;;610:168:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;610:168:18;;;;;;;;:::i;591:29:2:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;591:29:2;;;:::i;:::-;;;;;;;;1024:97:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1024:97:18;;;;;;;;:::i;1279:111:12:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1279:111:12;;;;;;;;:::i;6656:1974:2:-;6868:26;6896:31;6943:21;;:::i;:::-;6978:14;6967:39;;;;;;;;;;;;;;6943:63;;7016:21;7040:34;7050:4;:19;;;7071:2;7040:9;:34::i;:::-;7016:58;;7088:26;7109:4;7088:20;:26::i;:::-;7087:27;7084:301;;;7157:4;;;7132:30;;;7157:4;;7132:30;7129:219;;;7181:37;;:10;;:37;;;;;7201:16;;7181:37;;;;7201:16;7181:10;:37;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7181:37:2;7129:219;;;7257:75;7288:13;7303:10;7315:16;7257:30;:75::i;:::-;;7129:219;-1:-1:-1;7369:1:2;;-1:-1:-1;7369:1:2;;-1:-1:-1;7361:12:2;;-1:-1:-1;7361:12:2;7084:301;7513:17;;7498:48;;7513:17;;7532:13;7498:14;:48::i;:::-;7557:41;;:::i;:::-;7601:8;;;;:18;7633:20;7648:4;7633:14;:20::i;:::-;7667:40;7676:12;7690:16;7667:8;:40::i;:::-;7721:4;:14;;;7601:144;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7601:144:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7601:144:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7601:144:2;;;;;;;;;7777:30;;;;7843;;7777;;-1:-1:-1;7843:30:2;-1:-1:-1;7557:188:2;-1:-1:-1;7887:37:2;;;7884:376;;;7967:4;;;7942:30;;;7967:4;;7942:30;7939:311;;;7991:4;;:52;;;;;:4;;;;;:13;;:52;;8005:37;;;;7991:52;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7991:52:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;8061:39:2;;:10;;-1:-1:-1;8061:39:2;;;;;-1:-1:-1;8081:18:2;;8061:39;;;;8081:18;8061:10;:39;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8061:39:2;7939:311;;;8139:96;8170:13;8185:10;8216:18;8197:16;:37;8139:30;:96::i;:::-;;7939:311;8270:26;8299:34;8309:4;:19;;;8330:2;8299:9;:34::i;:::-;8377:4;;8270:63;;-1:-1:-1;8377:4:2;8347:35;;;8377:4;;8347:35;8344:278;;;8397:4;;:38;;;;;:4;;;;;:13;;:38;;8411:23;;8397:38;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8397:38:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;8449:44:2;;:10;;-1:-1:-1;8449:44:2;;;;;-1:-1:-1;8469:23:2;;8449:44;;;;8469:23;8449:10;:44;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8449:44:2;8344:278;;;8524:87;8555:18;8575:10;8587:23;8524:30;:87::i;:::-;;8344:278;6656:1974;;;;;;;;;;;;:::o;1025:94:14:-;724:5:12;;;;710:10;:19;702:28;;;;;;728:7:14;;;;;;;720:40;;;;;;;;;;;;;;;;;;;;;;;;1088:5;1078:15;;;;;;1104:10;;;;1088:5;1104:10;1025:94::o;341:70::-;380:4;399:7;;;;;;;341:70::o;1006:111:12:-;724:5;;;;710:10;:19;702:28;;;;;;1082:5;;;1063:25;;1082:5;;;;;1063:25;;;1110:1;1094:18;;;;;;1006:111::o;851:92:14:-;724:5:12;;;;710:10;:19;702:28;;;;;;552:7:14;;;;;;;551:8;543:40;;;;;;;;;;;;;;905:7;:14;;;;;;;;930:8;;;;905:7;930:8;851:92::o;235:28:12:-;;;;;;:::o;610:168:18:-;694:4;724:5:12;;;;710:10;:19;702:28;;;;;;756:5:18;;717:54;;748:6;;756:5;;763:7;717:30;:54::i;:::-;710:61;;736:1:12;610:168:18;;;;:::o;591:29:2:-;;;;;;:::o;1024:97:18:-;724:5:12;;;;710:10;:19;702:28;;;;;;1091:5:18;;;:23;;:5;;;;;:23;;;;;1106:7;;1091:23;:5;:23;1106:7;1091:5;:23;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1091:23:18;1024:97;:::o;1279:111:12:-;724:5;;;;710:10;:19;702:28;;;;;;1356:29;1375:9;1356:18;:29::i;:::-;1279:111;:::o;9451:329:2:-;9528:7;9573:6;9582:2;9573:11;9555:6;:13;:30;;9547:39;;;;;;;;-1:-1:-1;9674:30:2;9690:4;9674:30;9668:37;9707:27;9664:71;;;9451:329::o;5710:940::-;5824:17;6233:4;:26;;;6214:15;:45;;:119;;;;-1:-1:-1;6288:19:2;;;;6315:18;;6279:32;;6309:1;6279:8;:32::i;:::-;:54;;;6214:119;:193;;;;-1:-1:-1;6362:19:2;;;;6389:18;;6353:32;;6383:1;6353:8;:32::i;:::-;:54;;;6214:193;:231;;;;-1:-1:-1;6427:13:2;;;;:18;6214:231;:324;;;;-1:-1:-1;6466:17:2;;;;:33;;;;:71;;-1:-1:-1;6503:17:2;;;;:34;;6532:4;6503:34;6466:71;6214:419;;;;-1:-1:-1;6559:18:2;;;;:34;;;;:73;;-1:-1:-1;;6597:18:2;;;:35;;6627:4;6597:35;;5710:940::o;57:301:9:-;149:12;186:13;:18;;258:3;263:6;205:65;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;205:65:9;;;49:4:-1;25:18;;61:17;;205:65:9;182:15:-1;205:65:9;179:29:-1;160:49;;186:85:9;;;;;;;;;;25:18:-1;36:153;66:2;58:11;;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;186:85:9;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;173:98:9;;-1:-1:-1;;281:35:9;;;;;;;;;;;;;;;;;334:17;:15;:17::i;:::-;327:24;;57:301;;;;;;:::o;731:253:7:-;818:55;;;;;:22;;;;;;:55;;849:4;;856:16;;818:55;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;818:55:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;818:55:7;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;818:55:7;;;;;;;;;:60;815:163;;;902:64;932:5;939:16;326:10;902:29;:64::i;:::-;894:73;;;;;;;4737:709:2;4807:21;;:::i;:::-;4847:592;;;;;;;;;4890:4;:17;;;4847:592;;;;;;4935:4;:17;;;4847:592;;;;;;4987:4;:24;;;4847:592;;;;;;5040:4;:18;;;4847:592;;;;;;5090:4;:21;;;4847:592;;;;5143:4;:21;;;4847:592;;;;5188:4;:13;;;4847:592;;;;5225:4;:13;;;4847:592;;;;5275:4;:26;;;4847:592;;;;5321:4;:9;;;4847:592;;;;5360:4;:19;;;4847:592;;;;5409:4;:19;;;4847:592;;;4840:599;;4737:709;;;:::o;201:98:11:-;259:7;285:1;281;:5;:13;;293:1;281:13;;;-1:-1:-1;289:1:11;;201:98;-1:-1:-1;201:98:11:o;1525:179:12:-;1603:23;;;;;1595:32;;;;;;1659:5;;;1638:38;;;;;;;1659:5;;;1638:38;;;1682:5;:17;;;;;;;;;;;;;;;1525:179::o;9786:286:2:-;9861:6;9905;9914:1;9905:10;9887:6;:13;:29;;9879:38;;;;;;;;-1:-1:-1;9998:30:2;10014:4;9998:30;9992:37;;9786:286::o;1029:377:9:-;1079:12;1132:16;1161:51;;;;1230:2;1225:100;;;;1374:1;1371;1364:12;1161:51;1197:1;1186:12;;1161:51;;1225:100;1272:2;1269:1;1266;1251:24;1309:1;1303:8;1292:19;;1125:265;;1111:289;:::o;714:309::-;810:12;847:13;:18;;918:8;928:6;866:69;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;866:69:9;;;49:4:-1;25:18;;61:17;;866:69:9;182:15:-1;866:69:9;179:29:-1;160:49;;847:89:9;;;;;;;;;;25:18:-1;36:153;66:2;58:11;;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;847:89:9;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;834:102:9;;-1:-1:-1;;946:35:9;;;;;;;;;;;;;;;;477:10462:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;130:122;;208:39;239:6;233:13;208:39;;400:112;;464:43;499:6;486:20;464:43;;520:434;;621:4;609:17;;605:27;-1:-1;595:2;;646:1;643;636:12;595:2;676:6;670:13;698:60;713:44;750:6;713:44;;;698:60;;;689:69;;778:6;771:5;764:21;814:4;806:6;802:17;847:4;840:5;836:16;882:3;873:6;868:3;864:16;861:25;858:2;;;899:1;896;889:12;858:2;909:39;941:6;936:3;931;909:39;;;588:366;;;;;;;;963:440;;1057:4;1045:17;;1041:27;-1:-1;1031:2;;1082:1;1079;1072:12;1031:2;1119:6;1106:20;1141:64;1156:48;1197:6;1156:48;;1141:64;1132:73;;1225:6;1218:5;1211:21;1261:4;1253:6;1249:17;1294:4;1287:5;1283:16;1329:3;1320:6;1315:3;1311:16;1308:25;1305:2;;;1346:1;1343;1336:12;1305:2;1356:41;1390:6;1385:3;1380;1356:41;;1451:865;;1580:4;1568:9;1563:3;1559:19;1555:30;1552:2;;;1598:1;1595;1588:12;1552:2;1616:20;1631:4;1616:20;;;1607:29;-1:-1;1704:1;1735:60;1791:3;1771:9;1735:60;;;1711:85;;-1:-1;1875:2;1908:60;1964:3;1940:22;;;1908:60;;;1901:4;1894:5;1890:16;1883:86;1817:163;2038:2;2071:60;2127:3;2118:6;2107:9;2103:22;2071:60;;;2064:4;2057:5;2053:16;2046:86;1990:153;2201:2;2234:60;2290:3;2281:6;2270:9;2266:22;2234:60;;;2227:4;2220:5;2216:16;2209:86;2153:153;1546:770;;;;;2368:2584;;2491:5;2479:9;2474:3;2470:19;2466:31;2463:2;;;2510:1;2507;2500:12;2463:2;2528:21;2543:5;2528:21;;;2519:30;-1:-1;2607:1;2638:60;2694:3;2674:9;2638:60;;;2614:85;;-1:-1;2768:2;2801:60;2857:3;2833:22;;;2801:60;;;2794:4;2787:5;2783:16;2776:86;2720:153;2938:2;2971:60;3027:3;3018:6;3007:9;3003:22;2971:60;;;2964:4;2957:5;2953:16;2946:86;2883:160;3102:2;3135:60;3191:3;3182:6;3171:9;3167:22;3135:60;;;3128:4;3121:5;3117:16;3110:86;3053:154;3269:3;3303:60;3359:3;3350:6;3339:9;3335:22;3303:60;;;3296:4;3289:5;3285:16;3278:86;3217:158;3437:3;3471:60;3527:3;3518:6;3507:9;3503:22;3471:60;;;3464:4;3457:5;3453:16;3446:86;3385:158;3597:3;3631:60;3687:3;3678:6;3667:9;3663:22;3631:60;;;3624:4;3617:5;3613:16;3606:86;3553:150;3757:3;3791:60;3847:3;3838:6;3827:9;3823:22;3791:60;;;3784:4;3777:5;3773:16;3766:86;3713:150;3930:3;3965:60;4021:3;4012:6;4001:9;3997:22;3965:60;;;3957:5;3950;3946:17;3939:87;3873:164;4087:3;4122:60;4178:3;4169:6;4158:9;4154:22;4122:60;;;4114:5;4107;4103:17;4096:87;4047:147;4275:3;4264:9;4260:19;4254:26;4300:18;4292:6;4289:30;4286:2;;;4332:1;4329;4322:12;4286:2;4368:65;4429:3;4420:6;4409:9;4405:22;4368:65;;;4360:5;4353;4349:17;4342:92;4204:241;4526:3;4515:9;4511:19;4505:26;4551:18;4543:6;4540:30;4537:2;;;4583:1;4580;4573:12;4537:2;4619:65;4680:3;4671:6;4660:9;4656:22;4619:65;;;4611:5;4604;4600:17;4593:92;4455:241;4772:3;4761:9;4757:19;4751:26;4797:18;4789:6;4786:30;4783:2;;;4829:1;4826;4819:12;4783:2;4865:65;4926:3;4917:6;4906:9;4902:22;4865:65;;;4857:5;4850;4846:17;4839:92;4706:236;2457:2495;;;;;4959:118;;5026:46;5064:6;5051:20;5026:46;;5084:122;;5162:39;5193:6;5187:13;5162:39;;5213:257;;5325:2;5313:9;5304:7;5300:23;5296:32;5293:2;;;5341:1;5338;5331:12;5293:2;5376:1;5393:61;5446:7;5426:9;5393:61;;;5383:71;5287:183;-1:-1;;;;5287:183;5477:366;;;5598:2;5586:9;5577:7;5573:23;5569:32;5566:2;;;5614:1;5611;5604:12;5566:2;5649:1;5666:53;5711:7;5691:9;5666:53;;;5656:63;;5628:97;5756:2;5774:53;5819:7;5810:6;5799:9;5795:22;5774:53;;;5764:63;;5735:98;5560:283;;;;;;5850:715;;;;;6011:3;5999:9;5990:7;5986:23;5982:33;5979:2;;;6028:1;6025;6018:12;5979:2;6063:31;;6114:18;6103:30;;6100:2;;;6146:1;6143;6136:12;6100:2;6166:62;6220:7;6211:6;6200:9;6196:22;6166:62;;;6156:72;;6042:192;6265:2;6283:53;6328:7;6319:6;6308:9;6304:22;6283:53;;;6273:63;;6244:98;6373:2;6391:53;6436:7;6427:6;6416:9;6412:22;6391:53;;;6381:63;;6352:98;6481:2;6499:50;6541:7;6532:6;6521:9;6517:22;6499:50;;;6489:60;;6460:95;5973:592;;;;;;;;6572:322;;6716:3;6704:9;6695:7;6691:23;6687:33;6684:2;;;6733:1;6730;6723:12;6684:2;6768:1;6785:93;6870:7;6850:9;6785:93;;6901:388;;7039:2;7027:9;7018:7;7014:23;7010:32;7007:2;;;7055:1;7052;7045:12;7007:2;7090:24;;7134:18;7123:30;;7120:2;;;7166:1;7163;7156:12;7120:2;7186:87;7265:7;7256:6;7245:9;7241:22;7186:87;;7296:241;;7400:2;7388:9;7379:7;7375:23;7371:32;7368:2;;;7416:1;7413;7406:12;7368:2;7451:1;7468:53;7513:7;7493:9;7468:53;;7544:263;;7659:2;7647:9;7638:7;7634:23;7630:32;7627:2;;;7675:1;7672;7665:12;7627:2;7710:1;7727:64;7783:7;7763:9;7727:64;;7814:144;7913:39;7946:5;7913:39;;;7908:3;7901:52;7895:63;;;8209:111;8286:28;8308:5;8286:28;;8327:289;;8423:34;8451:5;8423:34;;;8474:6;8469:3;8462:19;8486:63;8542:6;8535:4;8530:3;8526:14;8519:4;8512:5;8508:16;8486:63;;;8581:29;8603:6;8581:29;;;8561:50;;;8574:4;8561:50;;8403:213;-1:-1;;;8403:213;8929:170;9034:59;9087:5;9034:59;;9107:306;9272:2;9260:15;;9309:66;9304:2;9295:12;;9288:88;9404:2;9395:12;;9253:160;9422:306;9587:2;9575:15;;9624:66;9619:2;9610:12;;9603:88;9719:2;9710:12;;9568:160;9737:306;9902:2;9890:15;;9939:66;9934:2;9925:12;;9918:88;10034:2;10025:12;;9883:160;10052:306;10217:2;10205:15;;10254:66;10249:2;10240:12;;10233:88;10349:2;10340:12;;10198:160;10419:2429;10644:22;;10419:2429;;10566:5;10557:15;;;10678:61;10561:3;10644:22;10678:61;;;10587:164;10835:4;10828:5;10824:16;10818:23;10853:62;10909:4;10904:3;10900:14;10887:11;10853:62;;;10761:166;11018:4;11011:5;11007:16;11001:23;11036:62;11092:4;11087:3;11083:14;11070:11;11036:62;;;10937:173;11195:4;11188:5;11184:16;11178:23;11213:62;11269:4;11264:3;11260:14;11247:11;11213:62;;;11120:167;11375:4;11368:5;11364:16;11358:23;11393:62;11449:4;11444:3;11440:14;11427:11;11393:62;;;11297:170;11555:4;11548:5;11544:16;11538:23;11573:62;11629:4;11624:3;11620:14;11607:11;11573:62;;;11477:170;11727:4;11720:5;11716:16;11710:23;11745:62;11801:4;11796:3;11792:14;11779:11;11745:62;;;11657:162;11899:4;11892:5;11888:16;11882:23;11917:62;11973:4;11968:3;11964:14;11951:11;11917:62;;;11829:162;12084:5;12077;12073:17;12067:24;12103:63;12159:5;12154:3;12150:15;12137:11;12103:63;;;12001:177;12254:5;12247;12243:17;12237:24;12273:63;12329:5;12324:3;12320:15;12307:11;12273:63;;;12188:160;12434:5;12427;12423:17;12417:24;12487:3;12481:4;12477:14;12469:5;12464:3;12460:15;12453:39;12507:66;12568:4;12555:11;12507:66;;;12499:74;;12358:227;12671:5;12664;12660:17;12654:24;12724:3;12718:4;12714:14;12706:5;12701:3;12697:15;12690:39;12744:66;12805:4;12792:11;12744:66;;;12736:74;10539:2309;-1:-1;;;;;10539:2309;12855:110;12928:31;12953:5;12928:31;;13099:245;13233:2;13218:18;;13247:87;13222:9;13307:6;13247:87;;13351:324;13497:2;13482:18;;13511:71;13486:9;13555:6;13511:71;;;13593:72;13661:2;13650:9;13646:18;13637:6;13593:72;;13682:324;13828:2;13813:18;;13842:71;13817:9;13886:6;13842:71;;;13924:72;13992:2;13981:9;13977:18;13968:6;13924:72;;14013:201;14125:2;14110:18;;14139:65;14114:9;14177:6;14139:65;;14221:257;14361:2;14346:18;;14375:93;14350:9;14441:6;14375:93;;14485:407;14676:2;14690:47;;;14661:18;;14751:131;14661:18;14751:131;;14899:407;15090:2;15104:47;;;15075:18;;15165:131;15075:18;15165:131;;15313:407;15504:2;15518:47;;;15489:18;;15579:131;15489:18;15579:131;;15727:407;15918:2;15932:47;;;15903:18;;15993:131;15903:18;15993:131;;16141:651;16375:2;16389:47;;;16360:18;;16450:104;16360:18;16540:6;16450:104;;;16442:112;;16565:72;16633:2;16622:9;16618:18;16609:6;16565:72;;;16685:9;16679:4;16675:20;16670:2;16659:9;16655:18;16648:48;16710:72;16777:4;16768:6;16710:72;;16799:213;16917:2;16902:18;;16931:71;16906:9;16975:6;16931:71;;17019:324;17165:2;17150:18;;17179:71;17154:9;17223:6;17179:71;;17350:256;17412:2;17406:9;17438:17;;;17513:18;17498:34;;17534:22;;;17495:62;17492:2;;;17570:1;17567;17560:12;17492:2;17586;17579:22;17390:216;;-1:-1;17390:216;17613:254;;17752:18;17744:6;17741:30;17738:2;;;17784:1;17781;17774:12;17738:2;-1:-1;17857:4;17828;17805:17;;;;17824:9;17801:33;17847:15;;17675:192;18139:87;18209:12;;18193:33;18233:105;;18302:31;18327:5;18302:31;;18465:92;18538:13;18531:21;;18514:43;18564:128;18644:42;18633:54;;18616:76;18699:79;18768:5;18751:27;19202:165;;19303:59;19356:5;19303:59;;19519:145;19600:6;19595:3;19590;19577:30;-1:-1;19656:1;19638:16;;19631:27;19570:94;19673:268;19738:1;19745:101;19759:6;19756:1;19753:13;19745:101;;;19826:11;;;19820:18;19807:11;;;19800:39;19781:2;19774:10;19745:101;;;19861:6;19858:1;19855:13;19852:2;;;19926:1;19917:6;19912:3;19908:16;19901:27;19852:2;19722:219;;;;;19949:97;20037:2;20017:14;20033:7;20013:28;;19997:49"
			}
		}
	},
	"sourceTreeHashHex": "0x695ef28aafddc394ee4a3a1b6ff4dd2459f242792404faca4e3b73427ebdbb0c",
	"sources": {
		"./ZeroExExchangeHandler.sol": {
			"id": 2
		},
		"../lib/SafeMath.sol": {
			"id": 15
		},
		"../lib/Math.sol": {
			"id": 11
		},
		"../lib/Utils.sol": {
			"id": 17
		},
		"../lib/ERC20.sol": {
			"id": 8
		},
		"../lib/AllowanceSetter.sol": {
			"id": 7
		},
		"../lib/ERC20SafeTransfer.sol": {
			"id": 9
		},
		"./ExchangeHandler.sol": {
			"id": 1
		},
		"../lib/Withdrawable.sol": {
			"id": 18
		},
		"../lib/Ownable.sol": {
			"id": 12
		},
		"../lib/Pausable.sol": {
			"id": 14
		},
		"./interfaces/zeroex/IExchangeCore.sol": {
			"id": 3
		},
		"./interfaces/zeroex/LibOrder.sol": {
			"id": 6
		},
		"./interfaces/zeroex/LibEIP712.sol": {
			"id": 4
		},
		"./interfaces/zeroex/LibFillResults.sol": {
			"id": 5
		}
	},
	"sourceCodes": {
		"./ZeroExExchangeHandler.sol": "pragma solidity 0.5.3;\npragma experimental ABIEncoderV2;\n\nimport \"../lib/SafeMath.sol\";\nimport \"../lib/Math.sol\";\nimport \"../lib/Utils.sol\";\nimport \"../lib/AllowanceSetter.sol\";\nimport \"./ExchangeHandler.sol\";\nimport \"./interfaces/zeroex/IExchangeCore.sol\";\n\ninterface WETH {\n    function deposit() external payable;\n    function withdraw(uint256 amount) external;\n}\n\n\n/// @title ZeroExExchangeHandler\n/// @notice Handles the all ZeroExExchange trades for the primary contract\ncontract ZeroExExchangeHandler is ExchangeHandler, AllowanceSetter  {\n\n    /*\n    *   State Variables\n    */\n\n    IExchangeCore public exchange;\n    /// @dev note that this is dependent on the deployment of 0xV2. This is the ERC20 asset proxy + the mainnet address of the ZRX token\n    bytes constant ZRX_ASSET_DATA = \"\\xf4\\x72\\x61\\xb0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xe4\\x1d\\x24\\x89\\x57\\x1d\\x32\\x21\\x89\\x24\\x6d\\xaf\\xa5\\xeb\\xde\\x1f\\x46\\x99\\xf4\\x98\";\n    address ERC20_ASSET_PROXY;\n    WETH weth;\n\n    /*\n    *   Types\n    */\n\n    /// @notice Constructor\n    /// @param _exchange Address of the IExchangeCore exchange\n    constructor(\n        address _exchange,\n        address _weth\n    )\n        public\n    {\n        exchange = IExchangeCore(_exchange);\n        ERC20_ASSET_PROXY = exchange.getAssetProxy(toBytes4(ZRX_ASSET_DATA, 0));\n        weth = WETH(_weth);\n    }\n\n\n    struct OrderData {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n        bytes signature;\n    }\n\n    /*\n    *   Public functions\n    */\n\n\n\n    /*\n    *   Internal functions\n    */\n\n    /// @notice Gets the amount that Totle needs to give for this order\n    /// @param data LibOrder.Order struct containing order values\n    /// @return amountToGive amount taker needs to give in order to fill the order\n    function getAmountToGive_(\n        OrderData memory data\n    )\n      internal\n      view\n      returns (uint256 amountToGive)\n    {\n        LibOrder.OrderInfo memory orderInfo = exchange.getOrderInfo(\n            getZeroExOrder(data)\n        );\n        uint makerAssetAvailable = getAssetDataAvailable(data.makerAssetData, data.makerAddress);\n        uint feeAssetAvailable = getAssetDataAvailable(ZRX_ASSET_DATA, data.makerAddress);\n\n        uint maxFromMakerFee = data.makerFee == 0 ? Utils.max_uint() : getPartialAmount(feeAssetAvailable, data.makerFee, data.takerAssetAmount);\n        amountToGive = Math.min(Math.min(\n            getPartialAmount(makerAssetAvailable, data.makerAssetAmount, data.takerAssetAmount),\n            maxFromMakerFee),\n            SafeMath.sub(data.takerAssetAmount, orderInfo.orderTakerAssetFilledAmount)\n        );\n        //TODO add in taker fee shit - both in calculating this and actually buying the ZRX\n        /* logger.log(\"Getting amountToGive from ZeroEx arg2: amountToGive\", amountToGive); */\n    }\n\n    function getAssetDataAvailable(bytes memory assetData, address account) internal view returns (uint){\n        address tokenAddress = toAddress(assetData, 16);\n        ERC20 token = ERC20(tokenAddress);\n        return Math.min(token.balanceOf(account), token.allowance(account, ERC20_ASSET_PROXY));\n    }\n\n    function getZeroExOrder(OrderData memory data) internal pure returns (LibOrder.Order memory) {\n        return LibOrder.Order({\n            makerAddress: data.makerAddress,\n            takerAddress: data.takerAddress,\n            feeRecipientAddress: data.feeRecipientAddress,\n            senderAddress: data.senderAddress,\n            makerAssetAmount: data.makerAssetAmount,\n            takerAssetAmount: data.takerAssetAmount,\n            makerFee: data.makerFee,\n            takerFee: data.takerFee,\n            expirationTimeSeconds: data.expirationTimeSeconds,\n            salt: data.salt,\n            makerAssetData: data.makerAssetData,\n            takerAssetData: data.takerAssetData\n        });\n    }\n\n    /// @notice Perform exchange-specific checks on the given order\n    /// @dev This should be called to check for payload errors\n    /// @param data LibOrder.Order struct containing order values\n    /// @return checksPassed value representing pass or fail\n    function staticExchangeChecks(\n        OrderData memory data\n    )\n        internal\n        view\n        returns (bool checksPassed)\n    {\n\n        // Make sure that:\n        //  The order is not expired\n        //  Both the maker and taker assets are ERC20 tokens\n        //  The taker does not have to pay a fee (we don't support fees yet)\n        //  We are permitted to take this order\n        //  We are permitted to send this order\n        // TODO: Should we check signatures here?\n        return (block.timestamp <= data.expirationTimeSeconds &&\n                toBytes4(data.takerAssetData, 0) == bytes4(0xf47261b0) &&\n                toBytes4(data.makerAssetData, 0) == bytes4(0xf47261b0) &&\n                data.takerFee == 0 &&\n                (data.takerAddress == address(0x0) || data.takerAddress == address(this)) &&\n                (data.senderAddress == address(0x0) || data.senderAddress == address(this))\n        );\n    }\n\n    function performOrder(\n        bytes memory genericPayload,\n        uint256 availableToSpend,\n        uint256 targetAmount,\n        bool targetAmountIsSource\n    )\n        public\n        payable\n        returns (uint256 amountSpentOnOrder, uint256 amountReceivedFromOrder)\n    {\n        OrderData memory data = abi.decode(genericPayload, (OrderData));\n        address sourceAddress = toAddress(data.takerAssetData, 16);\n        if(!staticExchangeChecks(data)){\n            if(sourceAddress == address(weth)){\n                msg.sender.transfer(availableToSpend);\n            } else {\n                ERC20SafeTransfer.safeTransfer(sourceAddress, msg.sender, availableToSpend); \n            }\n            return (0,0);\n\n        }\n        if(sourceAddress == address(weth)){\n            weth.deposit.value(availableToSpend);\n        }\n        approveAddress(ERC20_ASSET_PROXY, sourceAddress);\n\n        LibFillResults.FillResults memory results = exchange.fillOrder(\n            getZeroExOrder(data),\n            Math.min(targetAmount, availableToSpend),\n            data.signature\n        );\n\n        amountSpentOnOrder = results.takerAssetFilledAmount;\n        amountReceivedFromOrder = results.makerAssetFilledAmount;\n\n        if(amountSpentOnOrder < availableToSpend){\n            if(sourceAddress == address(weth)){\n                weth.withdraw(availableToSpend - amountSpentOnOrder);\n                msg.sender.transfer(amountSpentOnOrder);\n            } else {\n                ERC20SafeTransfer.safeTransfer(sourceAddress, msg.sender, availableToSpend - amountSpentOnOrder);\n            }\n        }\n\n        address destinationAddress = toAddress(data.makerAssetData, 16);\n\n        if(destinationAddress == address(weth)){\n            weth.withdraw(amountReceivedFromOrder);\n            msg.sender.transfer(amountReceivedFromOrder);\n        } else {\n            ERC20SafeTransfer.safeTransfer(destinationAddress, msg.sender, amountReceivedFromOrder);\n        }\n\n\n    }\n\n    /// @notice Calculate the result of ((numerator * target) / denominator)\n    /// @param numerator the numerator in the equation\n    /// @param denominator the denominator in the equation\n    /// @param target the target for the equations\n    /// @return partialAmount the resultant value\n    function getPartialAmount(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return SafeMath.div(SafeMath.mul(numerator, target), denominator);\n    }\n\n    // @notice Extract an address from a string of bytes\n    // @param _bytes a string of at least 20 bytes\n    // @param _start the offset of the address within the byte stream\n    // @return tempAddress the address encoded in the bytestring beginning at _start\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\n        require(_bytes.length >= (_start + 20));\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toBytes4(bytes memory _bytes, uint _start) internal pure returns (bytes4) {\n        require(_bytes.length >= (_start + 4));\n        bytes4 tempBytes4;\n\n        assembly {\n            tempBytes4 := mload(add(add(_bytes, 0x20), _start))\n        }\n        return tempBytes4;\n    }\n\n    // @notice Extract a uint256 from a string of bytes\n    // @param _bytes a string of at least 32 bytes\n    // @param _start the offset of the uint256 within the byte stream\n    // @return tempUint the uint encoded in the bytestring beginning at _start\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\n        require(_bytes.length >= (_start + 32));\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    /*\n    *   Payable fallback function\n    */\n\n    /// @notice payable fallback to allow the exchange to return ether directly to this contract\n    /// @dev note that only the exchange should be able to send ether to this contract\n    function() external payable {\n        require(msg.sender == address(weth));\n    }\n}\n",
		"../lib/SafeMath.sol": "pragma solidity 0.5.3;\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n",
		"../lib/Math.sol": "pragma solidity 0.5.3;\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\n\nlibrary Math {\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\n    // (a + b) / 2 can overflow, so we distribute\n    return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n  }\n}\n",
		"../lib/Utils.sol": "pragma solidity 0.5.3;\n\nimport \"./ERC20.sol\";\n\n/*\n    Modified Util contract as used by Kyber Network\n*/\n\nlibrary Utils {\n\n    uint256 constant internal PRECISION = (10**18);\n    uint256 constant internal MAX_QTY   = (10**28); // 10B tokens\n    uint256 constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n    uint256 constant internal MAX_DECIMALS = 18;\n    uint256 constant internal ETH_DECIMALS = 18;\n    uint256 constant internal MAX_UINT = 2**256-1;\n    address constant internal ETH_ADDRESS = address(0x0);\n\n    // Currently constants can't be accessed from other contracts, so providing functions to do that here\n    function precision() internal pure returns (uint256) { return PRECISION; }\n    function max_qty() internal pure returns (uint256) { return MAX_QTY; }\n    function max_rate() internal pure returns (uint256) { return MAX_RATE; }\n    function max_decimals() internal pure returns (uint256) { return MAX_DECIMALS; }\n    function eth_decimals() internal pure returns (uint256) { return ETH_DECIMALS; }\n    function max_uint() internal pure returns (uint256) { return MAX_UINT; }\n    function eth_address() internal pure returns (address) { return ETH_ADDRESS; }\n\n    /// @notice Retrieve the number of decimals used for a given ERC20 token\n    /// @dev As decimals are an optional feature in ERC20, this contract uses `call` to\n    /// ensure that an exception doesn't cause transaction failure\n    /// @param token the token for which we should retrieve the decimals\n    /// @return decimals the number of decimals in the given token\n    function getDecimals(address token)\n        internal\n        returns (uint256 decimals)\n    {\n        bytes4 functionSig = bytes4(keccak256(\"decimals()\"));\n\n        /// @dev Using assembly due to issues with current solidity `address.call()`\n        /// implementation: https://github.com/ethereum/solidity/issues/2884\n        assembly {\n            // Pointer to next free memory slot\n            let ptr := mload(0x40)\n            // Store functionSig variable at ptr\n            mstore(ptr,functionSig)\n            let functionSigLength := 0x04\n            let wordLength := 0x20\n\n            let success := call(\n                                5000, // Amount of gas\n                                token, // Address to call\n                                0, // ether to send\n                                ptr, // ptr to input data\n                                functionSigLength, // size of data\n                                ptr, // where to store output data (overwrite input)\n                                wordLength // size of output data (32 bytes)\n                               )\n\n            switch success\n            case 0 {\n                decimals := 0 // If the token doesn't implement `decimals()`, return 0 as default\n            }\n            case 1 {\n                decimals := mload(ptr) // Set decimals to return data from call\n            }\n            mstore(0x40,add(ptr,0x04)) // Reset the free memory pointer to the next known free location\n        }\n    }\n\n    /// @dev Checks that a given address has its token allowance and balance set above the given amount\n    /// @param tokenOwner the address which should have custody of the token\n    /// @param tokenAddress the address of the token to check\n    /// @param tokenAmount the amount of the token which should be set\n    /// @param addressToAllow the address which should be allowed to transfer the token\n    /// @return bool true if the allowance and balance is set, false if not\n    function tokenAllowanceAndBalanceSet(\n        address tokenOwner,\n        address tokenAddress,\n        uint256 tokenAmount,\n        address addressToAllow\n    )\n        internal\n        view\n        returns (bool)\n    {\n        return (\n            ERC20(tokenAddress).allowance(tokenOwner, addressToAllow) >= tokenAmount &&\n            ERC20(tokenAddress).balanceOf(tokenOwner) >= tokenAmount\n        );\n    }\n\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns (uint) {\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n        }\n    }\n\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns (uint) {\n\n        //source quantity is rounded up. to avoid dest quantity being too low.\n        uint numerator;\n        uint denominator;\n        if (srcDecimals >= dstDecimals) {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n            denominator = rate;\n        } else {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty);\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n        }\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n    }\n\n    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal returns (uint) {\n        return calcDstQty(srcAmount, getDecimals(address(src)), getDecimals(address(dest)), rate);\n    }\n\n    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal returns (uint) {\n        return calcSrcQty(destAmount, getDecimals(address(src)), getDecimals(address(dest)), rate);\n    }\n\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n        internal pure returns (uint)\n    {\n        require(srcAmount <= MAX_QTY);\n        require(destAmount <= MAX_QTY);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n        }\n    }\n\n    /// @notice Bringing this in from the Math library as we've run out of space in TotlePrimary (see EIP-170)\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n",
		"../lib/ERC20.sol": "pragma solidity 0.5.3;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function decimals() public view returns (uint256);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n",
		"../lib/AllowanceSetter.sol": "pragma solidity 0.5.3;\n\nimport \"./ERC20.sol\";\nimport \"./ERC20SafeTransfer.sol\";\n/// @title A contract which is used to check and set allowances of tokens\n/// @dev In order to use this contract is must be inherited in the contract which is using\n/// its functionality\ncontract AllowanceSetter {\n    uint256 constant MAX_UINT = 2**256 - 1;\n\n    /// @notice A function which allows the caller to approve the max amount of any given token\n    /// @dev In order to function correctly, token allowances should not be set anywhere else in\n    /// the inheriting contract\n    /// @param addressToApprove the address which we want to approve to transfer the token\n    /// @param token the token address which we want to call approve on\n    function approveAddress(address addressToApprove, address token) internal {\n        if(ERC20(token).allowance(address(this), addressToApprove) == 0) {\n            require(ERC20SafeTransfer.safeApprove(token, addressToApprove, MAX_UINT));\n        }\n    }\n\n}\n",
		"../lib/ERC20SafeTransfer.sol": "pragma solidity 0.5.3;\n\n\nlibrary ERC20SafeTransfer {\n    function safeTransfer(address _tokenAddress, address _to, uint256 _value) internal returns (bool success) {\n        (success,) = _tokenAddress.call(abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value));\n        require(success, \"Transfer failed\");\n\n        return fetchReturnData();\n    }\n\n    function safeTransferFrom(address _tokenAddress, address _from, address _to, uint256 _value) internal returns (bool success) {\n        (success,) = _tokenAddress.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", _from, _to, _value));\n        require(success, \"Transfer From failed\");\n\n        return fetchReturnData();\n    }\n\n    function safeApprove(address _tokenAddress, address _spender, uint256 _value) internal returns (bool success) {\n        (success,) = _tokenAddress.call(abi.encodeWithSignature(\"approve(address,uint256)\", _spender, _value));\n        require(success,  \"Approve failed\");\n\n        return fetchReturnData();\n    }\n\n    function fetchReturnData() internal pure returns (bool success){\n        assembly {\n            switch returndatasize()\n            case 0 {\n                success := 1\n            }\n            case 32 {\n                returndatacopy(0, 0, 32)\n                success := mload(0)\n            }\n            default {\n                revert(0, 0)\n            }\n        }\n    }\n\n}\n",
		"./ExchangeHandler.sol": "pragma solidity 0.5.3;\npragma experimental ABIEncoderV2;\n\nimport \"../lib/Withdrawable.sol\";\nimport \"../lib/Pausable.sol\";\n/* import \"../lib/Logger.sol\"; */\n\n/// @title Interface for all exchange handler contracts\ncontract ExchangeHandler is Withdrawable, Pausable {\n\n    /*\n    *   State Variables\n    */\n\n    /* Logger public logger; */\n    /*\n    *   Modifiers\n    */\n\n    function performOrder(\n        bytes memory genericPayload,\n        uint256 availableToSpend,\n        uint256 targetAmount,\n        bool targetAmountIsSource\n    )\n        public\n        payable\n        returns (uint256 amountSpentOnOrder, uint256 amountReceivedFromOrder);\n\n}\n",
		"../lib/Withdrawable.sol": "pragma solidity 0.5.3;\n\nimport \"./Ownable.sol\";\nimport \"./ERC20SafeTransfer.sol\";\n\n/// @title A contract which allows its owner to withdraw any ether which is contained inside\ncontract Withdrawable is Ownable {\n\n    /// @notice Withdraw ether contained in this contract and send it back to owner\n    /// @dev onlyOwner modifier only allows the contract owner to run the code\n    /// @param _token The address of the token that the user wants to withdraw\n    /// @param _amount The amount of tokens that the caller wants to withdraw\n    /// @return bool value indicating whether the transfer was successful\n    function withdrawToken(address _token, uint256 _amount) external onlyOwner returns (bool) {\n        return ERC20SafeTransfer.safeTransfer(_token, owner, _amount);\n    }\n\n    /// @notice Withdraw ether contained in this contract and send it back to owner\n    /// @dev onlyOwner modifier only allows the contract owner to run the code\n    /// @param _amount The amount of ether that the caller wants to withdraw\n    function withdrawETH(uint256 _amount) external onlyOwner {\n        owner.transfer(_amount);\n    }\n}\n",
		"../lib/Ownable.sol": "pragma solidity 0.5.3;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address payable public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address payable _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address payable _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n",
		"../lib/Pausable.sol": "pragma solidity 0.5.3;\n\nimport \"./Ownable.sol\";\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Paused();\n  event Unpaused();\n\n  bool private _paused = false;\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns (bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused, \"Contract is paused.\");\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused, \"Contract not paused.\");\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    _paused = true;\n    emit Paused();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    _paused = false;\n    emit Unpaused();\n  }\n}\n",
		"./interfaces/zeroex/IExchangeCore.sol": "pragma solidity 0.5.3;\npragma experimental ABIEncoderV2;\n\nimport \"./LibOrder.sol\";\nimport \"./LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    bytes public ZRX_ASSET_DATA;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n",
		"./interfaces/zeroex/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.5.3;\nimport \"./LibEIP712.sol\";\n\n\ncontract LibOrder is\n    LibEIP712\n{\n    // Hash for the EIP712 Order Schema\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     bytes32(order.makerAddress),\n        //     bytes32(order.takerAddress),\n        //     bytes32(order.feeRecipientAddress),\n        //     bytes32(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData)\n        // ));\n\n        assembly {\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, makerAssetDataHash)\n            mstore(pos3, takerAssetDataHash)\n            result := keccak256(pos1, 416)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n        }\n        return result;\n    }\n}\n",
		"./interfaces/zeroex/LibEIP712.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.5.3;\n\ncontract LibEIP712 {\n\n    // EIP191 header for EIP712 prefix\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            abi.encodePacked(address(this))\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
		"./interfaces/zeroex/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.5.3;\nimport \"../../../lib/SafeMath.sol\";\n\n\ncontract LibFillResults\n{\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = SafeMath.add(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = SafeMath.add(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = SafeMath.add(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = SafeMath.add(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.5.3+commit.10d17f24",
		"settings": {
			"remappings": [],
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}