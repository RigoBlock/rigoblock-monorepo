{
	"language": "Solidity",
	"sources": {
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/extensions/adapters/AUniswapV2.sol": {
			"content": "/*\n\n Copyright 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.6.6;\n\nimport \"../../../utils/exchanges/uniswap/IUniswapV2Router02/IUniswapV2Router02.sol\";\n\ninterface Token {\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256);\n}\n\ninterface DragoEventful {\n\n    function customDragoLog(bytes4 _methodHash, bytes calldata _encodedParams) external returns (bool success);\n}\n\nabstract contract Drago {\n\n    address public owner;\n\n    function getExchangesAuth() external virtual view returns (address);\n\n    function getEventful() external virtual view returns (address);\n}\n\nabstract contract ExchangesAuthority {\n    function canTradeTokenOnExchange(address _token, address _exchange) external virtual view returns (bool);\n}\n\ncontract AUniswapV2 {\n\n    // **** ADD LIQUIDITY ****\n    function addLiquidity(\n        address payable uniswapV2RouterAddress,\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    )\n        external\n        returns (uint amountA, uint amountB, uint liquidity)\n    {\n        //callerIsDragoOwner();\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, tokenA);\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, tokenB);\n        require(\n            Token(tokenA).approve(uniswapV2RouterAddress, 2**256 -1),\n            \"UNISWAP_TOKEN_A_APPROVE_ERROR\"\n        );\n        require(\n            Token(tokenB).approve(uniswapV2RouterAddress, 2**256 -1),\n            \"UNISWAP_TOKEN_B_APPROVE_ERROR\"\n        );\n        (amountA, amountB, liquidity) = IUniswapV2Router02(uniswapV2RouterAddress).addLiquidity(\n            tokenA,\n            tokenB,\n            amountADesired,\n            amountBDesired,\n            amountAMin,\n            amountBMin,\n            to == address(this) ? to : address(this), // can only transfer to this drago\n            deadline\n        );\n        if (Token(tokenA).allowance(address(this), uniswapV2RouterAddress) > uint256(0)) {\n            Token(tokenA).approve(uniswapV2RouterAddress, uint256(0));\n        }\n        if (Token(tokenB).allowance(address(this), uniswapV2RouterAddress) > uint256(0)) {\n            Token(tokenB).approve(uniswapV2RouterAddress, uint256(0));\n        }\n        /*\n        DragoEventful events = DragoEventful(getDragoEventful());\n        bytes4 methodHash = bytes4(keccak256(\"addLiquidity(address[3],uint256[4],address,uint256)\"));\n        bytes memory encodedParams = abi.encode(\n            address(this),\n            tokenA,\n            tokenB,\n            amountADesired,\n            amountBDesired,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline\n        );\n        require(\n            events.customDragoLog(methodHash, encodedParams),\n            \"UNISWAP_ADD_LIQUIDITY_LOG_ERROR\"\n        );\n        */\n    }\n\n    function addLiquidityETH(\n        address payable uniswapV2RouterAddress,\n        address token,\n        uint sendETHAmount,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    )\n        external\n        payable\n        returns (uint amountToken, uint amountETH, uint liquidity)\n    {\n        //callerIsDragoOwner();\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, token);\n        require(\n            Token(token).approve(uniswapV2RouterAddress, 2**256 -1),\n            \"UNISWAP_TOKEN_APPROVE_ERROR\"\n        );\n        (amountToken, amountETH, liquidity) = IUniswapV2Router02(uniswapV2RouterAddress)\n        .addLiquidityETH{value: sendETHAmount}(\n            token,\n            amountTokenDesired,\n            amountTokenMin,\n            amountETHMin,\n            to == address(this) ? to : address(this), // can only transfer to this drago\n            deadline\n        );\n        if (Token(token).allowance(address(this), uniswapV2RouterAddress) > uint256(0)) {\n            Token(token).approve(uniswapV2RouterAddress, uint256(0));\n        }\n        // TODO: check whether logging in eventful\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address payable uniswapV2RouterAddress,\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    )\n        public\n        returns (uint amountA, uint amountB)\n    {\n        //callerIsDragoOwner();\n        (amountA, amountB) = IUniswapV2Router02(uniswapV2RouterAddress).removeLiquidity(\n            tokenA,\n            tokenB,\n            liquidity,\n            amountAMin,\n            amountBMin,\n            to == address(this) ? to : address(this), // cannot remove liquidity to any other than Drago\n            deadline\n        );\n        // TODO: check whether logging in eventful\n    }\n\n    function removeLiquidityETH(\n        address payable uniswapV2RouterAddress,\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    )\n        public\n        returns (uint amountToken, uint amountETH)\n    {\n        //callerIsDragoOwner();\n        (amountToken, amountETH) = IUniswapV2Router02(uniswapV2RouterAddress).removeLiquidityETH(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to == address(this) ? to : address(this), // can only transfer to this drago\n            deadline\n        );\n        // TODO: check whether logging in eventful\n    }\n\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address payable uniswapV2RouterAddress,\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    )\n        public\n        returns (uint amountETH)\n    {\n        //callerIsDragoOwner();\n        amountETH = IUniswapV2Router02(uniswapV2RouterAddress).removeLiquidityETHSupportingFeeOnTransferTokens(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to == address(this) ? to : address(this), // can only transfer to this drago\n            deadline\n        );\n        // TODO: check whether logging in eventful\n    }\n\n    // **** SWAP ****\n    // TODO: check for attack vectors in complex path in all functions\n    // TODO: potentially restrict to known/preapproved paths or max path.length = 2\n    function swapExactTokensForTokens(\n        address payable uniswapV2RouterAddress,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        returns (uint[] memory amounts)\n    {\n        //callerIsDragoOwner();\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[0]);\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[(path.length -1)]);\n        require(\n            Token(path[0]).approve(uniswapV2RouterAddress, 2**256 -1),\n            \"UNISWAP_TOKEN_APPROVE_ERROR\"\n        );\n        amounts = IUniswapV2Router02(uniswapV2RouterAddress).swapExactTokensForTokens(\n            amountIn,\n            amountOutMin,\n            path,\n            to == address(this) ? to : address(this), // can only transfer to this drago\n            deadline\n        );\n        if (Token(path[0]).allowance(address(this), uniswapV2RouterAddress) > uint256(0)) {\n            Token(path[0]).approve(uniswapV2RouterAddress, uint256(0));\n        }\n        // TODO: check whether logging in eventful\n    }\n\n    function swapTokensForExactTokens(\n        address payable uniswapV2RouterAddress,\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        returns (uint[] memory amounts)\n    {\n        //callerIsDragoOwner();\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[0]);\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[(path.length -1)]);\n        require(\n            Token(path[0]).approve(uniswapV2RouterAddress, 2**256 -1),\n            \"UNISWAP_TOKEN_APPROVE_ERROR\"\n        );\n        amounts = IUniswapV2Router02(uniswapV2RouterAddress).swapTokensForExactTokens(\n            amountOut,\n            amountInMax,\n            path,\n            to == address(this) ? to : address(this), // can only transfer to this drago\n            deadline\n        );\n        if (Token(path[0]).allowance(address(this), uniswapV2RouterAddress) > uint256(0)) {\n            Token(path[0]).approve(uniswapV2RouterAddress, uint256(0));\n        }\n        // TODO: check whether logging in eventful\n    }\n\n    function swapExactETHForTokens(\n        address payable uniswapV2RouterAddress,\n        uint256 exactETHAmount,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        payable\n        returns (uint[] memory amounts)\n    {\n        //callerIsDragoOwner();\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[(path.length -1)]);\n        amounts = IUniswapV2Router02(uniswapV2RouterAddress)\n        .swapExactETHForTokens{value: exactETHAmount}(\n            amountOutMin,\n            path,\n            to == address(this) ? to : address(this), // can only transfer to this drago\n            deadline\n        );\n        // TODO: check whether logging in eventful\n    }\n\n    function swapTokensForExactETH(\n        address payable uniswapV2RouterAddress,\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        returns (uint[] memory amounts)\n    {\n        //callerIsDragoOwner();\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[0]);\n        require(\n            Token(path[0]).approve(uniswapV2RouterAddress, 2**256 -1),\n            \"UNISWAP_TOKEN_APPROVE_ERROR\"\n        );\n        amounts = IUniswapV2Router02(uniswapV2RouterAddress).swapTokensForExactETH(\n            amountOut,\n            amountInMax,\n            path,\n            to == address(this) ? to : address(this), // can only transfer to this drago\n            deadline\n        );\n        if (Token(path[0]).allowance(address(this), uniswapV2RouterAddress) > uint256(0)) {\n            Token(path[0]).approve(uniswapV2RouterAddress, uint256(0));\n        }\n        // TODO: check whether logging in eventful\n    }\n\n    function swapExactTokensForETH(\n        address payable uniswapV2RouterAddress,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        returns (uint[] memory amounts)\n    {\n        //callerIsDragoOwner();\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[0]);\n        require(\n            Token(path[0]).approve(uniswapV2RouterAddress, 2**256 -1),\n            \"UNISWAP_TOKEN_APPROVE_ERROR\"\n        );\n        amounts = IUniswapV2Router02(uniswapV2RouterAddress).swapExactTokensForETH(\n            amountIn,\n            amountOutMin,\n            path,\n            to == address(this) ? to : address(this), // can only transfer to this drago\n            deadline\n        );\n        if (Token(path[0]).allowance(address(this), uniswapV2RouterAddress) > uint256(0)) {\n            Token(path[0]).approve(uniswapV2RouterAddress, uint256(0));\n        }\n        // TODO: check whether logging in eventful\n    }\n\n    function swapETHForExactTokens(\n        address payable uniswapV2RouterAddress,\n        uint256 sendETHAmount,\n        uint amountOut,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        payable\n        returns (uint[] memory amounts)\n    {\n        //callerIsDragoOwner();\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[(path.length -1)]);\n        amounts = IUniswapV2Router02(uniswapV2RouterAddress)\n        .swapETHForExactTokens{value: sendETHAmount}(\n            amountOut,\n            path,\n            to == address(this) ? to : address(this), // can only transfer to this drago\n            deadline\n        );\n        // TODO: check whether logging in eventful\n    }\n\n    // **** SWAP (supporting fee-on-transfer tokens) ****\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        address payable uniswapV2RouterAddress,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n    {\n        //callerIsDragoOwner();\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[0]);\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[(path.length -1)]);\n        require(\n            Token(path[0]).approve(uniswapV2RouterAddress, 2**256 -1),\n            \"UNISWAP_TOKEN_APPROVE_ERROR\"\n        );\n        IUniswapV2Router02(uniswapV2RouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            amountIn,\n            amountOutMin,\n            path,\n            to == address(this) ? to : address(this),\n            deadline\n        );\n        if (Token(path[0]).allowance(address(this), uniswapV2RouterAddress) > uint256(0)) {\n            Token(path[0]).approve(uniswapV2RouterAddress, uint256(0));\n        }\n        // TODO: check whether logging in eventful\n    }\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        address payable uniswapV2RouterAddress,\n        uint256 exactETHAmount,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        payable\n    {\n        //callerIsDragoOwner();\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[(path.length -1)]);\n        IUniswapV2Router02(uniswapV2RouterAddress)\n        .swapExactETHForTokensSupportingFeeOnTransferTokens{value: exactETHAmount}(\n            amountOutMin,\n            path,\n            to == address(this) ? to : address(this),\n            deadline\n        );\n        // TODO: check whether logging in eventful\n    }\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        address payable uniswapV2RouterAddress,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n    {\n        //callerIsDragoOwner();\n        //canTradeTokenOnExchange(uniswapV2RouterAddress, path[0]);\n        require(\n            Token(path[0]).approve(uniswapV2RouterAddress, 2**256 -1),\n            \"UNISWAP_TOKEN_APPROVE_ERROR\"\n        );\n        IUniswapV2Router02(uniswapV2RouterAddress).swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountIn,\n            amountOutMin,\n            path,\n            to == address(this) ? to : address(this),\n            deadline\n        );\n        if (Token(path[0]).allowance(address(this), uniswapV2RouterAddress) > uint256(0)) {\n            Token(path[0]).approve(uniswapV2RouterAddress, uint256(0));\n        }\n        // TODO: check whether logging in eventful\n    }\n\n    // **** INTERNAL ****\n    /// @dev Gets the address of the logger contract.\n    /// @return Address of the logger contrac.\n    function getDragoEventful()\n        internal\n        view\n        returns (address)\n    {\n        address dragoEvenfulAddress =\n            Drago(\n                address(this)\n            ).getEventful();\n        return dragoEvenfulAddress;\n    }\n\n    function callerIsDragoOwner()\n        internal\n        view\n    {\n        if (\n            Drago(\n                address(this)\n            ).owner() != msg.sender\n        ) { revert(\"FAIL_OWNER_CHECK_ERROR\"); }\n    }\n\n    function canTradeTokenOnExchange(\n        address payable uniswapV2RouterAddress,\n        address token\n        )\n        internal\n        view\n    {\n        if (!ExchangesAuthority(\n                Drago(\n                    address(uint160(address(this)))\n                )\n                .getExchangesAuth()\n            )\n            .canTradeTokenOnExchange(token, uniswapV2RouterAddress)) {\n                revert(\"UNISWAP_TOKEN_ON_EXCHANGE_ERROR\");\n            }\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/exchanges/uniswap/IUniswapV2Router02/IUniswapV2Router02.sol": {
			"content": "pragma solidity >=0.5.12;\n\ninterface IUniswapV2Router02 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
		}
	},
	"settings": {
		"remappings": [],
		"optimizer": {
			"enabled": true,
			"runs": 1000000
		},
		"outputSelection": {
			"*": {
				"*": [
					"abi",
					"devdoc",
					"evm.bytecode.object",
					"evm.bytecode.sourceMap",
					"evm.deployedBytecode.object",
					"evm.deployedBytecode.sourceMap"
				]
			}
		},
		"version": "0.6.6+commit.6c089d02"
	}
}