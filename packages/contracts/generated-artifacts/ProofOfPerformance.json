{
	"schemaVersion": "2.0.0",
	"contractName": "ProofOfPerformance",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [],
				"name": "dragoRegistryAddress",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "groupAddress",
						"type": "address"
					},
					{
						"name": "newRatio",
						"type": "uint256"
					}
				],
				"name": "setRatio",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "minter",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getHwm",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "addressFromId",
				"outputs": [
					{
						"name": "pool",
						"type": "address"
					},
					{
						"name": "group",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "calcPoolValue",
				"outputs": [
					{
						"name": "aum",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getRatio",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "proofOfPerformance",
				"outputs": [
					{
						"name": "popReward",
						"type": "uint256"
					},
					{
						"name": "performanceReward",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "STAKINGPROXYADDRESS",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "creditPopRewardToStakingProxy",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "rigoblockDaoAddress",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "isActive",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getPoolPrice",
				"outputs": [
					{
						"name": "poolPrice",
						"type": "uint256"
					},
					{
						"name": "totalTokens",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "RIGOTOKENADDRESS",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newDragoRegistryAddress",
						"type": "address"
					}
				],
				"name": "setRegistry",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newRigoblockDaoAddress",
						"type": "address"
					}
				],
				"name": "setRigoblockDao",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getPoolData",
				"outputs": [
					{
						"name": "active",
						"type": "bool"
					},
					{
						"name": "poolAddress",
						"type": "address"
					},
					{
						"name": "poolGroup",
						"type": "address"
					},
					{
						"name": "poolPrice",
						"type": "uint256"
					},
					{
						"name": "poolSupply",
						"type": "uint256"
					},
					{
						"name": "poolValue",
						"type": "uint256"
					},
					{
						"name": "epochReward",
						"type": "uint256"
					},
					{
						"name": "ratio",
						"type": "uint256"
					},
					{
						"name": "pop",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getEpochReward",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_rigoTokenAddress",
						"type": "address"
					},
					{
						"name": "_rigoblockDao",
						"type": "address"
					},
					{
						"name": "_dragoRegistry",
						"type": "address"
					},
					{
						"name": "_stakingProxyAddress",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"devdoc": {
			"author": "Gabriele Rigo - <gab@rigoblock.com>",
			"methods": {
				"addressFromId(uint256)": {
					"details": "Returns the address and the group of a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "pool Address of the target pool.group Address of the pool's group."
				},
				"calcPoolValue(uint256)": {
					"details": "Returns the value of a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "aum Total value of the pool in ETH."
				},
				"creditPopRewardToStakingProxy(uint256)": {
					"details": "Credits the pop reward to the Staking Proxy contract.",
					"params": {
						"poolId": "Number of the pool Id in registry."
					}
				},
				"getEpochReward(uint256)": {
					"details": "Returns the reward factor for a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "Value of the reward factor."
				},
				"getHwm(uint256)": {
					"details": "Returns the highwatermark of a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "Value of the all-time-high pool nav."
				},
				"getPoolData(uint256)": {
					"details": "Gets data of a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "active Bool the pool is active.poolAddress address of the pool.poolGroup address of the pool factory.poolPrice price of the pool in wei.poolSupply total supply of the pool in units.poolValue total value of the pool in wei.epochReward value of the reward factor or said pool.ratio of assets/performance reward (from 0 to 10000).pop value of the pop reward to be claimed in GRGs."
				},
				"getPoolPrice(uint256)": {
					"details": "Returns the price a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "poolPrice Price of the pool in wei.totalTokens Number of tokens of a pool (totalSupply)."
				},
				"getRatio(uint256)": {
					"details": "Returns the split ratio of asset and performance reward.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "Value of the ratio from 1 to 100."
				},
				"isActive(uint256)": {
					"details": "Checks whether a pool is registered and active.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "Bool the pool is active."
				},
				"proofOfPerformance(uint256)": {
					"details": "Returns the proof of performance reward for a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "popReward Value of the pop reward in Rigo tokens.performanceReward Split of the performance reward in Rigo tokens."
				},
				"setRatio(address,uint256)": {
					"details": "Allows RigoBlock Dao to set the ratio between assets and performance reward for a group.",
					"params": {
						"groupAddress": "Address of the pool's group.",
						"newRatio": "Value of the new ratio."
					}
				},
				"setRegistry(address)": {
					"details": "Allows RigoBlock Dao to update the pools registry.",
					"params": {
						"newDragoRegistryAddress": "Address of new registry."
					}
				},
				"setRigoblockDao(address)": {
					"details": "Allows RigoBlock Dao to update its address.",
					"params": {
						"newRigoblockDaoAddress": "Address of new dao."
					}
				}
			},
			"title": "Proof of Performance - Controls parameters of inflation."
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x",
				"opcodes": "",
				"sourceMap": ""
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x",
				"opcodes": "",
				"sourceMap": ""
			}
		}
	},
	"sourceTreeHashHex": "0xdeedd21adfcf5ea0a60b43a1741a9ba5c41db7f20582fa90f0b66750ed2c9808",
	"sources": {
		"./ProofOfPerformance.sol": {
			"id": 4
		},
		"../../utils/Pool/Pool.sol": {
			"id": 8
		},
		"../../utils/ReentrancyGuard/ReentrancyGuard.sol": {
			"id": 9
		},
		"../../utils/SafeMath/SafeMath.sol": {
			"id": 10
		},
		"./ProofOfPerformanceFace.sol": {
			"id": 5
		},
		"../Inflation/InflationFace.sol": {
			"id": 3
		},
		"../RigoToken/RigoTokenFace.sol": {
			"id": 6
		},
		"../../protocol/DragoRegistry/IDragoRegistry.sol": {
			"id": 0
		}
	},
	"sourceCodes": {
		"./ProofOfPerformance.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.4;\n\nimport { Pool } from \"../../utils/Pool/Pool.sol\";\nimport { ReentrancyGuard } from \"../../utils/ReentrancyGuard/ReentrancyGuard.sol\";\nimport { SafeMath } from \"../../utils/SafeMath/SafeMath.sol\";\nimport { ProofOfPerformanceFace } from \"./ProofOfPerformanceFace.sol\";\nimport { InflationFace } from \"../Inflation/InflationFace.sol\";\nimport { RigoTokenFace } from \"../RigoToken/RigoTokenFace.sol\";\nimport { IDragoRegistry } from \"../../protocol/DragoRegistry/IDragoRegistry.sol\";\n\ninterface Staking {\n\n    /// @dev Credits the value of a pool's pop reward.\n    ///      Only a known RigoBlock pop can call this method. See\n    ///      (MixinPopManager).\n    /// @param poolAccount The address of the rigoblock pool account.\n    /// @param popReward The pop reward.\n    function creditPopReward(\n        address poolAccount,\n        uint256 popReward\n    )\n        external\n        payable;\n}\n\n\n/// @title Proof of Performance - Controls parameters of inflation.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract ProofOfPerformance is\n    SafeMath,\n    ReentrancyGuard,\n    ProofOfPerformanceFace\n{\n    address public RIGOTOKENADDRESS;\n    address public STAKINGPROXYADDRESS;\n\n    address public dragoRegistryAddress;\n    address public rigoblockDaoAddress;\n\n    mapping (address => Group) groups;\n    mapping (uint256 => uint256) private _highWaterMark;\n\n    struct Group {\n        uint256 rewardRatio;\n    }\n\n    modifier onlyRigoblockDao() {\n        _assertCallerIsRigoblockDao();\n        _;\n    }\n\n    modifier onlyStakingProxy() {\n        _assertCallerIsStakingProxy();\n        _;\n    }\n\n    constructor(\n        address _rigoTokenAddress,\n        address _rigoblockDao,\n        address _dragoRegistry,\n        address _stakingProxyAddress)\n        public\n    {\n        RIGOTOKENADDRESS = _rigoTokenAddress;\n        rigoblockDaoAddress = _rigoblockDao;\n        dragoRegistryAddress = _dragoRegistry;\n        STAKINGPROXYADDRESS = _stakingProxyAddress;\n    }\n    \n    /// @dev Credits the pop reward to the Staking Proxy contract.\n    /// @param poolId Number of the pool Id in registry.\n    function creditPopRewardToStakingProxy(\n        uint256 poolId\n    )\n        external\n        nonReentrant\n    {\n        (address poolAddress, , , , , ) = IDragoRegistry(dragoRegistryAddress).fromId(poolId);\n        uint256 poolPrice = Pool(poolAddress).calcSharePrice();\n        \n        // allow smart contract calls only from pool itself\n        if (_isContract(msg.sender)) {\n            _assertContractIsPool(poolAddress);\n        }\n        \n        // TODO: test\n        // initialization is not necessary but explicit as to prevent failure in case of a future upgrade\n        _initializeHwmIfUninitialized(poolId);\n        \n        (uint256 popReward, ) = _proofOfPerformanceInternal(poolId);\n        \n        // pop assets component is always positive, therefore we must update the hwm if positive performance\n        _updateHwmIfPositivePerformance(poolPrice, poolId);\n        \n        // TODO: check if shold return error message or should use more recent solc & require\n        Staking(STAKINGPROXYADDRESS).creditPopReward(poolAddress, popReward);\n    }\n\n    /// @dev Allows RigoBlock Dao to update the pools registry.\n    /// @param newDragoRegistryAddress Address of new registry.\n    function setRegistry(address newDragoRegistryAddress)\n        external\n        onlyRigoblockDao\n    {\n        dragoRegistryAddress = newDragoRegistryAddress;\n    }\n\n    /// @dev Allows RigoBlock Dao to update its address.\n    /// @param newRigoblockDaoAddress Address of new dao.\n    function setRigoblockDao(address newRigoblockDaoAddress)\n        external\n        onlyRigoblockDao\n    {\n        rigoblockDaoAddress = newRigoblockDaoAddress;\n    }\n    \n    /// @dev Allows RigoBlock Dao to set the ratio between assets and performance reward for a group.\n    /// @param groupAddress Address of the pool's group.\n    /// @param newRatio Value of the new ratio.\n    /// @notice onlyRigoblockDao can set ratio.\n    function setRatio(\n        address groupAddress,\n        uint256 newRatio)\n        external\n        onlyRigoblockDao\n    {\n        require(\n            newRatio <= 10000,\n            \"RATIO_BIGGER_THAN_10000\"\n        ); //(from 0 to 10000)\n        groups[groupAddress].rewardRatio = newRatio;\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Gets data of a pool.\n    /// @param poolId Id of the pool.\n    /// @return active Bool the pool is active.\n    /// @return poolAddress address of the pool.\n    /// @return poolGroup address of the pool factory.\n    /// @return poolPrice price of the pool in wei.\n    /// @return poolSupply total supply of the pool in units.\n    /// @return poolValue total value of the pool in wei.\n    /// @return epochReward value of the reward factor or said pool.\n    /// @return ratio of assets/performance reward (from 0 to 10000).\n    /// @return pop value of the pop reward to be claimed in GRGs.\n    function getPoolData(uint256 poolId)\n        external\n        view\n        returns (\n            bool active,\n            address poolAddress,\n            address poolGroup,\n            uint256 poolPrice,\n            uint256 poolSupply,\n            uint256 poolValue,\n            uint256 epochReward,\n            uint256 ratio,\n            uint256 pop\n        )\n    {\n        active = _isActiveInternal(poolId);\n        (poolAddress, poolGroup) = _addressFromIdInternal(poolId);\n        (poolPrice, poolSupply, poolValue) = _getPoolPriceAndValueInternal(poolId);\n        (epochReward, , ratio) = _getInflationParameters(poolId);\n        (pop, ) = _proofOfPerformanceInternal(poolId);\n        return(\n            active,\n            poolAddress,\n            poolGroup,\n            poolPrice,\n            poolSupply,\n            poolValue,\n            epochReward,\n            ratio,\n            pop\n        );\n    }\n    \n    /// @dev Returns the highwatermark of a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the all-time-high pool nav.\n    function getHwm(uint256 poolId)\n        external\n        view\n        returns (uint256)\n    {\n        return _getHwmInternal(poolId);\n    }\n    \n    /// @dev Returns the reward factor for a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the reward factor.\n    function getEpochReward(uint256 poolId)\n        external\n        view\n        returns (uint256)\n    {\n        (uint256 epochReward, , ) = _getInflationParameters(poolId);\n        return epochReward;\n    }\n\n    /// @dev Returns the split ratio of asset and performance reward.\n    /// @param poolId Id of the pool.\n    /// @return Value of the ratio from 1 to 100.\n    function getRatio(uint256 poolId)\n        external\n        view\n        returns (uint256)\n    {\n        ( , , uint256 ratio) = _getInflationParameters(poolId);\n        return ratio;\n    }\n\n    /// @dev Returns the proof of performance reward for a pool.\n    /// @param poolId Id of the pool.\n    /// @return popReward Value of the pop reward in Rigo tokens.\n    /// @return performanceReward Split of the performance reward in Rigo tokens.\n    /// @notice epoch reward should be big enough that it.\n    /// @notice can be decreased if number of funds increases.\n    /// @notice should be at least 10^6 (just as pool base) to start with.\n    /// @notice rigo token has 10^18 decimals.\n    function proofOfPerformance(uint256 poolId)\n        external\n        view\n        returns (uint256 popReward, uint256 performanceReward)\n    {\n        return _proofOfPerformanceInternal(poolId);\n    }\n\n    /// @dev Checks whether a pool is registered and active.\n    /// @param poolId Id of the pool.\n    /// @return Bool the pool is active.\n    function isActive(uint256 poolId)\n        external\n        view\n        returns (bool)\n    {\n        return _isActiveInternal(poolId);\n    }\n\n    /// @dev Returns the address and the group of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return pool Address of the target pool.\n    /// @return group Address of the pool's group.\n    function addressFromId(uint256 poolId)\n        external\n        view\n        returns (\n            address pool,\n            address group\n        )\n    {\n        return _addressFromIdInternal(poolId);\n    }\n\n    /// @dev Returns the price a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return poolPrice Price of the pool in wei.\n    /// @return totalTokens Number of tokens of a pool (totalSupply).\n    function getPoolPrice(uint256 poolId)\n        external\n        view\n        returns (\n            uint256 poolPrice,\n            uint256 totalTokens\n        )\n    {\n        (poolPrice, totalTokens, ) = _getPoolPriceAndValueInternal(poolId);\n    }\n\n    /// @dev Returns the value of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return aum Total value of the pool in ETH.\n    function calcPoolValue(uint256 poolId)\n        external\n        view\n        returns (\n            uint256 aum\n        )\n    {\n        ( , , aum) = _getPoolPriceAndValueInternal(poolId);\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Initializes the High Watermark if unitialized.\n    /// @param poolId Number of the pool Id in registry.\n    function _initializeHwmIfUninitialized(uint256 poolId)\n        internal\n    {\n        if (_highWaterMark[poolId] == uint256(0)) {\n            _highWaterMark[poolId] = 1 ether;\n        }\n    }\n    \n    /// @dev Updates high-water mark if positive performance.\n    /// @param poolPrice Value of the pool price.\n    /// @param poolId Number of the pool Id in registry.\n    function _updateHwmIfPositivePerformance(\n        uint256 poolPrice,\n        uint256 poolId\n    )\n        internal\n    {\n        if (poolPrice > _highWaterMark[poolId]) {\n            _highWaterMark[poolId] = poolPrice;\n        }\n    }\n    \n    /// @dev Returns the split ratio of asset and performance reward.\n    /// @param poolId Id of the pool.\n    /// @return epochReward Value of the reward factor.\n    /// @return epochTime Value of epoch time.\n    /// @return ratio Value of the ratio from 1 to 100.\n    function _getInflationParameters(uint256 poolId)\n        internal\n        view\n        returns (\n            uint256 epochReward,\n            uint256 epochTime,\n            uint256 ratio\n        )\n    {\n        ( , address groupAddress) = _addressFromIdInternal(poolId);\n        epochReward = InflationFace(_getMinter()).getInflationFactor(groupAddress);\n        epochTime = InflationFace(_getMinter()).period();\n        ratio = groups[groupAddress].rewardRatio;\n    }\n\n    /// @dev Returns the address of the Inflation contract.\n    /// @return Address of the minter/inflation.\n    function _getMinter()\n        internal\n        view\n        returns (address)\n    {\n        return RigoTokenFace(RIGOTOKENADDRESS).minter();\n    }\n\n    /// @dev Returns the proof of performance reward for a pool.\n    /// @param poolId Id of the pool.\n    /// @return popReward Value of the pop reward in Rigo tokens.\n    /// @return performanceReward Split of the performance reward in Rigo tokens.\n    /// @notice epoch reward should be big enough that it  can be decreased when number of funds increases\n    /// @notice should be at least 10^6 (just as pool base) to start with.\n    function _proofOfPerformanceInternal(uint256 poolId)\n        internal\n        view\n        returns (uint256 popReward, uint256 performanceReward)\n    {\n        (uint256 newPrice, uint256 tokenSupply, uint256 poolValue) = _getPoolPriceAndValueInternal(poolId);\n        (address poolAddress, ) = _addressFromIdInternal(poolId);\n        (uint256 epochReward, uint256 epochTime, uint256 rewardRatio) = _getInflationParameters(poolId);\n        uint256 assetsComponent = 0;\n        uint256 performanceComponent = 0;\n\n        assetsComponent = safeMul(\n            poolValue,\n            epochReward\n        ) * epochTime / 1 days; // proportional to epoch time\n\n        // TODO: test new logic of only performance component null if price below high watermark\n        performanceComponent = newPrice <= _getHwmInternal(poolId) ? 0 : safeMul(\n            safeMul(\n                (newPrice - _getHwmInternal(poolId)),\n                tokenSupply\n            ) / 1000000, // Pool(poolAddress).BASE(),\n            epochReward\n        ) * 365 days / 1 days;\n\n        uint256 assetsReward = (\n            safeMul(\n                assetsComponent,\n                safeSub(10000, rewardRatio) // 10000 = 100%\n            ) / 10000 ether\n        ) * _ethBalanceAdjustmentInternal(poolAddress, poolValue) / 1 ether; // reward inversely proportional to Eth in pool\n\n        performanceReward = safeDiv(\n            safeMul(performanceComponent, rewardRatio),\n            10000 ether\n        ) * _ethBalanceAdjustmentInternal(poolAddress, poolValue) / 1 ether;\n        \n        popReward = safeAdd(performanceReward, assetsReward);\n    }\n\n    /// @dev Returns the high-watermark of the pool.\n    /// @param poolId Number of the pool in registry.\n    /// @return Number high-watermark.\n    function _getHwmInternal(uint256 poolId)\n        internal\n        view\n        returns (uint256)\n    {\n        if (_highWaterMark[poolId] == uint256(0)) {\n            return (1 ether);\n        \n        } else {\n            return _highWaterMark[poolId];\n        }\n    }\n\n    /// @dev Returns the non-linear rewards adjustment by eth.\n    /// @param poolAddress Address of the pool.\n    /// @param poolValue Number of value of the pool in wei.\n    /// @return Number non-linear adjustment.\n    function _ethBalanceAdjustmentInternal(\n        address poolAddress,\n        uint256 poolValue\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 poolEthBalance = address(Pool(poolAddress)).balance;\n        // prevent dust from small pools\n        if (\n            poolEthBalance > poolValue ||\n            poolEthBalance < 1 finney ||\n            poolValue < 10 finney\n          ) {\n            revert('ETH_ABOVE_AUM_OR_DUST_ERROR');\n        }\n        \n        // logistic function progression g(x)=e^x/(1+e^x).\n        // rebased on {(poolEthBalance / poolValue)} b\b\b [0.025:0.6], x b\b\b [-1.9:2.8].\n        if (1 ether * poolEthBalance / poolValue >= 800 finney) {\n            return (1 ether);\n        \n        } else if (1 ether * poolEthBalance / poolValue >= 600 finney) {\n            return (1 ether * 943 / 1000);\n        \n        } else if (1 ether * poolEthBalance / poolValue >= 500 finney) {\n            return (1 ether * 881 / 1000);\n        \n        } else if (1 ether * poolEthBalance / poolValue >= 400 finney) {\n            return (1 ether * 769 / 1000);\n        \n        } else if (1 ether * poolEthBalance / poolValue >= 300 finney) {\n            return (1 ether * 599 / 1000);\n        \n        } else if (1 ether * poolEthBalance / poolValue >= 200 finney) {\n            return (1 ether * 401 / 1000);\n        \n        } else if (1 ether * poolEthBalance / poolValue >= 100 finney) {\n            return (1 ether * 231 / 1000);\n        \n        } else if (1 ether * poolEthBalance / poolValue >= 75 finney) {\n            return (1 ether * 198 / 1000);\n        \n        } else if (1 ether * poolEthBalance / poolValue >= 50 finney) {\n            return (1 ether * 168 / 1000);\n        \n        } else if (1 ether * poolEthBalance / poolValue >= 38 finney) {\n            return (1 ether * 155 / 1000);\n        \n        } else if (1 ether * poolEthBalance / poolValue >= 25 finney) {\n            return (1 ether * 142 / 1000);\n        \n        } else { // reward is 0 for any pool not backed by at least 2.5% eth\n            revert('ETH_BELOW_2.5_PERCENT_AUM_ERROR');\n        }\n    }\n    \n    /// @dev Checks whether a pool is registered and active.\n    /// @param poolId Id of the pool.\n    /// @return Bool the pool is active.\n    function _isActiveInternal(uint256 poolId)\n        internal view\n        returns (bool)\n    {\n        (address poolAddress, , , , , ) = IDragoRegistry(dragoRegistryAddress).fromId(poolId);\n        if (poolAddress != address(0)) {\n            return true;\n        }\n    }\n\n    /// @dev Returns the address and the group of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return pool Address of the target pool.\n    /// @return group Address of the pool's group.\n    function _addressFromIdInternal(uint256 poolId)\n        internal\n        view\n        returns (\n            address pool,\n            address group\n        )\n    {\n        (pool, , , , , group) = IDragoRegistry(dragoRegistryAddress).fromId(poolId);\n        return (pool, group);\n    }\n\n    /// @dev Returns price, supply, aum of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return poolPrice Price of the pool in wei.\n    /// @return totalTokens Number of tokens of a pool (totalSupply).\n    /// @return aum Address of the target pool.\n    function _getPoolPriceAndValueInternal(uint256 poolId)\n        internal\n        view\n        returns (\n            uint256 poolPrice,\n            uint256 totalTokens,\n            uint256 aum\n        )\n    {\n        (address poolAddress, ) = _addressFromIdInternal(poolId);\n        Pool pool = Pool(poolAddress);\n        poolPrice = pool.calcSharePrice();\n        totalTokens = pool.totalSupply();\n        if (poolPrice == uint256(0) || totalTokens == uint256(0)) {\n            revert(\"POOL_PRICE_OR_TOTAL_SUPPLY_NULL_ERROR\");\n        }\n        aum = safeMul(poolPrice, totalTokens) / 1000000; // pool.BASE();\n    }\n    \n    /// @dev Asserts that the caller is the RigoBlock Dao.\n    function _assertCallerIsRigoblockDao()\n        internal\n        view\n    {\n        if (msg.sender != rigoblockDaoAddress) {\n            revert(\"CALLER_NOT_RIGOBLOCK_DAO_ERROR\");\n        }\n    }\n    \n    /// @dev Asserts that the caller is the Staking Proxy.\n    function _assertCallerIsStakingProxy()\n        internal\n        view\n    {\n        if (msg.sender != STAKINGPROXYADDRESS) {\n            revert(\"CALLER_NOT_STAKING_PROXY_ERROR\");\n        }\n    }\n    \n    /// @dev Determines whether an address is an account or a contract\n    /// @param target Address to be inspected\n    /// @return Boolean the address is a contract\n    function _isContract(address target)\n        internal view\n        returns (bool)\n    {\n        uint size;\n        assembly {\n            size := extcodesize(target)\n        }\n        return size > 0;\n    }\n    \n    /// @dev Asserts whether the caller contract is the pool\n    /// @param poolAddress Address of the calling pool\n    function _assertContractIsPool(address poolAddress)\n        internal\n        view\n    {\n        if (msg.sender != poolAddress) {\n            revert(\"SMART_CONTRACT_CALLER_IS_NOT_POOL_ERROR\");\n        }\n    }\n}\n",
		"../../utils/Pool/Pool.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/// @title Pool Interface Contract - Interface of pool standard functions.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n/// @notice used in order to access public variable\ncontract Pool {\n\n    address public owner;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function balanceOf(address _who) external view returns (uint256);\n    function totalSupply() external view returns (uint256 totaSupply);\n    function getEventful() external view returns (address);\n    function getData() external view returns (string memory name, string memory symbol, uint256 sellPrice, uint256 buyPrice);\n    function calcSharePrice() external view returns (uint256);\n    function getAdminData() external view returns (address, address feeCollector, address dragodAO, uint256 ratio, uint256 transactionFee, uint32 minPeriod);\n}\n",
		"../../utils/ReentrancyGuard/ReentrancyGuard.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ncontract ReentrancyGuard {\n\n    // Locked state of mutex\n    bool private locked = false;\n\n    /// @dev Functions with this modifer cannot be reentered. The mutex will be locked\n    ///      before function execution and unlocked after.\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(\n            !locked,\n            \"REENTRANCY_ILLEGAL\"\n        );\n\n        // Lock mutex before function call\n        locked = true;\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        locked = false;\n    }\n}\n",
		"../../utils/SafeMath/SafeMath.sol": "pragma solidity >=0.4.22 <0.6.0;\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n",
		"./ProofOfPerformanceFace.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.8.0;\n\n/// @title Proof of Performance Interface - Allows interaction with the PoP contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface ProofOfPerformanceFace {\n    \n    function minter() external view returns (address);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Credits the pop reward to the Staking Proxy contract.\n    /// @param poolId Number of the pool Id in registry.\n    function creditPopRewardToStakingProxy(uint256 poolId) external;\n\n    /// @dev Allows RigoBlock Dao to update the pools registry.\n    /// @param newDragoRegistryAddress Address of new registry.\n    function setRegistry(address newDragoRegistryAddress) external;\n\n    /// @dev Allows RigoBlock Dao to update its address.\n    /// @param newRigoblockDaoAddress Address of new dao.\n    function setRigoblockDao(address newRigoblockDaoAddress) external;\n\n    /// @dev Allows RigoBlock Dao to set the ratio between assets and performance reward for a group.\n    /// @param groupAddress Address of the pool's group.\n    /// @param newRatio Value of the new ratio.\n    /// @notice onlyRigoblockDao can set ratio.\n    function setRatio(address groupAddress, uint256 newRatio) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Gets data of a pool.\n    /// @param poolId Id of the pool.\n    /// @return active Bool the pool is active.\n    /// @return poolAddress address of the pool.\n    /// @return poolGroup address of the pool factory.\n    /// @return poolPrice price of the pool in wei.\n    /// @return poolSupply total supply of the pool in units.\n    /// @return poolValue total value of the pool in wei.\n    /// @return epochReward value of the reward factor or said pool.\n    /// @return ratio of assets/performance reward (from 0 to 10000).\n    /// @return pop value of the pop reward to be claimed in GRGs.\n    function getPoolData(uint256 poolId)\n        external\n        view\n        returns (\n            bool active,\n            address poolAddress,\n            address poolGroup,\n            uint256 poolPrice,\n            uint256 poolSupply,\n            uint256 poolValue,\n            uint256 epochReward,\n            uint256 ratio,\n            uint256 pop\n        );\n    \n    /// @dev Returns the highwatermark of a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the all-time-high pool nav.\n    function getHwm(uint256 poolId) external view returns (uint256);\n\n    /// @dev Returns the reward factor for a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the reward factor.\n    function getEpochReward(uint256 poolId)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the split ratio of asset and performance reward.\n    /// @param poolId Id of the pool.\n    /// @return Value of the ratio from 1 to 100.\n    function getRatio(uint256 poolId)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the proof of performance reward for a pool.\n    /// @param poolId Id of the pool.\n    /// @return popReward Value of the pop reward in Rigo tokens.\n    /// @return performanceReward Split of the performance reward in Rigo tokens.\n    /// @notice epoch reward should be big enough that it.\n    /// @notice can be decreased if number of funds increases.\n    /// @notice should be at least 10^6 (just as pool base) to start with.\n    /// @notice rigo token has 10^18 decimals.\n    function proofOfPerformance(uint256 poolId)\n        external\n        view\n        returns (uint256 popReward, uint256 performanceReward);\n\n    /// @dev Checks whether a pool is registered and active.\n    /// @param poolId Id of the pool.\n    /// @return Bool the pool is active.\n    function isActive(uint256 poolId)\n        external\n        view\n        returns (bool);\n\n    /// @dev Returns the address and the group of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return pool Address of the target pool.\n    /// @return group Address of the pool's group.\n    function addressFromId(uint256 poolId)\n        external\n        view\n        returns (\n            address pool,\n            address group\n        );\n\n    /// @dev Returns the price a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return poolPrice Price of the pool in wei.\n    /// @return totalTokens Number of tokens of a pool (totalSupply).\n    function getPoolPrice(uint256 poolId)\n        external\n        view\n        returns (\n            uint256 poolPrice,\n            uint256 totalTokens\n        );\n\n    /// @dev Returns the value of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return aum Total value of the pool in ETH.\n    function calcPoolValue(uint256 poolId)\n        external\n        view\n        returns (\n            uint256 aum\n        );\n}\n",
		"../Inflation/InflationFace.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.8.0;\n\n/// @title Inflation Interface - Allows interaction with the Inflation contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface InflationFace {\n\n    function period() external view returns (uint256);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function mintInflation(bytes32 stakingPoolId, uint256 reward) external returns (bool);\n    function setInflationFactor(address groupAddress, uint256 inflationFactor) external;\n    function setRigoblock(address newRigoblockDaoAddress) external;\n    function setAuthority(address newRigoblockDaoAddress) external;\n    function setStakingProxy(address stakingProxyAddress) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function canWithdraw(bytes32 stakingPoolId) external view returns (bool);\n    function timeUntilClaim(bytes32 stakingPoolId) external view returns (uint256);\n    function getInflationFactor(address groupAddress) external view returns (uint256);\n    function getMaxEpochReward(uint256 totalGrgDelegatedToPool) external view returns (uint256);\n}\n",
		"../RigoToken/RigoTokenFace.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.5.0;\n\n/// @title Rigo Token Interface - Allows interaction with the Rigo token.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface RigoTokenFace {\n\n    function minter() external view returns (address);\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n\n    function mintToken(address _recipient, uint256 _amount) external;\n    function changeMintingAddress(address _newAddress) external;\n    function changeRigoblockAddress(address _newAddress) external;\n}\n",
		"../../protocol/DragoRegistry/IDragoRegistry.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Drago Registry Interface - Allows external interaction with Drago Registry.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface IDragoRegistry {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function register(address _drago, string calldata _name, string calldata _symbol, uint256 _dragoId, address _owner) external payable returns (bool);\n    function unregister(uint256 _id) external;\n    function setMeta(uint256 _id, bytes32 _key, bytes32 _value) external;\n    function addGroup(address _group) external;\n    function setFee(uint256 _fee) external;\n    function updateOwner(uint256 _id) external;\n    function updateOwners(uint256[] calldata _id) external;\n    function upgrade(address _newAddress) external payable; //payable as there is a transfer of value, otherwise opcode might throw an error\n    function setUpgraded(uint256 _version) external;\n    function drain() external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function dragoCount() external view returns (uint256);\n    function fromId(uint256 _id) external view returns (address drago, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromAddress(address _drago) external view returns (uint256 id, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromName(string calldata _name) external view returns (uint256 id, address drago, string memory symbol, uint256 dragoId, address owner, address group);\n    function getNameFromAddress(address _pool) external view returns (string memory);\n    function getSymbolFromAddress(address _pool) external view returns (string memory);\n    function meta(uint256 _id, bytes32 _key) external view returns (bytes32);\n    function getGroups() external view returns (address[] memory);\n    function getFee() external view returns (uint256);\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.5.4+commit.9549d8ff",
		"settings": {
			"remappings": [],
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}