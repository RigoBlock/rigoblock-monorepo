{
	"schemaVersion": "2.0.0",
	"contractName": "ProofOfPerformance",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_rigoTokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_rigoblockDao",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_dragoRegistry",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_stakingProxyAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "RIGOTOKENADDRESS",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "STAKINGPROXYADDRESS",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "addressFromId",
				"outputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "group",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "calcPoolValue",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "aum",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "creditPopRewardToStakingProxy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "dragoRegistryAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getEpochReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getHwm",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getPoolData",
				"outputs": [
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "poolAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "poolGroup",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "poolPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "poolSupply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "poolValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "epochReward",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "ratio",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "pop",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getPoolPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "poolPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalTokens",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getRatio",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "groups",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "rewardRatio",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "isActive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "proofOfPerformance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "popReward",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "performanceReward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rigoblockDaoAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "groupAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "newRatio",
						"type": "uint256"
					}
				],
				"name": "setRatio",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newDragoRegistryAddress",
						"type": "address"
					}
				],
				"name": "setRegistry",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newRigoblockDaoAddress",
						"type": "address"
					}
				],
				"name": "setRigoblockDao",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Gabriele Rigo - <gab@rigoblock.com>",
			"kind": "dev",
			"methods": {
				"addressFromId(uint256)": {
					"details": "Returns the address and the group of a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"group": "Address of the pool's group.",
						"pool": "Address of the target pool."
					}
				},
				"calcPoolValue(uint256)": {
					"details": "Returns the value of a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"aum": "Total value of the pool in ETH."
					}
				},
				"creditPopRewardToStakingProxy(uint256)": {
					"details": "Credits the pop reward to the Staking Proxy contract.",
					"params": {
						"poolId": "Number of the pool Id in registry."
					}
				},
				"getEpochReward(uint256)": {
					"details": "Returns the reward factor for a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"_0": "Value of the reward factor."
					}
				},
				"getHwm(uint256)": {
					"details": "Returns the highwatermark of a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"_0": "Value of the all-time-high pool nav."
					}
				},
				"getPoolData(uint256)": {
					"details": "Gets data of a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"active": "Bool the pool is active.",
						"epochReward": "value of the reward factor or said pool.",
						"poolAddress": "address of the pool.",
						"poolGroup": "address of the pool factory.",
						"poolPrice": "price of the pool in wei.",
						"poolSupply": "total supply of the pool in units.",
						"poolValue": "total value of the pool in wei.",
						"pop": "value of the pop reward to be claimed in GRGs.",
						"ratio": "of assets/performance reward (from 0 to 10000)."
					}
				},
				"getPoolPrice(uint256)": {
					"details": "Returns the price a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"poolPrice": "Price of the pool in wei.",
						"totalTokens": "Number of tokens of a pool (totalSupply)."
					}
				},
				"getRatio(uint256)": {
					"details": "Returns the split ratio of asset and performance reward.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"_0": "Value of the ratio from 1 to 100."
					}
				},
				"isActive(uint256)": {
					"details": "Checks whether a pool is registered and active.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"_0": "Bool the pool is active."
					}
				},
				"proofOfPerformance(uint256)": {
					"details": "Returns the proof of performance reward for a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"returns": {
						"performanceReward": "Split of the performance reward in Rigo tokens.",
						"popReward": "Value of the pop reward in Rigo tokens."
					}
				},
				"setRatio(address,uint256)": {
					"details": "Allows RigoBlock Dao to set the ratio between assets and performance reward for a group.",
					"params": {
						"groupAddress": "Address of the pool's group.",
						"newRatio": "Value of the new ratio."
					}
				},
				"setRegistry(address)": {
					"details": "Allows RigoBlock Dao to update the pools registry.",
					"params": {
						"newDragoRegistryAddress": "Address of new registry."
					}
				},
				"setRigoblockDao(address)": {
					"details": "Allows RigoBlock Dao to update its address.",
					"params": {
						"newRigoblockDaoAddress": "Address of new dao."
					}
				}
			},
			"title": "Proof of Performance - Controls parameters of inflation.",
			"version": 1
		},
		"evm": {
			"bytecode": {
				"generatedSources": [],
				"linkReferences": {},
				"object": "0x60c060405234801561001057600080fd5b50604051611b2a380380611b2a8339818101604052608081101561003357600080fd5b508051602082015160408301516060938401516001600160601b031993851b8416608052600180546001600160a01b039485166001600160a01b0319918216179091556000805494909316931692909217905590911b1660a05260805160601c60a05160601c611a656100c56000398061059252806108bd52806110725250806109ab52806115b35250611a656000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80637d0107cf116100b2578063a6c9c44311610081578063b516e6e111610066578063b516e6e114610395578063d21c87ad146103c8578063d418634a1461044757610136565b8063a6c9c4431461035a578063a91ee0dc1461036257610136565b80637d0107cf146102e75780637f8be8591461030457806382afd23b1461030c5780639af94f301461033d57610136565b8063427fdc0c116101095780634d749e43116100ee5780634d749e431461027657806363d5e44d146102ac578063663b64f7146102df57610136565b8063427fdc0c1461023c57806346a62eaf1461025957610136565b8063025796771461013b578063057520471461016c578063249d9123146101a7578063360dafa0146101d6575b600080fd5b610143610464565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101a56004803603604081101561018257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610480565b005b6101c4600480360360208110156101bd57600080fd5b5035610522565b60408051918252519081900360200190f35b6101f3600480360360208110156101ec57600080fd5b5035610535565b604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b6101c46004803603602081101561025257600080fd5b503561054a565b6101c46004803603602081101561026f57600080fd5b503561055d565b6102936004803603602081101561028c57600080fd5b5035610572565b6040805192835260208301919091528051918290030190f35b6101c4600480360360208110156102c257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661057e565b610143610590565b6101a5600480360360208110156102fd57600080fd5b50356105b4565b61014361096b565b6103296004803603602081101561032257600080fd5b5035610987565b604080519115158252519081900360200190f35b6102936004803603602081101561035357600080fd5b5035610992565b6101436109a9565b6101a56004803603602081101561037857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109cd565b6101a5600480360360208110156103ab57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a1c565b6103e5600480360360208110156103de57600080fd5b5035610a6b565b604080519915158a5273ffffffffffffffffffffffffffffffffffffffff98891660208b015296909716888701526060880194909452608087019290925260a086015260c085015260e084015261010083019190915251908190036101200190f35b6101c46004803603602081101561045d57600080fd5b5035610acc565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b610488610ae2565b6127108111156104f957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f524154494f5f4249474745525f5448414e5f3130303030000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff909116600090815260026020526040902055565b600061052d82610b6a565b90505b919050565b60008061054183610ba1565b91509150915091565b600061055582610de0565b949350505050565b60008061056983610f83565b95945050505050565b60008061054183611116565b60026020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054604080517fc277f1ac00000000000000000000000000000000000000000000000000000000815260048101859052905173ffffffffffffffffffffffffffffffffffffffff9092169163c277f1ac916024808201928692909190829003018186803b15801561062657600080fd5b505afa15801561063a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260c081101561068157600080fd5b8151602083018051604051929492938301929190846401000000008211156106a857600080fd5b9083019060208201858111156106bd57600080fd5b82516401000000008111828201881017156106d757600080fd5b82525081516020918201929091019080838360005b838110156107045781810151838201526020016106ec565b50505050905090810190601f1680156107315780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561075457600080fd5b90830190602082018581111561076957600080fd5b825164010000000081118282018810171561078357600080fd5b82525081516020918201929091019080838360005b838110156107b0578181015183820152602001610798565b50505050905090810190601f1680156107dd5780820380516001836020036101000a031916815260200191505b506040525093945050505073ffffffffffffffffffffffffffffffffffffffff82161515905061080d5750610968565b60008173ffffffffffffffffffffffffffffffffffffffff16639489fa846040518163ffffffff1660e01b815260040160206040518083038186803b15801561085557600080fd5b505afa158015610869573d6000803e3d6000fd5b505050506040513d602081101561087f57600080fd5b5051905061088c33611252565b1561089a5761089a82611258565b6108a3836112c6565b60006108ae84611116565b5090506108bb82856112f4565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ecc128f284836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b505050505050505b50565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600061052d82611320565b60008061099e83610de0565b509094909350915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109d5610ae2565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610a24610ae2565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000806000806000806000806000610a828a611320565b9850610a8d8a610ba1565b9098509650610a9b8a610de0565b91975095509350610aab8a610f83565b919450909250610abc90508a611116565b5090509193959799909294969850565b600080610ad883610f83565b5090949350505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f43414c4c45525f4e4f545f5249474f424c4f434b5f44414f5f4552524f520000604482015290519081900360640190fd5b565b600081815260036020526040812054610b8c5750670de0b6b3a7640000610530565b50600081815260036020526040902054610530565b60008054604080517fc277f1ac000000000000000000000000000000000000000000000000000000008152600481018590529051839273ffffffffffffffffffffffffffffffffffffffff169163c277f1ac9160248083019286929190829003018186803b158015610c1257600080fd5b505afa158015610c26573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260c0811015610c6d57600080fd5b815160208301805160405192949293830192919084640100000000821115610c9457600080fd5b908301906020820185811115610ca957600080fd5b8251640100000000811182820188101715610cc357600080fd5b82525081516020918201929091019080838360005b83811015610cf0578181015183820152602001610cd8565b50505050905090810190601f168015610d1d5780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115610d4057600080fd5b908301906020820185811115610d5557600080fd5b8251640100000000811182820188101715610d6f57600080fd5b82525081516020918201929091019080838360005b83811015610d9c578181015183820152602001610d84565b50505050905090810190601f168015610dc95780820380516001836020036101000a031916815260200191505b506040526060015194965093945050505050915091565b600080600080610def85610ba1565b50905060008190508073ffffffffffffffffffffffffffffffffffffffff16639489fa846040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3d57600080fd5b505afa158015610e51573d6000803e3d6000fd5b505050506040513d6020811015610e6757600080fd5b5051604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905191965073ffffffffffffffffffffffffffffffffffffffff8316916318160ddd91600480820192602092909190829003018186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d6020811015610efd57600080fd5b50519350841580610f0c575083155b15610f62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806119e46025913960400191505060405180910390fd5b620f4240610f708686611586565b81610f7757fe5b04925050509193909250565b600080600080610f9285610ba1565b915050610f9d6115af565b73ffffffffffffffffffffffffffffffffffffffff1663d410e0c2826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561100357600080fd5b505afa158015611017573d6000803e3d6000fd5b505050506040513d602081101561102d57600080fd5b5051604080517f5e615a6b000000000000000000000000000000000000000000000000000000008152905191955073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691635e615a6b9160048082019260a092909190829003018186803b1580156110b957600080fd5b505afa1580156110cd573d6000803e3d6000fd5b505050506040513d60a08110156110e357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff9091166000908152600260205260409020549395909450915050565b600080600080600061112786610de0565b925092509250600061113887610ba1565b50905060008060006111498a610f83565b925092509250600062015180836111608887611586565b028161116857fe5b04905060006111768c610b6a565b8911156111af576111a6620f42406111986111908f610b6a565b8c038b611586565b8161119f57fe5b0486611586565b61016d026111b2565b60005b90506000670de0b6b3a76400006111c9888a611648565b69021e19e0c9bab24000006111e9866111e46127108a611988565b611586565b816111f057fe5b0402816111f957fe5b049050670de0b6b3a764000061120f888a611648565b61122c61121c8588611586565b69021e19e0c9bab240000061199a565b028161123457fe5b049a506112418b826119c9565b9b5050505050505050505050915091565b3b151590565b3373ffffffffffffffffffffffffffffffffffffffff821614610968576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180611a096027913960400191505060405180910390fd5b600081815260036020526040902054610968576000908152600360205260409020670de0b6b3a76400009055565b60008181526003602052604090205482111561131c5760008181526003602052604090208290555b5050565b60008054604080517fc277f1ac000000000000000000000000000000000000000000000000000000008152600481018590529051839273ffffffffffffffffffffffffffffffffffffffff169163c277f1ac9160248083019286929190829003018186803b15801561139157600080fd5b505afa1580156113a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260c08110156113ec57600080fd5b81516020830180516040519294929383019291908464010000000082111561141357600080fd5b90830190602082018581111561142857600080fd5b825164010000000081118282018810171561144257600080fd5b82525081516020918201929091019080838360005b8381101561146f578181015183820152602001611457565b50505050905090810190601f16801561149c5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156114bf57600080fd5b9083019060208201858111156114d457600080fd5b82516401000000008111828201881017156114ee57600080fd5b82525081516020918201929091019080838360005b8381101561151b578181015183820152602001611503565b50505050905090810190601f1680156115485780820380516001836020036101000a031916815260200191505b5060405250939450505073ffffffffffffffffffffffffffffffffffffffff831615915061157c9050576001915050610530565b6000915050610530565b60008282028315806115a057508284828161159d57fe5b04145b6115a657fe5b90505b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663075461726040518163ffffffff1660e01b815260040160206040518083038186803b15801561161757600080fd5b505afa15801561162b573d6000803e3d6000fd5b505050506040513d602081101561164157600080fd5b5051905090565b600073ffffffffffffffffffffffffffffffffffffffff83163182811180611676575066038d7ea4c6800081105b806116875750662386f26fc1000083105b156116f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4554485f41424f56455f41554d5f4f525f445553545f4552524f520000000000604482015290519081900360640190fd5b670b1a2bc2ec5000008382670de0b6b3a7640000028161170f57fe5b041061172657670de0b6b3a76400009150506115a9565b670853a0d2313c00008382670de0b6b3a7640000028161174257fe5b041061175957670d163580f73180009150506115a9565b6706f05b59d3b200008382670de0b6b3a7640000028161177557fe5b041061178c57670c39f0d50f1e80009150506115a9565b67058d15e1762800008382670de0b6b3a764000002816117a857fe5b04106117bf57670aac096cf84680009150506115a9565b670429d069189e00008382670de0b6b3a764000002816117db57fe5b04106117f25767085013538c7580009150506115a9565b6702c68af0bb1400008382670de0b6b3a7640000028161180e57fe5b041061182557670590a3601aee80009150506115a9565b67016345785d8a00008382670de0b6b3a7640000028161184157fe5b041061185857670334ad46af1d80009150506115a9565b67010a741a462780008382670de0b6b3a7640000028161187457fe5b041061188b576702bf6ff3718700009150506115a9565b66b1a2bc2ec500008382670de0b6b3a764000002816118a657fe5b04106118bd57670254db1c224400009150506115a9565b668700cc757700008382670de0b6b3a764000002816118d857fe5b04106118ef57670226abadc42f80009150506115a9565b6658d15e176280008382670de0b6b3a7640000028161190a57fe5b0410611921576701f87c3f661b00009150506115a9565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4554485f42454c4f575f322e355f50455243454e545f41554d5f4552524f5200604482015290519081900360640190fd5b60008282111561199457fe5b50900390565b60008082116119a557fe5b60008284816119b057fe5b0490508284816119bc57fe5b068184020184146115a657fe5b60008282018381108015906115a05750828110156115a657fefe504f4f4c5f50524943455f4f525f544f54414c5f535550504c595f4e554c4c5f4552524f52534d4152545f434f4e54524143545f43414c4c45525f49535f4e4f545f504f4f4c5f4552524f52a26469706673582212207aa9392eb50ed7e1f409e1801ef80824ec3885f0eaec483ce247eec02c147cd564736f6c63430007040033",
				"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1B2A CODESIZE SUB DUP1 PUSH2 0x1B2A DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 SWAP4 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP4 DUP6 SHL DUP5 AND PUSH1 0x80 MSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x0 DUP1 SLOAD SWAP5 SWAP1 SWAP4 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE SWAP1 SWAP2 SHL AND PUSH1 0xA0 MSTORE PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x1A65 PUSH2 0xC5 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x592 MSTORE DUP1 PUSH2 0x8BD MSTORE DUP1 PUSH2 0x1072 MSTORE POP DUP1 PUSH2 0x9AB MSTORE DUP1 PUSH2 0x15B3 MSTORE POP PUSH2 0x1A65 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x136 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7D0107CF GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0xA6C9C443 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xB516E6E1 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB516E6E1 EQ PUSH2 0x395 JUMPI DUP1 PUSH4 0xD21C87AD EQ PUSH2 0x3C8 JUMPI DUP1 PUSH4 0xD418634A EQ PUSH2 0x447 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0xA6C9C443 EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0xA91EE0DC EQ PUSH2 0x362 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x7D0107CF EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x7F8BE859 EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0x82AFD23B EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x9AF94F30 EQ PUSH2 0x33D JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x427FDC0C GT PUSH2 0x109 JUMPI DUP1 PUSH4 0x4D749E43 GT PUSH2 0xEE JUMPI DUP1 PUSH4 0x4D749E43 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x63D5E44D EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x663B64F7 EQ PUSH2 0x2DF JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x427FDC0C EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x46A62EAF EQ PUSH2 0x259 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x2579677 EQ PUSH2 0x13B JUMPI DUP1 PUSH4 0x5752047 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x249D9123 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x360DAFA0 EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x143 PUSH2 0x464 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x480 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x522 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x535 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x54A JUMP JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x55D JUMP JUMPDEST PUSH2 0x293 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x572 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x57E JUMP JUMPDEST PUSH2 0x143 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x5B4 JUMP JUMPDEST PUSH2 0x143 PUSH2 0x96B JUMP JUMPDEST PUSH2 0x329 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x987 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x293 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x992 JUMP JUMPDEST PUSH2 0x143 PUSH2 0x9A9 JUMP JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9CD JUMP JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA1C JUMP JUMPDEST PUSH2 0x3E5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xA6B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP10 ISZERO ISZERO DUP11 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP9 DUP10 AND PUSH1 0x20 DUP12 ADD MSTORE SWAP7 SWAP1 SWAP8 AND DUP9 DUP8 ADD MSTORE PUSH1 0x60 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x80 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x120 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x45D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xACC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x488 PUSH2 0xAE2 JUMP JUMPDEST PUSH2 0x2710 DUP2 GT ISZERO PUSH2 0x4F9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x524154494F5F4249474745525F5448414E5F3130303030000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52D DUP3 PUSH2 0xB6A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x541 DUP4 PUSH2 0xBA1 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x555 DUP3 PUSH2 0xDE0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x569 DUP4 PUSH2 0xF83 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x541 DUP4 PUSH2 0x1116 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xC277F1AC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0xC277F1AC SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 DUP7 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x681 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 SWAP3 SWAP4 DUP4 ADD SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x6BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x6D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x704 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x6EC JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x731 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x754 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x769 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x783 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7B0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x798 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x7DD JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP SWAP4 SWAP5 POP POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO ISZERO SWAP1 POP PUSH2 0x80D JUMPI POP PUSH2 0x968 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9489FA84 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x855 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x869 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x87F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0x88C CALLER PUSH2 0x1252 JUMP JUMPDEST ISZERO PUSH2 0x89A JUMPI PUSH2 0x89A DUP3 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x8A3 DUP4 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AE DUP5 PUSH2 0x1116 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x8BB DUP3 DUP6 PUSH2 0x12F4 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xECC128F2 DUP5 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x94C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x960 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52D DUP3 PUSH2 0x1320 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x99E DUP4 PUSH2 0xDE0 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x9D5 PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xA24 PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA82 DUP11 PUSH2 0x1320 JUMP JUMPDEST SWAP9 POP PUSH2 0xA8D DUP11 PUSH2 0xBA1 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH2 0xA9B DUP11 PUSH2 0xDE0 JUMP JUMPDEST SWAP2 SWAP8 POP SWAP6 POP SWAP4 POP PUSH2 0xAAB DUP11 PUSH2 0xF83 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP1 SWAP3 POP PUSH2 0xABC SWAP1 POP DUP11 PUSH2 0x1116 JUMP JUMPDEST POP SWAP1 POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP1 SWAP3 SWAP5 SWAP7 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD8 DUP4 PUSH2 0xF83 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xB68 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43414C4C45525F4E4F545F5249474F424C4F434B5F44414F5F4552524F520000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xB8C JUMPI POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x530 JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xC277F1AC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xC277F1AC SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 DUP7 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xC6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 SWAP3 SWAP4 DUP4 ADD SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xC94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xCA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0xCC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCF0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCD8 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xD1D JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xD40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xD55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0xD6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD9C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD84 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xDC9 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x60 ADD MLOAD SWAP5 SWAP7 POP SWAP4 SWAP5 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xDEF DUP6 PUSH2 0xBA1 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9489FA84 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x18160DDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP7 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xED3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEE7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xEFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP4 POP DUP5 ISZERO DUP1 PUSH2 0xF0C JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0xF62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x19E4 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0xF4240 PUSH2 0xF70 DUP7 DUP7 PUSH2 0x1586 JUMP JUMPDEST DUP2 PUSH2 0xF77 JUMPI INVALID JUMPDEST DIV SWAP3 POP POP POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xF92 DUP6 PUSH2 0xBA1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF9D PUSH2 0x15AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD410E0C2 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1003 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1017 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x102D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x5E615A6B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP6 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP2 PUSH4 0x5E615A6B SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0xA0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x10E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP4 SWAP6 SWAP1 SWAP5 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1127 DUP7 PUSH2 0xDE0 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH2 0x1138 DUP8 PUSH2 0xBA1 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1149 DUP11 PUSH2 0xF83 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH3 0x15180 DUP4 PUSH2 0x1160 DUP9 DUP8 PUSH2 0x1586 JUMP JUMPDEST MUL DUP2 PUSH2 0x1168 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0x1176 DUP13 PUSH2 0xB6A JUMP JUMPDEST DUP10 GT ISZERO PUSH2 0x11AF JUMPI PUSH2 0x11A6 PUSH3 0xF4240 PUSH2 0x1198 PUSH2 0x1190 DUP16 PUSH2 0xB6A JUMP JUMPDEST DUP13 SUB DUP12 PUSH2 0x1586 JUMP JUMPDEST DUP2 PUSH2 0x119F JUMPI INVALID JUMPDEST DIV DUP7 PUSH2 0x1586 JUMP JUMPDEST PUSH2 0x16D MUL PUSH2 0x11B2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x11C9 DUP9 DUP11 PUSH2 0x1648 JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 PUSH2 0x11E9 DUP7 PUSH2 0x11E4 PUSH2 0x2710 DUP11 PUSH2 0x1988 JUMP JUMPDEST PUSH2 0x1586 JUMP JUMPDEST DUP2 PUSH2 0x11F0 JUMPI INVALID JUMPDEST DIV MUL DUP2 PUSH2 0x11F9 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x120F DUP9 DUP11 PUSH2 0x1648 JUMP JUMPDEST PUSH2 0x122C PUSH2 0x121C DUP6 DUP9 PUSH2 0x1586 JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 PUSH2 0x199A JUMP JUMPDEST MUL DUP2 PUSH2 0x1234 JUMPI INVALID JUMPDEST DIV SWAP11 POP PUSH2 0x1241 DUP12 DUP3 PUSH2 0x19C9 JUMP JUMPDEST SWAP12 POP POP POP POP POP POP POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x968 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1A09 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x968 JUMPI PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH8 0xDE0B6B3A7640000 SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x131C JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xC277F1AC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xC277F1AC SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 DUP7 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x13EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 SWAP3 SWAP4 DUP4 ADD SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x1413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x1428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x1442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x146F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1457 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x149C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x14BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x14D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x14EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x151B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1503 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1548 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP SWAP4 SWAP5 POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO SWAP2 POP PUSH2 0x157C SWAP1 POP JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x530 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x530 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x15A0 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x159D JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x15A6 JUMPI INVALID JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7546172 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1617 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x162B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND BALANCE DUP3 DUP2 GT DUP1 PUSH2 0x1676 JUMPI POP PUSH7 0x38D7EA4C68000 DUP2 LT JUMPDEST DUP1 PUSH2 0x1687 JUMPI POP PUSH7 0x2386F26FC10000 DUP4 LT JUMPDEST ISZERO PUSH2 0x16F3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4554485F41424F56455F41554D5F4F525F445553545F4552524F520000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH8 0xB1A2BC2EC500000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x170F JUMPI INVALID JUMPDEST DIV LT PUSH2 0x1726 JUMPI PUSH8 0xDE0B6B3A7640000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x853A0D2313C0000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x1742 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x1759 JUMPI PUSH8 0xD163580F7318000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x1775 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x178C JUMPI PUSH8 0xC39F0D50F1E8000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x58D15E176280000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x17A8 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x17BF JUMPI PUSH8 0xAAC096CF8468000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x429D069189E0000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x17DB JUMPI INVALID JUMPDEST DIV LT PUSH2 0x17F2 JUMPI PUSH8 0x85013538C758000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x2C68AF0BB140000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x180E JUMPI INVALID JUMPDEST DIV LT PUSH2 0x1825 JUMPI PUSH8 0x590A3601AEE8000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x16345785D8A0000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x1841 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x1858 JUMPI PUSH8 0x334AD46AF1D8000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x10A741A46278000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x1874 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x188B JUMPI PUSH8 0x2BF6FF371870000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH7 0xB1A2BC2EC50000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x18A6 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x18BD JUMPI PUSH8 0x254DB1C22440000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH7 0x8700CC75770000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x18D8 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x18EF JUMPI PUSH8 0x226ABADC42F8000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH7 0x58D15E17628000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x190A JUMPI INVALID JUMPDEST DIV LT PUSH2 0x1921 JUMPI PUSH8 0x1F87C3F661B0000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4554485F42454C4F575F322E355F50455243454E545F41554D5F4552524F5200 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1994 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x19A5 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x19B0 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP3 DUP5 DUP2 PUSH2 0x19BC JUMPI INVALID JUMPDEST MOD DUP2 DUP5 MUL ADD DUP5 EQ PUSH2 0x15A6 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT DUP1 ISZERO SWAP1 PUSH2 0x15A0 JUMPI POP DUP3 DUP2 LT ISZERO PUSH2 0x15A6 JUMPI INVALID INVALID POP 0x4F 0x4F 0x4C 0x5F POP MSTORE 0x49 NUMBER GASLIMIT 0x5F 0x4F MSTORE 0x5F SLOAD 0x4F SLOAD COINBASE 0x4C 0x5F MSTORE8 SSTORE POP POP 0x4C MSIZE 0x5F 0x4E SSTORE 0x4C 0x4C 0x5F GASLIMIT MSTORE MSTORE 0x4F MSTORE MSTORE8 0x4D COINBASE MSTORE SLOAD 0x5F NUMBER 0x4F 0x4E SLOAD MSTORE COINBASE NUMBER SLOAD 0x5F NUMBER COINBASE 0x4C 0x4C GASLIMIT MSTORE 0x5F 0x49 MSTORE8 0x5F 0x4E 0x4F SLOAD 0x5F POP 0x4F 0x4F 0x4C 0x5F GASLIMIT MSTORE MSTORE 0x4F MSTORE LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xA9392EB50ED7E1F409E1801EF80824EC3885F0EAEC483CE247EEC0 0x2C EQ PUSH29 0xD564736F6C634300070400330000000000000000000000000000000000 ",
				"sourceMap": "1314:17870:4:-:0;;;1965:351;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1965:351:4;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2129:36:4;;;;;1965:351;2129:36;2175:19;:35;;-1:-1:-1;;;;;2175:35:4;;;-1:-1:-1;;;;;;2175:35:4;;;;;;;:19;2220:37;;;;;;;;;;;;;;2267:42;;;;;;1314:17870;;;;;;;;;;;;;;;;"
			},
			"deployedBytecode": {
				"generatedSources": [],
				"immutableReferences": {
					"774": [
						{
							"length": 32,
							"start": 2475
						},
						{
							"length": 32,
							"start": 5555
						}
					],
					"776": [
						{
							"length": 32,
							"start": 1426
						},
						{
							"length": 32,
							"start": 2237
						},
						{
							"length": 32,
							"start": 4210
						}
					]
				},
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80637d0107cf116100b2578063a6c9c44311610081578063b516e6e111610066578063b516e6e114610395578063d21c87ad146103c8578063d418634a1461044757610136565b8063a6c9c4431461035a578063a91ee0dc1461036257610136565b80637d0107cf146102e75780637f8be8591461030457806382afd23b1461030c5780639af94f301461033d57610136565b8063427fdc0c116101095780634d749e43116100ee5780634d749e431461027657806363d5e44d146102ac578063663b64f7146102df57610136565b8063427fdc0c1461023c57806346a62eaf1461025957610136565b8063025796771461013b578063057520471461016c578063249d9123146101a7578063360dafa0146101d6575b600080fd5b610143610464565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101a56004803603604081101561018257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610480565b005b6101c4600480360360208110156101bd57600080fd5b5035610522565b60408051918252519081900360200190f35b6101f3600480360360208110156101ec57600080fd5b5035610535565b604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b6101c46004803603602081101561025257600080fd5b503561054a565b6101c46004803603602081101561026f57600080fd5b503561055d565b6102936004803603602081101561028c57600080fd5b5035610572565b6040805192835260208301919091528051918290030190f35b6101c4600480360360208110156102c257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661057e565b610143610590565b6101a5600480360360208110156102fd57600080fd5b50356105b4565b61014361096b565b6103296004803603602081101561032257600080fd5b5035610987565b604080519115158252519081900360200190f35b6102936004803603602081101561035357600080fd5b5035610992565b6101436109a9565b6101a56004803603602081101561037857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109cd565b6101a5600480360360208110156103ab57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a1c565b6103e5600480360360208110156103de57600080fd5b5035610a6b565b604080519915158a5273ffffffffffffffffffffffffffffffffffffffff98891660208b015296909716888701526060880194909452608087019290925260a086015260c085015260e084015261010083019190915251908190036101200190f35b6101c46004803603602081101561045d57600080fd5b5035610acc565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b610488610ae2565b6127108111156104f957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f524154494f5f4249474745525f5448414e5f3130303030000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff909116600090815260026020526040902055565b600061052d82610b6a565b90505b919050565b60008061054183610ba1565b91509150915091565b600061055582610de0565b949350505050565b60008061056983610f83565b95945050505050565b60008061054183611116565b60026020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054604080517fc277f1ac00000000000000000000000000000000000000000000000000000000815260048101859052905173ffffffffffffffffffffffffffffffffffffffff9092169163c277f1ac916024808201928692909190829003018186803b15801561062657600080fd5b505afa15801561063a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260c081101561068157600080fd5b8151602083018051604051929492938301929190846401000000008211156106a857600080fd5b9083019060208201858111156106bd57600080fd5b82516401000000008111828201881017156106d757600080fd5b82525081516020918201929091019080838360005b838110156107045781810151838201526020016106ec565b50505050905090810190601f1680156107315780820380516001836020036101000a031916815260200191505b506040526020018051604051939291908464010000000082111561075457600080fd5b90830190602082018581111561076957600080fd5b825164010000000081118282018810171561078357600080fd5b82525081516020918201929091019080838360005b838110156107b0578181015183820152602001610798565b50505050905090810190601f1680156107dd5780820380516001836020036101000a031916815260200191505b506040525093945050505073ffffffffffffffffffffffffffffffffffffffff82161515905061080d5750610968565b60008173ffffffffffffffffffffffffffffffffffffffff16639489fa846040518163ffffffff1660e01b815260040160206040518083038186803b15801561085557600080fd5b505afa158015610869573d6000803e3d6000fd5b505050506040513d602081101561087f57600080fd5b5051905061088c33611252565b1561089a5761089a82611258565b6108a3836112c6565b60006108ae84611116565b5090506108bb82856112f4565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ecc128f284836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b505050505050505b50565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600061052d82611320565b60008061099e83610de0565b509094909350915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109d5610ae2565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610a24610ae2565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000806000806000806000806000610a828a611320565b9850610a8d8a610ba1565b9098509650610a9b8a610de0565b91975095509350610aab8a610f83565b919450909250610abc90508a611116565b5090509193959799909294969850565b600080610ad883610f83565b5090949350505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f43414c4c45525f4e4f545f5249474f424c4f434b5f44414f5f4552524f520000604482015290519081900360640190fd5b565b600081815260036020526040812054610b8c5750670de0b6b3a7640000610530565b50600081815260036020526040902054610530565b60008054604080517fc277f1ac000000000000000000000000000000000000000000000000000000008152600481018590529051839273ffffffffffffffffffffffffffffffffffffffff169163c277f1ac9160248083019286929190829003018186803b158015610c1257600080fd5b505afa158015610c26573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260c0811015610c6d57600080fd5b815160208301805160405192949293830192919084640100000000821115610c9457600080fd5b908301906020820185811115610ca957600080fd5b8251640100000000811182820188101715610cc357600080fd5b82525081516020918201929091019080838360005b83811015610cf0578181015183820152602001610cd8565b50505050905090810190601f168015610d1d5780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115610d4057600080fd5b908301906020820185811115610d5557600080fd5b8251640100000000811182820188101715610d6f57600080fd5b82525081516020918201929091019080838360005b83811015610d9c578181015183820152602001610d84565b50505050905090810190601f168015610dc95780820380516001836020036101000a031916815260200191505b506040526060015194965093945050505050915091565b600080600080610def85610ba1565b50905060008190508073ffffffffffffffffffffffffffffffffffffffff16639489fa846040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3d57600080fd5b505afa158015610e51573d6000803e3d6000fd5b505050506040513d6020811015610e6757600080fd5b5051604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905191965073ffffffffffffffffffffffffffffffffffffffff8316916318160ddd91600480820192602092909190829003018186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d6020811015610efd57600080fd5b50519350841580610f0c575083155b15610f62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806119e46025913960400191505060405180910390fd5b620f4240610f708686611586565b81610f7757fe5b04925050509193909250565b600080600080610f9285610ba1565b915050610f9d6115af565b73ffffffffffffffffffffffffffffffffffffffff1663d410e0c2826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561100357600080fd5b505afa158015611017573d6000803e3d6000fd5b505050506040513d602081101561102d57600080fd5b5051604080517f5e615a6b000000000000000000000000000000000000000000000000000000008152905191955073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691635e615a6b9160048082019260a092909190829003018186803b1580156110b957600080fd5b505afa1580156110cd573d6000803e3d6000fd5b505050506040513d60a08110156110e357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff9091166000908152600260205260409020549395909450915050565b600080600080600061112786610de0565b925092509250600061113887610ba1565b50905060008060006111498a610f83565b925092509250600062015180836111608887611586565b028161116857fe5b04905060006111768c610b6a565b8911156111af576111a6620f42406111986111908f610b6a565b8c038b611586565b8161119f57fe5b0486611586565b61016d026111b2565b60005b90506000670de0b6b3a76400006111c9888a611648565b69021e19e0c9bab24000006111e9866111e46127108a611988565b611586565b816111f057fe5b0402816111f957fe5b049050670de0b6b3a764000061120f888a611648565b61122c61121c8588611586565b69021e19e0c9bab240000061199a565b028161123457fe5b049a506112418b826119c9565b9b5050505050505050505050915091565b3b151590565b3373ffffffffffffffffffffffffffffffffffffffff821614610968576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180611a096027913960400191505060405180910390fd5b600081815260036020526040902054610968576000908152600360205260409020670de0b6b3a76400009055565b60008181526003602052604090205482111561131c5760008181526003602052604090208290555b5050565b60008054604080517fc277f1ac000000000000000000000000000000000000000000000000000000008152600481018590529051839273ffffffffffffffffffffffffffffffffffffffff169163c277f1ac9160248083019286929190829003018186803b15801561139157600080fd5b505afa1580156113a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260c08110156113ec57600080fd5b81516020830180516040519294929383019291908464010000000082111561141357600080fd5b90830190602082018581111561142857600080fd5b825164010000000081118282018810171561144257600080fd5b82525081516020918201929091019080838360005b8381101561146f578181015183820152602001611457565b50505050905090810190601f16801561149c5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156114bf57600080fd5b9083019060208201858111156114d457600080fd5b82516401000000008111828201881017156114ee57600080fd5b82525081516020918201929091019080838360005b8381101561151b578181015183820152602001611503565b50505050905090810190601f1680156115485780820380516001836020036101000a031916815260200191505b5060405250939450505073ffffffffffffffffffffffffffffffffffffffff831615915061157c9050576001915050610530565b6000915050610530565b60008282028315806115a057508284828161159d57fe5b04145b6115a657fe5b90505b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663075461726040518163ffffffff1660e01b815260040160206040518083038186803b15801561161757600080fd5b505afa15801561162b573d6000803e3d6000fd5b505050506040513d602081101561164157600080fd5b5051905090565b600073ffffffffffffffffffffffffffffffffffffffff83163182811180611676575066038d7ea4c6800081105b806116875750662386f26fc1000083105b156116f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4554485f41424f56455f41554d5f4f525f445553545f4552524f520000000000604482015290519081900360640190fd5b670b1a2bc2ec5000008382670de0b6b3a7640000028161170f57fe5b041061172657670de0b6b3a76400009150506115a9565b670853a0d2313c00008382670de0b6b3a7640000028161174257fe5b041061175957670d163580f73180009150506115a9565b6706f05b59d3b200008382670de0b6b3a7640000028161177557fe5b041061178c57670c39f0d50f1e80009150506115a9565b67058d15e1762800008382670de0b6b3a764000002816117a857fe5b04106117bf57670aac096cf84680009150506115a9565b670429d069189e00008382670de0b6b3a764000002816117db57fe5b04106117f25767085013538c7580009150506115a9565b6702c68af0bb1400008382670de0b6b3a7640000028161180e57fe5b041061182557670590a3601aee80009150506115a9565b67016345785d8a00008382670de0b6b3a7640000028161184157fe5b041061185857670334ad46af1d80009150506115a9565b67010a741a462780008382670de0b6b3a7640000028161187457fe5b041061188b576702bf6ff3718700009150506115a9565b66b1a2bc2ec500008382670de0b6b3a764000002816118a657fe5b04106118bd57670254db1c224400009150506115a9565b668700cc757700008382670de0b6b3a764000002816118d857fe5b04106118ef57670226abadc42f80009150506115a9565b6658d15e176280008382670de0b6b3a7640000028161190a57fe5b0410611921576701f87c3f661b00009150506115a9565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4554485f42454c4f575f322e355f50455243454e545f41554d5f4552524f5200604482015290519081900360640190fd5b60008282111561199457fe5b50900390565b60008082116119a557fe5b60008284816119b057fe5b0490508284816119bc57fe5b068184020184146115a657fe5b60008282018381108015906115a05750828110156115a657fefe504f4f4c5f50524943455f4f525f544f54414c5f535550504c595f4e554c4c5f4552524f52534d4152545f434f4e54524143545f43414c4c45525f49535f4e4f545f504f4f4c5f4552524f52a26469706673582212207aa9392eb50ed7e1f409e1801ef80824ec3885f0eaec483ce247eec02c147cd564736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x136 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7D0107CF GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0xA6C9C443 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xB516E6E1 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB516E6E1 EQ PUSH2 0x395 JUMPI DUP1 PUSH4 0xD21C87AD EQ PUSH2 0x3C8 JUMPI DUP1 PUSH4 0xD418634A EQ PUSH2 0x447 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0xA6C9C443 EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0xA91EE0DC EQ PUSH2 0x362 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x7D0107CF EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x7F8BE859 EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0x82AFD23B EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x9AF94F30 EQ PUSH2 0x33D JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x427FDC0C GT PUSH2 0x109 JUMPI DUP1 PUSH4 0x4D749E43 GT PUSH2 0xEE JUMPI DUP1 PUSH4 0x4D749E43 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x63D5E44D EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x663B64F7 EQ PUSH2 0x2DF JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x427FDC0C EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x46A62EAF EQ PUSH2 0x259 JUMPI PUSH2 0x136 JUMP JUMPDEST DUP1 PUSH4 0x2579677 EQ PUSH2 0x13B JUMPI DUP1 PUSH4 0x5752047 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x249D9123 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x360DAFA0 EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x143 PUSH2 0x464 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x480 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x522 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x535 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x54A JUMP JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x55D JUMP JUMPDEST PUSH2 0x293 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x572 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x57E JUMP JUMPDEST PUSH2 0x143 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x5B4 JUMP JUMPDEST PUSH2 0x143 PUSH2 0x96B JUMP JUMPDEST PUSH2 0x329 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x987 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x293 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x992 JUMP JUMPDEST PUSH2 0x143 PUSH2 0x9A9 JUMP JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9CD JUMP JUMPDEST PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA1C JUMP JUMPDEST PUSH2 0x3E5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xA6B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP10 ISZERO ISZERO DUP11 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP9 DUP10 AND PUSH1 0x20 DUP12 ADD MSTORE SWAP7 SWAP1 SWAP8 AND DUP9 DUP8 ADD MSTORE PUSH1 0x60 DUP9 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x80 DUP8 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x120 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x45D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xACC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x488 PUSH2 0xAE2 JUMP JUMPDEST PUSH2 0x2710 DUP2 GT ISZERO PUSH2 0x4F9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x524154494F5F4249474745525F5448414E5F3130303030000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52D DUP3 PUSH2 0xB6A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x541 DUP4 PUSH2 0xBA1 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x555 DUP3 PUSH2 0xDE0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x569 DUP4 PUSH2 0xF83 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x541 DUP4 PUSH2 0x1116 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xC277F1AC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0xC277F1AC SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 DUP7 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x681 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 SWAP3 SWAP4 DUP4 ADD SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x6BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x6D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x704 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x6EC JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x731 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x754 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x769 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x783 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7B0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x798 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x7DD JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP SWAP4 SWAP5 POP POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO ISZERO SWAP1 POP PUSH2 0x80D JUMPI POP PUSH2 0x968 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9489FA84 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x855 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x869 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x87F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0x88C CALLER PUSH2 0x1252 JUMP JUMPDEST ISZERO PUSH2 0x89A JUMPI PUSH2 0x89A DUP3 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x8A3 DUP4 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AE DUP5 PUSH2 0x1116 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x8BB DUP3 DUP6 PUSH2 0x12F4 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xECC128F2 DUP5 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x94C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x960 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52D DUP3 PUSH2 0x1320 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x99E DUP4 PUSH2 0xDE0 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x9D5 PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xA24 PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA82 DUP11 PUSH2 0x1320 JUMP JUMPDEST SWAP9 POP PUSH2 0xA8D DUP11 PUSH2 0xBA1 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH2 0xA9B DUP11 PUSH2 0xDE0 JUMP JUMPDEST SWAP2 SWAP8 POP SWAP6 POP SWAP4 POP PUSH2 0xAAB DUP11 PUSH2 0xF83 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP1 SWAP3 POP PUSH2 0xABC SWAP1 POP DUP11 PUSH2 0x1116 JUMP JUMPDEST POP SWAP1 POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP1 SWAP3 SWAP5 SWAP7 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD8 DUP4 PUSH2 0xF83 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xB68 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43414C4C45525F4E4F545F5249474F424C4F434B5F44414F5F4552524F520000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xB8C JUMPI POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x530 JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xC277F1AC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xC277F1AC SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 DUP7 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xC6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 SWAP3 SWAP4 DUP4 ADD SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xC94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xCA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0xCC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCF0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCD8 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xD1D JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0xD40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xD55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0xD6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD9C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD84 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xDC9 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x60 ADD MLOAD SWAP5 SWAP7 POP SWAP4 SWAP5 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xDEF DUP6 PUSH2 0xBA1 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9489FA84 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x18160DDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP7 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xED3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEE7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xEFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP4 POP DUP5 ISZERO DUP1 PUSH2 0xF0C JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0xF62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x19E4 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0xF4240 PUSH2 0xF70 DUP7 DUP7 PUSH2 0x1586 JUMP JUMPDEST DUP2 PUSH2 0xF77 JUMPI INVALID JUMPDEST DIV SWAP3 POP POP POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xF92 DUP6 PUSH2 0xBA1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF9D PUSH2 0x15AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD410E0C2 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1003 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1017 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x102D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x5E615A6B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP6 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP2 PUSH4 0x5E615A6B SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0xA0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x10E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP4 SWAP6 SWAP1 SWAP5 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1127 DUP7 PUSH2 0xDE0 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH2 0x1138 DUP8 PUSH2 0xBA1 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1149 DUP11 PUSH2 0xF83 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH3 0x15180 DUP4 PUSH2 0x1160 DUP9 DUP8 PUSH2 0x1586 JUMP JUMPDEST MUL DUP2 PUSH2 0x1168 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0x1176 DUP13 PUSH2 0xB6A JUMP JUMPDEST DUP10 GT ISZERO PUSH2 0x11AF JUMPI PUSH2 0x11A6 PUSH3 0xF4240 PUSH2 0x1198 PUSH2 0x1190 DUP16 PUSH2 0xB6A JUMP JUMPDEST DUP13 SUB DUP12 PUSH2 0x1586 JUMP JUMPDEST DUP2 PUSH2 0x119F JUMPI INVALID JUMPDEST DIV DUP7 PUSH2 0x1586 JUMP JUMPDEST PUSH2 0x16D MUL PUSH2 0x11B2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x11C9 DUP9 DUP11 PUSH2 0x1648 JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 PUSH2 0x11E9 DUP7 PUSH2 0x11E4 PUSH2 0x2710 DUP11 PUSH2 0x1988 JUMP JUMPDEST PUSH2 0x1586 JUMP JUMPDEST DUP2 PUSH2 0x11F0 JUMPI INVALID JUMPDEST DIV MUL DUP2 PUSH2 0x11F9 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x120F DUP9 DUP11 PUSH2 0x1648 JUMP JUMPDEST PUSH2 0x122C PUSH2 0x121C DUP6 DUP9 PUSH2 0x1586 JUMP JUMPDEST PUSH10 0x21E19E0C9BAB2400000 PUSH2 0x199A JUMP JUMPDEST MUL DUP2 PUSH2 0x1234 JUMPI INVALID JUMPDEST DIV SWAP11 POP PUSH2 0x1241 DUP12 DUP3 PUSH2 0x19C9 JUMP JUMPDEST SWAP12 POP POP POP POP POP POP POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x968 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1A09 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x968 JUMPI PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH8 0xDE0B6B3A7640000 SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x131C JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xC277F1AC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0xC277F1AC SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 DUP7 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x13EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 SWAP3 SWAP4 DUP4 ADD SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x1413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x1428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x1442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x146F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1457 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x149C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x14BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x14D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x14EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x151B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1503 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1548 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP SWAP4 SWAP5 POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO SWAP2 POP PUSH2 0x157C SWAP1 POP JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x530 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x530 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x15A0 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x159D JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x15A6 JUMPI INVALID JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7546172 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1617 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x162B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND BALANCE DUP3 DUP2 GT DUP1 PUSH2 0x1676 JUMPI POP PUSH7 0x38D7EA4C68000 DUP2 LT JUMPDEST DUP1 PUSH2 0x1687 JUMPI POP PUSH7 0x2386F26FC10000 DUP4 LT JUMPDEST ISZERO PUSH2 0x16F3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4554485F41424F56455F41554D5F4F525F445553545F4552524F520000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH8 0xB1A2BC2EC500000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x170F JUMPI INVALID JUMPDEST DIV LT PUSH2 0x1726 JUMPI PUSH8 0xDE0B6B3A7640000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x853A0D2313C0000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x1742 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x1759 JUMPI PUSH8 0xD163580F7318000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x1775 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x178C JUMPI PUSH8 0xC39F0D50F1E8000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x58D15E176280000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x17A8 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x17BF JUMPI PUSH8 0xAAC096CF8468000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x429D069189E0000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x17DB JUMPI INVALID JUMPDEST DIV LT PUSH2 0x17F2 JUMPI PUSH8 0x85013538C758000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x2C68AF0BB140000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x180E JUMPI INVALID JUMPDEST DIV LT PUSH2 0x1825 JUMPI PUSH8 0x590A3601AEE8000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x16345785D8A0000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x1841 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x1858 JUMPI PUSH8 0x334AD46AF1D8000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH8 0x10A741A46278000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x1874 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x188B JUMPI PUSH8 0x2BF6FF371870000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH7 0xB1A2BC2EC50000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x18A6 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x18BD JUMPI PUSH8 0x254DB1C22440000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH7 0x8700CC75770000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x18D8 JUMPI INVALID JUMPDEST DIV LT PUSH2 0x18EF JUMPI PUSH8 0x226ABADC42F8000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH7 0x58D15E17628000 DUP4 DUP3 PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x190A JUMPI INVALID JUMPDEST DIV LT PUSH2 0x1921 JUMPI PUSH8 0x1F87C3F661B0000 SWAP2 POP POP PUSH2 0x15A9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4554485F42454C4F575F322E355F50455243454E545F41554D5F4552524F5200 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1994 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x19A5 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x19B0 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP3 DUP5 DUP2 PUSH2 0x19BC JUMPI INVALID JUMPDEST MOD DUP2 DUP5 MUL ADD DUP5 EQ PUSH2 0x15A6 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT DUP1 ISZERO SWAP1 PUSH2 0x15A0 JUMPI POP DUP3 DUP2 LT ISZERO PUSH2 0x15A6 JUMPI INVALID INVALID POP 0x4F 0x4F 0x4C 0x5F POP MSTORE 0x49 NUMBER GASLIMIT 0x5F 0x4F MSTORE 0x5F SLOAD 0x4F SLOAD COINBASE 0x4C 0x5F MSTORE8 SSTORE POP POP 0x4C MSIZE 0x5F 0x4E SSTORE 0x4C 0x4C 0x5F GASLIMIT MSTORE MSTORE 0x4F MSTORE MSTORE8 0x4D COINBASE MSTORE SLOAD 0x5F NUMBER 0x4F 0x4E SLOAD MSTORE COINBASE NUMBER SLOAD 0x5F NUMBER COINBASE 0x4C 0x4C GASLIMIT MSTORE 0x5F 0x49 MSTORE8 0x5F 0x4E 0x4F SLOAD 0x5F POP 0x4F 0x4F 0x4C 0x5F GASLIMIT MSTORE MSTORE 0x4F MSTORE LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xA9392EB50ED7E1F409E1801EF80824EC3885F0EAEC483CE247EEC0 0x2C EQ PUSH29 0xD564736F6C634300070400330000000000000000000000000000000000 ",
				"sourceMap": "1314:17870:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1542:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4324:315;;;;;;;;;;;;;;;;-1:-1:-1;4324:315:4;;;;;;;;;:::i;:::-;;6373:156;;;;;;;;;;;;;;;;-1:-1:-1;6373:156:4;;:::i;:::-;;;;;;;;;;;;;;;;8492:224;;;;;;;;;;;;;;;;-1:-1:-1;8492:224:4;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9346:209;;;;;;;;;;;;;;;;-1:-1:-1;9346:209:4;;:::i;7053:204::-;;;;;;;;;;;;;;;;-1:-1:-1;7053:204:4;;:::i;7758:217::-;;;;;;;;;;;;;;;;-1:-1:-1;7758:217:4;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1624:40;;;;;;;;;;;;;;;;-1:-1:-1;1624:40:4;;;;:::i;1465:44::-;;;:::i;2446:1001::-;;;;;;;;;;;;;;;;-1:-1:-1;2446:1001:4;;:::i;1583:34::-;;;:::i;8121:157::-;;;;;;;;;;;;;;;;-1:-1:-1;8121:157:4;;:::i;:::-;;;;;;;;;;;;;;;;;;8933:263;;;;;;;;;;;;;;;;-1:-1:-1;8933:263:4;;:::i;1418:41::-;;;:::i;3581:180::-;;;;;;;;;;;;;;;;-1:-1:-1;3581:180:4;;;;:::i;3882:181::-;;;;;;;;;;;;;;;;-1:-1:-1;3882:181:4;;;;:::i;5295:931::-;;;;;;;;;;;;;;;;-1:-1:-1;5295:931:4;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6668:221;;;;;;;;;;;;;;;;-1:-1:-1;6668:221:4;;:::i;1542:35::-;;;;;;:::o;4324:315::-;1821:29;:27;:29::i;:::-;4505:5:::1;4493:8;:17;;4472:87;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;4589:20;::::0;;::::1;;::::0;;;:6:::1;:20;::::0;;;;:43;4324:315::o;6373:156::-;6469:7;6499:23;6515:6;6499:15;:23::i;:::-;6492:30;;6373:156;;;;:::o;8492:224::-;8608:12;8634:13;8679:30;8702:6;8679:22;:30::i;:::-;8672:37;;;;8492:224;;;:::o;9346:209::-;9462:11;9511:37;9541:6;9511:29;:37::i;:::-;9498:50;9346:209;-1:-1:-1;;;;9346:209:4:o;7053:204::-;7151:7;7180:13;7197:31;7221:6;7197:23;:31::i;:::-;7174:54;7053:204;-1:-1:-1;;;;;7053:204:4:o;7758:217::-;7866:17;7885:25;7933:35;7961:6;7933:27;:35::i;1624:40::-;;;;;;;;;;;;;:::o;1465:44::-;;;:::o;2446:1001::-;2564:19;2612:20;;2597:51;;;;;;;;;;;;;;2612:20;;;;;2597:43;;:51;;;;;2564:19;;2597:51;;;;;;;;2612:20;2597:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2597:51:4;;;;;;;;;;-1:-1:-1;2597:51:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2597:51:4;;;;;;;;;;-1:-1:-1;2597:51:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2597:51:4;;-1:-1:-1;2563:85:4;;-1:-1:-1;;;;2663:25:4;;;;2659:62;;-1:-1:-1;2659:62:4;;2704:7;;;2659:62;2731:17;2757:11;2751:33;;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2751:35:4;;-1:-1:-1;2861:23:4;2873:10;2861:11;:23::i;:::-;2857:88;;;2900:34;2922:11;2900:21;:34::i;:::-;3083:37;3113:6;3083:29;:37::i;:::-;3132:17;3155:35;3183:6;3155:27;:35::i;:::-;3131:59;;;3310:50;3342:9;3353:6;3310:31;:50::i;:::-;3380:19;3371:45;;;3417:11;3430:9;3371:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2446:1001;;;;;:::o;1583:34::-;;;;;;:::o;8121:157::-;8219:4;8246:25;8264:6;8246:17;:25::i;8933:263::-;9048:17;9079:19;9152:37;9182:6;9152:29;:37::i;:::-;-1:-1:-1;9123:66:4;;;;-1:-1:-1;8933:263:4;-1:-1:-1;;8933:263:4:o;1418:41::-;;;:::o;3581:180::-;1821:29;:27;:29::i;:::-;3708:20:::1;:46:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;3581:180::o;3882:181::-;1821:29;:27;:29::i;:::-;4012:19:::1;:44:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;3882:181::o;5295:931::-;5409:11;5434:19;5467:17;5498;5529:18;5561:17;5592:19;5625:13;5652:11;5697:25;5715:6;5697:17;:25::i;:::-;5688:34;;5759:30;5782:6;5759:22;:30::i;:::-;5732:57;;-1:-1:-1;5732:57:4;-1:-1:-1;5836:37:4;5866:6;5836:29;:37::i;:::-;5799:74;;-1:-1:-1;5799:74:4;-1:-1:-1;5799:74:4;-1:-1:-1;5908:31:4;5932:6;5908:23;:31::i;:::-;5883:56;;-1:-1:-1;5883:56:4;;-1:-1:-1;5959:35:4;;-1:-1:-1;5987:6:4;5959:27;:35::i;:::-;-1:-1:-1;5949:45:4;-1:-1:-1;5295:931:4;;;;;;;;;;;:::o;6668:221::-;6772:7;6796:19;6823:31;6847:6;6823:23;:31::i;:::-;-1:-1:-1;6795:59:4;;6668:221;-1:-1:-1;;;;6668:221:4:o;17986:193::-;18087:19;;;;18073:10;:33;18069:104;;18122:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18069:104;17986:193::o;13497:261::-;13585:7;13612:22;;;:14;:22;;;;;;13608:144;;-1:-1:-1;13672:7:4;13664:16;;13608:144;-1:-1:-1;13719:22:4;;;;:14;:22;;;;;;13712:29;;16744:284;16852:12;16955:20;;16940:51;;;;;;;;;;;;;;16852:12;;16955:20;;;16940:43;;:51;;;;;16852:12;;16940:51;;;;;;;16955:20;16940:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16940:51:4;;;;;;;;;;-1:-1:-1;16940:51:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16940:51:4;;;;;;;;;;-1:-1:-1;16940:51:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16940:51:4;;;;;16916:75;;-1:-1:-1;16940:51:4;;-1:-1:-1;;;;;16744:284:4;;;:::o;17305:616::-;17420:17;17451:19;17484:11;17521:19;17546:30;17569:6;17546:22;:30::i;:::-;17520:56;;;17586:10;17605:11;17586:31;;17639:4;:19;;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17639:21:4;17684:18;;;;;;;;17639:21;;-1:-1:-1;17684:16:4;;;;;;:18;;;;;17639:21;;17684:18;;;;;;;;:16;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17684:18:4;;-1:-1:-1;17716:23:4;;;:52;;-1:-1:-1;17743:25:4;;17716:52;17712:130;;;17784:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17712:130;17891:7;17857:31;17865:9;17876:11;17857:7;:31::i;:::-;:41;;;;;;17851:47;;17305:616;;;;;;;:::o;10592:483::-;10701:19;10734:17;10765:13;10807:20;10831:30;10854:6;10831:22;:30::i;:::-;10803:58;;;10899:12;:10;:12::i;:::-;10885:46;;;10932:12;10885:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10885:60:4;10977:41;;;;;;;;10885:60;;-1:-1:-1;10977:39:4;10986:19;10977:39;;;;:41;;;;;;;;;;;;;;;:39;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10977:41:4;11036:20;;;;;;;;:6;10977:41;11036:20;10977:41;11036:20;;:32;10592:483;;10977:41;;-1:-1:-1;10592:483:4;-1:-1:-1;;10592:483:4:o;11775:1570::-;11875:17;11894:25;11936:16;11954:19;11975:17;11996:37;12026:6;11996:29;:37::i;:::-;11935:98;;;;;;12044:19;12069:30;12092:6;12069:22;:30::i;:::-;12043:56;;;12110:19;12131:17;12150:19;12173:31;12197:6;12173:23;:31::i;:::-;12109:95;;;;;;12215:23;12321:6;12309:9;12241:65;12262:9;12285:11;12241:7;:65::i;:::-;:77;:86;;;;;;12215:112;;12465:28;12508:23;12524:6;12508:15;:23::i;:::-;12496:8;:35;;:256;;12547:199;12675:7;12568:104;12605:23;12621:6;12605:15;:23::i;:::-;12594:8;:34;12647:11;12568:7;:104::i;:::-;:114;;;;;;12725:11;12547:7;:199::i;:::-;12749:3;12547:205;12496:256;;;12542:1;12496:256;12465:287;;12790:20;13025:7;12969:53;12999:11;13012:9;12969:29;:53::i;:::-;12945:11;12827:115;12852:15;12885:27;12893:5;12900:11;12885:7;:27::i;:::-;12827:7;:115::i;:::-;:129;;;;;;12813:209;:219;;;;;;12790:242;;13268:7;13212:53;13242:11;13255:9;13212:29;:53::i;:::-;13111:98;13132:42;13140:20;13162:11;13132:7;:42::i;:::-;13188:11;13111:7;:98::i;:::-;:154;:164;;;;;;13091:184;;13298:40;13306:17;13325:12;13298:7;:40::i;:::-;13286:52;;11775:1570;;;;;;;;;;;;;:::o;18610:243::-;18793:19;18838:8;;;18610:243::o;18975:207::-;19075:10;:25;;;;19071:105;;19116:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9719:191;9843:1;9809:22;;;:14;:22;;;;;;9805:99;;9861:22;;;;:14;:22;;;;;9886:7;9861:32;;9719:191::o;10085:234::-;10230:22;;;;:14;:22;;;;;;10218:34;;10214:99;;;10268:22;;;;:14;:22;;;;;:34;;;10214:99;10085:234;;:::o;16241:289::-;16323:4;16392:20;;16377:51;;;;;;;;;;;;;;16323:4;;16392:20;;;16377:43;;:51;;;;;16323:4;;16377:51;;;;;;;16392:20;16377:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16377:51:4;;;;;;;;;;-1:-1:-1;16377:51:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16377:51:4;;;;;;;;;;-1:-1:-1;16377:51:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16377:51:4;;-1:-1:-1;16343:85:4;;-1:-1:-1;;;16442:25:4;;;;;-1:-1:-1;16438:85:4;;-1:-1:-1;16438:85:4;16490:4;16483:11;;;;;16438:85;16518:5;16511:12;;;;;59:161:50;121:7;152:5;;;174:6;;;:20;;;193:1;188;184;:5;;;;;;:10;174:20;167:28;;;;212:1;-1:-1:-1;59:161:50;;;;;:::o;11190:146:4:-;11259:7;11303:16;11289:38;;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11289:40:4;;-1:-1:-1;11190:146:4;:::o;13982:2113::-;14130:7;14178:35;;;;14292:26;;;;:59;;;14339:12;14322:14;:29;14292:59;:92;;;;14367:17;14355:9;:29;14292:92;14288:160;;;14400:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14288:160;14649:18;14636:9;14619:14;14609:7;:24;:36;;;;;;:58;14605:1484;;14691:7;14683:16;;;;;14605:1484;14761:18;14748:9;14731:14;14721:7;:24;:36;;;;;;:58;14717:1372;;14803:20;14795:29;;;;;14717:1372;14886:18;14873:9;14856:14;14846:7;:24;:36;;;;;;:58;14842:1247;;14928:20;14920:29;;;;;14842:1247;15011:18;14998:9;14981:14;14971:7;:24;:36;;;;;;:58;14967:1122;;15053:20;15045:29;;;;;14967:1122;15136:18;15123:9;15106:14;15096:7;:24;:36;;;;;;:58;15092:997;;15178:20;15170:29;;;;;15092:997;15261:18;15248:9;15231:14;15221:7;:24;:36;;;;;;:58;15217:872;;15303:20;15295:29;;;;;15217:872;15386:18;15373:9;15356:14;15346:7;:24;:36;;;;;;:58;15342:747;;15428:20;15420:29;;;;;15342:747;15511:17;15498:9;15481:14;15471:7;:24;:36;;;;;;:57;15467:622;;15552:20;15544:29;;;;;15467:622;15635:17;15622:9;15605:14;15595:7;:24;:36;;;;;;:57;15591:498;;15676:20;15668:29;;;;;15591:498;15759:17;15746:9;15729:14;15719:7;:24;:36;;;;;;:57;15715:374;;15800:20;15792:29;;;;;15715:374;15883:17;15870:9;15853:14;15843:7;:24;:36;;;;;;:57;15839:250;;15924:20;15916:29;;;;;15839:250;16037:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;414:124:50;476:7;507:1;502;:6;;495:14;;;;-1:-1:-1;526:5:50;;;414:124::o;226:182::-;288:7;318:1;314;:5;307:13;;;;330:9;346:1;342;:5;;;;;;330:17;;381:1;377;:5;;;;;;373:1;369;:5;:13;364:1;:18;357:26;;;544:153;606:7;637:5;;;659:4;;;;;;:12;;;670:1;667;:4;;652:20;;"
			}
		}
	},
	"sourceTreeHashHex": "0xd80db00305e722e607ffe2d8974195fdc69d68cf68cdb2621f546bae91507926",
	"sources": {
		"./ProofOfPerformance.sol": {
			"id": 4
		},
		"../../utils/Pool/IPool.sol": {
			"id": 49
		},
		"../../utils/SafeMath/SafeMath.sol": {
			"id": 50
		},
		"./ProofOfPerformanceFace.sol": {
			"id": 5
		},
		"../Inflation/InflationFace.sol": {
			"id": 3
		},
		"../RigoToken/RigoTokenFace.sol": {
			"id": 6
		},
		"../../protocol/DragoRegistry/IDragoRegistry.sol": {
			"id": 0
		},
		"../../staking/interfaces/IStaking.sol": {
			"id": 13
		},
		"../../utils/0xUtils/IEtherToken.sol": {
			"id": 37
		},
		"../../utils/0xUtils/IERC20Token.sol": {
			"id": 36
		},
		"../../staking/interfaces/IStructs.sol": {
			"id": 17
		},
		"../../staking/interfaces/IGrgVault.sol": {
			"id": 12
		}
	},
	"sourceCodes": {
		"./ProofOfPerformance.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\n// solhint-disable-next-line\npragma solidity 0.7.4;\n\nimport { IPool } from \"../../utils/Pool/IPool.sol\";\nimport { SafeMath } from \"../../utils/SafeMath/SafeMath.sol\";\nimport { ProofOfPerformanceFace } from \"./ProofOfPerformanceFace.sol\";\nimport { InflationFace } from \"../Inflation/InflationFace.sol\";\nimport { RigoTokenFace } from \"../RigoToken/RigoTokenFace.sol\";\nimport { IDragoRegistry } from \"../../protocol/DragoRegistry/IDragoRegistry.sol\";\nimport { IStaking } from \"../../staking/interfaces/IStaking.sol\";\n\n\n/// @title Proof of Performance - Controls parameters of inflation.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract ProofOfPerformance is\n    SafeMath,\n    ProofOfPerformanceFace\n{\n    /* solhint-disable */\n    address public immutable RIGOTOKENADDRESS;\n    address public immutable STAKINGPROXYADDRESS;\n    /* solhint-disable */\n\n    address public dragoRegistryAddress;\n    address public rigoblockDaoAddress;\n\n    mapping (address => Group) public groups;\n    mapping (uint256 => uint256) private _highWaterMark;\n\n    struct Group {\n        uint256 rewardRatio;\n    }\n\n    modifier onlyRigoblockDao() {\n        _assertCallerIsRigoblockDao();\n        _;\n    }\n\n    modifier onlyStakingProxy() {\n        _assertCallerIsStakingProxy();\n        _;\n    }\n\n    constructor(\n        address _rigoTokenAddress,\n        address _rigoblockDao,\n        address _dragoRegistry,\n        address _stakingProxyAddress\n    ) {\n        RIGOTOKENADDRESS = _rigoTokenAddress;\n        rigoblockDaoAddress = _rigoblockDao;\n        dragoRegistryAddress = _dragoRegistry;\n        STAKINGPROXYADDRESS = _stakingProxyAddress;\n    }\n\n    /// @dev Credits the pop reward to the Staking Proxy contract.\n    /// @param poolId Number of the pool Id in registry.\n    function creditPopRewardToStakingProxy(\n        uint256 poolId\n    )\n        external\n        override\n    {\n        (address poolAddress, , , , , ) = IDragoRegistry(dragoRegistryAddress).fromId(poolId);\n\n        if (poolAddress == address(0)) {\n            return;\n        }\n\n        uint256 poolPrice = IPool(poolAddress).calcSharePrice();\n\n        // allow smart contract calls only from pool itself\n        if (_isContract(msg.sender)) {\n            _assertContractIsPool(poolAddress);\n        }\n\n        // TODO: test\n        // initialization is not necessary but explicit as to prevent failure in case of a future upgrade\n        _initializeHwmIfUninitialized(poolId);\n\n        (uint256 popReward, ) = _proofOfPerformanceInternal(poolId);\n\n        // pop assets component is always positive, therefore we must update the hwm if positive performance\n        _updateHwmIfPositivePerformance(poolPrice, poolId);\n\n        IStaking(STAKINGPROXYADDRESS).creditPopReward(poolAddress, popReward);\n    }\n\n    /// @dev Allows RigoBlock Dao to update the pools registry.\n    /// @param newDragoRegistryAddress Address of new registry.\n    function setRegistry(address newDragoRegistryAddress)\n        external\n        override\n        onlyRigoblockDao\n    {\n        dragoRegistryAddress = newDragoRegistryAddress;\n    }\n\n    /// @dev Allows RigoBlock Dao to update its address.\n    /// @param newRigoblockDaoAddress Address of new dao.\n    function setRigoblockDao(address newRigoblockDaoAddress)\n        external\n        override\n        onlyRigoblockDao\n    {\n        rigoblockDaoAddress = newRigoblockDaoAddress;\n    }\n\n    /// @dev Allows RigoBlock Dao to set the ratio between assets and performance reward for a group.\n    /// @param groupAddress Address of the pool's group.\n    /// @param newRatio Value of the new ratio.\n    /// @notice onlyRigoblockDao can set ratio.\n    function setRatio(\n        address groupAddress,\n        uint256 newRatio)\n        external\n        override\n        onlyRigoblockDao\n    {\n        require(\n            newRatio <= 10000,\n            \"RATIO_BIGGER_THAN_10000\"\n        ); //(from 0 to 10000)\n        groups[groupAddress].rewardRatio = newRatio;\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Gets data of a pool.\n    /// @param poolId Id of the pool.\n    /// @return active Bool the pool is active.\n    /// @return poolAddress address of the pool.\n    /// @return poolGroup address of the pool factory.\n    /// @return poolPrice price of the pool in wei.\n    /// @return poolSupply total supply of the pool in units.\n    /// @return poolValue total value of the pool in wei.\n    /// @return epochReward value of the reward factor or said pool.\n    /// @return ratio of assets/performance reward (from 0 to 10000).\n    /// @return pop value of the pop reward to be claimed in GRGs.\n    function getPoolData(uint256 poolId)\n        external\n        view\n        override\n        returns (\n            bool active,\n            address poolAddress,\n            address poolGroup,\n            uint256 poolPrice,\n            uint256 poolSupply,\n            uint256 poolValue,\n            uint256 epochReward,\n            uint256 ratio,\n            uint256 pop\n        )\n    {\n        active = _isActiveInternal(poolId);\n        (poolAddress, poolGroup) = _addressFromIdInternal(poolId);\n        (poolPrice, poolSupply, poolValue) = _getPoolPriceAndValueInternal(poolId);\n        (epochReward, , ratio) = _getInflationParameters(poolId);\n        (pop, ) = _proofOfPerformanceInternal(poolId);\n        return(\n            active,\n            poolAddress,\n            poolGroup,\n            poolPrice,\n            poolSupply,\n            poolValue,\n            epochReward,\n            ratio,\n            pop\n        );\n    }\n\n    /// @dev Returns the highwatermark of a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the all-time-high pool nav.\n    function getHwm(uint256 poolId)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _getHwmInternal(poolId);\n    }\n\n    /// @dev Returns the reward factor for a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the reward factor.\n    function getEpochReward(uint256 poolId)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        (uint256 epochReward, , ) = _getInflationParameters(poolId);\n        return epochReward;\n    }\n\n    /// @dev Returns the split ratio of asset and performance reward.\n    /// @param poolId Id of the pool.\n    /// @return Value of the ratio from 1 to 100.\n    function getRatio(uint256 poolId)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        ( , , uint256 ratio) = _getInflationParameters(poolId);\n        return ratio;\n    }\n\n    /// @dev Returns the proof of performance reward for a pool.\n    /// @param poolId Id of the pool.\n    /// @return popReward Value of the pop reward in Rigo tokens.\n    /// @return performanceReward Split of the performance reward in Rigo tokens.\n    /// @notice epoch reward should be big enough that it.\n    /// @notice can be decreased if number of funds increases.\n    /// @notice should be at least 10^6 (just as pool base) to start with.\n    /// @notice rigo token has 10^18 decimals.\n    function proofOfPerformance(uint256 poolId)\n        external\n        view\n        override\n        returns (uint256 popReward, uint256 performanceReward)\n    {\n        return _proofOfPerformanceInternal(poolId);\n    }\n\n    /// @dev Checks whether a pool is registered and active.\n    /// @param poolId Id of the pool.\n    /// @return Bool the pool is active.\n    function isActive(uint256 poolId)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return _isActiveInternal(poolId);\n    }\n\n    /// @dev Returns the address and the group of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return pool Address of the target pool.\n    /// @return group Address of the pool's group.\n    function addressFromId(uint256 poolId)\n        external\n        view\n        override\n        returns (\n            address pool,\n            address group\n        )\n    {\n        return _addressFromIdInternal(poolId);\n    }\n\n    /// @dev Returns the price a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return poolPrice Price of the pool in wei.\n    /// @return totalTokens Number of tokens of a pool (totalSupply).\n    function getPoolPrice(uint256 poolId)\n        external\n        view\n        override\n        returns (\n            uint256 poolPrice,\n            uint256 totalTokens\n        )\n    {\n        (poolPrice, totalTokens, ) = _getPoolPriceAndValueInternal(poolId);\n    }\n\n    /// @dev Returns the value of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return aum Total value of the pool in ETH.\n    function calcPoolValue(uint256 poolId)\n        external\n        view\n        override\n        returns (\n            uint256 aum\n        )\n    {\n        ( , , aum) = _getPoolPriceAndValueInternal(poolId);\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Initializes the High Watermark if unitialized.\n    /// @param poolId Number of the pool Id in registry.\n    function _initializeHwmIfUninitialized(uint256 poolId)\n        internal\n    {\n        if (_highWaterMark[poolId] == uint256(0)) {\n            _highWaterMark[poolId] = 1 ether;\n        }\n    }\n\n    /// @dev Updates high-water mark if positive performance.\n    /// @param poolPrice Value of the pool price.\n    /// @param poolId Number of the pool Id in registry.\n    function _updateHwmIfPositivePerformance(\n        uint256 poolPrice,\n        uint256 poolId\n    )\n        internal\n    {\n        if (poolPrice > _highWaterMark[poolId]) {\n            _highWaterMark[poolId] = poolPrice;\n        }\n    }\n\n    /// @dev Returns the split ratio of asset and performance reward.\n    /// @param poolId Id of the pool.\n    /// @return epochReward Value of the reward factor.\n    /// @return epochTime Value of epoch time.\n    /// @return ratio Value of the ratio from 1 to 100.\n    function _getInflationParameters(uint256 poolId)\n        internal\n        view\n        returns (\n            uint256 epochReward,\n            uint256 epochTime,\n            uint256 ratio\n        )\n    {\n        ( , address groupAddress) = _addressFromIdInternal(poolId);\n        epochReward = InflationFace(_getMinter()).getInflationFactor(groupAddress);\n        (epochTime, , , , ) = IStaking(STAKINGPROXYADDRESS).getParams();\n        ratio = groups[groupAddress].rewardRatio;\n    }\n\n    /// @dev Returns the address of the Inflation contract.\n    /// @return Address of the minter/inflation.\n    function _getMinter()\n        internal\n        view\n        returns (address)\n    {\n        return RigoTokenFace(RIGOTOKENADDRESS).minter();\n    }\n\n    /// @dev Returns the proof of performance reward for a pool.\n    /// @param poolId Id of the pool.\n    /// @return popReward Value of the pop reward in Rigo tokens.\n    /// @return performanceReward Split of the performance reward in Rigo tokens.\n    /// @notice epoch reward should be big enough that it  can be decreased when number of funds increases\n    /// @notice should be at least 10^6 (just as pool base) to start with.\n    function _proofOfPerformanceInternal(uint256 poolId)\n        internal\n        view\n        returns (uint256 popReward, uint256 performanceReward)\n    {\n        (uint256 newPrice, uint256 tokenSupply, uint256 poolValue) = _getPoolPriceAndValueInternal(poolId);\n        (address poolAddress, ) = _addressFromIdInternal(poolId);\n        (uint256 epochReward, uint256 epochTime, uint256 rewardRatio) = _getInflationParameters(poolId);\n\n        uint256 assetsComponent = safeMul(\n            poolValue,\n            epochReward\n        ) * epochTime / 1 days; // proportional to epoch time\n\n        // TODO: test new logic of only performance component null if price below high watermark\n        uint256 performanceComponent = newPrice <= _getHwmInternal(poolId) ? uint256(0) : safeMul(\n            safeMul(\n                (newPrice - _getHwmInternal(poolId)),\n                tokenSupply\n            ) / 1000000, // Pool(poolAddress).BASE(),\n            epochReward\n        ) * 365; // 365 = 365 days / 1 days\n\n        uint256 assetsReward = (\n            safeMul(\n                assetsComponent,\n                safeSub(10000, rewardRatio) // 10000 = 100%\n            ) / 10000 ether\n        ) * _ethBalanceAdjustmentInternal(poolAddress, poolValue) / 1 ether; // reward inversely proportional to Eth in pool\n\n        performanceReward = safeDiv(\n            safeMul(performanceComponent, rewardRatio),\n            10000 ether\n        ) * _ethBalanceAdjustmentInternal(poolAddress, poolValue) / 1 ether;\n\n        popReward = safeAdd(performanceReward, assetsReward);\n    }\n\n    /// @dev Returns the high-watermark of the pool.\n    /// @param poolId Number of the pool in registry.\n    /// @return Number high-watermark.\n    function _getHwmInternal(uint256 poolId)\n        internal\n        view\n        returns (uint256)\n    {\n        if (_highWaterMark[poolId] == uint256(0)) {\n            return (1 ether);\n\n        } else {\n            return _highWaterMark[poolId];\n        }\n    }\n\n    /// @dev Returns the non-linear rewards adjustment by eth.\n    /// @param poolAddress Address of the pool.\n    /// @param poolValue Number of value of the pool in wei.\n    /// @return Number non-linear adjustment.\n    function _ethBalanceAdjustmentInternal(\n        address poolAddress,\n        uint256 poolValue\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 poolEthBalance = address(IPool(poolAddress)).balance;\n        // prevent dust from small pools\n        // 1 gwei = 1e9\n        if (poolEthBalance > poolValue || poolEthBalance < 1000000 gwei || poolValue < 10 * 1000000 gwei) {\n            revert(\"ETH_ABOVE_AUM_OR_DUST_ERROR\");\n        }\n\n        // logistic function progression g(x)=e^x/(1+e^x).\n        // rebased on {(poolEthBalance / poolValue)} b\b\b [0.025:0.6], x b\b\b [-1.9:2.8].\n        if (1 ether * poolEthBalance / poolValue >= 800 * 1000000 gwei) {\n            return (1 ether);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 600 * 1000000 gwei) {\n            return (1 ether * 943 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 500 * 1000000 gwei) {\n            return (1 ether * 881 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 400 * 1000000 gwei) {\n            return (1 ether * 769 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 300 * 1000000 gwei) {\n            return (1 ether * 599 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 200 * 1000000 gwei) {\n            return (1 ether * 401 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 100 * 1000000 gwei) {\n            return (1 ether * 231 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 75 * 1000000 gwei) {\n            return (1 ether * 198 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 50 * 1000000 gwei) {\n            return (1 ether * 168 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 38 * 1000000 gwei) {\n            return (1 ether * 155 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 25 * 1000000 gwei) {\n            return (1 ether * 142 / 1000);\n\n        } else { // reward is 0 for any pool not backed by at least 2.5% eth\n            revert(\"ETH_BELOW_2.5_PERCENT_AUM_ERROR\");\n        }\n    }\n\n    /// @dev Checks whether a pool is registered and active.\n    /// @param poolId Id of the pool.\n    /// @return Bool the pool is active.\n    function _isActiveInternal(uint256 poolId)\n        internal view\n        returns (bool)\n    {\n        (address poolAddress, , , , , ) = IDragoRegistry(dragoRegistryAddress).fromId(poolId);\n        if (poolAddress != address(0)) {\n            return true;\n        } else return false;\n    }\n\n    /// @dev Returns the address and the group of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return pool Address of the target pool.\n    /// @return group Address of the pool's group.\n    function _addressFromIdInternal(uint256 poolId)\n        internal\n        view\n        returns (\n            address pool,\n            address group\n        )\n    {\n        (pool, , , , , group) = IDragoRegistry(dragoRegistryAddress).fromId(poolId);\n        return (pool, group);\n    }\n\n    /// @dev Returns price, supply, aum of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return poolPrice Price of the pool in wei.\n    /// @return totalTokens Number of tokens of a pool (totalSupply).\n    /// @return aum Address of the target pool.\n    function _getPoolPriceAndValueInternal(uint256 poolId)\n        internal\n        view\n        returns (\n            uint256 poolPrice,\n            uint256 totalTokens,\n            uint256 aum\n        )\n    {\n        (address poolAddress, ) = _addressFromIdInternal(poolId);\n        IPool pool = IPool(poolAddress);\n        poolPrice = pool.calcSharePrice();\n        totalTokens = pool.totalSupply();\n        if (poolPrice == uint256(0) || totalTokens == uint256(0)) {\n            revert(\"POOL_PRICE_OR_TOTAL_SUPPLY_NULL_ERROR\");\n        }\n        aum = safeMul(poolPrice, totalTokens) / 1000000; // pool.BASE();\n    }\n\n    /// @dev Asserts that the caller is the RigoBlock Dao.\n    function _assertCallerIsRigoblockDao()\n        internal\n        view\n    {\n        if (msg.sender != rigoblockDaoAddress) {\n            revert(\"CALLER_NOT_RIGOBLOCK_DAO_ERROR\");\n        }\n    }\n\n    /// @dev Asserts that the caller is the Staking Proxy.\n    function _assertCallerIsStakingProxy()\n        internal\n        view\n    {\n        if (msg.sender != STAKINGPROXYADDRESS) {\n            revert(\"CALLER_NOT_STAKING_PROXY_ERROR\");\n        }\n    }\n\n    /// @dev Determines whether an address is an account or a contract\n    /// @param target Address to be inspected\n    /// @return Boolean the address is a contract\n    function _isContract(address target)\n        internal view\n        returns (bool)\n    {\n        uint size;\n        // solhint-disable-next-line\n        assembly {\n            size := extcodesize(target)\n        }\n        return size > 0;\n    }\n\n    /// @dev Asserts whether the caller contract is the pool\n    /// @param poolAddress Address of the calling pool\n    function _assertContractIsPool(address poolAddress)\n        internal\n        view\n    {\n        if (msg.sender != poolAddress) {\n            revert(\"SMART_CONTRACT_CALLER_IS_NOT_POOL_ERROR\");\n        }\n    }\n}\n",
		"../../utils/Pool/IPool.sol": "/*\n\n Copyright 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.6.0 <0.8.0;\n\n/// @title Pool Interface - Interface of pool standard functions.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n/// @notice only public view functions are used\ninterface IPool {\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function balanceOf(address _who) external view returns (uint256);\n    function totalSupply() external view returns (uint256 totaSupply);\n    function getEventful() external view returns (address);\n    function getData() external view returns (string memory name, string memory symbol, uint256 sellPrice, uint256 buyPrice);\n    function calcSharePrice() external view returns (uint256);\n    function getAdminData() external view returns (address, address feeCollector, address dragodAO, uint256 ratio, uint256 transactionFee, uint32 minPeriod);\n}\n",
		"../../utils/SafeMath/SafeMath.sol": "pragma solidity >=0.4.22 <0.8.0;\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n",
		"./ProofOfPerformanceFace.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.8.0;\n\n/// @title Proof of Performance Interface - Allows interaction with the PoP contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface ProofOfPerformanceFace {\n    \n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Credits the pop reward to the Staking Proxy contract.\n    /// @param poolId Number of the pool Id in registry.\n    function creditPopRewardToStakingProxy(uint256 poolId) external;\n\n    /// @dev Allows RigoBlock Dao to update the pools registry.\n    /// @param newDragoRegistryAddress Address of new registry.\n    function setRegistry(address newDragoRegistryAddress) external;\n\n    /// @dev Allows RigoBlock Dao to update its address.\n    /// @param newRigoblockDaoAddress Address of new dao.\n    function setRigoblockDao(address newRigoblockDaoAddress) external;\n\n    /// @dev Allows RigoBlock Dao to set the ratio between assets and performance reward for a group.\n    /// @param groupAddress Address of the pool's group.\n    /// @param newRatio Value of the new ratio.\n    /// @notice onlyRigoblockDao can set ratio.\n    function setRatio(address groupAddress, uint256 newRatio) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Gets data of a pool.\n    /// @param poolId Id of the pool.\n    /// @return active Bool the pool is active.\n    /// @return poolAddress address of the pool.\n    /// @return poolGroup address of the pool factory.\n    /// @return poolPrice price of the pool in wei.\n    /// @return poolSupply total supply of the pool in units.\n    /// @return poolValue total value of the pool in wei.\n    /// @return epochReward value of the reward factor or said pool.\n    /// @return ratio of assets/performance reward (from 0 to 10000).\n    /// @return pop value of the pop reward to be claimed in GRGs.\n    function getPoolData(uint256 poolId)\n        external\n        view\n        returns (\n            bool active,\n            address poolAddress,\n            address poolGroup,\n            uint256 poolPrice,\n            uint256 poolSupply,\n            uint256 poolValue,\n            uint256 epochReward,\n            uint256 ratio,\n            uint256 pop\n        );\n    \n    /// @dev Returns the highwatermark of a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the all-time-high pool nav.\n    function getHwm(uint256 poolId) external view returns (uint256);\n\n    /// @dev Returns the reward factor for a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the reward factor.\n    function getEpochReward(uint256 poolId)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the split ratio of asset and performance reward.\n    /// @param poolId Id of the pool.\n    /// @return Value of the ratio from 1 to 100.\n    function getRatio(uint256 poolId)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the proof of performance reward for a pool.\n    /// @param poolId Id of the pool.\n    /// @return popReward Value of the pop reward in Rigo tokens.\n    /// @return performanceReward Split of the performance reward in Rigo tokens.\n    /// @notice epoch reward should be big enough that it.\n    /// @notice can be decreased if number of funds increases.\n    /// @notice should be at least 10^6 (just as pool base) to start with.\n    /// @notice rigo token has 10^18 decimals.\n    function proofOfPerformance(uint256 poolId)\n        external\n        view\n        returns (uint256 popReward, uint256 performanceReward);\n\n    /// @dev Checks whether a pool is registered and active.\n    /// @param poolId Id of the pool.\n    /// @return Bool the pool is active.\n    function isActive(uint256 poolId)\n        external\n        view\n        returns (bool);\n\n    /// @dev Returns the address and the group of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return pool Address of the target pool.\n    /// @return group Address of the pool's group.\n    function addressFromId(uint256 poolId)\n        external\n        view\n        returns (\n            address pool,\n            address group\n        );\n\n    /// @dev Returns the price a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return poolPrice Price of the pool in wei.\n    /// @return totalTokens Number of tokens of a pool (totalSupply).\n    function getPoolPrice(uint256 poolId)\n        external\n        view\n        returns (\n            uint256 poolPrice,\n            uint256 totalTokens\n        );\n\n    /// @dev Returns the value of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return aum Total value of the pool in ETH.\n    function calcPoolValue(uint256 poolId)\n        external\n        view\n        returns (\n            uint256 aum\n        );\n}\n",
		"../Inflation/InflationFace.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.8.0;\n\n/// @title Inflation Interface - Allows interaction with the Inflation contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface InflationFace {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function mintInflation() external returns (uint256 mintedReward);\n    function setInflationFactor(address groupAddress, uint256 inflationFactor) external;\n    function setRigoblock(address newRigoblockDaoAddress) external;\n    function setAuthority(address newRigoblockDaoAddress) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function epochEnded() external view returns (bool);\n    function timeUntilNextClaim() external view returns (uint256);\n    function getInflationFactor(address groupAddress) external view returns (uint256);\n    function getEpochReward() external view returns (uint256);\n}\n",
		"../RigoToken/RigoTokenFace.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.5.0;\n\n/// @title Rigo Token Interface - Allows interaction with the Rigo token.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface RigoTokenFace {\n\n    function minter() external view returns (address);\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n\n    function mintToken(address _recipient, uint256 _amount) external;\n    function changeMintingAddress(address _newAddress) external;\n    function changeRigoblockAddress(address _newAddress) external;\n}\n",
		"../../protocol/DragoRegistry/IDragoRegistry.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Drago Registry Interface - Allows external interaction with Drago Registry.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface IDragoRegistry {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function register(address _drago, string calldata _name, string calldata _symbol, uint256 _dragoId, address _owner) external payable returns (bool);\n    function unregister(uint256 _id) external;\n    function setMeta(uint256 _id, bytes32 _key, bytes32 _value) external;\n    function addGroup(address _group) external;\n    function setFee(uint256 _fee) external;\n    function updateOwner(uint256 _id) external;\n    function updateOwners(uint256[] calldata _id) external;\n    function upgrade(address _newAddress) external payable; //payable as there is a transfer of value, otherwise opcode might throw an error\n    function setUpgraded(uint256 _version) external;\n    function drain() external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function dragoCount() external view returns (uint256);\n    function fromId(uint256 _id) external view returns (address drago, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromAddress(address _drago) external view returns (uint256 id, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromName(string calldata _name) external view returns (uint256 id, address drago, string memory symbol, uint256 dragoId, address owner, address group);\n    function getNameFromAddress(address _pool) external view returns (string memory);\n    function getSymbolFromAddress(address _pool) external view returns (string memory);\n    function meta(uint256 _id, bytes32 _key) external view returns (bytes32);\n    function getGroups() external view returns (address[] memory);\n    function getFee() external view returns (uint256);\n}\n",
		"../../staking/interfaces/IStaking.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/IEtherToken.sol\";\nimport \"./IStructs.sol\";\nimport \"./IGrgVault.sol\";\n\n\ninterface IStaking {\n\n    /// @dev Adds a new proof_of_performance address.\n    /// @param addr Address of proof_of_performance contract to add.\n    function addPopAddress(address addr)\n        external;\n        \n    /// @dev Create a new staking pool. The sender will be the staking pal of this pool.\n    /// Note that a staking pal must be payable.\n    /// @param rigoblockPoolAddress Adds rigoblock pool to the created staking pool for convenience if non-null.\n    /// @return poolId The unique pool id generated for this pool.\n    function createStakingPool(address rigoblockPoolAddress)\n        external\n        returns (bytes32 poolId);\n    \n    /// @dev Allows the operator to update the staking pal address.\n    /// @param poolId Unique id of pool.\n    /// @param newStakingPalAddress Address of the new staking pal.\n    function setStakingPalAddress(bytes32 poolId, address newStakingPalAddress)\n        external;\n\n    /// @dev Decreases the operator share for the given pool (i.e. increases pool rewards for members).\n    /// @param poolId Unique Id of pool.\n    /// @param newOperatorShare The newly decreased percentage of any rewards owned by the operator.\n    function decreaseStakingPoolOperatorShare(bytes32 poolId, uint32 newOperatorShare)\n        external;\n\n    /// @dev Begins a new epoch, preparing the prior one for finalization.\n    ///      Throws if not enough time has passed between epochs or if the\n    ///      previous epoch was not fully finalized.\n    /// @return numPoolsToFinalize The number of unfinalized pools.\n    function endEpoch()\n        external\n        returns (uint256);\n\n    /// @dev Instantly finalizes a single pool that earned rewards in the previous\n    ///      epoch, crediting it rewards for members and withdrawing operator's\n    ///      rewards as WETH. This can be called by internal functions that need\n    ///      to finalize a pool immediately. Does nothing if the pool is already\n    ///      finalized or did not earn rewards in the previous epoch.\n    /// @param poolId The pool ID to finalize.\n    function finalizePool(bytes32 poolId)\n        external;\n\n    /// @dev Initialize storage owned by this contract.\n    ///      This function should not be called directly.\n    ///      The StakingProxy contract will call it in `attachStakingContract()`.\n    function init()\n        external;\n\n    /// @dev Allows caller to join a staking pool as a rigoblock pool id subaccount.\n    /// @param stakingPoolId Unique id of staking pool.\n    /// @param rigoblockPoolAccount Address of subaccount to be added to staking pool.\n    function joinStakingPoolAsRbPoolAccount(\n        bytes32 stakingPoolId,\n        address rigoblockPoolAccount)\n        external;\n\n    /// @dev Moves stake between statuses: 'undelegated' or 'delegated'.\n    ///      Delegated stake can also be moved between pools.\n    ///      This change comes into effect next epoch.\n    /// @param from status to move stake out of.\n    /// @param to status to move stake into.\n    /// @param amount of stake to move.\n    function moveStake(\n        IStructs.StakeInfo calldata from,\n        IStructs.StakeInfo calldata to,\n        uint256 amount\n    )\n        external;\n        \n    /// @dev Credits the value of a pool's pop reward.\n    ///      Only a known RigoBlock pop can call this method. See\n    ///      (MixinPopManager).\n    /// @param poolAccount The address of the rigoblock pool account.\n    /// @param popReward The pop reward.\n    function creditPopReward(\n        address poolAccount,\n        uint256 popReward\n    )\n        external\n        payable;\n\n    /// @dev Removes an existing proof_of_performance address.\n    /// @param addr Address of proof_of_performance contract to remove.\n    function removePopAddress(address addr)\n        external;\n\n    /// @dev Set all configurable parameters at once.\n    /// @param _epochDurationInSeconds Minimum seconds between epochs.\n    /// @param _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @param _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @param _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @param _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function setParams(\n        uint256 _epochDurationInSeconds,\n        uint32 _rewardDelegatedStakeWeight,\n        uint256 _minimumPoolStake,\n        uint32 _cobbDouglasAlphaNumerator,\n        uint32 _cobbDouglasAlphaDenominator\n    )\n        external;\n\n    /// @dev Stake GRG tokens. Tokens are deposited into the GRG Vault.\n    ///      Unstake to retrieve the GRG. Stake is in the 'Active' status.\n    /// @param amount of GRG to stake.\n    function stake(uint256 amount)\n        external;\n\n    /// @dev Unstake. Tokens are withdrawn from the GRG Vault and returned to\n    ///      the staker. Stake must be in the 'undelegated' status in both the\n    ///      current and next epoch in order to be unstaked.\n    /// @param amount of GRG to unstake.\n    function unstake(uint256 amount)\n        external;\n\n    /// @dev Withdraws the caller's WETH rewards that have accumulated\n    ///      until the last epoch.\n    /// @param poolId Unique id of pool.\n    function withdrawDelegatorRewards(bytes32 poolId)\n        external;\n\n    /// @dev Computes the reward balance in ETH of a specific member of a pool.\n    /// @param poolId Unique id of pool.\n    /// @param member The member of the pool.\n    /// @return reward Balance in ETH.\n    function computeRewardBalanceOfDelegator(bytes32 poolId, address member)\n        external\n        view\n        returns (uint256 reward);\n\n    /// @dev Computes the reward balance in ETH of the operator of a pool.\n    /// @param poolId Unique id of pool.\n    /// @return reward Balance in ETH.\n    function computeRewardBalanceOfOperator(bytes32 poolId)\n        external\n        view\n        returns (uint256 reward);\n\n    /// @dev Returns the earliest end time in seconds of this epoch.\n    ///      The next epoch can begin once this time is reached.\n    ///      Epoch period = [startTimeInSeconds..endTimeInSeconds)\n    /// @return Time in seconds.\n    function getCurrentEpochEarliestEndTimeInSeconds()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Gets global stake for a given status.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Global stake for given status.\n    function getGlobalStakeByStatus(IStructs.StakeStatus stakeStatus)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Gets an owner's stake balances by status.\n    /// @param staker Owner of stake.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Owner's stake balances for given status.\n    function getOwnerStakeByStatus(\n        address staker,\n        IStructs.StakeStatus stakeStatus\n    )\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Retrieves all configurable parameter values.\n    /// @return _epochDurationInSeconds Minimum seconds between epochs.\n    /// @return _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @return _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @return _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @return _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function getParams()\n        external\n        view\n        returns (\n            uint256 _epochDurationInSeconds,\n            uint32 _rewardDelegatedStakeWeight,\n            uint256 _minimumPoolStake,\n            uint32 _cobbDouglasAlphaNumerator,\n            uint32 _cobbDouglasAlphaDenominator\n        );\n\n    /// @param staker of stake.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Stake delegated to pool by staker.\n    function getStakeDelegatedToPoolByOwner(address staker, bytes32 poolId)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Returns a staking pool\n    /// @param poolId Unique id of pool.\n    function getStakingPool(bytes32 poolId)\n        external\n        view\n        returns (IStructs.Pool memory);\n\n    /// @dev Get stats on a staking pool in this epoch.\n    /// @param poolId Pool Id to query.\n    /// @return PoolStats struct for pool id.\n    function getStakingPoolStatsThisEpoch(bytes32 poolId)\n        external\n        view\n        returns (IStructs.PoolStats memory);\n\n    /// @dev Returns the total stake delegated to a specific staking pool,\n    ///      across all members.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Total stake delegated to pool.\n    function getTotalStakeDelegatedToPool(bytes32 poolId)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n    \n    /// @dev Returns the total maximum epoch reward given a stake.\n    /// @param stakedTokens Number of staked tokens.\n    /// @return maxEpochReward Maximum epoch reward.\n    function getMaxEpochReward(uint256 stakedTokens)\n        external\n        view\n        returns (uint256);\n\n    /// @dev An overridable way to access the deployed grgVault.\n    ///      Must be view to allow overrides to access state.\n    /// @return grgVault The grgVault contract.\n    function getGrgVault()\n        external\n        view\n        returns (IGrgVault grgVault);\n}\n",
		"../../utils/0xUtils/IEtherToken.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >= 0.5.9;\n\nimport \"./IERC20Token.sol\";\n\n\nabstract contract IEtherToken is\n    IERC20Token\n{\n    function deposit()\n        public\n        virtual\n        payable;\n\n    function withdraw(uint256 amount)\n        public\n        virtual;\n}\n",
		"../../utils/0xUtils/IERC20Token.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nabstract contract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        virtual\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        virtual\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        virtual\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        virtual\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        virtual\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        virtual\n        returns (uint256);\n}\n",
		"../../staking/interfaces/IStructs.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IStructs {\n\n    /// @dev Stats for a pool that earned rewards.\n    /// @param feesCollected Fees collected in ETH by this pool.\n    /// @param weightedStake Amount of weighted stake in the pool.\n    /// @param membersStake Amount of non-operator stake in the pool.\n    struct PoolStats {\n        uint256 feesCollected;\n        uint256 weightedStake;\n        uint256 membersStake;\n    }\n\n    /// @dev Holds stats aggregated across a set of pools.\n    /// @param rewardsAvailable Rewards (ETH) available to the epoch\n    ///        being finalized (the previous epoch). This is simply the balance\n    ///        of the contract at the end of the epoch.\n    /// @param numPoolsToFinalize The number of pools that have yet to be finalized through `finalizePools()`.\n    /// @param totalFeesCollected The total fees collected for the epoch being finalized.\n    /// @param totalWeightedStake The total fees collected for the epoch being finalized.\n    /// @param totalRewardsFinalized Amount of rewards that have been paid during finalization.\n    struct AggregatedStats {\n        uint256 rewardsAvailable;\n        uint256 numPoolsToFinalize;\n        uint256 totalFeesCollected;\n        uint256 totalWeightedStake;\n        uint256 totalRewardsFinalized;\n    }\n\n    /// @dev Encapsulates a balance for the current and next epochs.\n    /// Note that these balances may be stale if the current epoch\n    /// is greater than `currentEpoch`.\n    /// @param currentEpoch The current epoch\n    /// @param currentEpochBalance Balance in the current epoch.\n    /// @param nextEpochBalance Balance in `currentEpoch+1`.\n    struct StoredBalance {\n        uint64 currentEpoch;\n        uint96 currentEpochBalance;\n        uint96 nextEpochBalance;\n    }\n\n    /// @dev Statuses that stake can exist in.\n    ///      Any stake can be (re)delegated effective at the next epoch\n    ///      Undelegated stake can be withdrawn if it is available in both the current and next epoch\n    enum StakeStatus {\n        UNDELEGATED,\n        DELEGATED\n    }\n\n    /// @dev Info used to describe a status.\n    /// @param status Status of the stake.\n    /// @param poolId Unique Id of pool. This is set when status=DELEGATED.\n    struct StakeInfo {\n        StakeStatus status;\n        bytes32 poolId;\n    }\n\n    /// @dev Struct to represent a fraction.\n    /// @param numerator Numerator of fraction.\n    /// @param denominator Denominator of fraction.\n    struct Fraction {\n        uint256 numerator;\n        uint256 denominator;\n    }\n\n    /// @dev Holds the metadata for a staking pool.\n    /// @param operator Operator of the pool.\n    /// @param stakingPal Staking pal of the pool.\n    /// @param operatorShare Fraction of the total balance owned by the operator, in ppm.\n    /// @param stakingPalShare Fraction of the operator reward owned by the staking pal, in ppm.\n    struct Pool {\n        address operator;\n        address stakingPal;\n        uint32 operatorShare;\n        uint32 stakingPalShare;\n    }\n}\n",
		"../../staking/interfaces/IGrgVault.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IGrgVault {\n\n    /// @dev Emmitted whenever a StakingProxy is set in a vault.\n    event StakingProxySet(address stakingProxyAddress);\n\n    /// @dev Emitted when the Staking contract is put into Catastrophic Failure Mode\n    /// @param sender Address of sender (`msg.sender`)\n    event InCatastrophicFailureMode(address sender);\n\n    /// @dev Emitted when Grg Tokens are deposited into the vault.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens deposited.\n    event Deposit(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted when Grg Tokens are withdrawn from the vault.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens withdrawn.\n    event Withdraw(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted whenever the GRG AssetProxy is set.\n    event GrgProxySet(address grgProxyAddress);\n\n    /// @dev Sets the address of the StakingProxy contract.\n    /// Note that only the contract staker can call this function.\n    /// @param _stakingProxyAddress Address of Staking proxy contract.\n    function setStakingProxy(address _stakingProxyAddress)\n        external;\n\n    /// @dev Vault enters into Catastrophic Failure Mode.\n    /// *** WARNING - ONCE IN CATOSTROPHIC FAILURE MODE, YOU CAN NEVER GO BACK! ***\n    /// Note that only the contract staker can call this function.\n    function enterCatastrophicFailure()\n        external;\n\n    /// @dev Sets the Grg proxy.\n    /// Note that only the contract staker can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param grgProxyAddress Address of the RigoBlock Grg Proxy.\n    function setGrgProxy(address grgProxyAddress)\n        external;\n\n    /// @dev Deposit an `amount` of Grg Tokens from `staker` into the vault.\n    /// Note that only the Staking contract can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens to deposit.\n    function depositFrom(address staker, uint256 amount)\n        external;\n\n    /// @dev Withdraw an `amount` of Grg Tokens to `staker` from the vault.\n    /// Note that only the Staking contract can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens to withdraw.\n    function withdrawFrom(address staker, uint256 amount)\n        external;\n\n    /// @dev Withdraw ALL Grg Tokens to `staker` from the vault.\n    /// Note that this can only be called when *in* Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    function withdrawAllFrom(address staker)\n        external\n        returns (uint256);\n\n    /// @dev Returns the balance in Grg Tokens of the `staker`\n    /// @return Balance in Grg.\n    function balanceOf(address staker)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the entire balance of Grg tokens in the vault.\n    function balanceOfGrgVault()\n        external\n        view\n        returns (uint256);\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.7.4+commit.3f05b770",
		"settings": {
			"remappings": [],
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}