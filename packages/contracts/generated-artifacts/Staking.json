{
	"schemaVersion": "2.0.0",
	"contractName": "Staking",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "numPoolsToFinalize",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsAvailable",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalFeesCollected",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalWeightedStake",
						"type": "uint256"
					}
				],
				"name": "EpochEnded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsPaid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsRemaining",
						"type": "uint256"
					}
				],
				"name": "EpochFinalized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "fromStatus",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "fromPool",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "toStatus",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "toPool",
						"type": "bytes32"
					}
				],
				"name": "MoveStake",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "oldOperatorShare",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "newOperatorShare",
						"type": "uint32"
					}
				],
				"name": "OperatorShareDecreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "minimumPoolStake",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "cobbDouglasAlphaNumerator",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "cobbDouglasAlphaDenominator",
						"type": "uint256"
					}
				],
				"name": "ParamsSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "exchangeAddress",
						"type": "address"
					}
				],
				"name": "PopAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "exchangeAddress",
						"type": "address"
					}
				],
				"name": "PopRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "rbPoolAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "RbPoolStakingPoolSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "operatorReward",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "membersReward",
						"type": "uint256"
					}
				],
				"name": "RewardsPaid",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Stake",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "operatorShare",
						"type": "uint32"
					}
				],
				"name": "StakingPoolCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "StakingPoolEarnedRewardsInEpoch",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Unstake",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "addAuthorizedAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "addPopAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "aggregatedStatsByEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "rewardsAvailable",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "numPoolsToFinalize",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalFeesCollected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalWeightedStake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalRewardsFinalized",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "authorities",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "authorized",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cobbDouglasAlphaDenominator",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cobbDouglasAlphaNumerator",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "member",
						"type": "address"
					}
				],
				"name": "computeRewardBalanceOfDelegator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "computeRewardBalanceOfOperator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "rigoblockPoolAddress",
						"type": "address"
					}
				],
				"name": "createStakingPool",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentEpochStartTimeInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "uint32",
						"name": "newOperatorShare",
						"type": "uint32"
					}
				],
				"name": "decreaseStakingPoolOperatorShare",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "epochDurationInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "finalizePool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAuthorizedAddresses",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCurrentEpochEarliestEndTimeInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDragoRegistry",
				"outputs": [
					{
						"internalType": "contract IDragoRegistry",
						"name": "dragoRegistry",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum IStructs.StakeStatus",
						"name": "stakeStatus",
						"type": "uint8"
					}
				],
				"name": "getGlobalStakeByStatus",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGrgContract",
				"outputs": [
					{
						"internalType": "contract RigoTokenFace",
						"name": "grgContract",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGrgVault",
				"outputs": [
					{
						"internalType": "contract IGrgVault",
						"name": "grgVault",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"internalType": "enum IStructs.StakeStatus",
						"name": "stakeStatus",
						"type": "uint8"
					}
				],
				"name": "getOwnerStakeByStatus",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getParams",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_minimumPoolStake",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaNumerator",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaDenominator",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakeDelegatedToPoolByOwner",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakingPool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "operator",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "operatorShare",
								"type": "uint32"
							},
							{
								"internalType": "address",
								"name": "stakingPal",
								"type": "address"
							}
						],
						"internalType": "struct IStructs.Pool",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakingPoolStatsThisEpoch",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "feesCollected",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "weightedStake",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "membersStake",
								"type": "uint256"
							}
						],
						"internalType": "struct IStructs.PoolStats",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					}
				],
				"name": "getTotalStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getTotalStakeDelegatedToPool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWethContract",
				"outputs": [
					{
						"internalType": "contract IEtherToken",
						"name": "wethContract",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "init",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "rigoblockPoolAccount",
						"type": "address"
					}
				],
				"name": "joinStakingPoolAsRbPoolAccount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastPoolId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minimumPoolStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum IStructs.StakeStatus",
								"name": "status",
								"type": "uint8"
							},
							{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}
						],
						"internalType": "struct IStructs.StakeInfo",
						"name": "from",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "enum IStructs.StakeStatus",
								"name": "status",
								"type": "uint8"
							},
							{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}
						],
						"internalType": "struct IStructs.StakeInfo",
						"name": "to",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "moveStake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "makerAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "payerAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "protocolFee",
						"type": "uint256"
					}
				],
				"name": "payProtocolFee",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "poolIdByRbPoolAccount",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "poolStatsByEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "feesCollected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "weightedStake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "membersStake",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "removeAuthorizedAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "removeAuthorizedAddressAtIndex",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "removeExchangeAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardDelegatedStakeWeight",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "rewardsByPoolId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_minimumPoolStake",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaNumerator",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaDenominator",
						"type": "uint32"
					}
				],
				"name": "setParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "unstake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "validPops",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "wethReservedForPoolRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "withdrawDelegatorRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addAuthorizedAddress(address)": {
					"details": "Authorizes an address.",
					"params": {
						"target": "Address to authorize."
					}
				},
				"addPopAddress(address)": {
					"details": "Adds a new pop address",
					"params": {
						"addr": "Address of pop contract to add"
					}
				},
				"computeRewardBalanceOfDelegator(bytes32,address)": {
					"details": "Computes the reward balance in ETH of a specific member of a pool.",
					"params": {
						"member": "The member of the pool.",
						"poolId": "Unique id of pool."
					},
					"returns": {
						"reward": "totalReward Balance in ETH."
					}
				},
				"computeRewardBalanceOfOperator(bytes32)": {
					"details": "Computes the reward balance in ETH of the operator of a pool.",
					"params": {
						"poolId": "Unique id of pool."
					},
					"returns": {
						"reward": "totalReward Balance in ETH."
					}
				},
				"createStakingPool(address)": {
					"details": "Create a new staking pool. The sender will be the operator of this pool. Note that an operator must be payable.",
					"params": {
						"rigoblockPoolAddress": "Adds rigoblock pool to the created staking pool for convenience if non-null."
					},
					"returns": {
						"poolId": "The unique pool id generated for this pool."
					}
				},
				"decreaseStakingPoolOperatorShare(bytes32,uint32)": {
					"details": "Decreases the operator share for the given pool (i.e. increases pool rewards for members).",
					"params": {
						"newOperatorShare": "The newly decreased percentage of any rewards owned by the operator.",
						"poolId": "Unique Id of pool."
					}
				},
				"endEpoch()": {
					"details": "Begins a new epoch, preparing the prior one for finalization.      Throws if not enough time has passed between epochs or if the      previous epoch was not fully finalized.",
					"returns": {
						"_0": "numPoolsToFinalize The number of unfinalized pools."
					}
				},
				"finalizePool(bytes32)": {
					"details": "Instantly finalizes a single pool that earned rewards in the previous      epoch, crediting it rewards for members and withdrawing operator's      rewards as WETH. This can be called by internal functions that need      to finalize a pool immediately. Does nothing if the pool is already      finalized or did not earn rewards in the previous epoch.",
					"params": {
						"poolId": "The pool ID to finalize."
					}
				},
				"getAuthorizedAddresses()": {
					"details": "Gets all authorized addresses.",
					"returns": {
						"_0": "Array of authorized addresses."
					}
				},
				"getCurrentEpochEarliestEndTimeInSeconds()": {
					"details": "Returns the earliest end time in seconds of this epoch.      The next epoch can begin once this time is reached.      Epoch period = [startTimeInSeconds..endTimeInSeconds)",
					"returns": {
						"_0": "Time in seconds."
					}
				},
				"getDragoRegistry()": {
					"details": "An overridable way to access the deployed dragoRegistry.      Must be view to allow overrides to access state.",
					"returns": {
						"dragoRegistry": "The dragoRegistry contract."
					}
				},
				"getGlobalStakeByStatus(uint8)": {
					"details": "Gets global stake for a given status.",
					"params": {
						"stakeStatus": "UNDELEGATED or DELEGATED"
					},
					"returns": {
						"balance": "Global stake for given status."
					}
				},
				"getGrgContract()": {
					"details": "An overridable way to access the deployed GRG contract.      Must be view to allow overrides to access state.",
					"returns": {
						"grgContract": "The GRG contract instance."
					}
				},
				"getGrgVault()": {
					"details": "An overridable way to access the deployed grgVault.      Must be view to allow overrides to access state.",
					"returns": {
						"grgVault": "The grgVault contract."
					}
				},
				"getOwnerStakeByStatus(address,uint8)": {
					"details": "Gets an owner's stake balances by status.",
					"params": {
						"stakeStatus": "UNDELEGATED or DELEGATED",
						"staker": "Owner of stake."
					},
					"returns": {
						"balance": "Owner's stake balances for given status."
					}
				},
				"getParams()": {
					"details": "Retrieves all configurable parameter values.",
					"returns": {
						"_cobbDouglasAlphaDenominator": "Denominator for cobb douglas alpha factor.",
						"_cobbDouglasAlphaNumerator": "Numerator for cobb douglas alpha factor.",
						"_epochDurationInSeconds": "Minimum seconds between epochs.",
						"_minimumPoolStake": "Minimum amount of stake required in a pool to collect rewards.",
						"_rewardDelegatedStakeWeight": "How much delegated stake is weighted vs operator stake, in ppm."
					}
				},
				"getStakeDelegatedToPoolByOwner(address,bytes32)": {
					"details": "Returns the stake delegated to a specific staking pool, by a given staker.",
					"params": {
						"poolId": "Unique Id of pool.",
						"staker": "of stake."
					},
					"returns": {
						"balance": "Stake delegated to pool by staker."
					}
				},
				"getStakingPool(bytes32)": {
					"details": "Returns a staking pool",
					"params": {
						"poolId": "Unique id of pool."
					}
				},
				"getStakingPoolStatsThisEpoch(bytes32)": {
					"details": "Get stats on a staking pool in this epoch.",
					"params": {
						"poolId": "Pool Id to query."
					},
					"returns": {
						"_0": "PoolStats struct for pool id."
					}
				},
				"getTotalStake(address)": {
					"details": "Returns the total stake for a given staker.",
					"params": {
						"staker": "of stake."
					},
					"returns": {
						"_0": "Total GRG staked by `staker`."
					}
				},
				"getTotalStakeDelegatedToPool(bytes32)": {
					"details": "Returns the total stake delegated to a specific staking pool,      across all members.",
					"params": {
						"poolId": "Unique Id of pool."
					},
					"returns": {
						"balance": "Total stake delegated to pool."
					}
				},
				"getWethContract()": {
					"details": "An overridable way to access the deployed WETH contract.      Must be view to allow overrides to access state.",
					"returns": {
						"wethContract": "The WETH contract instance."
					}
				},
				"init()": {
					"details": "Initialize storage owned by this contract.      This function should not be called directly.      The StakingProxy contract will call it in `attachStakingContract()`."
				},
				"joinStakingPoolAsRbPoolAccount(bytes32,address)": {
					"details": "Allows caller to join a staking pool as a rigoblock pool account.",
					"params": {
						"poolId": "Unique id of pool.",
						"rigoblockPoolAccount": "Address of subaccount to be added to staking pool."
					}
				},
				"moveStake((uint8,bytes32),(uint8,bytes32),uint256)": {
					"details": "Moves stake between statuses: 'undelegated' or 'delegated'.      Delegated stake can also be moved between pools.      This change comes into effect next epoch.",
					"params": {
						"amount": "Amount of stake to move.",
						"from": "Status to move stake out of.",
						"to": "Status to move stake into."
					}
				},
				"payProtocolFee(address,address,uint256)": {
					"details": "Pays a protocol fee in ETH or WETH.      Only a known 0x exchange can call this method. See      (MixinExchangeManager).",
					"params": {
						"makerAddress": "The address of the order's maker.",
						"payerAddress": "The address of the protocol fee payer.",
						"protocolFee": "The protocol fee amount. This is either passed as ETH or transferred as WETH."
					}
				},
				"removeAuthorizedAddress(address)": {
					"details": "Removes authorizion of an address.",
					"params": {
						"target": "Address to remove authorization from."
					}
				},
				"removeAuthorizedAddressAtIndex(address,uint256)": {
					"details": "Removes authorizion of an address.",
					"params": {
						"index": "Index of target in authorities array.",
						"target": "Address to remove authorization from."
					}
				},
				"removeExchangeAddress(address)": {
					"details": "Removes an existing exchange address",
					"params": {
						"addr": "Address of exchange contract to remove"
					}
				},
				"setParams(uint256,uint32,uint256,uint32,uint32)": {
					"details": "Set all configurable parameters at once.",
					"params": {
						"_cobbDouglasAlphaDenominator": "Denominator for cobb douglas alpha factor.",
						"_cobbDouglasAlphaNumerator": "Numerator for cobb douglas alpha factor.",
						"_epochDurationInSeconds": "Minimum seconds between epochs.",
						"_minimumPoolStake": "Minimum amount of stake required in a pool to collect rewards.",
						"_rewardDelegatedStakeWeight": "How much delegated stake is weighted vs operator stake, in ppm."
					}
				},
				"stake(uint256)": {
					"details": "Stake GRG tokens. Tokens are deposited into the GRG Vault.      Unstake to retrieve the GRG. Stake is in the 'Active' status.",
					"params": {
						"amount": "Amount of GRG to stake."
					}
				},
				"transferOwnership(address)": {
					"details": "Change the owner of this contract.",
					"params": {
						"newOwner": "New owner address."
					}
				},
				"unstake(uint256)": {
					"details": "Unstake. Tokens are withdrawn from the GRG Vault and returned to      the staker. Stake must be in the 'undelegated' status in both the      current and next epoch in order to be unstaked.",
					"params": {
						"amount": "Amount of GRG to unstake."
					}
				},
				"withdrawDelegatorRewards(bytes32)": {
					"details": "Withdraws the caller's WETH rewards that have accumulated      until the last epoch.",
					"params": {
						"poolId": "Unique id of pool."
					}
				}
			},
			"version": 1
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055615e2380620000336000396000f3fe60806040526004361061033f5760003560e01c80639ad26744116101b0578063c18c9141116100ec578063e8eeb3f811610095578063ef4ba6801161006f578063ef4ba6801461090a578063f252b7a11461091f578063f2fde38b1461093f578063ff691b111461095f5761033f565b8063e8eeb3f8146108c0578063e907f003146108d5578063ee99205c146108f55761033f565b8063e0ee036e116100c6578063e0ee036e14610876578063e1c7392a1461088b578063e804d0a4146108a05761033f565b8063c18c91411461081f578063d39de6e91461083f578063e0822db7146108615761033f565b8063b053152411610159578063b652b41f11610133578063b652b41f146107aa578063b9181611146107bf578063bb7ef7e0146107df578063be111af4146107ff5761033f565b8063b053152414610760578063b2baa33e14610775578063b510879f1461078a5761033f565b8063a3b4a3271161018a578063a3b4a32714610718578063a657e5791461072b578063a694fc3a146107405761033f565b80639ad26744146106c35780639c3ccc82146106e3578063a26171e2146107035761033f565b8063494503d41161027f5780635e615a6b11610228578063766718081161020257806376671808146106575780637fa140c71461066c578063816667961461068c5780638da5cb5b146106ae5761033f565b80635e615a6b146105fc578063634038011461062257806370712939146106375761033f565b8063587da02311610259578063587da023146105a757806358f6c7e3146105bc5780635d91121d146105dc5761033f565b8063494503d41461052d5780634bcc3f671461054d578063540c2d531461057a5761033f565b80632e17de78116102ec5780633e4ad732116102c65780633e4ad7321461049357806342f1181e146104c057806344a6958b146104e057806346b97959146105005761033f565b80632e17de781461042057806338229d93146104405780633c277fc5146104715761033f565b80631e7ff8f61161031d5780631e7ff8f6146103b15780631f81eb80146103d15780632a94c279146103f15761033f565b806301e28d84146103445780630b9663db146103665780631a67a0a014610391575b600080fd5b34801561035057600080fd5b5061036461035f3660046155da565b61097f565b005b34801561037257600080fd5b5061037b610a4d565b6040516103889190615a26565b60405180910390f35b34801561039d57600080fd5b506103646103ac36600461578f565b610b93565b3480156103bd57600080fd5b5061037b6103cc3660046155da565b610d6e565b3480156103dd57600080fd5b506103646103ec3660046155da565b610e08565b3480156103fd57600080fd5b5061041161040c3660046157be565b610eca565b60405161038893929190615cc5565b34801561042c57600080fd5b5061036461043b366004615777565b610ef6565b34801561044c57600080fd5b5061046061045b366004615777565b6110ab565b604051610388959493929190615cf6565b34801561047d57600080fd5b506104866110da565b6040516103889190615922565b34801561049f57600080fd5b506104b36104ae366004615777565b6110f2565b6040516103889190615c86565b3480156104cc57600080fd5b506103646104db3660046155da565b611111565b3480156104ec57600080fd5b506104b36104fb36600461567d565b611125565b34801561050c57600080fd5b5061052061051b366004615777565b611184565b6040516103889190615c25565b34801561053957600080fd5b50610486610548366004615777565b6111cf565b34801561055957600080fd5b5061056d610568366004615777565b611203565b6040516103889190615c46565b34801561058657600080fd5b5061059a6105953660046155da565b61127b565b6040516103889190615a1b565b3480156105b357600080fd5b5061037b611290565b3480156105c857600080fd5b506103646105d736600461581d565b611296565b3480156105e857600080fd5b506103646105f73660046157df565b611493565b34801561060857600080fd5b5061061161155c565b604051610388959493929190615d19565b34801561062e57600080fd5b5061037b611585565b34801561064357600080fd5b506103646106523660046155da565b61158b565b34801561066357600080fd5b5061037b611640565b34801561067857600080fd5b5061037b6106873660046155da565b611646565b34801561069857600080fd5b506106a1611658565b6040516103889190615d5d565b3480156106ba57600080fd5b50610486611664565b3480156106cf57600080fd5b506103646106de366004615652565b611680565b3480156106ef57600080fd5b506103646106fe3660046158c9565b611692565b34801561070f57600080fd5b5061037b61170c565b610364610726366004615612565b611712565b34801561073757600080fd5b5061037b611941565b34801561074c57600080fd5b5061036461075b366004615777565b611947565b34801561076c57600080fd5b5061037b611a5c565b34801561078157600080fd5b5061037b611a62565b34801561079657600080fd5b506103646107a5366004615777565b611a80565b3480156107b657600080fd5b50610486611a8a565b3480156107cb57600080fd5b5061059a6107da3660046155da565b611aa2565b3480156107eb57600080fd5b5061037b6107fa366004615777565b611ab7565b34801561080b57600080fd5b5061037b61081a3660046155da565b611b52565b34801561082b57600080fd5b5061037b61083a366004615777565b611db8565b34801561084b57600080fd5b50610854611dca565b60405161038891906159c1565b34801561086d57600080fd5b50610486611e39565b34801561088257600080fd5b506106a1611e51565b34801561089757600080fd5b50610364611e5d565b3480156108ac57600080fd5b506104b36108bb366004615802565b611e77565b3480156108cc57600080fd5b506106a1611fc1565b3480156108e157600080fd5b5061037b6108f036600461578f565b611fd5565b34801561090157600080fd5b50610486612082565b34801561091657600080fd5b5061048661209e565b34801561092b57600080fd5b506104b361093a366004615652565b6120b6565b34801561094b57600080fd5b5061036461095a3660046155da565b6120f7565b34801561096b57600080fd5b5061036461097a366004615777565b61219a565b6109876123f0565b73ffffffffffffffffffffffffffffffffffffffff811660009081526010602052604090205460ff166109c7576109c76109c2600183612413565b6124b5565b73ffffffffffffffffffffffffffffffffffffffff81166000908152601060205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f9bf55462cb5fa187f725d06de0a70bc01c4e40695570bdc25ad116f9be46bda790610a42908390615922565b60405180910390a150565b600c5460009081610a5f8260016124bd565b6000818152601660205260409020600101549091508015610a8757610a876109c283836124dc565b610a8f6124f9565b610a9761256b565b600084815260166020526040902055610aae61545d565b50600083815260166020908152604091829020825160a08101845281548082526001830154938201849052600283015482860181905260038401546060840181905260049094015460808401529451919488947fbb4a26fa0ace13ee4da343896c20eaa44a618fb9071fdd8c2e2c960a4583189d94610b309491939291615cdb565b60405180910390a2610b40612609565b6020810151610b8757805160405185917fb463d19ecf455be65365092cf8e1db6934a0334cf8cd532ddf9964d01f36b5b291610b7e91600091615a71565b60405180910390a25b60200151935050505090565b600080610b9e611a8a565b6040517fc277f1ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091169063c277f1ac90610bf2908790600401615a26565b60006040518083038186803b158015610c0a57600080fd5b505afa158015610c1e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610c6491908101906156b2565b50509350505091506000811415610cb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790615b12565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790615b49565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600960205260408082208790555186928616917fe8b9f7ee7a4480d45b60e98f7b2090dd82e2353b8557a6ee2dd2d5ee9196bac291a350505050565b6000610d78611e39565b73ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401610db09190615922565b60206040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e00919061585a565b90505b919050565b610e106123f0565b73ffffffffffffffffffffffffffffffffffffffff811660009081526010602052604090205460ff1615610e4c57610e4c6109c2600083612413565b73ffffffffffffffffffffffffffffffffffffffff81166000908152601060205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f5738ee3c8e8fe8b0b9c4c21b16fdca42ec02e271237dfeabbf3b5af1584d732b90610a42908390615922565b601560209081526000928352604080842090915290825290208054600182015460029092015490919083565b33610eff61548c565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60205260409020610f4c90612646565b90506000610f7e82602001516bffffffffffffffffffffffff1683604001516bffffffffffffffffffffffff166126ec565b905080841115610f9557610f956109c28583612702565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60205260409020610fe3908561271f565b610feb611e39565b73ffffffffffffffffffffffffffffffffffffffff16639470b0bd84866040518363ffffffff1660e01b815260040161102592919061599b565b600060405180830381600087803b15801561103f57600080fd5b505af1158015611053573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd8560405161109d9190615a26565b60405180910390a250505050565b601660205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b6110fa61548c565b6000828152600760205260409020610e0090612646565b6111196127a0565b611122816127e7565b50565b61112d61548c565b61117b6005600084600181111561114057fe5b60ff1681526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff881682529092529020612646565b90505b92915050565b61118c6154ac565b506000908152601560209081526040808320600c548452825291829020825160608101845281548152600182015492810192909252600201549181019190915290565b600281815481106111dc57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b61120b61548c565b506000908152600a60209081526040918290208251606081018452815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910463ffffffff16938201939093526001909101549091169181019190915290565b60106020526000908152604090205460ff1681565b600d5481565b33816112a2575061148e565b60006112b16020860186615802565b60018111156112bc57fe5b1480156112e0575060006112d36020850185615802565b60018111156112de57fe5b145b156112eb575061148e565b60016112fa6020860186615802565b600181111561130557fe5b141561131a5761131a84602001358284612918565b60016113296020850185615802565b600181111561133457fe5b141561134957611349836020013582846129b1565b600060058161135b6020880188615802565b600181111561136657fe5b60ff1681526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff86168252835290812092509060059082906113b090880188615802565b60018111156113bb57fe5b60ff1681526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff87168252909252902090506113fe828286612a4a565b60208086013590870180359073ffffffffffffffffffffffffffffffffffffffff8616907f7d3ad1dcf03b9027064d1d9a474a69e0cecc31324c541d3eb9b5e6fa2f106c8d908890611450908c615802565b600181111561145b57fe5b61146860208c018c615802565b600181111561147357fe5b60405161148293929190615d44565b60405180910390a45050505b505050565b8161149d81612b37565b6000838152600a602052604090205474010000000000000000000000000000000000000000900463ffffffff166114d5848285612b70565b6000848152600a60205260409081902080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8716021790555184907f8ea2a7a959bd25f226b7b0a4393613f7fdcaa8404e8bad96aa52dc1c145901679061109d9084908790615d6e565b601154601254601354601454929363ffffffff9283169391928281169264010000000090041690565b60115481565b6115936127a0565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff166115cc576115cc6109c282612bb8565b60005b60025481101561163c578173ffffffffffffffffffffffffffffffffffffffff16600282815481106115fd57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156116345761162f8282612c57565b61163c565b6001016115cf565b5050565b600c5481565b60096020526000908152604090205481565b60145463ffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6116886127a0565b61163c8282612c57565b61169a6123f0565b6116a78585858585612ed2565b3073ffffffffffffffffffffffffffffffffffffffff1663c6f3a4276040518163ffffffff1660e01b815260040160006040518083038186803b1580156116ed57600080fd5b505afa158015611701573d6000803e3d6000fd5b505050505050505050565b60135481565b3360009081526010602052604090205460ff16611735576117356109c233612f95565b61173e81612fb0565b3461180f5761174b6110da565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b81526004016117879392919061596a565b602060405180830381600087803b1580156117a157600080fd5b505af11580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d99190615757565b61180f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790615bee565b73ffffffffffffffffffffffffffffffffffffffff831660009081526009602052604090205480611840575061148e565b600061184b826110f2565b602001516bffffffffffffffffffffffff16905060135481101561187057505061148e565b600c54600083815260156020908152604080832084845282528083206016909252909120815480611913576000806118a88888612fd1565b6002870182905560018701819055600386015491935091506118ca9082613051565b60038501556001808501546118de91613051565b6001850155604051889087907f14b098103235344975b17508c2391721cc9ac3f3fa2b56c7ff46f8480dfd074f90600090a350505b61191d8188613051565b8355600282015461192e9088613051565b8260020181905550505050505050505050565b60085481565b33611950611e39565b73ffffffffffffffffffffffffffffffffffffffff166315cc36f282846040518363ffffffff1660e01b815260040161198a92919061599b565b600060405180830381600087803b1580156119a457600080fd5b505af11580156119b8573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60205260409020611a0a908361306d565b8073ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a83604051611a509190615a26565b60405180910390a25050565b60175481565b6000611a7b601154600d5461305190919063ffffffff16565b905090565b61112281336130d1565b73de6445484a8dcd9bf35fc95eb4e3990cc358822e90565b60016020526000908152604090205460ff1681565b6000611ac161548c565b506000828152600a602090815260408083208151606081018352815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910463ffffffff1694820194909452600190910154909216908201529080611b35856132a9565b91509150611b48836020015183836132bf565b5095945050505050565b6000806000611b5f611a8a565b73ffffffffffffffffffffffffffffffffffffffff1663b72e717d856040518263ffffffff1660e01b8152600401611b979190615922565b60006040518083038186803b158015611baf57600080fd5b505afa158015611bc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611c099190810190615872565b50945050505091506000821415611c4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790615b80565b80600073ffffffffffffffffffffffffffffffffffffffff82163314611c6f5750335b620aae60611c7c856132fa565b8460001b9550611c9086620f424083612b70565b611c9861548c565b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff808616825263ffffffff808516602080850191825287841685870190815260008d8152600a9092529086902085518154935190941674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff9486167fffffffffffffffffffffffff00000000000000000000000000000000000000009485161794909416939093178355516001909201805492909316911617905590517fcec6fc86ea644053f6edff1160dfe3fa5c61e7a5ef9f873f145bb03a0bd319e790611d9b90899087908690615a2f565b60405180910390a1611dad8789610b93565b505050505050919050565b600b6020526000908152604090205481565b60606002805480602002602001604051908101604052809291908181526020018280548015611e2f57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611e04575b5050505050905090565b73ba7f8b5fb1b19c1211c5d49550fcd149177a5eaf90565b60125463ffffffff1681565b611e656123f0565b611e6d613332565b611e75613345565b565b611e7f61548c565b60016000526004602052611eb27fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05612646565b90506000826001811115611ec257fe5b1415610e03576000611ed2611e39565b73ffffffffffffffffffffffffffffffffffffffff16636b6df5aa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1757600080fd5b505afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f919061585a565b9050611f7e611f7983602001516bffffffffffffffffffffffff16836124bd90919063ffffffff16565b613370565b6bffffffffffffffffffffffff90811660208401526040830151611fa891611f79918491166124bd565b6bffffffffffffffffffffffff16604083015250919050565b601454640100000000900463ffffffff1681565b6000611fdf61548c565b506000838152600a602090815260408083208151606081018352815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910463ffffffff1694820194909452600190910154909216908201529080612053866132a9565b915091506000612068846020015184846132bf565b91505061207787878385613394565b979650505050505050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b734fbb350052bca5417566f188eb2ebce5b19bc96490565b6120be61548c565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660209081526040808320858452909152902061117b90612646565b6120ff6127a0565b73ffffffffffffffffffffffffffffffffffffffff811661212a576121256109c26134d5565b611122565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b6121a33361350c565b156121e15733600090815260106020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b600c5460006121f18260016124bd565b90506121fb61545d565b50600081815260166020908152604091829020825160a0810184528154815260018201549281018390526002820154938101939093526003810154606084015260040154608083015261225057505050611122565b6122586154ac565b50600084815260156020908152604080832085845282529182902082516060810184528154808252600183015493820193909352600290910154928101929092526122a65750505050611122565b60008581526015602090815260408083208684529091528120818155600181018290556002018190556122d98284613512565b90506000806122ed888486604001516137df565b9150915087877ff1116b309178aa62dcb6bf8c3b8bc2321724907c7ebf52192d14c8ce3aa9194c8484604051612324929190615a71565b60405180910390a360006123388383613051565b608087015190915061234a9082613051565b608087018190526000888152601660209081526040909120600401919091558601516123779060016124bd565b602080880182815260008a8152601690925260409091206001019190915551611701576080860151865188917fb463d19ecf455be65365092cf8e1db6934a0334cf8cd532ddf9964d01f36b5b2916123cf90826124bd565b6040516123dd929190615a71565b60405180910390a2505050505050505050565b3360009081526001602052604090205460ff16611e7557611e756109c233613942565b606063b9588e4360e01b8383604051602401612430929190615ae0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b6000828211156124d6576124d66109c26002858561395d565b50900390565b606063614b800a60e01b8383604051602401612430929190615a71565b478015611122576125086110da565b73ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561254f57600080fd5b505af1158015612563573d6000803e3d6000fd5b505050505050565b6000611a7b60175461257b6110da565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016125b39190615922565b60206040518083038186803b1580156125cb57600080fd5b505afa1580156125df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612603919061585a565b906124bd565b426000612614611a62565b90508181111561262b5761262b6109c28284613a02565b600c5460009061263c906001613051565b600c555050600d55565b61264e61548c565b5060408051606081018252825467ffffffffffffffff81168083526bffffffffffffffffffffffff680100000000000000008304811660208501527401000000000000000000000000000000000000000090920490911692820192909252600c5490918111156126e6576126c181613a1f565b67ffffffffffffffff16825260408201516bffffffffffffffffffffffff1660208301525b50919050565b60008183106126fb578161117b565b5090919050565b60606384c8b7c960e01b8383604051602401612430929190615a71565b61272761548c565b61273083612646565b905061275a611f798383604001516bffffffffffffffffffffffff166124bd90919063ffffffff16565b6bffffffffffffffffffffffff9081166040830152602082015161278391611f799116846124bd565b6bffffffffffffffffffffffff16602082015261148e8382613a3f565b60005473ffffffffffffffffffffffffffffffffffffffff163314611e7557600054611e75906109c290339073ffffffffffffffffffffffffffffffffffffffff16613af9565b73ffffffffffffffffffffffffffffffffffffffff811661280d5761280d6109c2613b16565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff1615612847576128476109c282613b4d565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b61292183613b68565b61292b83836130d1565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020908152604080832086845290915290206129659082613b9f565b600083815260076020526040902061297d9082613b9f565b6001600052600460205261148e7fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe0582613b9f565b6129ba83613b68565b6129c483836130d1565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020908152604080832086845290915290206129fe9082613bf7565b6000838152600760205260409020612a169082613bf7565b6001600052600460205261148e7fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe0582613bf7565b612a548383613c32565b15612a5e5761148e565b612a6661548c565b612a6f84612646565b9050612a7961548c565b612a8284612646565b905081604001516bffffffffffffffffffffffff16831115612abd57612abd6109c28484604001516bffffffffffffffffffffffff16612702565b6040820151612ade90611f79906bffffffffffffffffffffffff16856124bd565b6bffffffffffffffffffffffff908116604080850191909152820151612b0991611f79911685613051565b6bffffffffffffffffffffffff166040820152612b268583613a3f565b612b308482613a3f565b5050505050565b6000818152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff1633811461163c5761163c6109c23384613c39565b620f424063ffffffff82161115612b9557612b906109c260008584613c56565b61148e565b8163ffffffff168163ffffffff16111561148e5761148e6109c260018584613c56565b606063eb5108a260e01b82604051602401612bd39190615922565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090205460ff16612c9057612c906109c283612bb8565b6002548110612cab57612cab6109c282600280549050613c75565b8173ffffffffffffffffffffffffffffffffffffffff1660028281548110612ccf57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614612d3157612d316109c260028381548110612d0957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1684613c92565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110612dac57fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff9092169183908110612ddf57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002805480612e3257fe5b60008281526020812082017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055909101909155604051339173ffffffffffffffffffffffffffffffffffffffff8516917f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b09190a35050565b60118590556012805463ffffffff8087167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000092831617909255601385905560148054848416640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff9487169190931617929092161790556040517f613157dbb0e920deab8ad6ddd3805e87cbf57344b9fe780f1764790ec789754290612f869087908790879087908790615d19565b60405180910390a15050505050565b606063b56d2df060e01b82604051602401612bd39190615922565b803414158015612fbf57503415155b15611122576111226109c28234613caf565b6000828152600a6020526040812054819081906130049073ffffffffffffffffffffffffffffffffffffffff16866120b6565b602001516bffffffffffffffffffffffff16905061302284826124bd565b601254909350613047906130409063ffffffff16620f424086613ccc565b8290613051565b9150509250929050565b60008282018381101561117b5761117b6109c26000868661395d565b61307561548c565b61307e83612646565b90506130a8611f798383604001516bffffffffffffffffffffffff1661305190919063ffffffff16565b6bffffffffffffffffffffffff9081166040830152602082015161278391611f79911684613051565b6130da82613ce2565b60006130e98383600080613394565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660209081526040808320878452909152902090915061312590612646565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600660209081526040808320888452825291829020845181549286015195909301517fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921667ffffffffffffffff909316929092177fffffffffffffffffffffffff000000000000000000000000ffffffffffffffff16680100000000000000006bffffffffffffffffffffffff958616021790921674010000000000000000000000000000000000000000939092169290920217905580156132a05761320a8382613ceb565b6132126110da565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161324c92919061599b565b602060405180830381600087803b15801561326657600080fd5b505af115801561327a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329e9190615757565b505b61148e83613d27565b6000806132b583613d34565b9094909350915050565b600080826132cf578391506132f2565b6132e363ffffffff8616620f424086613d40565b91506132ef84836124bd565b90505b935093915050565b6000818152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff1615611122576111226109c2826000613d64565b61333a613d81565b42600d556001600c55565b61334d613d96565b62127500620dbba068056bc75e2d6310000060026003612b308585858585612ed2565b806bffffffffffffffffffffffff81168114610e0357610e036109c2600284613dfb565b600c546000906133a261548c565b5073ffffffffffffffffffffffffffffffffffffffff851660009081526006602090815260408083208984528252918290208251606081018452905467ffffffffffffffff81168083526bffffffffffffffffffffffff6801000000000000000083048116948401949094527401000000000000000000000000000000000000000090910490921692810192909252821415613443576000925050506134cd565b61344f81838787613e18565b815190935060009061346c9067ffffffffffffffff166001613051565b90506134a461349d8984602001516bffffffffffffffffffffffff16856000015167ffffffffffffffff1685613e95565b8590613051565b93506134c761349d8984604001516bffffffffffffffffffffffff168487613e95565b93505050505b949350505050565b60408051808201909152600481527fe69edc3e00000000000000000000000000000000000000000000000000000000602082015290565b3b151590565b81516000906135205761117e565b600061352a61209e565b73ffffffffffffffffffffffffffffffffffffffff1663075461726040518163ffffffff1660e01b815260040160206040518083038186803b15801561356f57600080fd5b505afa158015613583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a791906155f6565b905060008173ffffffffffffffffffffffffffffffffffffffff1663e70eadc06040518163ffffffff1660e01b815260040160206040518083038186803b1580156135f157600080fd5b505afa158015613605573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362991906155f6565b6040517ff36766c100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091169063f36766c19061367e90600190600401615a26565b60206040518083038186803b15801561369657600080fd5b505afa1580156136aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ce919061585a565b905060008273ffffffffffffffffffffffffffffffffffffffff1663ef78d4fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561371857600080fd5b505afa15801561372c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613750919061585a565b9050600061375e60016110f2565b6020908101519088015160608801516014546bffffffffffffffffffffffff90931693506301e1338085850204926137af92849288928492919063ffffffff80821691640100000000900416613f2e565b608088015188519197506000916137c5916124bd565b9050868110156137d3578096505b50505050505092915050565b6000806137ea61548c565b506000858152600a60209081526040918290208251606081018452815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910463ffffffff16938201849052600190920154909116928101929092526138619086866132bf565b9093509150821561391e576138746110da565b81516040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff929092169163a9059cbb916138ca91879060040161599b565b602060405180830381600087803b1580156138e457600080fd5b505af11580156138f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391c9190615757565b505b81156139395761392e8683613ff0565b613939868386614025565b50935093915050565b606063b65a25b960e01b82604051602401612bd39190615922565b606063e946c1bb60e01b84848460405160240161397c93929190615a7f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b606063a6bcde4760e01b8383604051602401612430929190615a71565b8067ffffffffffffffff81168114610e0357610e036109c2600184613dfb565b8051825460408301516020909301516bffffffffffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffff000000000000000000000000ffffffffffffffff91909416740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff9094167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090931692909217929092161716179055565b6060631de45ad160e01b8383604051602401612430929190615943565b60408051808201909152600481527f57654fe400000000000000000000000000000000000000000000000000000000602082015290565b606063de16f1a060e01b82604051602401612bd39190615922565b6000818152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff16611122576111226109c2826000613d64565b613ba761548c565b613bb083612646565b9050613bda611f798383604001516bffffffffffffffffffffffff166124bd90919063ffffffff16565b6bffffffffffffffffffffffff16604082015261148e8382613a3f565b613bff61548c565b613c0883612646565b9050613bda611f798383604001516bffffffffffffffffffffffff1661305190919063ffffffff16565b1460011690565b60606382ded78560e01b838360405160240161243092919061599b565b60606322df959760e01b84848460405160240161397c93929190615ab9565b606063e9f8377160e01b8383604051602401612430929190615a71565b606063140a84db60e01b8383604051602401612430929190615943565b60606331d7a50560e01b8383604051602401612430929190615a71565b60006134cd83613cdc868561410e565b9061413f565b61112281614169565b6000828152600b6020526040902054613d0490826124bd565b6000838152600b6020526040902055601754613d2090826124bd565b6017555050565b6111228160006001614025565b6000806132b583614172565b60006134cd83613cdc613d548260016124bd565b613d5e888761410e565b90613051565b6060639ae94f0160e01b8383604051602401612430929190615a61565b600d5415611e7557611e756109c2600061422f565b60115415801590613dae575060125463ffffffff1615155b8015613dbb575060135415155b8015613dce575060145463ffffffff1615155b8015613de95750601454640100000000900463ffffffff1615155b15611e7557611e756109c2600161422f565b606063c996af7b60e01b8383604051602401612430929190615aa1565b6000821580613e25575081155b15613e32575060006134cd565b6000613e3f8560016124bd565b865167ffffffffffffffff161015613e5b578560400151613e61565b85602001515b6bffffffffffffffffffffffff16905080613e805760009150506134cd565b613e8b848483613ccc565b9695505050505050565b6000831580613ea357508183145b15613eb0575060006134cd565b818310613ee9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790615bb7565b613ef16154cd565b613efb868561426e565b9050613f056154cd565b613f0f878561426e565b905061207781600001518260200151846000015185602001518a614385565b600080613f3b88886143f3565b90506000613f4987876143f3565b9050811580613f56575080155b15613f6657600092505050612077565b600081831315613f7f57613f7a8284614445565b613f89565b613f898383614445565b9050613fb2613fad613f9a83614464565b8863ffffffff168863ffffffff16614b06565b614b15565b905081831315613fcb57613fc68282614445565b613fd5565b613fd582826150ff565b9050613fe1818c61512b565b9b9a5050505050505050505050565b6000828152600b60205260409020546140099082613051565b6000838152600b6020526040902055601754613d209082613051565b6000838152600f6020526040902054600c548082141561404657505061148e565b61404e6154cd565b506000858152600e6020908152604080832085845282529182902082518084019093528054835260010154908201526140856154cd565b61408e8261516d565b156140c7576140a7826000015183602001518888615176565b602083018190528183526140bb91906151c6565b602083015281526140d2565b602081018590528581525b6000878152600e6020908152604080832086845282528083208451815593820151600190940193909355978152600f9097529095205550505050565b60008261411d5750600061117e565b8282028284828161412a57fe5b041461117b5761117b6109c26001868661395d565b600081614155576141556109c26003858561395d565b600082848161416057fe5b04949350505050565b611122816151ef565b600080600061418d6001600c546124bd90919063ffffffff16565b90506141976154ac565b50600084815260156020908152604080832084845282528083208151606080820184528254825260018084015483870152600293840154838601528787526016865295849020845160a081018652815481529681015495870195909552918401549285019290925260038301549084015260049091015460808301529061421f908290613512565b9350806040015192505050915091565b60607f0b02d7730000000000000000000000000000000000000000000000000000000082600181111561425e57fe5b604051602401612bd39190615d85565b6142766154cd565b506000828152600e6020908152604080832084845282529182902082518084019093528054835260010154908201526142ae8161516d565b156142b85761117e565b60006142c58360016124bd565b6000858152600e602090815260408083208484528252918290208251808401909352805483526001015490820152925090506143008261516d565b1561430b575061117e565b6000848152600f602052604090205483811015614367576000858152600e602090815260408083208484528252918290208251808401909352805483526001015490820152925061435b8361516d565b1561436757505061117e565b50506040805180820190915260008152600160208201529392505050565b600081614394575060006143ea565b836143ae576143a785613cdc848961410e565b90506143ea565b60006143c76143bd868861410e565b612603898761410e565b905060006143d5828661413f565b90506143e587613cdc868461410e565b925050505b95945050505050565b60008083121561440b5761440b6109c260018561525d565b6000821215614422576144226109c260018461525d565b61117b61443f846f8000000000000000000000000000000061529e565b836152f1565b600061117b61443f846f8000000000000000000000000000000061529e565b60006f8000000000000000000000000000000082131561448c5761448c6109c2600184615372565b600082136144a2576144a26109c2600084615372565b6f800000000000000000000000000000008214156144c257506000610e03565b640733048c5a82136144f557507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610e03565b60008060006a01c8464f761647600000008513614554577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e9000000000000085136145b2577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513614614577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513614678577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc00000000000000000085136146dc577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513614740577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be582800000000000000000085136147a4577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513614808577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d851361486c577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f80000000000000000000000000000000818302816148e257fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0383028161491357fe5b05840193506f800000000000000000000000000000008183028161493357fe5b059150700300000000000000000000000000000000836f999999999999999999999999999999990383028161496457fe5b05840193506f800000000000000000000000000000008183028161498457fe5b059150700400000000000000000000000000000000836f92492492492492492492492492492492038302816149b557fe5b05840193506f80000000000000000000000000000000818302816149d557fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281614a0657fe5b05840193506f8000000000000000000000000000000081830281614a2657fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281614a5757fe5b05840193506f8000000000000000000000000000000081830281614a7757fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281614aa857fe5b05840193506f8000000000000000000000000000000081830281614ac857fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281614af957fe5b0584019350505050919050565b60006134cd61443f858561529e565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215614b4757506000610e03565b81614b6357506f80000000000000000000000000000000610e03565b6000821315614b7a57614b7a6109c2600184615372565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f8000000000000000000000000000000082820281614be657fe5b05905080670168244fdac7800002830192506f8000000000000000000000000000000082820281614c1357fe5b05905080664807432bc1800002830192506f8000000000000000000000000000000082820281614c3f57fe5b05905080660c0135dca0400002830192506f8000000000000000000000000000000082820281614c6b57fe5b059050806601b707b1cdc00002830192506f8000000000000000000000000000000082820281614c9757fe5b059050806536e0f639b80002830192506f8000000000000000000000000000000082820281614cc257fe5b05905080650618fee9f80002830192506f8000000000000000000000000000000082820281614ced57fe5b05905080649c197dcc0002830192506f8000000000000000000000000000000082820281614d1757fe5b05905080640e30dce40002830192506f8000000000000000000000000000000082820281614d4157fe5b0590508064012ebd130002830192506f8000000000000000000000000000000082820281614d6b57fe5b059050806317499f0002830192506f8000000000000000000000000000000082820281614d9457fe5b059050806301a9d48002830192506f8000000000000000000000000000000082820281614dbd57fe5b05905080621c638002830192506f8000000000000000000000000000000082820281614de557fe5b059050806201c63802830192506f8000000000000000000000000000000082820281614e0d57fe5b05905080611ab802830192506f8000000000000000000000000000000082820281614e3457fe5b0590508061017c02830192506f8000000000000000000000000000000082820281614e5b57fe5b05905080601402830192506f8000000000000000000000000000000082820281614e8157fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615614ef0577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615614f32577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b700400000000000000000000000000000000841615614f7457701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615614fb6577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b700100000000000000000000000000000000841615614ff85770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615615038576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615615078576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f200000000000000000000000000000008416156150b8576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156150f8576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b60006f8000000000000000000000000000000061511c848461529e565b8161512357fe5b059392505050565b600080821215615143576151436109c260018461525d565b600061514f848461529e565b90506000811361516357600091505061117e565b607f1c9392505050565b60200151151590565b600080856151885750829050816151bd565b836151975750849050836151bd565b6151ae6151a4858761410e565b613d5e888661410e565b91506151ba858461410e565b90505b94509492505050565b6000806151e484846f800000000000000000000000000000006153a1565b915091509250929050565b600c546000906152009060016124bd565b905061520a6154ac565b50600082815260156020908152604080832084845282529182902082516060810184528154808252600183015493820193909352600290910154928101929092521561148e5761148e6109c284846153fd565b60607fbd79545f0000000000000000000000000000000000000000000000000000000083600181111561528c57fe5b83604051602401612430929190615d93565b60008215806152ab575081155b156152b85750600061117e565b50818102818382816152c657fe5b051415806152dd5750828282816152d957fe5b0514155b1561117e5761117e6109c26001858561541a565b600081615307576153076109c26002858561541a565b7f8000000000000000000000000000000000000000000000000000000000000000831480156153555750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15615369576153696109c26003858561541a565b81838161512357fe5b60607fed2f26a10000000000000000000000000000000000000000000000000000000083600181111561528c57fe5b600080828511806153b157508284115b156153f4576000848610156153c657846153c8565b855b90506153d4818561413f565b90506153e0868261413f565b92506153ec858261413f565b9150506132f2565b50929391925050565b6060635caa0b0560e01b8383604051602401612430929190615a71565b60607f8c12dfe70000000000000000000000000000000000000000000000000000000084600381111561544957fe5b848460405160240161397c93929190615da6565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b80356002811061117e57600080fd5b600082601f830112615506578081fd5b815167ffffffffffffffff8082111561551d578283fd5b6040516020807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116830101828110848211171561555c578586fd5b8060405250819450838252868185880101111561557857600080fd5b600092505b8383101561559a578583018101518284018201529182019161557d565b838311156155ab5760008185840101525b5050505092915050565b6000604082840312156126e6578081fd5b803563ffffffff8116811461117e57600080fd5b6000602082840312156155eb578081fd5b813561117b81615dcb565b600060208284031215615607578081fd5b815161117b81615dcb565b600080600060608486031215615626578182fd5b833561563181615dcb565b9250602084013561564181615dcb565b929592945050506040919091013590565b60008060408385031215615664578182fd5b823561566f81615dcb565b946020939093013593505050565b6000806040838503121561568f578182fd5b823561569a81615dcb565b91506156a984602085016154e7565b90509250929050565b60008060008060008060c087890312156156ca578182fd5b86516156d581615dcb565b602088015190965067ffffffffffffffff808211156156f2578384fd5b6156fe8a838b016154f6565b96506040890151915080821115615713578384fd5b5061572089828a016154f6565b94505060608701519250608087015161573881615dcb565b60a088015190925061574981615dcb565b809150509295509295509295565b600060208284031215615768578081fd5b8151801515811461117b578182fd5b600060208284031215615788578081fd5b5035919050565b600080604083850312156157a1578182fd5b8235915060208301356157b381615dcb565b809150509250929050565b600080604083850312156157d0578182fd5b50508035926020909101359150565b600080604083850312156157f1578182fd5b823591506156a984602085016155c6565b600060208284031215615813578081fd5b61117b83836154e7565b600080600060a08486031215615831578081fd5b61583b85856155b5565b925061584a85604086016155b5565b9150608084013590509250925092565b60006020828403121561586b578081fd5b5051919050565b60008060008060008060c0878903121561588a578384fd5b86519550602087015167ffffffffffffffff808211156158a8578586fd5b6158b48a838b016154f6565b96506040890151915080821115615713578586fd5b600080600080600060a086880312156158e0578283fd5b853594506158f187602088016155c6565b93506040860135925061590787606088016155c6565b915061591687608088016155c6565b90509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015615a0f57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016159dd565b50909695505050505050565b901515815260200190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff91909116602083015263ffffffff16604082015260600190565b9182521515602082015260400190565b918252602082015260400190565b6060810160048510615a8d57fe5b938152602081019290925260409091015290565b6040810160038410615aaf57fe5b9281526020015290565b60608101615ac685615dc1565b938152602081019290925263ffffffff1660409091015290565b60408101615aed84615dc1565b92815273ffffffffffffffffffffffffffffffffffffffff9190911660209091015290565b6020808252601c908201527f4e4f4e5f524547495354455245445f504f4f4c5f49445f4552524f5200000000604082015260600190565b6020808252601b908201527f504f4f4c5f544f5f4a4f494e5f4e4f545f53454c465f4552524f520000000000604082015260600190565b6020808252601c908201527f4e4f4e5f524547495354455245445f52425f504f4f4c5f4552524f5200000000604082015260600190565b60208082526013908201527f43525f494e54455256414c5f494e56414c494400000000000000000000000000604082015260600190565b60208082526014908201527f574554485f5452414e534645525f4641494c4544000000000000000000000000604082015260600190565b81518152602080830151908201526040918201519181019190915260600190565b815173ffffffffffffffffffffffffffffffffffffffff908116825260208084015163ffffffff1690830152604092830151169181019190915260600190565b815167ffffffffffffffff1681526020808301516bffffffffffffffffffffffff90811691830191909152604092830151169181019190915260600190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b948552602085019390935260408401919091526060830152608082015260a00190565b94855263ffffffff938416602086015260408501929092528216606084015216608082015260a00190565b92835260ff918216602084015216604082015260600190565b63ffffffff91909116815260200190565b63ffffffff92831681529116602082015260400190565b60ff91909116815260200190565b60ff929092168252602082015260400190565b60ff9390931683526020830191909152604082015260600190565b6002811061112257fe5b73ffffffffffffffffffffffffffffffffffffffff8116811461112257600080fdfea2646970667358221220eead422e5a3f115f0d7707bf6e3d6f294b07ee5c03d513adee88a48ab0e8382164736f6c63430007010033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x5E23 DUP1 PUSH3 0x33 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x33F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9AD26744 GT PUSH2 0x1B0 JUMPI DUP1 PUSH4 0xC18C9141 GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xE8EEB3F8 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xEF4BA680 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xEF4BA680 EQ PUSH2 0x90A JUMPI DUP1 PUSH4 0xF252B7A1 EQ PUSH2 0x91F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x93F JUMPI DUP1 PUSH4 0xFF691B11 EQ PUSH2 0x95F JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xE8EEB3F8 EQ PUSH2 0x8C0 JUMPI DUP1 PUSH4 0xE907F003 EQ PUSH2 0x8D5 JUMPI DUP1 PUSH4 0xEE99205C EQ PUSH2 0x8F5 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xE0EE036E GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0xE0EE036E EQ PUSH2 0x876 JUMPI DUP1 PUSH4 0xE1C7392A EQ PUSH2 0x88B JUMPI DUP1 PUSH4 0xE804D0A4 EQ PUSH2 0x8A0 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xC18C9141 EQ PUSH2 0x81F JUMPI DUP1 PUSH4 0xD39DE6E9 EQ PUSH2 0x83F JUMPI DUP1 PUSH4 0xE0822DB7 EQ PUSH2 0x861 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xB0531524 GT PUSH2 0x159 JUMPI DUP1 PUSH4 0xB652B41F GT PUSH2 0x133 JUMPI DUP1 PUSH4 0xB652B41F EQ PUSH2 0x7AA JUMPI DUP1 PUSH4 0xB9181611 EQ PUSH2 0x7BF JUMPI DUP1 PUSH4 0xBB7EF7E0 EQ PUSH2 0x7DF JUMPI DUP1 PUSH4 0xBE111AF4 EQ PUSH2 0x7FF JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xB0531524 EQ PUSH2 0x760 JUMPI DUP1 PUSH4 0xB2BAA33E EQ PUSH2 0x775 JUMPI DUP1 PUSH4 0xB510879F EQ PUSH2 0x78A JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xA3B4A327 GT PUSH2 0x18A JUMPI DUP1 PUSH4 0xA3B4A327 EQ PUSH2 0x718 JUMPI DUP1 PUSH4 0xA657E579 EQ PUSH2 0x72B JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x740 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x9AD26744 EQ PUSH2 0x6C3 JUMPI DUP1 PUSH4 0x9C3CCC82 EQ PUSH2 0x6E3 JUMPI DUP1 PUSH4 0xA26171E2 EQ PUSH2 0x703 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x494503D4 GT PUSH2 0x27F JUMPI DUP1 PUSH4 0x5E615A6B GT PUSH2 0x228 JUMPI DUP1 PUSH4 0x76671808 GT PUSH2 0x202 JUMPI DUP1 PUSH4 0x76671808 EQ PUSH2 0x657 JUMPI DUP1 PUSH4 0x7FA140C7 EQ PUSH2 0x66C JUMPI DUP1 PUSH4 0x81666796 EQ PUSH2 0x68C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6AE JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x5E615A6B EQ PUSH2 0x5FC JUMPI DUP1 PUSH4 0x63403801 EQ PUSH2 0x622 JUMPI DUP1 PUSH4 0x70712939 EQ PUSH2 0x637 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x587DA023 GT PUSH2 0x259 JUMPI DUP1 PUSH4 0x587DA023 EQ PUSH2 0x5A7 JUMPI DUP1 PUSH4 0x58F6C7E3 EQ PUSH2 0x5BC JUMPI DUP1 PUSH4 0x5D91121D EQ PUSH2 0x5DC JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x494503D4 EQ PUSH2 0x52D JUMPI DUP1 PUSH4 0x4BCC3F67 EQ PUSH2 0x54D JUMPI DUP1 PUSH4 0x540C2D53 EQ PUSH2 0x57A JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x2E17DE78 GT PUSH2 0x2EC JUMPI DUP1 PUSH4 0x3E4AD732 GT PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x3E4AD732 EQ PUSH2 0x493 JUMPI DUP1 PUSH4 0x42F1181E EQ PUSH2 0x4C0 JUMPI DUP1 PUSH4 0x44A6958B EQ PUSH2 0x4E0 JUMPI DUP1 PUSH4 0x46B97959 EQ PUSH2 0x500 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x2E17DE78 EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x38229D93 EQ PUSH2 0x440 JUMPI DUP1 PUSH4 0x3C277FC5 EQ PUSH2 0x471 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x1E7FF8F6 GT PUSH2 0x31D JUMPI DUP1 PUSH4 0x1E7FF8F6 EQ PUSH2 0x3B1 JUMPI DUP1 PUSH4 0x1F81EB80 EQ PUSH2 0x3D1 JUMPI DUP1 PUSH4 0x2A94C279 EQ PUSH2 0x3F1 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x1E28D84 EQ PUSH2 0x344 JUMPI DUP1 PUSH4 0xB9663DB EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0x1A67A0A0 EQ PUSH2 0x391 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x350 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x35F CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x97F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x3AC CALLDATASIZE PUSH1 0x4 PUSH2 0x578F JUMP JUMPDEST PUSH2 0xB93 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x3CC CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0xD6E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0xE08 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x411 PUSH2 0x40C CALLDATASIZE PUSH1 0x4 PUSH2 0x57BE JUMP JUMPDEST PUSH2 0xECA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5CC5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x43B CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0xEF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x460 PUSH2 0x45B CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5CF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x10DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B3 PUSH2 0x4AE CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x10F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5C86 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x4DB CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x1111 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B3 PUSH2 0x4FB CALLDATASIZE PUSH1 0x4 PUSH2 0x567D JUMP JUMPDEST PUSH2 0x1125 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x520 PUSH2 0x51B CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1184 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5C25 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x548 CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x11CF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x56D PUSH2 0x568 CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1203 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5C46 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x586 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59A PUSH2 0x595 CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x127B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5A1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1290 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x5D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x581D JUMP JUMPDEST PUSH2 0x1296 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x5F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x57DF JUMP JUMPDEST PUSH2 0x1493 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x608 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x611 PUSH2 0x155C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5D19 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1585 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x652 CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x158B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x663 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1640 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x678 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x687 CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x1646 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A1 PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5D5D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x1664 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x6DE CALLDATASIZE PUSH1 0x4 PUSH2 0x5652 JUMP JUMPDEST PUSH2 0x1680 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x6FE CALLDATASIZE PUSH1 0x4 PUSH2 0x58C9 JUMP JUMPDEST PUSH2 0x1692 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x170C JUMP JUMPDEST PUSH2 0x364 PUSH2 0x726 CALLDATASIZE PUSH1 0x4 PUSH2 0x5612 JUMP JUMPDEST PUSH2 0x1712 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x737 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1941 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x74C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x75B CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1947 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1A5C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1A62 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x7A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1A80 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x1A8A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59A PUSH2 0x7DA CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x1AA2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x7FA CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1AB7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x81A CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x1B52 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x83A CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1DB8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x84B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x854 PUSH2 0x1DCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x59C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x86D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x1E39 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A1 PUSH2 0x1E51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x897 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x1E5D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B3 PUSH2 0x8BB CALLDATASIZE PUSH1 0x4 PUSH2 0x5802 JUMP JUMPDEST PUSH2 0x1E77 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A1 PUSH2 0x1FC1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x8F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x578F JUMP JUMPDEST PUSH2 0x1FD5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x901 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x2082 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x916 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x209E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B3 PUSH2 0x93A CALLDATASIZE PUSH1 0x4 PUSH2 0x5652 JUMP JUMPDEST PUSH2 0x20B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x94B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x95A CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x20F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x97A CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x219A JUMP JUMPDEST PUSH2 0x987 PUSH2 0x23F0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x9C7 JUMPI PUSH2 0x9C7 PUSH2 0x9C2 PUSH1 0x1 DUP4 PUSH2 0x2413 JUMP JUMPDEST PUSH2 0x24B5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD PUSH32 0x9BF55462CB5FA187F725D06DE0A70BC01C4E40695570BDC25AD116F9BE46BDA7 SWAP1 PUSH2 0xA42 SWAP1 DUP4 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0xA5F DUP3 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP DUP1 ISZERO PUSH2 0xA87 JUMPI PUSH2 0xA87 PUSH2 0x9C2 DUP4 DUP4 PUSH2 0x24DC JUMP JUMPDEST PUSH2 0xA8F PUSH2 0x24F9 JUMP JUMPDEST PUSH2 0xA97 PUSH2 0x256B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xAAE PUSH2 0x545D JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x2 DUP4 ADD SLOAD DUP3 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE SWAP5 MLOAD SWAP2 SWAP5 DUP9 SWAP5 PUSH32 0xBB4A26FA0ACE13EE4DA343896C20EAA44A618FB9071FDD8C2E2C960A4583189D SWAP5 PUSH2 0xB30 SWAP5 SWAP2 SWAP4 SWAP3 SWAP2 PUSH2 0x5CDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xB40 PUSH2 0x2609 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0xB87 JUMPI DUP1 MLOAD PUSH1 0x40 MLOAD DUP6 SWAP2 PUSH32 0xB463D19ECF455BE65365092CF8E1DB6934A0334CF8CD532DDF9964D01F36B5B2 SWAP2 PUSH2 0xB7E SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x20 ADD MLOAD SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB9E PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xC277F1AC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xC277F1AC SWAP1 PUSH2 0xBF2 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A26 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC1E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xC64 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x56B2 JUMP JUMPDEST POP POP SWAP4 POP POP POP SWAP2 POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0xCB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA7 SWAP1 PUSH2 0x5B12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD15 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA7 SWAP1 PUSH2 0x5B49 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 SWAP1 SSTORE MLOAD DUP7 SWAP3 DUP7 AND SWAP2 PUSH32 0xE8B9F7EE7A4480D45B60E98F7B2090DD82E2353B8557A6EE2DD2D5EE9196BAC2 SWAP2 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD78 PUSH2 0x1E39 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDB0 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDDC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE00 SWAP2 SWAP1 PUSH2 0x585A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE10 PUSH2 0x23F0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE4C JUMPI PUSH2 0xE4C PUSH2 0x9C2 PUSH1 0x0 DUP4 PUSH2 0x2413 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x5738EE3C8E8FE8B0B9C4C21B16FDCA42EC02E271237DFEABBF3B5AF1584D732B SWAP1 PUSH2 0xA42 SWAP1 DUP4 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST CALLER PUSH2 0xEFF PUSH2 0x548C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xF4C SWAP1 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF7E DUP3 PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x26EC JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0xF95 JUMPI PUSH2 0xF95 PUSH2 0x9C2 DUP6 DUP4 PUSH2 0x2702 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xFE3 SWAP1 DUP6 PUSH2 0x271F JUMP JUMPDEST PUSH2 0xFEB PUSH2 0x1E39 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9470B0BD DUP5 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1025 SWAP3 SWAP2 SWAP1 PUSH2 0x599B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x103F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1053 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x85082129D87B2FE11527CB1B3B7A520AEB5AA6913F88A3D8757FE40D1DB02FDD DUP6 PUSH1 0x40 MLOAD PUSH2 0x109D SWAP2 SWAP1 PUSH2 0x5A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP6 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH2 0x10FA PUSH2 0x548C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xE00 SWAP1 PUSH2 0x2646 JUMP JUMPDEST PUSH2 0x1119 PUSH2 0x27A0 JUMP JUMPDEST PUSH2 0x1122 DUP2 PUSH2 0x27E7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x112D PUSH2 0x548C JUMP JUMPDEST PUSH2 0x117B PUSH1 0x5 PUSH1 0x0 DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1140 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x118C PUSH2 0x54AC JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xC SLOAD DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 ADD SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x11DC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x120B PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST CALLER DUP2 PUSH2 0x12A2 JUMPI POP PUSH2 0x148E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12B1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12BC JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x12E0 JUMPI POP PUSH1 0x0 PUSH2 0x12D3 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12DE JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x12EB JUMPI POP PUSH2 0x148E JUMP JUMPDEST PUSH1 0x1 PUSH2 0x12FA PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1305 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x131A JUMPI PUSH2 0x131A DUP5 PUSH1 0x20 ADD CALLDATALOAD DUP3 DUP5 PUSH2 0x2918 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1329 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1334 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1349 JUMPI PUSH2 0x1349 DUP4 PUSH1 0x20 ADD CALLDATALOAD DUP3 DUP5 PUSH2 0x29B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP2 PUSH2 0x135B PUSH1 0x20 DUP9 ADD DUP9 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1366 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE DUP4 MSTORE SWAP1 DUP2 KECCAK256 SWAP3 POP SWAP1 PUSH1 0x5 SWAP1 DUP3 SWAP1 PUSH2 0x13B0 SWAP1 DUP9 ADD DUP9 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x13BB JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 SWAP1 POP PUSH2 0x13FE DUP3 DUP3 DUP7 PUSH2 0x2A4A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP7 ADD CALLDATALOAD SWAP1 DUP8 ADD DUP1 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 PUSH32 0x7D3AD1DCF03B9027064D1D9A474A69E0CECC31324C541D3EB9B5E6FA2F106C8D SWAP1 DUP9 SWAP1 PUSH2 0x1450 SWAP1 DUP13 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x145B JUMPI INVALID JUMPDEST PUSH2 0x1468 PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1473 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1482 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5D44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x149D DUP2 PUSH2 0x2B37 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0x14D5 DUP5 DUP3 DUP6 PUSH2 0x2B70 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH4 0xFFFFFFFF DUP8 AND MUL OR SWAP1 SSTORE MLOAD DUP5 SWAP1 PUSH32 0x8EA2A7A959BD25F226B7B0A4393613F7FDCAA8404E8BAD96AA52DC1C14590167 SWAP1 PUSH2 0x109D SWAP1 DUP5 SWAP1 DUP8 SWAP1 PUSH2 0x5D6E JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x14 SLOAD SWAP3 SWAP4 PUSH4 0xFFFFFFFF SWAP3 DUP4 AND SWAP4 SWAP2 SWAP3 DUP3 DUP2 AND SWAP3 PUSH5 0x100000000 SWAP1 DIV AND SWAP1 JUMP JUMPDEST PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1593 PUSH2 0x27A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x15CC JUMPI PUSH2 0x15CC PUSH2 0x9C2 DUP3 PUSH2 0x2BB8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x163C JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x15FD JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1634 JUMPI PUSH2 0x162F DUP3 DUP3 PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x163C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x15CF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1688 PUSH2 0x27A0 JUMP JUMPDEST PUSH2 0x163C DUP3 DUP3 PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x169A PUSH2 0x23F0 JUMP JUMPDEST PUSH2 0x16A7 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2ED2 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC6F3A427 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1701 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1735 JUMPI PUSH2 0x1735 PUSH2 0x9C2 CALLER PUSH2 0x2F95 JUMP JUMPDEST PUSH2 0x173E DUP2 PUSH2 0x2FB0 JUMP JUMPDEST CALLVALUE PUSH2 0x180F JUMPI PUSH2 0x174B PUSH2 0x10DA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP4 ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1787 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x596A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17D9 SWAP2 SWAP1 PUSH2 0x5757 JUMP JUMPDEST PUSH2 0x180F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA7 SWAP1 PUSH2 0x5BEE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x1840 JUMPI POP PUSH2 0x148E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184B DUP3 PUSH2 0x10F2 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x13 SLOAD DUP2 LT ISZERO PUSH2 0x1870 JUMPI POP POP PUSH2 0x148E JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x16 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP2 SLOAD DUP1 PUSH2 0x1913 JUMPI PUSH1 0x0 DUP1 PUSH2 0x18A8 DUP9 DUP9 PUSH2 0x2FD1 JUMP JUMPDEST PUSH1 0x2 DUP8 ADD DUP3 SWAP1 SSTORE PUSH1 0x1 DUP8 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP7 ADD SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x18CA SWAP1 DUP3 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE PUSH1 0x1 DUP1 DUP6 ADD SLOAD PUSH2 0x18DE SWAP2 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SSTORE PUSH1 0x40 MLOAD DUP9 SWAP1 DUP8 SWAP1 PUSH32 0x14B098103235344975B17508C2391721CC9AC3F3FA2B56C7FF46F8480DFD074F SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMPDEST PUSH2 0x191D DUP2 DUP9 PUSH2 0x3051 JUMP JUMPDEST DUP4 SSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0x192E SWAP1 DUP9 PUSH2 0x3051 JUMP JUMPDEST DUP3 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH2 0x1950 PUSH2 0x1E39 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x15CC36F2 DUP3 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198A SWAP3 SWAP2 SWAP1 PUSH2 0x599B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1A0A SWAP1 DUP4 PUSH2 0x306D JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xEBEDB8B3C678666E7F36970BC8F57ABF6D8FA2E828C0DA91EA5B75BF68ED101A DUP4 PUSH1 0x40 MLOAD PUSH2 0x1A50 SWAP2 SWAP1 PUSH2 0x5A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A7B PUSH1 0x11 SLOAD PUSH1 0xD SLOAD PUSH2 0x3051 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1122 DUP2 CALLER PUSH2 0x30D1 JUMP JUMPDEST PUSH20 0xDE6445484A8DCD9BF35FC95EB4E3990CC358822E SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AC1 PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP3 AND SWAP1 DUP3 ADD MSTORE SWAP1 DUP1 PUSH2 0x1B35 DUP6 PUSH2 0x32A9 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1B48 DUP4 PUSH1 0x20 ADD MLOAD DUP4 DUP4 PUSH2 0x32BF JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1B5F PUSH2 0x1A8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB72E717D DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B97 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1C09 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x5872 JUMP JUMPDEST POP SWAP5 POP POP POP POP SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x1C4C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA7 SWAP1 PUSH2 0x5B80 JUMP JUMPDEST DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND CALLER EQ PUSH2 0x1C6F JUMPI POP CALLER JUMPDEST PUSH3 0xAAE60 PUSH2 0x1C7C DUP6 PUSH2 0x32FA JUMP JUMPDEST DUP5 PUSH1 0x0 SHL SWAP6 POP PUSH2 0x1C90 DUP7 PUSH3 0xF4240 DUP4 PUSH2 0x2B70 JUMP JUMPDEST PUSH2 0x1C98 PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP3 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP8 DUP5 AND DUP6 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0xA SWAP1 SWAP3 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SLOAD SWAP4 MLOAD SWAP1 SWAP5 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP7 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP5 DUP6 AND OR SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 SSTORE MLOAD PUSH1 0x1 SWAP1 SWAP3 ADD DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE SWAP1 MLOAD PUSH32 0xCEC6FC86EA644053F6EDFF1160DFE3FA5C61E7A5EF9F873F145BB03A0BD319E7 SWAP1 PUSH2 0x1D9B SWAP1 DUP10 SWAP1 DUP8 SWAP1 DUP7 SWAP1 PUSH2 0x5A2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1DAD DUP8 DUP10 PUSH2 0xB93 JUMP JUMPDEST POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1E2F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E04 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH20 0xBA7F8B5FB1B19C1211C5D49550FCD149177A5EAF SWAP1 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1E65 PUSH2 0x23F0 JUMP JUMPDEST PUSH2 0x1E6D PUSH2 0x3332 JUMP JUMPDEST PUSH2 0x1E75 PUSH2 0x3345 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E7F PUSH2 0x548C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x1EB2 PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1EC2 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xE03 JUMPI PUSH1 0x0 PUSH2 0x1ED2 PUSH2 0x1E39 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6B6DF5AA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F2B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F4F SWAP2 SWAP1 PUSH2 0x585A JUMP JUMPDEST SWAP1 POP PUSH2 0x1F7E PUSH2 0x1F79 DUP4 PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x24BD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3370 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1FA8 SWAP2 PUSH2 0x1F79 SWAP2 DUP5 SWAP2 AND PUSH2 0x24BD JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FDF PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP3 AND SWAP1 DUP3 ADD MSTORE SWAP1 DUP1 PUSH2 0x2053 DUP7 PUSH2 0x32A9 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2068 DUP5 PUSH1 0x20 ADD MLOAD DUP5 DUP5 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2077 DUP8 DUP8 DUP4 DUP6 PUSH2 0x3394 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0x4FBB350052BCA5417566F188EB2EBCE5B19BC964 SWAP1 JUMP JUMPDEST PUSH2 0x20BE PUSH2 0x548C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x117B SWAP1 PUSH2 0x2646 JUMP JUMPDEST PUSH2 0x20FF PUSH2 0x27A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x212A JUMPI PUSH2 0x2125 PUSH2 0x9C2 PUSH2 0x34D5 JUMP JUMPDEST PUSH2 0x1122 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 CALLER SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x21A3 CALLER PUSH2 0x350C JUMP JUMPDEST ISZERO PUSH2 0x21E1 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 PUSH2 0x21F1 DUP3 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST SWAP1 POP PUSH2 0x21FB PUSH2 0x545D JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x2250 JUMPI POP POP POP PUSH2 0x1122 JUMP JUMPDEST PUSH2 0x2258 PUSH2 0x54AC JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x22A6 JUMPI POP POP POP POP PUSH2 0x1122 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 ADD DUP2 SWAP1 SSTORE PUSH2 0x22D9 DUP3 DUP5 PUSH2 0x3512 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x22ED DUP9 DUP5 DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x37DF JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP8 DUP8 PUSH32 0xF1116B309178AA62DCB6BF8C3B8BC2321724907C7EBF52192D14C8CE3AA9194C DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x2324 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 PUSH2 0x2338 DUP4 DUP4 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x234A SWAP1 DUP3 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x80 DUP8 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP7 ADD MLOAD PUSH2 0x2377 SWAP1 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP9 ADD DUP3 DUP2 MSTORE PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x16 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH2 0x1701 JUMPI PUSH1 0x80 DUP7 ADD MLOAD DUP7 MLOAD DUP9 SWAP2 PUSH32 0xB463D19ECF455BE65365092CF8E1DB6934A0334CF8CD532DDF9964D01F36B5B2 SWAP2 PUSH2 0x23CF SWAP1 DUP3 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23DD SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1E75 JUMPI PUSH2 0x1E75 PUSH2 0x9C2 CALLER PUSH2 0x3942 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xB9588E43 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5AE0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x24D6 JUMPI PUSH2 0x24D6 PUSH2 0x9C2 PUSH1 0x2 DUP6 DUP6 PUSH2 0x395D JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x614B800A PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST SELFBALANCE DUP1 ISZERO PUSH2 0x1122 JUMPI PUSH2 0x2508 PUSH2 0x10DA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x254F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2563 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A7B PUSH1 0x17 SLOAD PUSH2 0x257B PUSH2 0x10DA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25B3 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x25DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2603 SWAP2 SWAP1 PUSH2 0x585A JUMP JUMPDEST SWAP1 PUSH2 0x24BD JUMP JUMPDEST TIMESTAMP PUSH1 0x0 PUSH2 0x2614 PUSH2 0x1A62 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x262B JUMPI PUSH2 0x262B PUSH2 0x9C2 DUP3 DUP5 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH2 0x263C SWAP1 PUSH1 0x1 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0xC SSTORE POP POP PUSH1 0xD SSTORE JUMP JUMPDEST PUSH2 0x264E PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP1 DUP4 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH9 0x10000000000000000 DUP4 DIV DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC SLOAD SWAP1 SWAP2 DUP2 GT ISZERO PUSH2 0x26E6 JUMPI PUSH2 0x26C1 DUP2 PUSH2 0x3A1F JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x26FB JUMPI DUP2 PUSH2 0x117B JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x84C8B7C9 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH2 0x2727 PUSH2 0x548C JUMP JUMPDEST PUSH2 0x2730 DUP4 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH2 0x275A PUSH2 0x1F79 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x24BD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2783 SWAP2 PUSH2 0x1F79 SWAP2 AND DUP5 PUSH2 0x24BD JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x148E DUP4 DUP3 PUSH2 0x3A3F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1E75 JUMPI PUSH1 0x0 SLOAD PUSH2 0x1E75 SWAP1 PUSH2 0x9C2 SWAP1 CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3AF9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x280D JUMPI PUSH2 0x280D PUSH2 0x9C2 PUSH2 0x3B16 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2847 JUMPI PUSH2 0x2847 PUSH2 0x9C2 DUP3 PUSH2 0x3B4D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 DUP4 ADD DUP2 SSTORE DUP4 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD CALLER SWAP3 SWAP2 PUSH32 0x3147867C59D17E8FA9D522465651D44AAE0A9E38F902F3475B97E58072F0ED4C SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x2921 DUP4 PUSH2 0x3B68 JUMP JUMPDEST PUSH2 0x292B DUP4 DUP4 PUSH2 0x30D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x2965 SWAP1 DUP3 PUSH2 0x3B9F JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x297D SWAP1 DUP3 PUSH2 0x3B9F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x148E PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 DUP3 PUSH2 0x3B9F JUMP JUMPDEST PUSH2 0x29BA DUP4 PUSH2 0x3B68 JUMP JUMPDEST PUSH2 0x29C4 DUP4 DUP4 PUSH2 0x30D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x29FE SWAP1 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2A16 SWAP1 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x148E PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST PUSH2 0x2A54 DUP4 DUP4 PUSH2 0x3C32 JUMP JUMPDEST ISZERO PUSH2 0x2A5E JUMPI PUSH2 0x148E JUMP JUMPDEST PUSH2 0x2A66 PUSH2 0x548C JUMP JUMPDEST PUSH2 0x2A6F DUP5 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A79 PUSH2 0x548C JUMP JUMPDEST PUSH2 0x2A82 DUP5 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 GT ISZERO PUSH2 0x2ABD JUMPI PUSH2 0x2ABD PUSH2 0x9C2 DUP5 DUP5 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2702 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2ADE SWAP1 PUSH2 0x1F79 SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x24BD JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 ADD MLOAD PUSH2 0x2B09 SWAP2 PUSH2 0x1F79 SWAP2 AND DUP6 PUSH2 0x3051 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x2B26 DUP6 DUP4 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x2B30 DUP5 DUP3 PUSH2 0x3A3F JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0x163C JUMPI PUSH2 0x163C PUSH2 0x9C2 CALLER DUP5 PUSH2 0x3C39 JUMP JUMPDEST PUSH3 0xF4240 PUSH4 0xFFFFFFFF DUP3 AND GT ISZERO PUSH2 0x2B95 JUMPI PUSH2 0x2B90 PUSH2 0x9C2 PUSH1 0x0 DUP6 DUP5 PUSH2 0x3C56 JUMP JUMPDEST PUSH2 0x148E JUMP JUMPDEST DUP2 PUSH4 0xFFFFFFFF AND DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x148E JUMPI PUSH2 0x148E PUSH2 0x9C2 PUSH1 0x1 DUP6 DUP5 PUSH2 0x3C56 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xEB5108A2 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD3 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2C90 JUMPI PUSH2 0x2C90 PUSH2 0x9C2 DUP4 PUSH2 0x2BB8 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 LT PUSH2 0x2CAB JUMPI PUSH2 0x2CAB PUSH2 0x9C2 DUP3 PUSH1 0x2 DUP1 SLOAD SWAP1 POP PUSH2 0x3C75 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2CCF JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2D31 JUMPI PUSH2 0x2D31 PUSH2 0x9C2 PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x2D09 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x3C92 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x2DAC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x2DDF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 DUP1 SLOAD DUP1 PUSH2 0x2E32 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE SWAP1 SWAP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP2 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x11 DUP6 SWAP1 SSTORE PUSH1 0x12 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP8 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x13 DUP6 SWAP1 SSTORE PUSH1 0x14 DUP1 SLOAD DUP5 DUP5 AND PUSH5 0x100000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFF SWAP5 DUP8 AND SWAP2 SWAP1 SWAP4 AND OR SWAP3 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x613157DBB0E920DEAB8AD6DDD3805E87CBF57344B9FE780F1764790EC7897542 SWAP1 PUSH2 0x2F86 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x5D19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xB56D2DF0 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD3 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST DUP1 CALLVALUE EQ ISZERO DUP1 ISZERO PUSH2 0x2FBF JUMPI POP CALLVALUE ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1122 JUMPI PUSH2 0x1122 PUSH2 0x9C2 DUP3 CALLVALUE PUSH2 0x3CAF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x3004 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0x20B6 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x3022 DUP5 DUP3 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x12 SLOAD SWAP1 SWAP4 POP PUSH2 0x3047 SWAP1 PUSH2 0x3040 SWAP1 PUSH4 0xFFFFFFFF AND PUSH3 0xF4240 DUP7 PUSH2 0x3CCC JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3051 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x117B JUMPI PUSH2 0x117B PUSH2 0x9C2 PUSH1 0x0 DUP7 DUP7 PUSH2 0x395D JUMP JUMPDEST PUSH2 0x3075 PUSH2 0x548C JUMP JUMPDEST PUSH2 0x307E DUP4 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH2 0x30A8 PUSH2 0x1F79 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3051 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2783 SWAP2 PUSH2 0x1F79 SWAP2 AND DUP5 PUSH2 0x3051 JUMP JUMPDEST PUSH2 0x30DA DUP3 PUSH2 0x3CE2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30E9 DUP4 DUP4 PUSH1 0x0 DUP1 PUSH2 0x3394 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x3125 SWAP1 PUSH2 0x2646 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD SWAP6 SWAP1 SWAP4 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 SWAP1 SWAP3 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000FFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND MUL OR SWAP1 SWAP3 AND PUSH21 0x10000000000000000000000000000000000000000 SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 MUL OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x32A0 JUMPI PUSH2 0x320A DUP4 DUP3 PUSH2 0x3CEB JUMP JUMPDEST PUSH2 0x3212 PUSH2 0x10DA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x324C SWAP3 SWAP2 SWAP1 PUSH2 0x599B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x327A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x329E SWAP2 SWAP1 PUSH2 0x5757 JUMP JUMPDEST POP JUMPDEST PUSH2 0x148E DUP4 PUSH2 0x3D27 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x32B5 DUP4 PUSH2 0x3D34 JUMP JUMPDEST SWAP1 SWAP5 SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH2 0x32CF JUMPI DUP4 SWAP2 POP PUSH2 0x32F2 JUMP JUMPDEST PUSH2 0x32E3 PUSH4 0xFFFFFFFF DUP7 AND PUSH3 0xF4240 DUP7 PUSH2 0x3D40 JUMP JUMPDEST SWAP2 POP PUSH2 0x32EF DUP5 DUP4 PUSH2 0x24BD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x1122 JUMPI PUSH2 0x1122 PUSH2 0x9C2 DUP3 PUSH1 0x0 PUSH2 0x3D64 JUMP JUMPDEST PUSH2 0x333A PUSH2 0x3D81 JUMP JUMPDEST TIMESTAMP PUSH1 0xD SSTORE PUSH1 0x1 PUSH1 0xC SSTORE JUMP JUMPDEST PUSH2 0x334D PUSH2 0x3D96 JUMP JUMPDEST PUSH3 0x127500 PUSH3 0xDBBA0 PUSH9 0x56BC75E2D63100000 PUSH1 0x2 PUSH1 0x3 PUSH2 0x2B30 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2ED2 JUMP JUMPDEST DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE03 JUMPI PUSH2 0xE03 PUSH2 0x9C2 PUSH1 0x2 DUP5 PUSH2 0x3DFB JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH2 0x33A2 PUSH2 0x548C JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP1 DUP4 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH9 0x10000000000000000 DUP4 DIV DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV SWAP1 SWAP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 EQ ISZERO PUSH2 0x3443 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x34CD JUMP JUMPDEST PUSH2 0x344F DUP2 DUP4 DUP8 DUP8 PUSH2 0x3E18 JUMP JUMPDEST DUP2 MLOAD SWAP1 SWAP4 POP PUSH1 0x0 SWAP1 PUSH2 0x346C SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH2 0x3051 JUMP JUMPDEST SWAP1 POP PUSH2 0x34A4 PUSH2 0x349D DUP10 DUP5 PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x0 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x3E95 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x3051 JUMP JUMPDEST SWAP4 POP PUSH2 0x34C7 PUSH2 0x349D DUP10 DUP5 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP8 PUSH2 0x3E95 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xE69EDC3E00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x3520 JUMPI PUSH2 0x117E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x352A PUSH2 0x209E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7546172 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x356F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3583 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35A7 SWAP2 SWAP1 PUSH2 0x55F6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE70EADC0 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3605 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3629 SWAP2 SWAP1 PUSH2 0x55F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF36766C100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xF36766C1 SWAP1 PUSH2 0x367E SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A26 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36CE SWAP2 SWAP1 PUSH2 0x585A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xEF78D4FD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3718 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x372C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3750 SWAP2 SWAP1 PUSH2 0x585A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x375E PUSH1 0x1 PUSH2 0x10F2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 ADD MLOAD SWAP1 DUP9 ADD MLOAD PUSH1 0x60 DUP9 ADD MLOAD PUSH1 0x14 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND SWAP4 POP PUSH4 0x1E13380 DUP6 DUP6 MUL DIV SWAP3 PUSH2 0x37AF SWAP3 DUP5 SWAP3 DUP9 SWAP3 DUP5 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH5 0x100000000 SWAP1 DIV AND PUSH2 0x3F2E JUMP JUMPDEST PUSH1 0x80 DUP9 ADD MLOAD DUP9 MLOAD SWAP2 SWAP8 POP PUSH1 0x0 SWAP2 PUSH2 0x37C5 SWAP2 PUSH2 0x24BD JUMP JUMPDEST SWAP1 POP DUP7 DUP2 LT ISZERO PUSH2 0x37D3 JUMPI DUP1 SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x37EA PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP4 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x3861 SWAP1 DUP7 DUP7 PUSH2 0x32BF JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP DUP3 ISZERO PUSH2 0x391E JUMPI PUSH2 0x3874 PUSH2 0x10DA JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x38CA SWAP2 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x599B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x38F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x391C SWAP2 SWAP1 PUSH2 0x5757 JUMP JUMPDEST POP JUMPDEST DUP2 ISZERO PUSH2 0x3939 JUMPI PUSH2 0x392E DUP7 DUP4 PUSH2 0x3FF0 JUMP JUMPDEST PUSH2 0x3939 DUP7 DUP4 DUP7 PUSH2 0x4025 JUMP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xB65A25B9 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD3 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x397C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A7F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA6BCDE47 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE03 JUMPI PUSH2 0xE03 PUSH2 0x9C2 PUSH1 0x1 DUP5 PUSH2 0x3DFB JUMP JUMPDEST DUP1 MLOAD DUP3 SLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x20 SWAP1 SWAP4 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH9 0x10000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000FFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP5 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP3 SWAP1 SWAP3 AND OR AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH4 0x1DE45AD1 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5943 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0x57654FE400000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xDE16F1A0 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD3 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1122 JUMPI PUSH2 0x1122 PUSH2 0x9C2 DUP3 PUSH1 0x0 PUSH2 0x3D64 JUMP JUMPDEST PUSH2 0x3BA7 PUSH2 0x548C JUMP JUMPDEST PUSH2 0x3BB0 DUP4 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH2 0x3BDA PUSH2 0x1F79 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x24BD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x148E DUP4 DUP3 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x3BFF PUSH2 0x548C JUMP JUMPDEST PUSH2 0x3C08 DUP4 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH2 0x3BDA PUSH2 0x1F79 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3051 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST EQ PUSH1 0x1 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x82DED785 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x599B JUMP JUMPDEST PUSH1 0x60 PUSH4 0x22DF9597 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x397C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5AB9 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE9F83771 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x140A84DB PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5943 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x31D7A505 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34CD DUP4 PUSH2 0x3CDC DUP7 DUP6 PUSH2 0x410E JUMP JUMPDEST SWAP1 PUSH2 0x413F JUMP JUMPDEST PUSH2 0x1122 DUP2 PUSH2 0x4169 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3D04 SWAP1 DUP3 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x17 SLOAD PUSH2 0x3D20 SWAP1 DUP3 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x17 SSTORE POP POP JUMP JUMPDEST PUSH2 0x1122 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH2 0x4025 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x32B5 DUP4 PUSH2 0x4172 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34CD DUP4 PUSH2 0x3CDC PUSH2 0x3D54 DUP3 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST PUSH2 0x3D5E DUP9 DUP8 PUSH2 0x410E JUMP JUMPDEST SWAP1 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x9AE94F01 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A61 JUMP JUMPDEST PUSH1 0xD SLOAD ISZERO PUSH2 0x1E75 JUMPI PUSH2 0x1E75 PUSH2 0x9C2 PUSH1 0x0 PUSH2 0x422F JUMP JUMPDEST PUSH1 0x11 SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3DAE JUMPI POP PUSH1 0x12 SLOAD PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3DBB JUMPI POP PUSH1 0x13 SLOAD ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3DCE JUMPI POP PUSH1 0x14 SLOAD PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3DE9 JUMPI POP PUSH1 0x14 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1E75 JUMPI PUSH2 0x1E75 PUSH2 0x9C2 PUSH1 0x1 PUSH2 0x422F JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5AA1 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x3E25 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x3E32 JUMPI POP PUSH1 0x0 PUSH2 0x34CD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E3F DUP6 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST DUP7 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x3E5B JUMPI DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x3E61 JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH2 0x3E80 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x34CD JUMP JUMPDEST PUSH2 0x3E8B DUP5 DUP5 DUP4 PUSH2 0x3CCC JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x3EA3 JUMPI POP DUP2 DUP4 EQ JUMPDEST ISZERO PUSH2 0x3EB0 JUMPI POP PUSH1 0x0 PUSH2 0x34CD JUMP JUMPDEST DUP2 DUP4 LT PUSH2 0x3EE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA7 SWAP1 PUSH2 0x5BB7 JUMP JUMPDEST PUSH2 0x3EF1 PUSH2 0x54CD JUMP JUMPDEST PUSH2 0x3EFB DUP7 DUP6 PUSH2 0x426E JUMP JUMPDEST SWAP1 POP PUSH2 0x3F05 PUSH2 0x54CD JUMP JUMPDEST PUSH2 0x3F0F DUP8 DUP6 PUSH2 0x426E JUMP JUMPDEST SWAP1 POP PUSH2 0x2077 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP11 PUSH2 0x4385 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3F3B DUP9 DUP9 PUSH2 0x43F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3F49 DUP8 DUP8 PUSH2 0x43F3 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x3F56 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x3F66 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x3F7F JUMPI PUSH2 0x3F7A DUP3 DUP5 PUSH2 0x4445 JUMP JUMPDEST PUSH2 0x3F89 JUMP JUMPDEST PUSH2 0x3F89 DUP4 DUP4 PUSH2 0x4445 JUMP JUMPDEST SWAP1 POP PUSH2 0x3FB2 PUSH2 0x3FAD PUSH2 0x3F9A DUP4 PUSH2 0x4464 JUMP JUMPDEST DUP9 PUSH4 0xFFFFFFFF AND DUP9 PUSH4 0xFFFFFFFF AND PUSH2 0x4B06 JUMP JUMPDEST PUSH2 0x4B15 JUMP JUMPDEST SWAP1 POP DUP2 DUP4 SGT ISZERO PUSH2 0x3FCB JUMPI PUSH2 0x3FC6 DUP3 DUP3 PUSH2 0x4445 JUMP JUMPDEST PUSH2 0x3FD5 JUMP JUMPDEST PUSH2 0x3FD5 DUP3 DUP3 PUSH2 0x50FF JUMP JUMPDEST SWAP1 POP PUSH2 0x3FE1 DUP2 DUP13 PUSH2 0x512B JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4009 SWAP1 DUP3 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x17 SLOAD PUSH2 0x3D20 SWAP1 DUP3 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xC SLOAD DUP1 DUP3 EQ ISZERO PUSH2 0x4046 JUMPI POP POP PUSH2 0x148E JUMP JUMPDEST PUSH2 0x404E PUSH2 0x54CD JUMP JUMPDEST POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x4085 PUSH2 0x54CD JUMP JUMPDEST PUSH2 0x408E DUP3 PUSH2 0x516D JUMP JUMPDEST ISZERO PUSH2 0x40C7 JUMPI PUSH2 0x40A7 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP9 DUP9 PUSH2 0x5176 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP2 DUP4 MSTORE PUSH2 0x40BB SWAP2 SWAP1 PUSH2 0x51C6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE PUSH2 0x40D2 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP6 DUP2 MSTORE JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP4 DUP3 ADD MLOAD PUSH1 0x1 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP8 DUP2 MSTORE PUSH1 0xF SWAP1 SWAP8 MSTORE SWAP1 SWAP6 KECCAK256 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x411D JUMPI POP PUSH1 0x0 PUSH2 0x117E JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x412A JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x117B JUMPI PUSH2 0x117B PUSH2 0x9C2 PUSH1 0x1 DUP7 DUP7 PUSH2 0x395D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x4155 JUMPI PUSH2 0x4155 PUSH2 0x9C2 PUSH1 0x3 DUP6 DUP6 PUSH2 0x395D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x4160 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1122 DUP2 PUSH2 0x51EF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x418D PUSH1 0x1 PUSH1 0xC SLOAD PUSH2 0x24BD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x4197 PUSH2 0x54AC JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP5 MSTORE DUP3 SLOAD DUP3 MSTORE PUSH1 0x1 DUP1 DUP5 ADD SLOAD DUP4 DUP8 ADD MSTORE PUSH1 0x2 SWAP4 DUP5 ADD SLOAD DUP4 DUP7 ADD MSTORE DUP8 DUP8 MSTORE PUSH1 0x16 DUP7 MSTORE SWAP6 DUP5 SWAP1 KECCAK256 DUP5 MLOAD PUSH1 0xA0 DUP2 ADD DUP7 MSTORE DUP2 SLOAD DUP2 MSTORE SWAP7 DUP2 ADD SLOAD SWAP6 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP2 DUP5 ADD SLOAD SWAP3 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP4 ADD SLOAD SWAP1 DUP5 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP1 PUSH2 0x421F SWAP1 DUP3 SWAP1 PUSH2 0x3512 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xB02D77300000000000000000000000000000000000000000000000000000000 DUP3 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x425E JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD3 SWAP2 SWAP1 PUSH2 0x5D85 JUMP JUMPDEST PUSH2 0x4276 PUSH2 0x54CD JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x42AE DUP2 PUSH2 0x516D JUMP JUMPDEST ISZERO PUSH2 0x42B8 JUMPI PUSH2 0x117E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42C5 DUP4 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP3 POP SWAP1 POP PUSH2 0x4300 DUP3 PUSH2 0x516D JUMP JUMPDEST ISZERO PUSH2 0x430B JUMPI POP PUSH2 0x117E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 DUP2 LT ISZERO PUSH2 0x4367 JUMPI PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP3 POP PUSH2 0x435B DUP4 PUSH2 0x516D JUMP JUMPDEST ISZERO PUSH2 0x4367 JUMPI POP POP PUSH2 0x117E JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x4394 JUMPI POP PUSH1 0x0 PUSH2 0x43EA JUMP JUMPDEST DUP4 PUSH2 0x43AE JUMPI PUSH2 0x43A7 DUP6 PUSH2 0x3CDC DUP5 DUP10 PUSH2 0x410E JUMP JUMPDEST SWAP1 POP PUSH2 0x43EA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43C7 PUSH2 0x43BD DUP7 DUP9 PUSH2 0x410E JUMP JUMPDEST PUSH2 0x2603 DUP10 DUP8 PUSH2 0x410E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x43D5 DUP3 DUP7 PUSH2 0x413F JUMP JUMPDEST SWAP1 POP PUSH2 0x43E5 DUP8 PUSH2 0x3CDC DUP7 DUP5 PUSH2 0x410E JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x440B JUMPI PUSH2 0x440B PUSH2 0x9C2 PUSH1 0x1 DUP6 PUSH2 0x525D JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x4422 JUMPI PUSH2 0x4422 PUSH2 0x9C2 PUSH1 0x1 DUP5 PUSH2 0x525D JUMP JUMPDEST PUSH2 0x117B PUSH2 0x443F DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x529E JUMP JUMPDEST DUP4 PUSH2 0x52F1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117B PUSH2 0x443F DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x529E JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x448C JUMPI PUSH2 0x448C PUSH2 0x9C2 PUSH1 0x1 DUP5 PUSH2 0x5372 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x44A2 JUMPI PUSH2 0x44A2 PUSH2 0x9C2 PUSH1 0x0 DUP5 PUSH2 0x5372 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x44C2 JUMPI POP PUSH1 0x0 PUSH2 0xE03 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x44F5 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x4554 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x45B2 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x4614 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x4678 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x46DC JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x4740 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x47A4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x4808 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x486C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x48E2 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x4913 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x4933 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x4964 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x4984 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x49B5 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x49D5 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x4A06 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x4A26 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x4A57 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x4A77 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x4AA8 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x4AC8 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x4AF9 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34CD PUSH2 0x443F DUP6 DUP6 PUSH2 0x529E JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x4B47 JUMPI POP PUSH1 0x0 PUSH2 0xE03 JUMP JUMPDEST DUP2 PUSH2 0x4B63 JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x4B7A JUMPI PUSH2 0x4B7A PUSH2 0x9C2 PUSH1 0x1 DUP5 PUSH2 0x5372 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4BE6 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4C13 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4C3F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4C6B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4C97 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4CC2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4CED JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4D17 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4D41 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4D6B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4D94 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4DBD JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4DE5 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4E0D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4E34 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4E5B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4E81 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x4EF0 JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x4F32 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x4F74 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x4FB6 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x4FF8 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x5038 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x5078 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x50B8 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x50F8 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 PUSH2 0x511C DUP5 DUP5 PUSH2 0x529E JUMP JUMPDEST DUP2 PUSH2 0x5123 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x5143 JUMPI PUSH2 0x5143 PUSH2 0x9C2 PUSH1 0x1 DUP5 PUSH2 0x525D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x514F DUP5 DUP5 PUSH2 0x529E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x5163 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x117E JUMP JUMPDEST PUSH1 0x7F SHR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 ADD MLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH2 0x5188 JUMPI POP DUP3 SWAP1 POP DUP2 PUSH2 0x51BD JUMP JUMPDEST DUP4 PUSH2 0x5197 JUMPI POP DUP5 SWAP1 POP DUP4 PUSH2 0x51BD JUMP JUMPDEST PUSH2 0x51AE PUSH2 0x51A4 DUP6 DUP8 PUSH2 0x410E JUMP JUMPDEST PUSH2 0x3D5E DUP9 DUP7 PUSH2 0x410E JUMP JUMPDEST SWAP2 POP PUSH2 0x51BA DUP6 DUP5 PUSH2 0x410E JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x51E4 DUP5 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x53A1 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH2 0x5200 SWAP1 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST SWAP1 POP PUSH2 0x520A PUSH2 0x54AC JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x148E JUMPI PUSH2 0x148E PUSH2 0x9C2 DUP5 DUP5 PUSH2 0x53FD JUMP JUMPDEST PUSH1 0x60 PUSH32 0xBD79545F00000000000000000000000000000000000000000000000000000000 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x528C JUMPI INVALID JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5D93 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x52AB JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x52B8 JUMPI POP PUSH1 0x0 PUSH2 0x117E JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x52C6 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x52DD JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x52D9 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x117E JUMPI PUSH2 0x117E PUSH2 0x9C2 PUSH1 0x1 DUP6 DUP6 PUSH2 0x541A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x5307 JUMPI PUSH2 0x5307 PUSH2 0x9C2 PUSH1 0x2 DUP6 DUP6 PUSH2 0x541A JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x5355 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x5369 JUMPI PUSH2 0x5369 PUSH2 0x9C2 PUSH1 0x3 DUP6 DUP6 PUSH2 0x541A JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x5123 JUMPI INVALID JUMPDEST PUSH1 0x60 PUSH32 0xED2F26A100000000000000000000000000000000000000000000000000000000 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x528C JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP6 GT DUP1 PUSH2 0x53B1 JUMPI POP DUP3 DUP5 GT JUMPDEST ISZERO PUSH2 0x53F4 JUMPI PUSH1 0x0 DUP5 DUP7 LT ISZERO PUSH2 0x53C6 JUMPI DUP5 PUSH2 0x53C8 JUMP JUMPDEST DUP6 JUMPDEST SWAP1 POP PUSH2 0x53D4 DUP2 DUP6 PUSH2 0x413F JUMP JUMPDEST SWAP1 POP PUSH2 0x53E0 DUP7 DUP3 PUSH2 0x413F JUMP JUMPDEST SWAP3 POP PUSH2 0x53EC DUP6 DUP3 PUSH2 0x413F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x32F2 JUMP JUMPDEST POP SWAP3 SWAP4 SWAP2 SWAP3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x5CAA0B05 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x8C12DFE700000000000000000000000000000000000000000000000000000000 DUP5 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x5449 JUMPI INVALID JUMPDEST DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x397C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5DA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0x117E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5506 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x551D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND DUP4 ADD ADD DUP3 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x555C JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP DUP2 SWAP5 POP DUP4 DUP3 MSTORE DUP7 DUP2 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x5578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x559A JUMPI DUP6 DUP4 ADD DUP2 ADD MLOAD DUP3 DUP5 ADD DUP3 ADD MSTORE SWAP2 DUP3 ADD SWAP2 PUSH2 0x557D JUMP JUMPDEST DUP4 DUP4 GT ISZERO PUSH2 0x55AB JUMPI PUSH1 0x0 DUP2 DUP6 DUP5 ADD ADD MSTORE JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x117E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x55EB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x117B DUP2 PUSH2 0x5DCB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5607 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x117B DUP2 PUSH2 0x5DCB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5626 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x5631 DUP2 PUSH2 0x5DCB JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x5641 DUP2 PUSH2 0x5DCB JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5664 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x566F DUP2 PUSH2 0x5DCB JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x568F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x569A DUP2 PUSH2 0x5DCB JUMP JUMPDEST SWAP2 POP PUSH2 0x56A9 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x54E7 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x56CA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 MLOAD PUSH2 0x56D5 DUP2 PUSH2 0x5DCB JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MLOAD SWAP1 SWAP7 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x56F2 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x56FE DUP11 DUP4 DUP12 ADD PUSH2 0x54F6 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5713 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x5720 DUP10 DUP3 DUP11 ADD PUSH2 0x54F6 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD MLOAD SWAP3 POP PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x5738 DUP2 PUSH2 0x5DCB JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x5749 DUP2 PUSH2 0x5DCB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5768 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x117B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5788 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x57A1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x57B3 DUP2 PUSH2 0x5DCB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x57D0 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x57F1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x56A9 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x55C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5813 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x117B DUP4 DUP4 PUSH2 0x54E7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5831 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x583B DUP6 DUP6 PUSH2 0x55B5 JUMP JUMPDEST SWAP3 POP PUSH2 0x584A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x55B5 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x586B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x588A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 MLOAD SWAP6 POP PUSH1 0x20 DUP8 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x58A8 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x58B4 DUP11 DUP4 DUP12 ADD PUSH2 0x54F6 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5713 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x58E0 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x58F1 DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x55C6 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH2 0x5907 DUP8 PUSH1 0x60 DUP9 ADD PUSH2 0x55C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x5916 DUP8 PUSH1 0x80 DUP9 ADD PUSH2 0x55C6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5A0F JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x59DD JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x5A8D JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x3 DUP5 LT PUSH2 0x5AAF JUMPI INVALID JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x5AC6 DUP6 PUSH2 0x5DC1 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x5AED DUP5 PUSH2 0x5DC1 JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F4E5F524547495354455245445F504F4F4C5F49445F4552524F5200000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x504F4F4C5F544F5F4A4F494E5F4E4F545F53454C465F4552524F520000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F4E5F524547495354455245445F52425F504F4F4C5F4552524F5200000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x43525F494E54455256414C5F494E56414C494400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x574554485F5452414E534645525F4641494C4544000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH4 0xFFFFFFFF SWAP4 DUP5 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 AND PUSH1 0x60 DUP5 ADD MSTORE AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0xFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x1122 JUMPI INVALID JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1122 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0xAD TIMESTAMP 0x2E GAS EXTCODEHASH GT 0x5F 0xD PUSH24 0x7BF6E3D6F294B07EE5C03D513ADEE88A48AB0E838216473 PUSH16 0x6C634300070100330000000000000000 ",
				"sourceMap": "877:1573:5:-:0;;;;;;;;;;;;-1:-1:-1;926:5:46;:18;;-1:-1:-1;;;;;;926:18:46;934:10;926:18;;;877:1573:5;;;;;;"
			},
			"deployedBytecode": {
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x60806040526004361061033f5760003560e01c80639ad26744116101b0578063c18c9141116100ec578063e8eeb3f811610095578063ef4ba6801161006f578063ef4ba6801461090a578063f252b7a11461091f578063f2fde38b1461093f578063ff691b111461095f5761033f565b8063e8eeb3f8146108c0578063e907f003146108d5578063ee99205c146108f55761033f565b8063e0ee036e116100c6578063e0ee036e14610876578063e1c7392a1461088b578063e804d0a4146108a05761033f565b8063c18c91411461081f578063d39de6e91461083f578063e0822db7146108615761033f565b8063b053152411610159578063b652b41f11610133578063b652b41f146107aa578063b9181611146107bf578063bb7ef7e0146107df578063be111af4146107ff5761033f565b8063b053152414610760578063b2baa33e14610775578063b510879f1461078a5761033f565b8063a3b4a3271161018a578063a3b4a32714610718578063a657e5791461072b578063a694fc3a146107405761033f565b80639ad26744146106c35780639c3ccc82146106e3578063a26171e2146107035761033f565b8063494503d41161027f5780635e615a6b11610228578063766718081161020257806376671808146106575780637fa140c71461066c578063816667961461068c5780638da5cb5b146106ae5761033f565b80635e615a6b146105fc578063634038011461062257806370712939146106375761033f565b8063587da02311610259578063587da023146105a757806358f6c7e3146105bc5780635d91121d146105dc5761033f565b8063494503d41461052d5780634bcc3f671461054d578063540c2d531461057a5761033f565b80632e17de78116102ec5780633e4ad732116102c65780633e4ad7321461049357806342f1181e146104c057806344a6958b146104e057806346b97959146105005761033f565b80632e17de781461042057806338229d93146104405780633c277fc5146104715761033f565b80631e7ff8f61161031d5780631e7ff8f6146103b15780631f81eb80146103d15780632a94c279146103f15761033f565b806301e28d84146103445780630b9663db146103665780631a67a0a014610391575b600080fd5b34801561035057600080fd5b5061036461035f3660046155da565b61097f565b005b34801561037257600080fd5b5061037b610a4d565b6040516103889190615a26565b60405180910390f35b34801561039d57600080fd5b506103646103ac36600461578f565b610b93565b3480156103bd57600080fd5b5061037b6103cc3660046155da565b610d6e565b3480156103dd57600080fd5b506103646103ec3660046155da565b610e08565b3480156103fd57600080fd5b5061041161040c3660046157be565b610eca565b60405161038893929190615cc5565b34801561042c57600080fd5b5061036461043b366004615777565b610ef6565b34801561044c57600080fd5b5061046061045b366004615777565b6110ab565b604051610388959493929190615cf6565b34801561047d57600080fd5b506104866110da565b6040516103889190615922565b34801561049f57600080fd5b506104b36104ae366004615777565b6110f2565b6040516103889190615c86565b3480156104cc57600080fd5b506103646104db3660046155da565b611111565b3480156104ec57600080fd5b506104b36104fb36600461567d565b611125565b34801561050c57600080fd5b5061052061051b366004615777565b611184565b6040516103889190615c25565b34801561053957600080fd5b50610486610548366004615777565b6111cf565b34801561055957600080fd5b5061056d610568366004615777565b611203565b6040516103889190615c46565b34801561058657600080fd5b5061059a6105953660046155da565b61127b565b6040516103889190615a1b565b3480156105b357600080fd5b5061037b611290565b3480156105c857600080fd5b506103646105d736600461581d565b611296565b3480156105e857600080fd5b506103646105f73660046157df565b611493565b34801561060857600080fd5b5061061161155c565b604051610388959493929190615d19565b34801561062e57600080fd5b5061037b611585565b34801561064357600080fd5b506103646106523660046155da565b61158b565b34801561066357600080fd5b5061037b611640565b34801561067857600080fd5b5061037b6106873660046155da565b611646565b34801561069857600080fd5b506106a1611658565b6040516103889190615d5d565b3480156106ba57600080fd5b50610486611664565b3480156106cf57600080fd5b506103646106de366004615652565b611680565b3480156106ef57600080fd5b506103646106fe3660046158c9565b611692565b34801561070f57600080fd5b5061037b61170c565b610364610726366004615612565b611712565b34801561073757600080fd5b5061037b611941565b34801561074c57600080fd5b5061036461075b366004615777565b611947565b34801561076c57600080fd5b5061037b611a5c565b34801561078157600080fd5b5061037b611a62565b34801561079657600080fd5b506103646107a5366004615777565b611a80565b3480156107b657600080fd5b50610486611a8a565b3480156107cb57600080fd5b5061059a6107da3660046155da565b611aa2565b3480156107eb57600080fd5b5061037b6107fa366004615777565b611ab7565b34801561080b57600080fd5b5061037b61081a3660046155da565b611b52565b34801561082b57600080fd5b5061037b61083a366004615777565b611db8565b34801561084b57600080fd5b50610854611dca565b60405161038891906159c1565b34801561086d57600080fd5b50610486611e39565b34801561088257600080fd5b506106a1611e51565b34801561089757600080fd5b50610364611e5d565b3480156108ac57600080fd5b506104b36108bb366004615802565b611e77565b3480156108cc57600080fd5b506106a1611fc1565b3480156108e157600080fd5b5061037b6108f036600461578f565b611fd5565b34801561090157600080fd5b50610486612082565b34801561091657600080fd5b5061048661209e565b34801561092b57600080fd5b506104b361093a366004615652565b6120b6565b34801561094b57600080fd5b5061036461095a3660046155da565b6120f7565b34801561096b57600080fd5b5061036461097a366004615777565b61219a565b6109876123f0565b73ffffffffffffffffffffffffffffffffffffffff811660009081526010602052604090205460ff166109c7576109c76109c2600183612413565b6124b5565b73ffffffffffffffffffffffffffffffffffffffff81166000908152601060205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f9bf55462cb5fa187f725d06de0a70bc01c4e40695570bdc25ad116f9be46bda790610a42908390615922565b60405180910390a150565b600c5460009081610a5f8260016124bd565b6000818152601660205260409020600101549091508015610a8757610a876109c283836124dc565b610a8f6124f9565b610a9761256b565b600084815260166020526040902055610aae61545d565b50600083815260166020908152604091829020825160a08101845281548082526001830154938201849052600283015482860181905260038401546060840181905260049094015460808401529451919488947fbb4a26fa0ace13ee4da343896c20eaa44a618fb9071fdd8c2e2c960a4583189d94610b309491939291615cdb565b60405180910390a2610b40612609565b6020810151610b8757805160405185917fb463d19ecf455be65365092cf8e1db6934a0334cf8cd532ddf9964d01f36b5b291610b7e91600091615a71565b60405180910390a25b60200151935050505090565b600080610b9e611a8a565b6040517fc277f1ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091169063c277f1ac90610bf2908790600401615a26565b60006040518083038186803b158015610c0a57600080fd5b505afa158015610c1e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610c6491908101906156b2565b50509350505091506000811415610cb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790615b12565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790615b49565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600960205260408082208790555186928616917fe8b9f7ee7a4480d45b60e98f7b2090dd82e2353b8557a6ee2dd2d5ee9196bac291a350505050565b6000610d78611e39565b73ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401610db09190615922565b60206040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e00919061585a565b90505b919050565b610e106123f0565b73ffffffffffffffffffffffffffffffffffffffff811660009081526010602052604090205460ff1615610e4c57610e4c6109c2600083612413565b73ffffffffffffffffffffffffffffffffffffffff81166000908152601060205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f5738ee3c8e8fe8b0b9c4c21b16fdca42ec02e271237dfeabbf3b5af1584d732b90610a42908390615922565b601560209081526000928352604080842090915290825290208054600182015460029092015490919083565b33610eff61548c565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60205260409020610f4c90612646565b90506000610f7e82602001516bffffffffffffffffffffffff1683604001516bffffffffffffffffffffffff166126ec565b905080841115610f9557610f956109c28583612702565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60205260409020610fe3908561271f565b610feb611e39565b73ffffffffffffffffffffffffffffffffffffffff16639470b0bd84866040518363ffffffff1660e01b815260040161102592919061599b565b600060405180830381600087803b15801561103f57600080fd5b505af1158015611053573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd8560405161109d9190615a26565b60405180910390a250505050565b601660205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b6110fa61548c565b6000828152600760205260409020610e0090612646565b6111196127a0565b611122816127e7565b50565b61112d61548c565b61117b6005600084600181111561114057fe5b60ff1681526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff881682529092529020612646565b90505b92915050565b61118c6154ac565b506000908152601560209081526040808320600c548452825291829020825160608101845281548152600182015492810192909252600201549181019190915290565b600281815481106111dc57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b61120b61548c565b506000908152600a60209081526040918290208251606081018452815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910463ffffffff16938201939093526001909101549091169181019190915290565b60106020526000908152604090205460ff1681565b600d5481565b33816112a2575061148e565b60006112b16020860186615802565b60018111156112bc57fe5b1480156112e0575060006112d36020850185615802565b60018111156112de57fe5b145b156112eb575061148e565b60016112fa6020860186615802565b600181111561130557fe5b141561131a5761131a84602001358284612918565b60016113296020850185615802565b600181111561133457fe5b141561134957611349836020013582846129b1565b600060058161135b6020880188615802565b600181111561136657fe5b60ff1681526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff86168252835290812092509060059082906113b090880188615802565b60018111156113bb57fe5b60ff1681526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff87168252909252902090506113fe828286612a4a565b60208086013590870180359073ffffffffffffffffffffffffffffffffffffffff8616907f7d3ad1dcf03b9027064d1d9a474a69e0cecc31324c541d3eb9b5e6fa2f106c8d908890611450908c615802565b600181111561145b57fe5b61146860208c018c615802565b600181111561147357fe5b60405161148293929190615d44565b60405180910390a45050505b505050565b8161149d81612b37565b6000838152600a602052604090205474010000000000000000000000000000000000000000900463ffffffff166114d5848285612b70565b6000848152600a60205260409081902080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8716021790555184907f8ea2a7a959bd25f226b7b0a4393613f7fdcaa8404e8bad96aa52dc1c145901679061109d9084908790615d6e565b601154601254601354601454929363ffffffff9283169391928281169264010000000090041690565b60115481565b6115936127a0565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff166115cc576115cc6109c282612bb8565b60005b60025481101561163c578173ffffffffffffffffffffffffffffffffffffffff16600282815481106115fd57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156116345761162f8282612c57565b61163c565b6001016115cf565b5050565b600c5481565b60096020526000908152604090205481565b60145463ffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6116886127a0565b61163c8282612c57565b61169a6123f0565b6116a78585858585612ed2565b3073ffffffffffffffffffffffffffffffffffffffff1663c6f3a4276040518163ffffffff1660e01b815260040160006040518083038186803b1580156116ed57600080fd5b505afa158015611701573d6000803e3d6000fd5b505050505050505050565b60135481565b3360009081526010602052604090205460ff16611735576117356109c233612f95565b61173e81612fb0565b3461180f5761174b6110da565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b81526004016117879392919061596a565b602060405180830381600087803b1580156117a157600080fd5b505af11580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d99190615757565b61180f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790615bee565b73ffffffffffffffffffffffffffffffffffffffff831660009081526009602052604090205480611840575061148e565b600061184b826110f2565b602001516bffffffffffffffffffffffff16905060135481101561187057505061148e565b600c54600083815260156020908152604080832084845282528083206016909252909120815480611913576000806118a88888612fd1565b6002870182905560018701819055600386015491935091506118ca9082613051565b60038501556001808501546118de91613051565b6001850155604051889087907f14b098103235344975b17508c2391721cc9ac3f3fa2b56c7ff46f8480dfd074f90600090a350505b61191d8188613051565b8355600282015461192e9088613051565b8260020181905550505050505050505050565b60085481565b33611950611e39565b73ffffffffffffffffffffffffffffffffffffffff166315cc36f282846040518363ffffffff1660e01b815260040161198a92919061599b565b600060405180830381600087803b1580156119a457600080fd5b505af11580156119b8573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60205260409020611a0a908361306d565b8073ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a83604051611a509190615a26565b60405180910390a25050565b60175481565b6000611a7b601154600d5461305190919063ffffffff16565b905090565b61112281336130d1565b73de6445484a8dcd9bf35fc95eb4e3990cc358822e90565b60016020526000908152604090205460ff1681565b6000611ac161548c565b506000828152600a602090815260408083208151606081018352815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910463ffffffff1694820194909452600190910154909216908201529080611b35856132a9565b91509150611b48836020015183836132bf565b5095945050505050565b6000806000611b5f611a8a565b73ffffffffffffffffffffffffffffffffffffffff1663b72e717d856040518263ffffffff1660e01b8152600401611b979190615922565b60006040518083038186803b158015611baf57600080fd5b505afa158015611bc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611c099190810190615872565b50945050505091506000821415611c4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790615b80565b80600073ffffffffffffffffffffffffffffffffffffffff82163314611c6f5750335b620aae60611c7c856132fa565b8460001b9550611c9086620f424083612b70565b611c9861548c565b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff808616825263ffffffff808516602080850191825287841685870190815260008d8152600a9092529086902085518154935190941674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff9486167fffffffffffffffffffffffff00000000000000000000000000000000000000009485161794909416939093178355516001909201805492909316911617905590517fcec6fc86ea644053f6edff1160dfe3fa5c61e7a5ef9f873f145bb03a0bd319e790611d9b90899087908690615a2f565b60405180910390a1611dad8789610b93565b505050505050919050565b600b6020526000908152604090205481565b60606002805480602002602001604051908101604052809291908181526020018280548015611e2f57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611e04575b5050505050905090565b73ba7f8b5fb1b19c1211c5d49550fcd149177a5eaf90565b60125463ffffffff1681565b611e656123f0565b611e6d613332565b611e75613345565b565b611e7f61548c565b60016000526004602052611eb27fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05612646565b90506000826001811115611ec257fe5b1415610e03576000611ed2611e39565b73ffffffffffffffffffffffffffffffffffffffff16636b6df5aa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1757600080fd5b505afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f919061585a565b9050611f7e611f7983602001516bffffffffffffffffffffffff16836124bd90919063ffffffff16565b613370565b6bffffffffffffffffffffffff90811660208401526040830151611fa891611f79918491166124bd565b6bffffffffffffffffffffffff16604083015250919050565b601454640100000000900463ffffffff1681565b6000611fdf61548c565b506000838152600a602090815260408083208151606081018352815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910463ffffffff1694820194909452600190910154909216908201529080612053866132a9565b915091506000612068846020015184846132bf565b91505061207787878385613394565b979650505050505050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b734fbb350052bca5417566f188eb2ebce5b19bc96490565b6120be61548c565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660209081526040808320858452909152902061117b90612646565b6120ff6127a0565b73ffffffffffffffffffffffffffffffffffffffff811661212a576121256109c26134d5565b611122565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b6121a33361350c565b156121e15733600090815260106020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b600c5460006121f18260016124bd565b90506121fb61545d565b50600081815260166020908152604091829020825160a0810184528154815260018201549281018390526002820154938101939093526003810154606084015260040154608083015261225057505050611122565b6122586154ac565b50600084815260156020908152604080832085845282529182902082516060810184528154808252600183015493820193909352600290910154928101929092526122a65750505050611122565b60008581526015602090815260408083208684529091528120818155600181018290556002018190556122d98284613512565b90506000806122ed888486604001516137df565b9150915087877ff1116b309178aa62dcb6bf8c3b8bc2321724907c7ebf52192d14c8ce3aa9194c8484604051612324929190615a71565b60405180910390a360006123388383613051565b608087015190915061234a9082613051565b608087018190526000888152601660209081526040909120600401919091558601516123779060016124bd565b602080880182815260008a8152601690925260409091206001019190915551611701576080860151865188917fb463d19ecf455be65365092cf8e1db6934a0334cf8cd532ddf9964d01f36b5b2916123cf90826124bd565b6040516123dd929190615a71565b60405180910390a2505050505050505050565b3360009081526001602052604090205460ff16611e7557611e756109c233613942565b606063b9588e4360e01b8383604051602401612430929190615ae0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b805160208201fd5b6000828211156124d6576124d66109c26002858561395d565b50900390565b606063614b800a60e01b8383604051602401612430929190615a71565b478015611122576125086110da565b73ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561254f57600080fd5b505af1158015612563573d6000803e3d6000fd5b505050505050565b6000611a7b60175461257b6110da565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016125b39190615922565b60206040518083038186803b1580156125cb57600080fd5b505afa1580156125df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612603919061585a565b906124bd565b426000612614611a62565b90508181111561262b5761262b6109c28284613a02565b600c5460009061263c906001613051565b600c555050600d55565b61264e61548c565b5060408051606081018252825467ffffffffffffffff81168083526bffffffffffffffffffffffff680100000000000000008304811660208501527401000000000000000000000000000000000000000090920490911692820192909252600c5490918111156126e6576126c181613a1f565b67ffffffffffffffff16825260408201516bffffffffffffffffffffffff1660208301525b50919050565b60008183106126fb578161117b565b5090919050565b60606384c8b7c960e01b8383604051602401612430929190615a71565b61272761548c565b61273083612646565b905061275a611f798383604001516bffffffffffffffffffffffff166124bd90919063ffffffff16565b6bffffffffffffffffffffffff9081166040830152602082015161278391611f799116846124bd565b6bffffffffffffffffffffffff16602082015261148e8382613a3f565b60005473ffffffffffffffffffffffffffffffffffffffff163314611e7557600054611e75906109c290339073ffffffffffffffffffffffffffffffffffffffff16613af9565b73ffffffffffffffffffffffffffffffffffffffff811661280d5761280d6109c2613b16565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff1615612847576128476109c282613b4d565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b61292183613b68565b61292b83836130d1565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020908152604080832086845290915290206129659082613b9f565b600083815260076020526040902061297d9082613b9f565b6001600052600460205261148e7fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe0582613b9f565b6129ba83613b68565b6129c483836130d1565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020908152604080832086845290915290206129fe9082613bf7565b6000838152600760205260409020612a169082613bf7565b6001600052600460205261148e7fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe0582613bf7565b612a548383613c32565b15612a5e5761148e565b612a6661548c565b612a6f84612646565b9050612a7961548c565b612a8284612646565b905081604001516bffffffffffffffffffffffff16831115612abd57612abd6109c28484604001516bffffffffffffffffffffffff16612702565b6040820151612ade90611f79906bffffffffffffffffffffffff16856124bd565b6bffffffffffffffffffffffff908116604080850191909152820151612b0991611f79911685613051565b6bffffffffffffffffffffffff166040820152612b268583613a3f565b612b308482613a3f565b5050505050565b6000818152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff1633811461163c5761163c6109c23384613c39565b620f424063ffffffff82161115612b9557612b906109c260008584613c56565b61148e565b8163ffffffff168163ffffffff16111561148e5761148e6109c260018584613c56565b606063eb5108a260e01b82604051602401612bd39190615922565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090205460ff16612c9057612c906109c283612bb8565b6002548110612cab57612cab6109c282600280549050613c75565b8173ffffffffffffffffffffffffffffffffffffffff1660028281548110612ccf57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614612d3157612d316109c260028381548110612d0957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1684613c92565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110612dac57fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff9092169183908110612ddf57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002805480612e3257fe5b60008281526020812082017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055909101909155604051339173ffffffffffffffffffffffffffffffffffffffff8516917f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b09190a35050565b60118590556012805463ffffffff8087167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000092831617909255601385905560148054848416640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff9487169190931617929092161790556040517f613157dbb0e920deab8ad6ddd3805e87cbf57344b9fe780f1764790ec789754290612f869087908790879087908790615d19565b60405180910390a15050505050565b606063b56d2df060e01b82604051602401612bd39190615922565b803414158015612fbf57503415155b15611122576111226109c28234613caf565b6000828152600a6020526040812054819081906130049073ffffffffffffffffffffffffffffffffffffffff16866120b6565b602001516bffffffffffffffffffffffff16905061302284826124bd565b601254909350613047906130409063ffffffff16620f424086613ccc565b8290613051565b9150509250929050565b60008282018381101561117b5761117b6109c26000868661395d565b61307561548c565b61307e83612646565b90506130a8611f798383604001516bffffffffffffffffffffffff1661305190919063ffffffff16565b6bffffffffffffffffffffffff9081166040830152602082015161278391611f79911684613051565b6130da82613ce2565b60006130e98383600080613394565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660209081526040808320878452909152902090915061312590612646565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600660209081526040808320888452825291829020845181549286015195909301517fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921667ffffffffffffffff909316929092177fffffffffffffffffffffffff000000000000000000000000ffffffffffffffff16680100000000000000006bffffffffffffffffffffffff958616021790921674010000000000000000000000000000000000000000939092169290920217905580156132a05761320a8382613ceb565b6132126110da565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161324c92919061599b565b602060405180830381600087803b15801561326657600080fd5b505af115801561327a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329e9190615757565b505b61148e83613d27565b6000806132b583613d34565b9094909350915050565b600080826132cf578391506132f2565b6132e363ffffffff8616620f424086613d40565b91506132ef84836124bd565b90505b935093915050565b6000818152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff1615611122576111226109c2826000613d64565b61333a613d81565b42600d556001600c55565b61334d613d96565b62127500620dbba068056bc75e2d6310000060026003612b308585858585612ed2565b806bffffffffffffffffffffffff81168114610e0357610e036109c2600284613dfb565b600c546000906133a261548c565b5073ffffffffffffffffffffffffffffffffffffffff851660009081526006602090815260408083208984528252918290208251606081018452905467ffffffffffffffff81168083526bffffffffffffffffffffffff6801000000000000000083048116948401949094527401000000000000000000000000000000000000000090910490921692810192909252821415613443576000925050506134cd565b61344f81838787613e18565b815190935060009061346c9067ffffffffffffffff166001613051565b90506134a461349d8984602001516bffffffffffffffffffffffff16856000015167ffffffffffffffff1685613e95565b8590613051565b93506134c761349d8984604001516bffffffffffffffffffffffff168487613e95565b93505050505b949350505050565b60408051808201909152600481527fe69edc3e00000000000000000000000000000000000000000000000000000000602082015290565b3b151590565b81516000906135205761117e565b600061352a61209e565b73ffffffffffffffffffffffffffffffffffffffff1663075461726040518163ffffffff1660e01b815260040160206040518083038186803b15801561356f57600080fd5b505afa158015613583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a791906155f6565b905060008173ffffffffffffffffffffffffffffffffffffffff1663e70eadc06040518163ffffffff1660e01b815260040160206040518083038186803b1580156135f157600080fd5b505afa158015613605573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362991906155f6565b6040517ff36766c100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091169063f36766c19061367e90600190600401615a26565b60206040518083038186803b15801561369657600080fd5b505afa1580156136aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ce919061585a565b905060008273ffffffffffffffffffffffffffffffffffffffff1663ef78d4fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561371857600080fd5b505afa15801561372c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613750919061585a565b9050600061375e60016110f2565b6020908101519088015160608801516014546bffffffffffffffffffffffff90931693506301e1338085850204926137af92849288928492919063ffffffff80821691640100000000900416613f2e565b608088015188519197506000916137c5916124bd565b9050868110156137d3578096505b50505050505092915050565b6000806137ea61548c565b506000858152600a60209081526040918290208251606081018452815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910463ffffffff16938201849052600190920154909116928101929092526138619086866132bf565b9093509150821561391e576138746110da565b81516040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff929092169163a9059cbb916138ca91879060040161599b565b602060405180830381600087803b1580156138e457600080fd5b505af11580156138f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391c9190615757565b505b81156139395761392e8683613ff0565b613939868386614025565b50935093915050565b606063b65a25b960e01b82604051602401612bd39190615922565b606063e946c1bb60e01b84848460405160240161397c93929190615a7f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b606063a6bcde4760e01b8383604051602401612430929190615a71565b8067ffffffffffffffff81168114610e0357610e036109c2600184613dfb565b8051825460408301516020909301516bffffffffffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffff000000000000000000000000ffffffffffffffff91909416740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff9094167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090931692909217929092161716179055565b6060631de45ad160e01b8383604051602401612430929190615943565b60408051808201909152600481527f57654fe400000000000000000000000000000000000000000000000000000000602082015290565b606063de16f1a060e01b82604051602401612bd39190615922565b6000818152600a602052604090205473ffffffffffffffffffffffffffffffffffffffff16611122576111226109c2826000613d64565b613ba761548c565b613bb083612646565b9050613bda611f798383604001516bffffffffffffffffffffffff166124bd90919063ffffffff16565b6bffffffffffffffffffffffff16604082015261148e8382613a3f565b613bff61548c565b613c0883612646565b9050613bda611f798383604001516bffffffffffffffffffffffff1661305190919063ffffffff16565b1460011690565b60606382ded78560e01b838360405160240161243092919061599b565b60606322df959760e01b84848460405160240161397c93929190615ab9565b606063e9f8377160e01b8383604051602401612430929190615a71565b606063140a84db60e01b8383604051602401612430929190615943565b60606331d7a50560e01b8383604051602401612430929190615a71565b60006134cd83613cdc868561410e565b9061413f565b61112281614169565b6000828152600b6020526040902054613d0490826124bd565b6000838152600b6020526040902055601754613d2090826124bd565b6017555050565b6111228160006001614025565b6000806132b583614172565b60006134cd83613cdc613d548260016124bd565b613d5e888761410e565b90613051565b6060639ae94f0160e01b8383604051602401612430929190615a61565b600d5415611e7557611e756109c2600061422f565b60115415801590613dae575060125463ffffffff1615155b8015613dbb575060135415155b8015613dce575060145463ffffffff1615155b8015613de95750601454640100000000900463ffffffff1615155b15611e7557611e756109c2600161422f565b606063c996af7b60e01b8383604051602401612430929190615aa1565b6000821580613e25575081155b15613e32575060006134cd565b6000613e3f8560016124bd565b865167ffffffffffffffff161015613e5b578560400151613e61565b85602001515b6bffffffffffffffffffffffff16905080613e805760009150506134cd565b613e8b848483613ccc565b9695505050505050565b6000831580613ea357508183145b15613eb0575060006134cd565b818310613ee9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790615bb7565b613ef16154cd565b613efb868561426e565b9050613f056154cd565b613f0f878561426e565b905061207781600001518260200151846000015185602001518a614385565b600080613f3b88886143f3565b90506000613f4987876143f3565b9050811580613f56575080155b15613f6657600092505050612077565b600081831315613f7f57613f7a8284614445565b613f89565b613f898383614445565b9050613fb2613fad613f9a83614464565b8863ffffffff168863ffffffff16614b06565b614b15565b905081831315613fcb57613fc68282614445565b613fd5565b613fd582826150ff565b9050613fe1818c61512b565b9b9a5050505050505050505050565b6000828152600b60205260409020546140099082613051565b6000838152600b6020526040902055601754613d209082613051565b6000838152600f6020526040902054600c548082141561404657505061148e565b61404e6154cd565b506000858152600e6020908152604080832085845282529182902082518084019093528054835260010154908201526140856154cd565b61408e8261516d565b156140c7576140a7826000015183602001518888615176565b602083018190528183526140bb91906151c6565b602083015281526140d2565b602081018590528581525b6000878152600e6020908152604080832086845282528083208451815593820151600190940193909355978152600f9097529095205550505050565b60008261411d5750600061117e565b8282028284828161412a57fe5b041461117b5761117b6109c26001868661395d565b600081614155576141556109c26003858561395d565b600082848161416057fe5b04949350505050565b611122816151ef565b600080600061418d6001600c546124bd90919063ffffffff16565b90506141976154ac565b50600084815260156020908152604080832084845282528083208151606080820184528254825260018084015483870152600293840154838601528787526016865295849020845160a081018652815481529681015495870195909552918401549285019290925260038301549084015260049091015460808301529061421f908290613512565b9350806040015192505050915091565b60607f0b02d7730000000000000000000000000000000000000000000000000000000082600181111561425e57fe5b604051602401612bd39190615d85565b6142766154cd565b506000828152600e6020908152604080832084845282529182902082518084019093528054835260010154908201526142ae8161516d565b156142b85761117e565b60006142c58360016124bd565b6000858152600e602090815260408083208484528252918290208251808401909352805483526001015490820152925090506143008261516d565b1561430b575061117e565b6000848152600f602052604090205483811015614367576000858152600e602090815260408083208484528252918290208251808401909352805483526001015490820152925061435b8361516d565b1561436757505061117e565b50506040805180820190915260008152600160208201529392505050565b600081614394575060006143ea565b836143ae576143a785613cdc848961410e565b90506143ea565b60006143c76143bd868861410e565b612603898761410e565b905060006143d5828661413f565b90506143e587613cdc868461410e565b925050505b95945050505050565b60008083121561440b5761440b6109c260018561525d565b6000821215614422576144226109c260018461525d565b61117b61443f846f8000000000000000000000000000000061529e565b836152f1565b600061117b61443f846f8000000000000000000000000000000061529e565b60006f8000000000000000000000000000000082131561448c5761448c6109c2600184615372565b600082136144a2576144a26109c2600084615372565b6f800000000000000000000000000000008214156144c257506000610e03565b640733048c5a82136144f557507fffffffffffffffffffffffffffffffe010000000000000000000000000000000610e03565b60008060006a01c8464f761647600000008513614554577ffffffffffffffffffffffffffffffff000000000000000000000000000000000909301926a01c8464f761647600000006f8000000000000000000000000000000086020594505b6cf1aaddd7742e9000000000000085136145b2577ffffffffffffffffffffffffffffffff800000000000000000000000000000000909301926cf1aaddd7742e900000000000006f8000000000000000000000000000000086020594505b6e0afe10820813d780000000000000008513614614577ffffffffffffffffffffffffffffffffc00000000000000000000000000000000909301926e0afe10820813d780000000000000006f8000000000000000000000000000000086020594505b6f02582ab704279ec000000000000000008513614678577ffffffffffffffffffffffffffffffffe00000000000000000000000000000000909301926f02582ab704279ec000000000000000006f8000000000000000000000000000000086020594505b6f1152aaa3bf81cc00000000000000000085136146dc577fffffffffffffffffffffffffffffffff00000000000000000000000000000000909301926f1152aaa3bf81cc0000000000000000006f8000000000000000000000000000000086020594505b6f2f16ac6c59de700000000000000000008513614740577fffffffffffffffffffffffffffffffff80000000000000000000000000000000909301926f2f16ac6c59de700000000000000000006f8000000000000000000000000000000086020594505b6f4da2cbf1be582800000000000000000085136147a4577fffffffffffffffffffffffffffffffffc0000000000000000000000000000000909301926f4da2cbf1be58280000000000000000006f8000000000000000000000000000000086020594505b6f63afbe7ab2082c0000000000000000008513614808577fffffffffffffffffffffffffffffffffe0000000000000000000000000000000909301926f63afbe7ab2082c0000000000000000006f8000000000000000000000000000000086020594505b6f70f5a893b608861e1f58934f97aea57d851361486c577ffffffffffffffffffffffffffffffffff0000000000000000000000000000000909301926f70f5a893b608861e1f58934f97aea57d6f8000000000000000000000000000000086020594505b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000850192508291506f80000000000000000000000000000000828002059050700100000000000000000000000000000000838103830205840193506f80000000000000000000000000000000818302816148e257fe5b059150700200000000000000000000000000000000836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0383028161491357fe5b05840193506f800000000000000000000000000000008183028161493357fe5b059150700300000000000000000000000000000000836f999999999999999999999999999999990383028161496457fe5b05840193506f800000000000000000000000000000008183028161498457fe5b059150700400000000000000000000000000000000836f92492492492492492492492492492492038302816149b557fe5b05840193506f80000000000000000000000000000000818302816149d557fe5b059150700500000000000000000000000000000000836f8e38e38e38e38e38e38e38e38e38e38e03830281614a0657fe5b05840193506f8000000000000000000000000000000081830281614a2657fe5b059150700600000000000000000000000000000000836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b03830281614a5757fe5b05840193506f8000000000000000000000000000000081830281614a7757fe5b059150700700000000000000000000000000000000836f89d89d89d89d89d89d89d89d89d89d8903830281614aa857fe5b05840193506f8000000000000000000000000000000081830281614ac857fe5b059150700800000000000000000000000000000000836f8888888888888888888888888888888803830281614af957fe5b0584019350505050919050565b60006134cd61443f858561529e565b60007fffffffffffffffffffffffffffffffe010000000000000000000000000000000821215614b4757506000610e03565b81614b6357506f80000000000000000000000000000000610e03565b6000821315614b7a57614b7a6109c2600184615372565b6f800000000000000000000000000000006f1000000000000000000000000000000083078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506f8000000000000000000000000000000082820281614be657fe5b05905080670168244fdac7800002830192506f8000000000000000000000000000000082820281614c1357fe5b05905080664807432bc1800002830192506f8000000000000000000000000000000082820281614c3f57fe5b05905080660c0135dca0400002830192506f8000000000000000000000000000000082820281614c6b57fe5b059050806601b707b1cdc00002830192506f8000000000000000000000000000000082820281614c9757fe5b059050806536e0f639b80002830192506f8000000000000000000000000000000082820281614cc257fe5b05905080650618fee9f80002830192506f8000000000000000000000000000000082820281614ced57fe5b05905080649c197dcc0002830192506f8000000000000000000000000000000082820281614d1757fe5b05905080640e30dce40002830192506f8000000000000000000000000000000082820281614d4157fe5b0590508064012ebd130002830192506f8000000000000000000000000000000082820281614d6b57fe5b059050806317499f0002830192506f8000000000000000000000000000000082820281614d9457fe5b059050806301a9d48002830192506f8000000000000000000000000000000082820281614dbd57fe5b05905080621c638002830192506f8000000000000000000000000000000082820281614de557fe5b059050806201c63802830192506f8000000000000000000000000000000082820281614e0d57fe5b05905080611ab802830192506f8000000000000000000000000000000082820281614e3457fe5b0590508061017c02830192506f8000000000000000000000000000000082820281614e5b57fe5b05905080601402830192506f8000000000000000000000000000000082820281614e8157fe5b600095909503946721c3677c82b400009190059384010582016f8000000000000000000000000000000001929050701000000000000000000000000000000000841615614ef0577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b700800000000000000000000000000000000841615614f32577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b700400000000000000000000000000000000841615614f7457701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b700200000000000000000000000000000000841615614fb6577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b700100000000000000000000000000000000841615614ff85770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6f80000000000000000000000000000000841615615038576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6f40000000000000000000000000000000841615615078576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6f200000000000000000000000000000008416156150b8576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6f100000000000000000000000000000008416156150f8576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b60006f8000000000000000000000000000000061511c848461529e565b8161512357fe5b059392505050565b600080821215615143576151436109c260018461525d565b600061514f848461529e565b90506000811361516357600091505061117e565b607f1c9392505050565b60200151151590565b600080856151885750829050816151bd565b836151975750849050836151bd565b6151ae6151a4858761410e565b613d5e888661410e565b91506151ba858461410e565b90505b94509492505050565b6000806151e484846f800000000000000000000000000000006153a1565b915091509250929050565b600c546000906152009060016124bd565b905061520a6154ac565b50600082815260156020908152604080832084845282529182902082516060810184528154808252600183015493820193909352600290910154928101929092521561148e5761148e6109c284846153fd565b60607fbd79545f0000000000000000000000000000000000000000000000000000000083600181111561528c57fe5b83604051602401612430929190615d93565b60008215806152ab575081155b156152b85750600061117e565b50818102818382816152c657fe5b051415806152dd5750828282816152d957fe5b0514155b1561117e5761117e6109c26001858561541a565b600081615307576153076109c26002858561541a565b7f8000000000000000000000000000000000000000000000000000000000000000831480156153555750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff145b15615369576153696109c26003858561541a565b81838161512357fe5b60607fed2f26a10000000000000000000000000000000000000000000000000000000083600181111561528c57fe5b600080828511806153b157508284115b156153f4576000848610156153c657846153c8565b855b90506153d4818561413f565b90506153e0868261413f565b92506153ec858261413f565b9150506132f2565b50929391925050565b6060635caa0b0560e01b8383604051602401612430929190615a71565b60607f8c12dfe70000000000000000000000000000000000000000000000000000000084600381111561544957fe5b848460405160240161397c93929190615da6565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b80356002811061117e57600080fd5b600082601f830112615506578081fd5b815167ffffffffffffffff8082111561551d578283fd5b6040516020807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116830101828110848211171561555c578586fd5b8060405250819450838252868185880101111561557857600080fd5b600092505b8383101561559a578583018101518284018201529182019161557d565b838311156155ab5760008185840101525b5050505092915050565b6000604082840312156126e6578081fd5b803563ffffffff8116811461117e57600080fd5b6000602082840312156155eb578081fd5b813561117b81615dcb565b600060208284031215615607578081fd5b815161117b81615dcb565b600080600060608486031215615626578182fd5b833561563181615dcb565b9250602084013561564181615dcb565b929592945050506040919091013590565b60008060408385031215615664578182fd5b823561566f81615dcb565b946020939093013593505050565b6000806040838503121561568f578182fd5b823561569a81615dcb565b91506156a984602085016154e7565b90509250929050565b60008060008060008060c087890312156156ca578182fd5b86516156d581615dcb565b602088015190965067ffffffffffffffff808211156156f2578384fd5b6156fe8a838b016154f6565b96506040890151915080821115615713578384fd5b5061572089828a016154f6565b94505060608701519250608087015161573881615dcb565b60a088015190925061574981615dcb565b809150509295509295509295565b600060208284031215615768578081fd5b8151801515811461117b578182fd5b600060208284031215615788578081fd5b5035919050565b600080604083850312156157a1578182fd5b8235915060208301356157b381615dcb565b809150509250929050565b600080604083850312156157d0578182fd5b50508035926020909101359150565b600080604083850312156157f1578182fd5b823591506156a984602085016155c6565b600060208284031215615813578081fd5b61117b83836154e7565b600080600060a08486031215615831578081fd5b61583b85856155b5565b925061584a85604086016155b5565b9150608084013590509250925092565b60006020828403121561586b578081fd5b5051919050565b60008060008060008060c0878903121561588a578384fd5b86519550602087015167ffffffffffffffff808211156158a8578586fd5b6158b48a838b016154f6565b96506040890151915080821115615713578586fd5b600080600080600060a086880312156158e0578283fd5b853594506158f187602088016155c6565b93506040860135925061590787606088016155c6565b915061591687608088016155c6565b90509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015615a0f57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016159dd565b50909695505050505050565b901515815260200190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff91909116602083015263ffffffff16604082015260600190565b9182521515602082015260400190565b918252602082015260400190565b6060810160048510615a8d57fe5b938152602081019290925260409091015290565b6040810160038410615aaf57fe5b9281526020015290565b60608101615ac685615dc1565b938152602081019290925263ffffffff1660409091015290565b60408101615aed84615dc1565b92815273ffffffffffffffffffffffffffffffffffffffff9190911660209091015290565b6020808252601c908201527f4e4f4e5f524547495354455245445f504f4f4c5f49445f4552524f5200000000604082015260600190565b6020808252601b908201527f504f4f4c5f544f5f4a4f494e5f4e4f545f53454c465f4552524f520000000000604082015260600190565b6020808252601c908201527f4e4f4e5f524547495354455245445f52425f504f4f4c5f4552524f5200000000604082015260600190565b60208082526013908201527f43525f494e54455256414c5f494e56414c494400000000000000000000000000604082015260600190565b60208082526014908201527f574554485f5452414e534645525f4641494c4544000000000000000000000000604082015260600190565b81518152602080830151908201526040918201519181019190915260600190565b815173ffffffffffffffffffffffffffffffffffffffff908116825260208084015163ffffffff1690830152604092830151169181019190915260600190565b815167ffffffffffffffff1681526020808301516bffffffffffffffffffffffff90811691830191909152604092830151169181019190915260600190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b948552602085019390935260408401919091526060830152608082015260a00190565b94855263ffffffff938416602086015260408501929092528216606084015216608082015260a00190565b92835260ff918216602084015216604082015260600190565b63ffffffff91909116815260200190565b63ffffffff92831681529116602082015260400190565b60ff91909116815260200190565b60ff929092168252602082015260400190565b60ff9390931683526020830191909152604082015260600190565b6002811061112257fe5b73ffffffffffffffffffffffffffffffffffffffff8116811461112257600080fdfea2646970667358221220eead422e5a3f115f0d7707bf6e3d6f294b07ee5c03d513adee88a48ab0e8382164736f6c63430007010033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x33F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9AD26744 GT PUSH2 0x1B0 JUMPI DUP1 PUSH4 0xC18C9141 GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xE8EEB3F8 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xEF4BA680 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xEF4BA680 EQ PUSH2 0x90A JUMPI DUP1 PUSH4 0xF252B7A1 EQ PUSH2 0x91F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x93F JUMPI DUP1 PUSH4 0xFF691B11 EQ PUSH2 0x95F JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xE8EEB3F8 EQ PUSH2 0x8C0 JUMPI DUP1 PUSH4 0xE907F003 EQ PUSH2 0x8D5 JUMPI DUP1 PUSH4 0xEE99205C EQ PUSH2 0x8F5 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xE0EE036E GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0xE0EE036E EQ PUSH2 0x876 JUMPI DUP1 PUSH4 0xE1C7392A EQ PUSH2 0x88B JUMPI DUP1 PUSH4 0xE804D0A4 EQ PUSH2 0x8A0 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xC18C9141 EQ PUSH2 0x81F JUMPI DUP1 PUSH4 0xD39DE6E9 EQ PUSH2 0x83F JUMPI DUP1 PUSH4 0xE0822DB7 EQ PUSH2 0x861 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xB0531524 GT PUSH2 0x159 JUMPI DUP1 PUSH4 0xB652B41F GT PUSH2 0x133 JUMPI DUP1 PUSH4 0xB652B41F EQ PUSH2 0x7AA JUMPI DUP1 PUSH4 0xB9181611 EQ PUSH2 0x7BF JUMPI DUP1 PUSH4 0xBB7EF7E0 EQ PUSH2 0x7DF JUMPI DUP1 PUSH4 0xBE111AF4 EQ PUSH2 0x7FF JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xB0531524 EQ PUSH2 0x760 JUMPI DUP1 PUSH4 0xB2BAA33E EQ PUSH2 0x775 JUMPI DUP1 PUSH4 0xB510879F EQ PUSH2 0x78A JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0xA3B4A327 GT PUSH2 0x18A JUMPI DUP1 PUSH4 0xA3B4A327 EQ PUSH2 0x718 JUMPI DUP1 PUSH4 0xA657E579 EQ PUSH2 0x72B JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x740 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x9AD26744 EQ PUSH2 0x6C3 JUMPI DUP1 PUSH4 0x9C3CCC82 EQ PUSH2 0x6E3 JUMPI DUP1 PUSH4 0xA26171E2 EQ PUSH2 0x703 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x494503D4 GT PUSH2 0x27F JUMPI DUP1 PUSH4 0x5E615A6B GT PUSH2 0x228 JUMPI DUP1 PUSH4 0x76671808 GT PUSH2 0x202 JUMPI DUP1 PUSH4 0x76671808 EQ PUSH2 0x657 JUMPI DUP1 PUSH4 0x7FA140C7 EQ PUSH2 0x66C JUMPI DUP1 PUSH4 0x81666796 EQ PUSH2 0x68C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6AE JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x5E615A6B EQ PUSH2 0x5FC JUMPI DUP1 PUSH4 0x63403801 EQ PUSH2 0x622 JUMPI DUP1 PUSH4 0x70712939 EQ PUSH2 0x637 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x587DA023 GT PUSH2 0x259 JUMPI DUP1 PUSH4 0x587DA023 EQ PUSH2 0x5A7 JUMPI DUP1 PUSH4 0x58F6C7E3 EQ PUSH2 0x5BC JUMPI DUP1 PUSH4 0x5D91121D EQ PUSH2 0x5DC JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x494503D4 EQ PUSH2 0x52D JUMPI DUP1 PUSH4 0x4BCC3F67 EQ PUSH2 0x54D JUMPI DUP1 PUSH4 0x540C2D53 EQ PUSH2 0x57A JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x2E17DE78 GT PUSH2 0x2EC JUMPI DUP1 PUSH4 0x3E4AD732 GT PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x3E4AD732 EQ PUSH2 0x493 JUMPI DUP1 PUSH4 0x42F1181E EQ PUSH2 0x4C0 JUMPI DUP1 PUSH4 0x44A6958B EQ PUSH2 0x4E0 JUMPI DUP1 PUSH4 0x46B97959 EQ PUSH2 0x500 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x2E17DE78 EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x38229D93 EQ PUSH2 0x440 JUMPI DUP1 PUSH4 0x3C277FC5 EQ PUSH2 0x471 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x1E7FF8F6 GT PUSH2 0x31D JUMPI DUP1 PUSH4 0x1E7FF8F6 EQ PUSH2 0x3B1 JUMPI DUP1 PUSH4 0x1F81EB80 EQ PUSH2 0x3D1 JUMPI DUP1 PUSH4 0x2A94C279 EQ PUSH2 0x3F1 JUMPI PUSH2 0x33F JUMP JUMPDEST DUP1 PUSH4 0x1E28D84 EQ PUSH2 0x344 JUMPI DUP1 PUSH4 0xB9663DB EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0x1A67A0A0 EQ PUSH2 0x391 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x350 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x35F CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x97F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0xA4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x3AC CALLDATASIZE PUSH1 0x4 PUSH2 0x578F JUMP JUMPDEST PUSH2 0xB93 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x3CC CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0xD6E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0xE08 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x411 PUSH2 0x40C CALLDATASIZE PUSH1 0x4 PUSH2 0x57BE JUMP JUMPDEST PUSH2 0xECA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5CC5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x43B CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0xEF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x460 PUSH2 0x45B CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5CF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x10DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B3 PUSH2 0x4AE CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x10F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5C86 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x4DB CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x1111 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B3 PUSH2 0x4FB CALLDATASIZE PUSH1 0x4 PUSH2 0x567D JUMP JUMPDEST PUSH2 0x1125 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x520 PUSH2 0x51B CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1184 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5C25 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x548 CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x11CF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x56D PUSH2 0x568 CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1203 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5C46 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x586 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59A PUSH2 0x595 CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x127B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5A1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1290 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x5D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x581D JUMP JUMPDEST PUSH2 0x1296 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x5F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x57DF JUMP JUMPDEST PUSH2 0x1493 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x608 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x611 PUSH2 0x155C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5D19 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1585 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x652 CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x158B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x663 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1640 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x678 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x687 CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x1646 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A1 PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x5D5D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x1664 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x6DE CALLDATASIZE PUSH1 0x4 PUSH2 0x5652 JUMP JUMPDEST PUSH2 0x1680 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x6FE CALLDATASIZE PUSH1 0x4 PUSH2 0x58C9 JUMP JUMPDEST PUSH2 0x1692 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x170C JUMP JUMPDEST PUSH2 0x364 PUSH2 0x726 CALLDATASIZE PUSH1 0x4 PUSH2 0x5612 JUMP JUMPDEST PUSH2 0x1712 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x737 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1941 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x74C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x75B CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1947 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1A5C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x1A62 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x7A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1A80 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x1A8A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59A PUSH2 0x7DA CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x1AA2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x7FA CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1AB7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x81A CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x1B52 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x83A CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x1DB8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x84B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x854 PUSH2 0x1DCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x59C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x86D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x1E39 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A1 PUSH2 0x1E51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x897 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x1E5D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B3 PUSH2 0x8BB CALLDATASIZE PUSH1 0x4 PUSH2 0x5802 JUMP JUMPDEST PUSH2 0x1E77 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A1 PUSH2 0x1FC1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37B PUSH2 0x8F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x578F JUMP JUMPDEST PUSH2 0x1FD5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x901 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x2082 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x916 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x209E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B3 PUSH2 0x93A CALLDATASIZE PUSH1 0x4 PUSH2 0x5652 JUMP JUMPDEST PUSH2 0x20B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x94B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x95A CALLDATASIZE PUSH1 0x4 PUSH2 0x55DA JUMP JUMPDEST PUSH2 0x20F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0x97A CALLDATASIZE PUSH1 0x4 PUSH2 0x5777 JUMP JUMPDEST PUSH2 0x219A JUMP JUMPDEST PUSH2 0x987 PUSH2 0x23F0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x9C7 JUMPI PUSH2 0x9C7 PUSH2 0x9C2 PUSH1 0x1 DUP4 PUSH2 0x2413 JUMP JUMPDEST PUSH2 0x24B5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD PUSH32 0x9BF55462CB5FA187F725D06DE0A70BC01C4E40695570BDC25AD116F9BE46BDA7 SWAP1 PUSH2 0xA42 SWAP1 DUP4 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0xA5F DUP3 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP DUP1 ISZERO PUSH2 0xA87 JUMPI PUSH2 0xA87 PUSH2 0x9C2 DUP4 DUP4 PUSH2 0x24DC JUMP JUMPDEST PUSH2 0xA8F PUSH2 0x24F9 JUMP JUMPDEST PUSH2 0xA97 PUSH2 0x256B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xAAE PUSH2 0x545D JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x2 DUP4 ADD SLOAD DUP3 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE SWAP5 MLOAD SWAP2 SWAP5 DUP9 SWAP5 PUSH32 0xBB4A26FA0ACE13EE4DA343896C20EAA44A618FB9071FDD8C2E2C960A4583189D SWAP5 PUSH2 0xB30 SWAP5 SWAP2 SWAP4 SWAP3 SWAP2 PUSH2 0x5CDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xB40 PUSH2 0x2609 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0xB87 JUMPI DUP1 MLOAD PUSH1 0x40 MLOAD DUP6 SWAP2 PUSH32 0xB463D19ECF455BE65365092CF8E1DB6934A0334CF8CD532DDF9964D01F36B5B2 SWAP2 PUSH2 0xB7E SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x20 ADD MLOAD SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB9E PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xC277F1AC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xC277F1AC SWAP1 PUSH2 0xBF2 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A26 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC1E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xC64 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x56B2 JUMP JUMPDEST POP POP SWAP4 POP POP POP SWAP2 POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0xCB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA7 SWAP1 PUSH2 0x5B12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD15 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA7 SWAP1 PUSH2 0x5B49 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 SWAP1 SSTORE MLOAD DUP7 SWAP3 DUP7 AND SWAP2 PUSH32 0xE8B9F7EE7A4480D45B60E98F7B2090DD82E2353B8557A6EE2DD2D5EE9196BAC2 SWAP2 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD78 PUSH2 0x1E39 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDB0 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDDC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE00 SWAP2 SWAP1 PUSH2 0x585A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE10 PUSH2 0x23F0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE4C JUMPI PUSH2 0xE4C PUSH2 0x9C2 PUSH1 0x0 DUP4 PUSH2 0x2413 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x5738EE3C8E8FE8B0B9C4C21B16FDCA42EC02E271237DFEABBF3B5AF1584D732B SWAP1 PUSH2 0xA42 SWAP1 DUP4 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST CALLER PUSH2 0xEFF PUSH2 0x548C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xF4C SWAP1 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF7E DUP3 PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x26EC JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0xF95 JUMPI PUSH2 0xF95 PUSH2 0x9C2 DUP6 DUP4 PUSH2 0x2702 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xFE3 SWAP1 DUP6 PUSH2 0x271F JUMP JUMPDEST PUSH2 0xFEB PUSH2 0x1E39 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9470B0BD DUP5 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1025 SWAP3 SWAP2 SWAP1 PUSH2 0x599B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x103F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1053 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x85082129D87B2FE11527CB1B3B7A520AEB5AA6913F88A3D8757FE40D1DB02FDD DUP6 PUSH1 0x40 MLOAD PUSH2 0x109D SWAP2 SWAP1 PUSH2 0x5A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP6 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH2 0x10FA PUSH2 0x548C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xE00 SWAP1 PUSH2 0x2646 JUMP JUMPDEST PUSH2 0x1119 PUSH2 0x27A0 JUMP JUMPDEST PUSH2 0x1122 DUP2 PUSH2 0x27E7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x112D PUSH2 0x548C JUMP JUMPDEST PUSH2 0x117B PUSH1 0x5 PUSH1 0x0 DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1140 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x118C PUSH2 0x54AC JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xC SLOAD DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 ADD SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x11DC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x120B PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST CALLER DUP2 PUSH2 0x12A2 JUMPI POP PUSH2 0x148E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12B1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12BC JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x12E0 JUMPI POP PUSH1 0x0 PUSH2 0x12D3 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12DE JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x12EB JUMPI POP PUSH2 0x148E JUMP JUMPDEST PUSH1 0x1 PUSH2 0x12FA PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1305 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x131A JUMPI PUSH2 0x131A DUP5 PUSH1 0x20 ADD CALLDATALOAD DUP3 DUP5 PUSH2 0x2918 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1329 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1334 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1349 JUMPI PUSH2 0x1349 DUP4 PUSH1 0x20 ADD CALLDATALOAD DUP3 DUP5 PUSH2 0x29B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP2 PUSH2 0x135B PUSH1 0x20 DUP9 ADD DUP9 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1366 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE DUP4 MSTORE SWAP1 DUP2 KECCAK256 SWAP3 POP SWAP1 PUSH1 0x5 SWAP1 DUP3 SWAP1 PUSH2 0x13B0 SWAP1 DUP9 ADD DUP9 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x13BB JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 SWAP1 POP PUSH2 0x13FE DUP3 DUP3 DUP7 PUSH2 0x2A4A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP7 ADD CALLDATALOAD SWAP1 DUP8 ADD DUP1 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 PUSH32 0x7D3AD1DCF03B9027064D1D9A474A69E0CECC31324C541D3EB9B5E6FA2F106C8D SWAP1 DUP9 SWAP1 PUSH2 0x1450 SWAP1 DUP13 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x145B JUMPI INVALID JUMPDEST PUSH2 0x1468 PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x5802 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1473 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1482 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5D44 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x149D DUP2 PUSH2 0x2B37 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0x14D5 DUP5 DUP3 DUP6 PUSH2 0x2B70 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH4 0xFFFFFFFF DUP8 AND MUL OR SWAP1 SSTORE MLOAD DUP5 SWAP1 PUSH32 0x8EA2A7A959BD25F226B7B0A4393613F7FDCAA8404E8BAD96AA52DC1C14590167 SWAP1 PUSH2 0x109D SWAP1 DUP5 SWAP1 DUP8 SWAP1 PUSH2 0x5D6E JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x14 SLOAD SWAP3 SWAP4 PUSH4 0xFFFFFFFF SWAP3 DUP4 AND SWAP4 SWAP2 SWAP3 DUP3 DUP2 AND SWAP3 PUSH5 0x100000000 SWAP1 DIV AND SWAP1 JUMP JUMPDEST PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1593 PUSH2 0x27A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x15CC JUMPI PUSH2 0x15CC PUSH2 0x9C2 DUP3 PUSH2 0x2BB8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x163C JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x15FD JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1634 JUMPI PUSH2 0x162F DUP3 DUP3 PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x163C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x15CF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1688 PUSH2 0x27A0 JUMP JUMPDEST PUSH2 0x163C DUP3 DUP3 PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x169A PUSH2 0x23F0 JUMP JUMPDEST PUSH2 0x16A7 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2ED2 JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC6F3A427 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1701 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1735 JUMPI PUSH2 0x1735 PUSH2 0x9C2 CALLER PUSH2 0x2F95 JUMP JUMPDEST PUSH2 0x173E DUP2 PUSH2 0x2FB0 JUMP JUMPDEST CALLVALUE PUSH2 0x180F JUMPI PUSH2 0x174B PUSH2 0x10DA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP4 ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1787 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x596A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17D9 SWAP2 SWAP1 PUSH2 0x5757 JUMP JUMPDEST PUSH2 0x180F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA7 SWAP1 PUSH2 0x5BEE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x1840 JUMPI POP PUSH2 0x148E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184B DUP3 PUSH2 0x10F2 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x13 SLOAD DUP2 LT ISZERO PUSH2 0x1870 JUMPI POP POP PUSH2 0x148E JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x16 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP2 SLOAD DUP1 PUSH2 0x1913 JUMPI PUSH1 0x0 DUP1 PUSH2 0x18A8 DUP9 DUP9 PUSH2 0x2FD1 JUMP JUMPDEST PUSH1 0x2 DUP8 ADD DUP3 SWAP1 SSTORE PUSH1 0x1 DUP8 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP7 ADD SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x18CA SWAP1 DUP3 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE PUSH1 0x1 DUP1 DUP6 ADD SLOAD PUSH2 0x18DE SWAP2 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SSTORE PUSH1 0x40 MLOAD DUP9 SWAP1 DUP8 SWAP1 PUSH32 0x14B098103235344975B17508C2391721CC9AC3F3FA2B56C7FF46F8480DFD074F SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMPDEST PUSH2 0x191D DUP2 DUP9 PUSH2 0x3051 JUMP JUMPDEST DUP4 SSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0x192E SWAP1 DUP9 PUSH2 0x3051 JUMP JUMPDEST DUP3 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH2 0x1950 PUSH2 0x1E39 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x15CC36F2 DUP3 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198A SWAP3 SWAP2 SWAP1 PUSH2 0x599B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1A0A SWAP1 DUP4 PUSH2 0x306D JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xEBEDB8B3C678666E7F36970BC8F57ABF6D8FA2E828C0DA91EA5B75BF68ED101A DUP4 PUSH1 0x40 MLOAD PUSH2 0x1A50 SWAP2 SWAP1 PUSH2 0x5A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A7B PUSH1 0x11 SLOAD PUSH1 0xD SLOAD PUSH2 0x3051 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1122 DUP2 CALLER PUSH2 0x30D1 JUMP JUMPDEST PUSH20 0xDE6445484A8DCD9BF35FC95EB4E3990CC358822E SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AC1 PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP3 AND SWAP1 DUP3 ADD MSTORE SWAP1 DUP1 PUSH2 0x1B35 DUP6 PUSH2 0x32A9 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1B48 DUP4 PUSH1 0x20 ADD MLOAD DUP4 DUP4 PUSH2 0x32BF JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1B5F PUSH2 0x1A8A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB72E717D DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B97 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1C09 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x5872 JUMP JUMPDEST POP SWAP5 POP POP POP POP SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x1C4C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA7 SWAP1 PUSH2 0x5B80 JUMP JUMPDEST DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND CALLER EQ PUSH2 0x1C6F JUMPI POP CALLER JUMPDEST PUSH3 0xAAE60 PUSH2 0x1C7C DUP6 PUSH2 0x32FA JUMP JUMPDEST DUP5 PUSH1 0x0 SHL SWAP6 POP PUSH2 0x1C90 DUP7 PUSH3 0xF4240 DUP4 PUSH2 0x2B70 JUMP JUMPDEST PUSH2 0x1C98 PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP3 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP8 DUP5 AND DUP6 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0xA SWAP1 SWAP3 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SLOAD SWAP4 MLOAD SWAP1 SWAP5 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP7 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP5 DUP6 AND OR SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 SSTORE MLOAD PUSH1 0x1 SWAP1 SWAP3 ADD DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE SWAP1 MLOAD PUSH32 0xCEC6FC86EA644053F6EDFF1160DFE3FA5C61E7A5EF9F873F145BB03A0BD319E7 SWAP1 PUSH2 0x1D9B SWAP1 DUP10 SWAP1 DUP8 SWAP1 DUP7 SWAP1 PUSH2 0x5A2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1DAD DUP8 DUP10 PUSH2 0xB93 JUMP JUMPDEST POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1E2F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E04 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH20 0xBA7F8B5FB1B19C1211C5D49550FCD149177A5EAF SWAP1 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1E65 PUSH2 0x23F0 JUMP JUMPDEST PUSH2 0x1E6D PUSH2 0x3332 JUMP JUMPDEST PUSH2 0x1E75 PUSH2 0x3345 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E7F PUSH2 0x548C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x1EB2 PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1EC2 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xE03 JUMPI PUSH1 0x0 PUSH2 0x1ED2 PUSH2 0x1E39 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6B6DF5AA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F2B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F4F SWAP2 SWAP1 PUSH2 0x585A JUMP JUMPDEST SWAP1 POP PUSH2 0x1F7E PUSH2 0x1F79 DUP4 PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x24BD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3370 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1FA8 SWAP2 PUSH2 0x1F79 SWAP2 DUP5 SWAP2 AND PUSH2 0x24BD JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FDF PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP3 AND SWAP1 DUP3 ADD MSTORE SWAP1 DUP1 PUSH2 0x2053 DUP7 PUSH2 0x32A9 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2068 DUP5 PUSH1 0x20 ADD MLOAD DUP5 DUP5 PUSH2 0x32BF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2077 DUP8 DUP8 DUP4 DUP6 PUSH2 0x3394 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0x4FBB350052BCA5417566F188EB2EBCE5B19BC964 SWAP1 JUMP JUMPDEST PUSH2 0x20BE PUSH2 0x548C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x117B SWAP1 PUSH2 0x2646 JUMP JUMPDEST PUSH2 0x20FF PUSH2 0x27A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x212A JUMPI PUSH2 0x2125 PUSH2 0x9C2 PUSH2 0x34D5 JUMP JUMPDEST PUSH2 0x1122 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 CALLER SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x21A3 CALLER PUSH2 0x350C JUMP JUMPDEST ISZERO PUSH2 0x21E1 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 PUSH2 0x21F1 DUP3 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST SWAP1 POP PUSH2 0x21FB PUSH2 0x545D JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x2250 JUMPI POP POP POP PUSH2 0x1122 JUMP JUMPDEST PUSH2 0x2258 PUSH2 0x54AC JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x22A6 JUMPI POP POP POP POP PUSH2 0x1122 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 ADD DUP2 SWAP1 SSTORE PUSH2 0x22D9 DUP3 DUP5 PUSH2 0x3512 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x22ED DUP9 DUP5 DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x37DF JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP8 DUP8 PUSH32 0xF1116B309178AA62DCB6BF8C3B8BC2321724907C7EBF52192D14C8CE3AA9194C DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x2324 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 PUSH2 0x2338 DUP4 DUP4 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x234A SWAP1 DUP3 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x80 DUP8 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP7 ADD MLOAD PUSH2 0x2377 SWAP1 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP9 ADD DUP3 DUP2 MSTORE PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x16 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH2 0x1701 JUMPI PUSH1 0x80 DUP7 ADD MLOAD DUP7 MLOAD DUP9 SWAP2 PUSH32 0xB463D19ECF455BE65365092CF8E1DB6934A0334CF8CD532DDF9964D01F36B5B2 SWAP2 PUSH2 0x23CF SWAP1 DUP3 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23DD SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1E75 JUMPI PUSH2 0x1E75 PUSH2 0x9C2 CALLER PUSH2 0x3942 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xB9588E43 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5AE0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x24D6 JUMPI PUSH2 0x24D6 PUSH2 0x9C2 PUSH1 0x2 DUP6 DUP6 PUSH2 0x395D JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x614B800A PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST SELFBALANCE DUP1 ISZERO PUSH2 0x1122 JUMPI PUSH2 0x2508 PUSH2 0x10DA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x254F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2563 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A7B PUSH1 0x17 SLOAD PUSH2 0x257B PUSH2 0x10DA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25B3 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x25DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2603 SWAP2 SWAP1 PUSH2 0x585A JUMP JUMPDEST SWAP1 PUSH2 0x24BD JUMP JUMPDEST TIMESTAMP PUSH1 0x0 PUSH2 0x2614 PUSH2 0x1A62 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x262B JUMPI PUSH2 0x262B PUSH2 0x9C2 DUP3 DUP5 PUSH2 0x3A02 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH2 0x263C SWAP1 PUSH1 0x1 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0xC SSTORE POP POP PUSH1 0xD SSTORE JUMP JUMPDEST PUSH2 0x264E PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP1 DUP4 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH9 0x10000000000000000 DUP4 DIV DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xC SLOAD SWAP1 SWAP2 DUP2 GT ISZERO PUSH2 0x26E6 JUMPI PUSH2 0x26C1 DUP2 PUSH2 0x3A1F JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x26FB JUMPI DUP2 PUSH2 0x117B JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x84C8B7C9 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH2 0x2727 PUSH2 0x548C JUMP JUMPDEST PUSH2 0x2730 DUP4 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH2 0x275A PUSH2 0x1F79 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x24BD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2783 SWAP2 PUSH2 0x1F79 SWAP2 AND DUP5 PUSH2 0x24BD JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x148E DUP4 DUP3 PUSH2 0x3A3F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1E75 JUMPI PUSH1 0x0 SLOAD PUSH2 0x1E75 SWAP1 PUSH2 0x9C2 SWAP1 CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3AF9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x280D JUMPI PUSH2 0x280D PUSH2 0x9C2 PUSH2 0x3B16 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2847 JUMPI PUSH2 0x2847 PUSH2 0x9C2 DUP3 PUSH2 0x3B4D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 DUP4 ADD DUP2 SSTORE DUP4 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD CALLER SWAP3 SWAP2 PUSH32 0x3147867C59D17E8FA9D522465651D44AAE0A9E38F902F3475B97E58072F0ED4C SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x2921 DUP4 PUSH2 0x3B68 JUMP JUMPDEST PUSH2 0x292B DUP4 DUP4 PUSH2 0x30D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x2965 SWAP1 DUP3 PUSH2 0x3B9F JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x297D SWAP1 DUP3 PUSH2 0x3B9F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x148E PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 DUP3 PUSH2 0x3B9F JUMP JUMPDEST PUSH2 0x29BA DUP4 PUSH2 0x3B68 JUMP JUMPDEST PUSH2 0x29C4 DUP4 DUP4 PUSH2 0x30D1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x29FE SWAP1 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2A16 SWAP1 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x148E PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 DUP3 PUSH2 0x3BF7 JUMP JUMPDEST PUSH2 0x2A54 DUP4 DUP4 PUSH2 0x3C32 JUMP JUMPDEST ISZERO PUSH2 0x2A5E JUMPI PUSH2 0x148E JUMP JUMPDEST PUSH2 0x2A66 PUSH2 0x548C JUMP JUMPDEST PUSH2 0x2A6F DUP5 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A79 PUSH2 0x548C JUMP JUMPDEST PUSH2 0x2A82 DUP5 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 GT ISZERO PUSH2 0x2ABD JUMPI PUSH2 0x2ABD PUSH2 0x9C2 DUP5 DUP5 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2702 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2ADE SWAP1 PUSH2 0x1F79 SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x24BD JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 ADD MLOAD PUSH2 0x2B09 SWAP2 PUSH2 0x1F79 SWAP2 AND DUP6 PUSH2 0x3051 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x2B26 DUP6 DUP4 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x2B30 DUP5 DUP3 PUSH2 0x3A3F JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0x163C JUMPI PUSH2 0x163C PUSH2 0x9C2 CALLER DUP5 PUSH2 0x3C39 JUMP JUMPDEST PUSH3 0xF4240 PUSH4 0xFFFFFFFF DUP3 AND GT ISZERO PUSH2 0x2B95 JUMPI PUSH2 0x2B90 PUSH2 0x9C2 PUSH1 0x0 DUP6 DUP5 PUSH2 0x3C56 JUMP JUMPDEST PUSH2 0x148E JUMP JUMPDEST DUP2 PUSH4 0xFFFFFFFF AND DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x148E JUMPI PUSH2 0x148E PUSH2 0x9C2 PUSH1 0x1 DUP6 DUP5 PUSH2 0x3C56 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xEB5108A2 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD3 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2C90 JUMPI PUSH2 0x2C90 PUSH2 0x9C2 DUP4 PUSH2 0x2BB8 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 LT PUSH2 0x2CAB JUMPI PUSH2 0x2CAB PUSH2 0x9C2 DUP3 PUSH1 0x2 DUP1 SLOAD SWAP1 POP PUSH2 0x3C75 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2CCF JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2D31 JUMPI PUSH2 0x2D31 PUSH2 0x9C2 PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x2D09 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x3C92 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x2DAC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x2DDF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 DUP1 SLOAD DUP1 PUSH2 0x2E32 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE SWAP1 SWAP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP2 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x11 DUP6 SWAP1 SSTORE PUSH1 0x12 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP8 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x13 DUP6 SWAP1 SSTORE PUSH1 0x14 DUP1 SLOAD DUP5 DUP5 AND PUSH5 0x100000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFF SWAP5 DUP8 AND SWAP2 SWAP1 SWAP4 AND OR SWAP3 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x613157DBB0E920DEAB8AD6DDD3805E87CBF57344B9FE780F1764790EC7897542 SWAP1 PUSH2 0x2F86 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x5D19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xB56D2DF0 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD3 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST DUP1 CALLVALUE EQ ISZERO DUP1 ISZERO PUSH2 0x2FBF JUMPI POP CALLVALUE ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1122 JUMPI PUSH2 0x1122 PUSH2 0x9C2 DUP3 CALLVALUE PUSH2 0x3CAF JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x3004 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0x20B6 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x3022 DUP5 DUP3 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x12 SLOAD SWAP1 SWAP4 POP PUSH2 0x3047 SWAP1 PUSH2 0x3040 SWAP1 PUSH4 0xFFFFFFFF AND PUSH3 0xF4240 DUP7 PUSH2 0x3CCC JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3051 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x117B JUMPI PUSH2 0x117B PUSH2 0x9C2 PUSH1 0x0 DUP7 DUP7 PUSH2 0x395D JUMP JUMPDEST PUSH2 0x3075 PUSH2 0x548C JUMP JUMPDEST PUSH2 0x307E DUP4 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH2 0x30A8 PUSH2 0x1F79 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3051 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2783 SWAP2 PUSH2 0x1F79 SWAP2 AND DUP5 PUSH2 0x3051 JUMP JUMPDEST PUSH2 0x30DA DUP3 PUSH2 0x3CE2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30E9 DUP4 DUP4 PUSH1 0x0 DUP1 PUSH2 0x3394 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x3125 SWAP1 PUSH2 0x2646 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD SWAP6 SWAP1 SWAP4 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 SWAP1 SWAP3 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000FFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND MUL OR SWAP1 SWAP3 AND PUSH21 0x10000000000000000000000000000000000000000 SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 MUL OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x32A0 JUMPI PUSH2 0x320A DUP4 DUP3 PUSH2 0x3CEB JUMP JUMPDEST PUSH2 0x3212 PUSH2 0x10DA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x324C SWAP3 SWAP2 SWAP1 PUSH2 0x599B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x327A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x329E SWAP2 SWAP1 PUSH2 0x5757 JUMP JUMPDEST POP JUMPDEST PUSH2 0x148E DUP4 PUSH2 0x3D27 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x32B5 DUP4 PUSH2 0x3D34 JUMP JUMPDEST SWAP1 SWAP5 SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH2 0x32CF JUMPI DUP4 SWAP2 POP PUSH2 0x32F2 JUMP JUMPDEST PUSH2 0x32E3 PUSH4 0xFFFFFFFF DUP7 AND PUSH3 0xF4240 DUP7 PUSH2 0x3D40 JUMP JUMPDEST SWAP2 POP PUSH2 0x32EF DUP5 DUP4 PUSH2 0x24BD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x1122 JUMPI PUSH2 0x1122 PUSH2 0x9C2 DUP3 PUSH1 0x0 PUSH2 0x3D64 JUMP JUMPDEST PUSH2 0x333A PUSH2 0x3D81 JUMP JUMPDEST TIMESTAMP PUSH1 0xD SSTORE PUSH1 0x1 PUSH1 0xC SSTORE JUMP JUMPDEST PUSH2 0x334D PUSH2 0x3D96 JUMP JUMPDEST PUSH3 0x127500 PUSH3 0xDBBA0 PUSH9 0x56BC75E2D63100000 PUSH1 0x2 PUSH1 0x3 PUSH2 0x2B30 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2ED2 JUMP JUMPDEST DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE03 JUMPI PUSH2 0xE03 PUSH2 0x9C2 PUSH1 0x2 DUP5 PUSH2 0x3DFB JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH2 0x33A2 PUSH2 0x548C JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP1 DUP4 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH9 0x10000000000000000 DUP4 DIV DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV SWAP1 SWAP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 EQ ISZERO PUSH2 0x3443 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x34CD JUMP JUMPDEST PUSH2 0x344F DUP2 DUP4 DUP8 DUP8 PUSH2 0x3E18 JUMP JUMPDEST DUP2 MLOAD SWAP1 SWAP4 POP PUSH1 0x0 SWAP1 PUSH2 0x346C SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH2 0x3051 JUMP JUMPDEST SWAP1 POP PUSH2 0x34A4 PUSH2 0x349D DUP10 DUP5 PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x0 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x3E95 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x3051 JUMP JUMPDEST SWAP4 POP PUSH2 0x34C7 PUSH2 0x349D DUP10 DUP5 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP8 PUSH2 0x3E95 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xE69EDC3E00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x3520 JUMPI PUSH2 0x117E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x352A PUSH2 0x209E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7546172 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x356F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3583 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35A7 SWAP2 SWAP1 PUSH2 0x55F6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE70EADC0 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3605 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3629 SWAP2 SWAP1 PUSH2 0x55F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF36766C100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xF36766C1 SWAP1 PUSH2 0x367E SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A26 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36CE SWAP2 SWAP1 PUSH2 0x585A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xEF78D4FD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3718 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x372C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3750 SWAP2 SWAP1 PUSH2 0x585A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x375E PUSH1 0x1 PUSH2 0x10F2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 ADD MLOAD SWAP1 DUP9 ADD MLOAD PUSH1 0x60 DUP9 ADD MLOAD PUSH1 0x14 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND SWAP4 POP PUSH4 0x1E13380 DUP6 DUP6 MUL DIV SWAP3 PUSH2 0x37AF SWAP3 DUP5 SWAP3 DUP9 SWAP3 DUP5 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH5 0x100000000 SWAP1 DIV AND PUSH2 0x3F2E JUMP JUMPDEST PUSH1 0x80 DUP9 ADD MLOAD DUP9 MLOAD SWAP2 SWAP8 POP PUSH1 0x0 SWAP2 PUSH2 0x37C5 SWAP2 PUSH2 0x24BD JUMP JUMPDEST SWAP1 POP DUP7 DUP2 LT ISZERO PUSH2 0x37D3 JUMPI DUP1 SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x37EA PUSH2 0x548C JUMP JUMPDEST POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP4 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x3861 SWAP1 DUP7 DUP7 PUSH2 0x32BF JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP DUP3 ISZERO PUSH2 0x391E JUMPI PUSH2 0x3874 PUSH2 0x10DA JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x38CA SWAP2 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x599B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x38E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x38F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x391C SWAP2 SWAP1 PUSH2 0x5757 JUMP JUMPDEST POP JUMPDEST DUP2 ISZERO PUSH2 0x3939 JUMPI PUSH2 0x392E DUP7 DUP4 PUSH2 0x3FF0 JUMP JUMPDEST PUSH2 0x3939 DUP7 DUP4 DUP7 PUSH2 0x4025 JUMP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xB65A25B9 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD3 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x397C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A7F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA6BCDE47 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE03 JUMPI PUSH2 0xE03 PUSH2 0x9C2 PUSH1 0x1 DUP5 PUSH2 0x3DFB JUMP JUMPDEST DUP1 MLOAD DUP3 SLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x20 SWAP1 SWAP4 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH9 0x10000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000FFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP5 AND PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP3 SWAP1 SWAP3 AND OR AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH4 0x1DE45AD1 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5943 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0x57654FE400000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xDE16F1A0 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD3 SWAP2 SWAP1 PUSH2 0x5922 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1122 JUMPI PUSH2 0x1122 PUSH2 0x9C2 DUP3 PUSH1 0x0 PUSH2 0x3D64 JUMP JUMPDEST PUSH2 0x3BA7 PUSH2 0x548C JUMP JUMPDEST PUSH2 0x3BB0 DUP4 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH2 0x3BDA PUSH2 0x1F79 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x24BD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x148E DUP4 DUP3 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x3BFF PUSH2 0x548C JUMP JUMPDEST PUSH2 0x3C08 DUP4 PUSH2 0x2646 JUMP JUMPDEST SWAP1 POP PUSH2 0x3BDA PUSH2 0x1F79 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3051 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST EQ PUSH1 0x1 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x82DED785 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x599B JUMP JUMPDEST PUSH1 0x60 PUSH4 0x22DF9597 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x397C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5AB9 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE9F83771 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x140A84DB PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5943 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x31D7A505 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34CD DUP4 PUSH2 0x3CDC DUP7 DUP6 PUSH2 0x410E JUMP JUMPDEST SWAP1 PUSH2 0x413F JUMP JUMPDEST PUSH2 0x1122 DUP2 PUSH2 0x4169 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3D04 SWAP1 DUP3 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x17 SLOAD PUSH2 0x3D20 SWAP1 DUP3 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x17 SSTORE POP POP JUMP JUMPDEST PUSH2 0x1122 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH2 0x4025 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x32B5 DUP4 PUSH2 0x4172 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34CD DUP4 PUSH2 0x3CDC PUSH2 0x3D54 DUP3 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST PUSH2 0x3D5E DUP9 DUP8 PUSH2 0x410E JUMP JUMPDEST SWAP1 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x9AE94F01 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A61 JUMP JUMPDEST PUSH1 0xD SLOAD ISZERO PUSH2 0x1E75 JUMPI PUSH2 0x1E75 PUSH2 0x9C2 PUSH1 0x0 PUSH2 0x422F JUMP JUMPDEST PUSH1 0x11 SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3DAE JUMPI POP PUSH1 0x12 SLOAD PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3DBB JUMPI POP PUSH1 0x13 SLOAD ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3DCE JUMPI POP PUSH1 0x14 SLOAD PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3DE9 JUMPI POP PUSH1 0x14 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1E75 JUMPI PUSH2 0x1E75 PUSH2 0x9C2 PUSH1 0x1 PUSH2 0x422F JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5AA1 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x3E25 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x3E32 JUMPI POP PUSH1 0x0 PUSH2 0x34CD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E3F DUP6 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST DUP7 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x3E5B JUMPI DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x3E61 JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH2 0x3E80 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x34CD JUMP JUMPDEST PUSH2 0x3E8B DUP5 DUP5 DUP4 PUSH2 0x3CCC JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x3EA3 JUMPI POP DUP2 DUP4 EQ JUMPDEST ISZERO PUSH2 0x3EB0 JUMPI POP PUSH1 0x0 PUSH2 0x34CD JUMP JUMPDEST DUP2 DUP4 LT PUSH2 0x3EE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCA7 SWAP1 PUSH2 0x5BB7 JUMP JUMPDEST PUSH2 0x3EF1 PUSH2 0x54CD JUMP JUMPDEST PUSH2 0x3EFB DUP7 DUP6 PUSH2 0x426E JUMP JUMPDEST SWAP1 POP PUSH2 0x3F05 PUSH2 0x54CD JUMP JUMPDEST PUSH2 0x3F0F DUP8 DUP6 PUSH2 0x426E JUMP JUMPDEST SWAP1 POP PUSH2 0x2077 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP11 PUSH2 0x4385 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3F3B DUP9 DUP9 PUSH2 0x43F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3F49 DUP8 DUP8 PUSH2 0x43F3 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x3F56 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x3F66 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x3F7F JUMPI PUSH2 0x3F7A DUP3 DUP5 PUSH2 0x4445 JUMP JUMPDEST PUSH2 0x3F89 JUMP JUMPDEST PUSH2 0x3F89 DUP4 DUP4 PUSH2 0x4445 JUMP JUMPDEST SWAP1 POP PUSH2 0x3FB2 PUSH2 0x3FAD PUSH2 0x3F9A DUP4 PUSH2 0x4464 JUMP JUMPDEST DUP9 PUSH4 0xFFFFFFFF AND DUP9 PUSH4 0xFFFFFFFF AND PUSH2 0x4B06 JUMP JUMPDEST PUSH2 0x4B15 JUMP JUMPDEST SWAP1 POP DUP2 DUP4 SGT ISZERO PUSH2 0x3FCB JUMPI PUSH2 0x3FC6 DUP3 DUP3 PUSH2 0x4445 JUMP JUMPDEST PUSH2 0x3FD5 JUMP JUMPDEST PUSH2 0x3FD5 DUP3 DUP3 PUSH2 0x50FF JUMP JUMPDEST SWAP1 POP PUSH2 0x3FE1 DUP2 DUP13 PUSH2 0x512B JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4009 SWAP1 DUP3 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x17 SLOAD PUSH2 0x3D20 SWAP1 DUP3 PUSH2 0x3051 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xC SLOAD DUP1 DUP3 EQ ISZERO PUSH2 0x4046 JUMPI POP POP PUSH2 0x148E JUMP JUMPDEST PUSH2 0x404E PUSH2 0x54CD JUMP JUMPDEST POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x4085 PUSH2 0x54CD JUMP JUMPDEST PUSH2 0x408E DUP3 PUSH2 0x516D JUMP JUMPDEST ISZERO PUSH2 0x40C7 JUMPI PUSH2 0x40A7 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP9 DUP9 PUSH2 0x5176 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP2 DUP4 MSTORE PUSH2 0x40BB SWAP2 SWAP1 PUSH2 0x51C6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE PUSH2 0x40D2 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP6 DUP2 MSTORE JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP4 DUP3 ADD MLOAD PUSH1 0x1 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP8 DUP2 MSTORE PUSH1 0xF SWAP1 SWAP8 MSTORE SWAP1 SWAP6 KECCAK256 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x411D JUMPI POP PUSH1 0x0 PUSH2 0x117E JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x412A JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x117B JUMPI PUSH2 0x117B PUSH2 0x9C2 PUSH1 0x1 DUP7 DUP7 PUSH2 0x395D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x4155 JUMPI PUSH2 0x4155 PUSH2 0x9C2 PUSH1 0x3 DUP6 DUP6 PUSH2 0x395D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x4160 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1122 DUP2 PUSH2 0x51EF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x418D PUSH1 0x1 PUSH1 0xC SLOAD PUSH2 0x24BD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x4197 PUSH2 0x54AC JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP5 MSTORE DUP3 SLOAD DUP3 MSTORE PUSH1 0x1 DUP1 DUP5 ADD SLOAD DUP4 DUP8 ADD MSTORE PUSH1 0x2 SWAP4 DUP5 ADD SLOAD DUP4 DUP7 ADD MSTORE DUP8 DUP8 MSTORE PUSH1 0x16 DUP7 MSTORE SWAP6 DUP5 SWAP1 KECCAK256 DUP5 MLOAD PUSH1 0xA0 DUP2 ADD DUP7 MSTORE DUP2 SLOAD DUP2 MSTORE SWAP7 DUP2 ADD SLOAD SWAP6 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP2 DUP5 ADD SLOAD SWAP3 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP4 ADD SLOAD SWAP1 DUP5 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP1 PUSH2 0x421F SWAP1 DUP3 SWAP1 PUSH2 0x3512 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xB02D77300000000000000000000000000000000000000000000000000000000 DUP3 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x425E JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD3 SWAP2 SWAP1 PUSH2 0x5D85 JUMP JUMPDEST PUSH2 0x4276 PUSH2 0x54CD JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x42AE DUP2 PUSH2 0x516D JUMP JUMPDEST ISZERO PUSH2 0x42B8 JUMPI PUSH2 0x117E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42C5 DUP4 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP3 POP SWAP1 POP PUSH2 0x4300 DUP3 PUSH2 0x516D JUMP JUMPDEST ISZERO PUSH2 0x430B JUMPI POP PUSH2 0x117E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 DUP2 LT ISZERO PUSH2 0x4367 JUMPI PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP3 POP PUSH2 0x435B DUP4 PUSH2 0x516D JUMP JUMPDEST ISZERO PUSH2 0x4367 JUMPI POP POP PUSH2 0x117E JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x4394 JUMPI POP PUSH1 0x0 PUSH2 0x43EA JUMP JUMPDEST DUP4 PUSH2 0x43AE JUMPI PUSH2 0x43A7 DUP6 PUSH2 0x3CDC DUP5 DUP10 PUSH2 0x410E JUMP JUMPDEST SWAP1 POP PUSH2 0x43EA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43C7 PUSH2 0x43BD DUP7 DUP9 PUSH2 0x410E JUMP JUMPDEST PUSH2 0x2603 DUP10 DUP8 PUSH2 0x410E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x43D5 DUP3 DUP7 PUSH2 0x413F JUMP JUMPDEST SWAP1 POP PUSH2 0x43E5 DUP8 PUSH2 0x3CDC DUP7 DUP5 PUSH2 0x410E JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x440B JUMPI PUSH2 0x440B PUSH2 0x9C2 PUSH1 0x1 DUP6 PUSH2 0x525D JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x4422 JUMPI PUSH2 0x4422 PUSH2 0x9C2 PUSH1 0x1 DUP5 PUSH2 0x525D JUMP JUMPDEST PUSH2 0x117B PUSH2 0x443F DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x529E JUMP JUMPDEST DUP4 PUSH2 0x52F1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117B PUSH2 0x443F DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x529E JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 DUP3 SGT ISZERO PUSH2 0x448C JUMPI PUSH2 0x448C PUSH2 0x9C2 PUSH1 0x1 DUP5 PUSH2 0x5372 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x44A2 JUMPI PUSH2 0x44A2 PUSH2 0x9C2 PUSH1 0x0 DUP5 PUSH2 0x5372 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP3 EQ ISZERO PUSH2 0x44C2 JUMPI POP PUSH1 0x0 PUSH2 0xE03 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x44F5 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x4554 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x45B2 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH15 0xAFE10820813D78000000000000000 DUP6 SGT PUSH2 0x4614 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH15 0xAFE10820813D78000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2582AB704279EC00000000000000000 DUP6 SGT PUSH2 0x4678 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2582AB704279EC00000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x1152AAA3BF81CC000000000000000000 DUP6 SGT PUSH2 0x46DC JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x1152AAA3BF81CC000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x2F16AC6C59DE70000000000000000000 DUP6 SGT PUSH2 0x4740 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x2F16AC6C59DE70000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x4DA2CBF1BE5828000000000000000000 DUP6 SGT PUSH2 0x47A4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x4DA2CBF1BE5828000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x63AFBE7AB2082C000000000000000000 DUP6 SGT PUSH2 0x4808 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x63AFBE7AB2082C000000000000000000 PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x486C JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000 SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH16 0x80000000000000000000000000000000 DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000000000000000000000000000 DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP1 MUL SDIV SWAP1 POP PUSH17 0x100000000000000000000000000000000 DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x48E2 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x200000000000000000000000000000000 DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x4913 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x4933 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x300000000000000000000000000000000 DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x4964 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x4984 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x400000000000000000000000000000000 DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x49B5 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x49D5 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x500000000000000000000000000000000 DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x4A06 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x4A26 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x600000000000000000000000000000000 DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x4A57 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x4A77 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x700000000000000000000000000000000 DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x4AA8 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH16 0x80000000000000000000000000000000 DUP2 DUP4 MUL DUP2 PUSH2 0x4AC8 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH17 0x800000000000000000000000000000000 DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x4AF9 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34CD PUSH2 0x443F DUP6 DUP6 PUSH2 0x529E JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE010000000000000000000000000000000 DUP3 SLT ISZERO PUSH2 0x4B47 JUMPI POP PUSH1 0x0 PUSH2 0xE03 JUMP JUMPDEST DUP2 PUSH2 0x4B63 JUMPI POP PUSH16 0x80000000000000000000000000000000 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x4B7A JUMPI PUSH2 0x4B7A PUSH2 0x9C2 PUSH1 0x1 DUP5 PUSH2 0x5372 JUMP JUMPDEST PUSH16 0x80000000000000000000000000000000 PUSH16 0x10000000000000000000000000000000 DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4BE6 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4C13 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4C3F JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4C6B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4C97 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4CC2 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4CED JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4D17 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4D41 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4D6B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4D94 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4DBD JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4DE5 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4E0D JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4E34 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4E5B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH16 0x80000000000000000000000000000000 DUP3 DUP3 MUL DUP2 PUSH2 0x4E81 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH16 0x80000000000000000000000000000000 ADD SWAP3 SWAP1 POP PUSH17 0x1000000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x4EF0 JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x800000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x4F32 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x400000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x4F74 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x200000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x4FB6 JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH17 0x100000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x4FF8 JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x80000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x5038 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x40000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x5078 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x20000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x50B8 JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH16 0x10000000000000000000000000000000 DUP5 AND ISZERO PUSH2 0x50F8 JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0x80000000000000000000000000000000 PUSH2 0x511C DUP5 DUP5 PUSH2 0x529E JUMP JUMPDEST DUP2 PUSH2 0x5123 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x5143 JUMPI PUSH2 0x5143 PUSH2 0x9C2 PUSH1 0x1 DUP5 PUSH2 0x525D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x514F DUP5 DUP5 PUSH2 0x529E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x5163 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x117E JUMP JUMPDEST PUSH1 0x7F SHR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 ADD MLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH2 0x5188 JUMPI POP DUP3 SWAP1 POP DUP2 PUSH2 0x51BD JUMP JUMPDEST DUP4 PUSH2 0x5197 JUMPI POP DUP5 SWAP1 POP DUP4 PUSH2 0x51BD JUMP JUMPDEST PUSH2 0x51AE PUSH2 0x51A4 DUP6 DUP8 PUSH2 0x410E JUMP JUMPDEST PUSH2 0x3D5E DUP9 DUP7 PUSH2 0x410E JUMP JUMPDEST SWAP2 POP PUSH2 0x51BA DUP6 DUP5 PUSH2 0x410E JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x51E4 DUP5 DUP5 PUSH16 0x80000000000000000000000000000000 PUSH2 0x53A1 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH2 0x5200 SWAP1 PUSH1 0x1 PUSH2 0x24BD JUMP JUMPDEST SWAP1 POP PUSH2 0x520A PUSH2 0x54AC JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x148E JUMPI PUSH2 0x148E PUSH2 0x9C2 DUP5 DUP5 PUSH2 0x53FD JUMP JUMPDEST PUSH1 0x60 PUSH32 0xBD79545F00000000000000000000000000000000000000000000000000000000 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x528C JUMPI INVALID JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5D93 JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x52AB JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x52B8 JUMPI POP PUSH1 0x0 PUSH2 0x117E JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x52C6 JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x52DD JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x52D9 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x117E JUMPI PUSH2 0x117E PUSH2 0x9C2 PUSH1 0x1 DUP6 DUP6 PUSH2 0x541A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x5307 JUMPI PUSH2 0x5307 PUSH2 0x9C2 PUSH1 0x2 DUP6 DUP6 PUSH2 0x541A JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP4 EQ DUP1 ISZERO PUSH2 0x5355 JUMPI POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF EQ JUMPDEST ISZERO PUSH2 0x5369 JUMPI PUSH2 0x5369 PUSH2 0x9C2 PUSH1 0x3 DUP6 DUP6 PUSH2 0x541A JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x5123 JUMPI INVALID JUMPDEST PUSH1 0x60 PUSH32 0xED2F26A100000000000000000000000000000000000000000000000000000000 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x528C JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP6 GT DUP1 PUSH2 0x53B1 JUMPI POP DUP3 DUP5 GT JUMPDEST ISZERO PUSH2 0x53F4 JUMPI PUSH1 0x0 DUP5 DUP7 LT ISZERO PUSH2 0x53C6 JUMPI DUP5 PUSH2 0x53C8 JUMP JUMPDEST DUP6 JUMPDEST SWAP1 POP PUSH2 0x53D4 DUP2 DUP6 PUSH2 0x413F JUMP JUMPDEST SWAP1 POP PUSH2 0x53E0 DUP7 DUP3 PUSH2 0x413F JUMP JUMPDEST SWAP3 POP PUSH2 0x53EC DUP6 DUP3 PUSH2 0x413F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x32F2 JUMP JUMPDEST POP SWAP3 SWAP4 SWAP2 SWAP3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x5CAA0B05 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2430 SWAP3 SWAP2 SWAP1 PUSH2 0x5A71 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x8C12DFE700000000000000000000000000000000000000000000000000000000 DUP5 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x5449 JUMPI INVALID JUMPDEST DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x397C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5DA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0x117E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5506 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x551D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND DUP4 ADD ADD DUP3 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x555C JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP DUP2 SWAP5 POP DUP4 DUP3 MSTORE DUP7 DUP2 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x5578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x559A JUMPI DUP6 DUP4 ADD DUP2 ADD MLOAD DUP3 DUP5 ADD DUP3 ADD MSTORE SWAP2 DUP3 ADD SWAP2 PUSH2 0x557D JUMP JUMPDEST DUP4 DUP4 GT ISZERO PUSH2 0x55AB JUMPI PUSH1 0x0 DUP2 DUP6 DUP5 ADD ADD MSTORE JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x117E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x55EB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x117B DUP2 PUSH2 0x5DCB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5607 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x117B DUP2 PUSH2 0x5DCB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5626 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x5631 DUP2 PUSH2 0x5DCB JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x5641 DUP2 PUSH2 0x5DCB JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5664 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x566F DUP2 PUSH2 0x5DCB JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x568F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x569A DUP2 PUSH2 0x5DCB JUMP JUMPDEST SWAP2 POP PUSH2 0x56A9 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x54E7 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x56CA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 MLOAD PUSH2 0x56D5 DUP2 PUSH2 0x5DCB JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MLOAD SWAP1 SWAP7 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x56F2 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x56FE DUP11 DUP4 DUP12 ADD PUSH2 0x54F6 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5713 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x5720 DUP10 DUP3 DUP11 ADD PUSH2 0x54F6 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD MLOAD SWAP3 POP PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x5738 DUP2 PUSH2 0x5DCB JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x5749 DUP2 PUSH2 0x5DCB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5768 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x117B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5788 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x57A1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x57B3 DUP2 PUSH2 0x5DCB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x57D0 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x57F1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x56A9 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x55C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5813 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x117B DUP4 DUP4 PUSH2 0x54E7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5831 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x583B DUP6 DUP6 PUSH2 0x55B5 JUMP JUMPDEST SWAP3 POP PUSH2 0x584A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x55B5 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x586B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x588A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 MLOAD SWAP6 POP PUSH1 0x20 DUP8 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x58A8 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x58B4 DUP11 DUP4 DUP12 ADD PUSH2 0x54F6 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5713 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x58E0 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x58F1 DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x55C6 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH2 0x5907 DUP8 PUSH1 0x60 DUP9 ADD PUSH2 0x55C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x5916 DUP8 PUSH1 0x80 DUP9 ADD PUSH2 0x55C6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5A0F JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x59DD JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x5A8D JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x3 DUP5 LT PUSH2 0x5AAF JUMPI INVALID JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x5AC6 DUP6 PUSH2 0x5DC1 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x5AED DUP5 PUSH2 0x5DC1 JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F4E5F524547495354455245445F504F4F4C5F49445F4552524F5200000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x504F4F4C5F544F5F4A4F494E5F4E4F545F53454C465F4552524F520000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F4E5F524547495354455245445F52425F504F4F4C5F4552524F5200000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x43525F494E54455256414C5F494E56414C494400000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x574554485F5452414E534645525F4641494C4544000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH4 0xFFFFFFFF SWAP4 DUP5 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 AND PUSH1 0x60 DUP5 ADD MSTORE AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0xFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x1122 JUMPI INVALID JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1122 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0xAD TIMESTAMP 0x2E GAS EXTCODEHASH GT 0x5F 0xD PUSH24 0x7BF6E3D6F294B07EE5C03D513ADEE88A48AB0E838216473 PUSH16 0x6C634300070100330000000000000000 ",
				"sourceMap": "877:1573:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1813:387:21;;;;;;;;;;-1:-1:-1;1813:387:21;;;;;:::i;:::-;;:::i;:::-;;1561:1653:30;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4678:837:27;;;;;;;;;;-1:-1:-1;4678:837:27;;;;;:::i;:::-;;:::i;2820:152:24:-;;;;;;;;;;-1:-1:-1;2820:152:24;;;;;:::i;:::-;;:::i;1319:379:21:-;;;;;;;;;;-1:-1:-1;1319:379:21;;;;;:::i;:::-;;:::i;3994:84:9:-;;;;;;;;;;-1:-1:-1;3994:84:9;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;1900:1176:23:-;;;;;;;;;;-1:-1:-1;1900:1176:23;;;;;:::i;:::-;;:::i;4317:75:9:-;;;;;;;;;;-1:-1:-1;4317:75:9;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;2687:188:8:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3684:245:24:-;;;;;;;;;;-1:-1:-1;3684:245:24;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1628:148:33:-;;;;;;;;;;-1:-1:-1;1628:148:33;;;;;:::i;:::-;;:::i;2345:334:24:-;;;;;;;;;;-1:-1:-1;2345:334:24;;;;;:::i;:::-;;:::i;4434:194:22:-;;;;;;;;;;-1:-1:-1;4434:194:22;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1423:28:33:-;;;;;;;;;;-1:-1:-1;1423:28:33;;;;;:::i;:::-;;:::i;5598:152:27:-;;;;;;;;;;-1:-1:-1;5598:152:27;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3144:42:9:-;;;;;;;;;;-1:-1:-1;3144:42:9;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2611:45::-;;;;;;;;;;;;;:::i;3413:1467:23:-;;;;;;;;;;-1:-1:-1;3413:1467:23;;;;;:::i;:::-;;:::i;3836:629:27:-;;;;;;;;;;-1:-1:-1;3836:629:27;;;;;:::i;:::-;;:::i;2742:619:31:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;3264:37:9:-;;;;;;;;;;;;;:::i;1890:462:33:-;;;;;;;;;;-1:-1:-1;1890:462:33;;;;;:::i;:::-;;:::i;2540:27:9:-;;;;;;;;;;;;;:::i;2141:57::-;;;;;;;;;;-1:-1:-1;2141:57:9;;;;;:::i;:::-;;:::i;3582:39::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;870:20:46:-;;;;;;;;;;;;;:::i;2525:212:33:-;;;;;;;;;;-1:-1:-1;2525:212:33;;;;;:::i;:::-;;:::i;1554:675:31:-;;;;;;;;;;-1:-1:-1;1554:675:31;;;;;:::i;:::-;;:::i;3496:31:9:-;;;;;;;;;;;;;:::i;1593:2693:22:-;;;;;;:::i;:::-;;:::i;1947:25:9:-;;;;;;;;;;;;;:::i;1161:467:23:-;;;;;;;;;;-1:-1:-1;1161:467:23;;;;;:::i;:::-;;:::i;4488:41:9:-;;;;;;;;;;;;;:::i;1271:195:32:-;;;;;;;;;;;;;:::i;1178:140:28:-;;;;;;;;;;-1:-1:-1;1178:140:28;;;;;:::i;:::-;;:::i;3429:208:8:-;;;;;;;;;;;;;:::i;1216:43:33:-;;;;;;;;;;-1:-1:-1;1216:43:33;;;;;:::i;:::-;;:::i;1491:742:28:-;;;;;;;;;;-1:-1:-1;1491:742:28;;;;;:::i;:::-;;:::i;1709:1643:27:-;;;;;;;;;;-1:-1:-1;1709:1643:27;;;;;:::i;:::-;;:::i;2456:51:9:-;;;;;;;;;;-1:-1:-1;2456:51:9;;;;;:::i;:::-;;:::i;2834:155:33:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3056:173:8:-;;;;;;;;;;;;;:::i;3379:40:9:-;;;;;;;;;;;;;:::i;1168:257:5:-;;;;;;;;;;;;;:::i;1274:855:24:-;;;;;;;;;;-1:-1:-1;1274:855:24;;;;;:::i;:::-;;:::i;3678:41:9:-;;;;;;;;;;;;;:::i;2457:759:28:-;;;;;;;;;;-1:-1:-1;2457:759:28;;;;;:::i;:::-;;:::i;1125:30:9:-;;;;;;;;;;;;;:::i;3833:187:8:-;;;;;;;;;;;;;:::i;3198:276:24:-;;;;;;;;;;-1:-1:-1;3198:276:24;;;;;:::i;:::-;;:::i;1125:346:46:-;;;;;;;;;;-1:-1:-1;1125:346:46;;;;;:::i;:::-;;:::i;3662:2692:30:-;;;;;;;;;;-1:-1:-1;3662:2692:30;;;;;:::i;:::-;;:::i;1813:387:21:-;1003:27:33;:25;:27::i;:::-;1917:15:21::1;::::0;::::1;;::::0;;;:9:::1;:15;::::0;;;;;::::1;;1912:218;;1948:171;1970:148;2024:58;2100:4;1970:36;:148::i;:::-;1948:21;:171::i;:::-;2139:15;::::0;::::1;2157:5;2139:15:::0;;;:9:::1;:15;::::0;;;;;;:23;;;::::1;::::0;;2177:16;::::1;::::0;::::1;::::0;2149:4;;2177:16:::1;:::i;:::-;;;;;;;;1813:387:::0;:::o;1561:1653:30:-;1662:12;;1615:7;;;1704:24;1662:12;1726:1;1704:21;:24::i;:::-;1805:39;1847:33;;;:22;:33;;;;;:52;;;1684:44;;-1:-1:-1;1913:36:30;;1909:273;;1965:206;2004:153;2077:9;2108:31;2004:51;:153::i;1965:206::-;2284:10;:8;:10::i;:::-;2423:26;:24;:26::i;:::-;2366:37;;;;:22;:37;;;;;:83;2459:47;;:::i;:::-;-1:-1:-1;2509:37:30;;;;:22;:37;;;;;;;;;2459:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2588:237;;2459:87;;2532:13;;2588:237;;;;2459:87;;;;2588:237;:::i;:::-;;;;;;;;2914:16;:14;:16::i;:::-;3019:34;;;;3015:141;;3112:32;;3079:66;;3094:13;;3079:66;;;;3109:1;;3079:66;:::i;:::-;;;;;;;;3015:141;3173:34;;;;-1:-1:-1;;;;1561:1653:30;:::o;4678:837:27:-;4832:19;4857:16;4881:18;:16;:18::i;:::-;:42;;;;;:25;;;;;;;;:42;;4915:6;;4881:42;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4831:92;;;;;;;;5073:1;5053:8;:22;5049:91;;;5091:38;;;;;;;;;;:::i;:::-;;;;;;;;5049:91;5236:20;5221:35;;:11;:35;;;5217:103;;5272:37;;;;;;;;;;:::i;5217:103::-;5366:34;;;;;;;;:21;:34;;;;;;:43;;;5424:84;5403:6;;5424:84;;;;;;4678:837;;;;:::o;2820:152:24:-;2904:7;2934:13;:11;:13::i;:::-;:23;;;2958:6;2934:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2927:38;;2820:152;;;;:::o;1319:379:21:-;1003:27:33;:25;:27::i;:::-;1414:15:21::1;::::0;::::1;;::::0;;;:9:::1;:15;::::0;;;;;::::1;;1410:221;;;1445:175;1467:152;1521:62;1601:4;1467:36;:152::i;1445:175::-;1640:15;::::0;::::1;;::::0;;;:9:::1;:15;::::0;;;;;;:22;;;::::1;1658:4;1640:22;::::0;;1677:14;::::1;::::0;::::1;::::0;1650:4;;1677:14:::1;:::i;3994:84:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1900:1176:23:-;1981:10;2002:48;;:::i;:::-;2085:68;;;:60;:68;;;:60;;:68;:60;:68;;2065:89;;:19;:89::i;:::-;2002:152;;2244:32;2279:129;2311:18;:38;;;2279:129;;2363:18;:35;;;2279:129;;:18;:129::i;:::-;2244:164;;2432:24;2423:6;:33;2419:254;;;2472:190;2511:137;2578:6;2606:24;2511:45;:137::i;2472:190::-;2761:68;;;:60;:68;;;:60;;:68;:60;:68;;2717:142;;2843:6;2717:30;:142::i;:::-;2926:13;:11;:13::i;:::-;:26;;;2953:6;2961;2926:42;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3033:6;3012:57;;;3053:6;3012:57;;;;;;:::i;:::-;;;;;;;;1900:1176;;;;:::o;4317:75:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2687:188:8:-;1077:42;2687:188;:::o;3684:245:24:-;3783:37;;:::i;:::-;3866:31;;;;:23;:31;;;;;3846:52;;:19;:52::i;1628:148:33:-;988:22:46;:20;:22::i;:::-;1740:29:33::1;1762:6;1740:21;:29::i;:::-;1628:148:::0;:::o;2345:334:24:-;2495:37;;:::i;:::-;2558:90;2591:19;:39;2617:11;2611:18;;;;;;;;2591:39;;;;;;;;;;;;;;;;-1:-1:-1;2591:39:24;;;:47;;;;;;;;;;2558:19;:90::i;:::-;2548:100;;2345:334;;;;;:::o;4434:194:22:-;4535:25;;:::i;:::-;-1:-1:-1;4583:24:22;;;;:16;:24;;;;;;;;4608:12;;4583:38;;;;;;;;4576:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4434:194::o;1423:28:33:-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1423:28:33;:::o;5598:152:27:-;5683:20;;:::i;:::-;-1:-1:-1;5726:17:27;;;;:9;:17;;;;;;;;;5719:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5598:152::o;3144:42:9:-;;;;;;;;;;;;;;;:::o;2611:45::-;;;;:::o;3413:1467:23:-;3592:10;3676:11;3672:48;;3703:7;;;3672:48;3829:32;3814:11;;;;:4;:11;:::i;:::-;:47;;;;;;;;;:108;;;;-1:-1:-1;3890:32:23;3877:9;;;;:2;:9;:::i;:::-;:45;;;;;;;;;3814:108;3810:145;;;3938:7;;;3810:145;4013:30;3998:11;;;;:4;:11;:::i;:::-;:45;;;;;;;;;3994:183;;;4059:107;4093:4;:11;;;4122:6;4146;4059:16;:107::i;:::-;4204:30;4191:9;;;;:2;:9;:::i;:::-;:43;;;;;;;;;4187:177;;;4250:103;4282:2;:9;;;4309:6;4333;4250:14;:103::i;:::-;4398:38;4439:19;4398:38;4465:11;;;;:4;:11;:::i;:::-;4459:18;;;;;;;;4439:39;;;;;;;;;;;;;;;;-1:-1:-1;4439:39:23;;;:47;;;;;;;;;;;-1:-1:-1;;4535:19:23;;-1:-1:-1;;4561:9:23;;;;:2;:9;:::i;:::-;4555:16;;;;;;;;4535:37;;;;;;;;;;;;;;;;-1:-1:-1;4535:37:23;;;:45;;;;;;;;;;;-1:-1:-1;4590:80:23;4614:7;4535:45;4654:6;4590:10;:80::i;:::-;4854:9;;;;;;4799:11;;;;;4704:169;;;;;;4747:6;;4773:11;;4799:4;4773:11;:::i;:::-;4767:18;;;;;;;;4830:9;;;;:2;:9;:::i;:::-;4824:16;;;;;;;;4704:169;;;;;;;;:::i;:::-;;;;;;;;3413:1467;;;;;;;:::o;3836:629:27:-;3968:6;1337:35;1365:6;1337:27;:35::i;:::-;4043:27:::1;4073:17:::0;;;:9:::1;:17;::::0;;;;:31;;;::::1;;;4114:117;4073:17:::0;:31;4205:16;4114:23:::1;:117::i;:::-;4277:17;::::0;;;:9:::1;:17;::::0;;;;;;:50;;;::::1;::::0;::::1;::::0;::::1;;;::::0;;4342:116;4277:17;;4342:116:::1;::::0;::::1;::::0;4398:20;;4277:50;;4342:116:::1;:::i;2742:619:31:-:0;3088:22;;3150:26;;3206:16;;3261:25;;3088:22;;3150:26;;;;;3206:16;;3261:25;;;;3327:27;;;;;2742:619::o;3264:37:9:-;;;;:::o;1890:462:33:-;988:22:46;:20;:22::i;:::-;2010:18:33::1;::::0;::::1;;::::0;;;:10:::1;:18;::::0;;;;;::::1;;2005:131;;2044:81;2066:58;2117:6;2066:50;:58::i;2044:81::-;2150:9;2145:201;2169:11;:18:::0;2165:22;::::1;2145:201;;;2230:6;2212:24;;:11;2224:1;2212:14;;;;;;;;;::::0;;;::::1;::::0;;;::::1;::::0;::::1;;:24;2208:128;;;2256:42;2288:6;2296:1;2256:31;:42::i;:::-;2316:5;;2208:128;2189:3;;2145:201;;;;1890:462:::0;:::o;2540:27:9:-;;;;:::o;2141:57::-;;;;;;;;;;;;;:::o;3582:39::-;;;;;;:::o;870:20:46:-;;;;;;:::o;2525:212:33:-;988:22:46;:20;:22::i;:::-;2684:46:33::1;2716:6;2724:5;2684:31;:46::i;1554:675:31:-:0;1003:27:33;:25;:27::i;:::-;1841:211:31::1;1865:23;1902:27;1943:17;1974:26;2014:28;1841:10;:211::i;:::-;2189:4;2167:53;;;:55;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;1554:675:::0;;;;;:::o;3496:31:9:-;;;;:::o;1593:2693:22:-;1063:10:21;1053:21;;;;:9;:21;;;;;;;;1048:161;;1090:108;1112:85;1173:10;1112:43;:85::i;1090:108::-;1775:36:22::1;1799:11;1775:23;:36::i;:::-;1920:9;1916:274;;1975:17;:15;:17::i;:::-;:30;;;2027:12;2069:4;2096:11;1975:150;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1950:229;;;;;;;;;;;;:::i;:::-;2266:35;::::0;::::1;2249:14;2266:35:::0;;;:21:::1;:35;::::0;;;;;2426:21;2422:58:::1;;2463:7;;;2422:58;2490:17;2510:36;2539:6;2510:28;:36::i;:::-;:56;;;2490:76;;;;2633:16;;2621:9;:28;2617:65;;;2665:7;;;;2617:65;2787:12;::::0;2763:21:::1;2851:24:::0;;;:16:::1;:24;::::0;;;;;;;:39;;;;;;;;2954:22:::1;:37:::0;;;;;;3127:26;;3167:24;3163:831:::1;;3264:26;3292:27:::0;3323:50:::1;3355:6;3363:9;3323:31;:50::i;:::-;3387:25;::::0;::::1;:46:::0;;;3447:26:::1;::::0;::::1;:48:::0;;;3600:37:::1;::::0;::::1;::::0;3263:110;;-1:-1:-1;3263:110:22;-1:-1:-1;3600:66:22::1;::::0;3263:110;3600:45:::1;:66::i;:::-;3560:37;::::0;::::1;:106:::0;3824:1:::1;3778:37:::0;;::::1;::::0;:48:::1;::::0;:45:::1;:48::i;:::-;3738:37;::::0;::::1;:88:::0;3929:54:::1;::::0;3976:6;;3961:13;;3929:54:::1;::::0;;;::::1;3163:831;;;4073:40;:19:::0;4101:11;4073:27:::1;:40::i;:::-;4044:69:::0;;4221:37:::1;::::0;::::1;::::0;:58:::1;::::0;4267:11;4221:45:::1;:58::i;:::-;4181:18;:37;;:98;;;;1218:1:21;;;;;;1593:2693:22::0;;;:::o;1947:25:9:-;;;;:::o;1161:467:23:-;1240:10;1316:13;:11;:13::i;:::-;:25;;;1342:6;1350;1316:41;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1434:68:23;;;:60;:68;;;:60;;:68;:60;:68;;1390:142;;1516:6;1390:30;:142::i;:::-;1585:6;1566:55;;;1605:6;1566:55;;;;;;:::i;:::-;;;;;;;;1161:467;;:::o;4488:41:9:-;;;;:::o;1271:195:32:-;1367:7;1397:62;1436:22;;1397:30;;:38;;:62;;;;:::i;:::-;1390:69;;1271:195;:::o;1178:140:28:-;1259:52;1292:6;1300:10;1259:32;:52::i;3429:208:8:-;2041:42;3429:208;:::o;1216:43:33:-;;;;;;;;;;;;;;;:::o;1491:742:28:-;1594:14;1791:25;;:::i;:::-;-1:-1:-1;1819:17:28;;;;:9;:17;;;;;;;;1791:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1819:17;1967:34;1819:17;1967:26;:34::i;:::-;1886:115;;;;2063:140;2101:4;:18;;;2133:23;2170;2063:24;:140::i;:::-;-1:-1:-1;2051:152:28;1491:742;-1:-1:-1;;;;;1491:742:28:o;1709:1643:27:-;1800:14;1853:16;1877:19;1902:18;:16;:18::i;:::-;:30;;;1933:20;1902:52;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1852:102;;;;;;;;2005:1;1985:8;:22;;1964:97;;;;;;;;;;;;:::i;:::-;2139:11;2120:16;2360:25;;;2375:10;2360:25;2356:79;;-1:-1:-1;2414:10:27;2356:79;2529:6;2629:49;2668:8;2629:30;:49::i;:::-;2705:8;2697:17;;2688:26;;2767:134;2804:6;818:5:7;2878:13:27;2767:23;:134::i;:::-;2945:25;;:::i;:::-;-1:-1:-1;2973:135:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3118:17:27;;;:9;:17;;;;;;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3199:51;;;;;;3128:6;;3011:8;;3048:13;;3199:51;:::i;:::-;;;;;;;;3261:60;3292:6;3300:20;3261:30;:60::i;:::-;3332:13;;;;;;1709:1643;;;:::o;2456:51:9:-;;;;;;;;;;;;;:::o;2834:155:33:-;2932:16;2971:11;2964:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2834:155;:::o;3056:173:8:-;1480:42;3056:173;:::o;3379:40:9:-;;;;;;:::o;1168:257:5:-;1003:27:33;:25;:27::i;:::-;1369:21:5::1;:19;:21::i;:::-;1400:18;:16;:18::i;:::-;1168:257::o:0;1274:855:24:-;1387:37;;:::i;:::-;1510:30;1483:59;;:20;:59;;1450:102;1483:59;1450:19;:102::i;:::-;1440:112;-1:-1:-1;1581:32:24;1566:11;:47;;;;;;;;;1562:537;;;1820:18;1841:13;:11;:13::i;:::-;:31;;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1820:54;;1918:66;:47;1937:7;:27;;;1918:47;;:10;:18;;:47;;;;:::i;:::-;:64;:66::i;:::-;1888:96;;;;:27;;;:96;2044:24;;;;2025:63;;:44;;:10;;:44;:18;:44::i;:63::-;1998:90;;:24;;;:90;-1:-1:-1;1274:855:24;;;:::o;3678:41:9:-;;;;;;;;;:::o;2457:759:28:-;2577:14;2607:25;;:::i;:::-;-1:-1:-1;2635:17:28;;;;:9;:17;;;;;;;;2607:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2635:17;2783:34;2635:17;2783:26;:34::i;:::-;2702:115;;;;2868:32;2904:140;2942:4;:18;;;2974:23;3011;2904:24;:140::i;:::-;2865:179;;;3061:148;3098:6;3118;3138:24;3176:23;3061;:148::i;:::-;3054:155;2457:759;-1:-1:-1;;;;;;;2457:759:28:o;1125:30:9:-;;;;;;:::o;3833:187:8:-;2321:42;3833:187;:::o;3198:276:24:-;3315:37;;:::i;:::-;3398:36;;;;;;;:28;:36;;;;;;;;:44;;;;;;;;3378:65;;:19;:65::i;1125:346:46:-;988:22;:20;:22::i;:::-;1238::::1;::::0;::::1;1234:231;;1276:70;1298:47;:45;:47::i;1276:70::-;1234:231;;;1377:5;:16:::0;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;1412:42:::1;::::0;1377:16;;1433:10:::1;::::0;1412:42:::1;::::0;1377:5;1412:42:::1;1125:346:::0;:::o;3662:2692:30:-;3810:23;3822:10;3810:11;:23::i;:::-;3806:187;;;3884:10;3874:21;;;;:9;:21;;;;;:28;;;;3898:4;3874:28;;;3849:133;4062:12;;4038:21;4104:24;4062:12;4126:1;4104:21;:24::i;:::-;4084:44;;4219:47;;:::i;:::-;-1:-1:-1;4269:33:30;;;;:22;:33;;;;;;;;;4219:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4312:76;;4371:7;;;;;4312:76;4483:35;;:::i;:::-;-1:-1:-1;4521:24:30;;;;:16;:24;;;;;;;;:35;;;;;;;;;4483:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4566:65;;4614:7;;;;;;4566:65;4746:24;;;;:16;:24;;;;;;;;:35;;;;;;;;4739:42;;;;;;;;;;;;;;4842:67;4882:9;4893:15;4842:39;:67::i;:::-;4824:85;;5106:22;5130:21;5155:103;5185:6;5205:7;5226:9;:22;;;5155:16;:103::i;:::-;5105:153;;;;5352:6;5325:13;5300:123;5372:14;5400:13;5300:123;;;;;;;:::i;:::-;;;;;;;;5434:19;5456:37;:14;5479:13;5456:22;:37::i;:::-;5671;;;;5434:59;;-1:-1:-1;5671:58:30;;5434:59;5671:45;:58::i;:::-;5619:37;;;:110;;;5549:33;;;;:22;:33;;;;;;;;:55;;:180;;;;5914:34;;;:45;;5957:1;5914:42;:45::i;:::-;5865:34;;;;:94;;;5798:33;;;;:22;:33;;;;;;;:52;;:161;;;;6070:34;6066:282;;6189:37;;;;6244:32;;6162:9;;6130:207;;6244:79;;6189:37;6244:40;:79::i;:::-;6130:207;;;;;;;:::i;:::-;;;;;;;;3662:2692;;;;;;;;;:::o;3049:226:33:-;3146:10;3135:22;;;;:10;:22;;;;;;;;3130:139;;3173:85;3195:62;3246:10;3195:50;:62::i;4273:309:20:-;4420:12;1694:10;4491:26;;4531:10;4555;4455:120;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4273:309:20;;;;:::o;1559:170:43:-;1702:9;1696:16;1689:4;1678:9;1674:20;1667:46;1013:364:44;1099:7;1130:1;1126;:5;1122:227;;;1147:191;1169:168;1226:59;1303:1;1322;1169:39;:168::i;1147:191::-;-1:-1:-1;1365:5:44;;;1013:364::o;8024:370:20:-;8194:12;3788:10;8265:43;;8322:16;8352:25;8229:158;;;;;;;;;:::i;7267:201:30:-;7339:21;7374:15;;7370:92;;7405:17;:15;:17::i;:::-;:25;;;7438:10;7405:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7267:201;:::o;7602:259::-;7685:19;7734:91;7798:26;;7734:17;:15;:17::i;:::-;:27;;;7770:4;7734:42;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:63;;:91::i;2088:741:32:-;2264:15;2232:29;2373:41;:39;:41::i;:::-;2350:64;;2443:21;2428:12;:36;2424:219;;;2480:152;2502:129;2566:12;2596:21;2502:46;:129::i;2480:152::-;2701:12;;2681:17;;2701:23;;2722:1;2701:20;:23::i;:::-;2734:12;:24;-1:-1:-1;;2768:30:32;:54;2088:741::o;2668:468:25:-;2787:37;;:::i;:::-;-1:-1:-1;2840:20:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2894:12;;2840:20;;2920:36;;2916:190;;;2995:32;:13;:30;:32::i;:::-;2972:55;;;;3071:24;;;;3041:54;;:27;;;:54;2916:190;3115:14;2668:468;;;:::o;1914:135:44:-;1999:7;2033:1;2029;:5;:13;;2041:1;2029:13;;;-1:-1:-1;2037:1:44;;1914:135;-1:-1:-1;1914:135:44:o;4588:300:20:-;4724:12;1852:10;4795:35;;4844:6;4864:7;4759:122;;;;;;;;;:::i;3972:530:25:-;4139:37;;:::i;:::-;4179:31;4199:10;4179:19;:31::i;:::-;4139:71;;4247:68;:49;4289:6;4255:7;:24;;;4247:33;;:41;;:49;;;;:::i;:68::-;4220:95;;;;:24;;;:95;4363:27;;;;4355:71;;:52;;:36;4400:6;4355:44;:52::i;:71::-;4325:101;;:27;;;:101;4461:34;4475:10;4325:7;4461:13;:34::i;1477:255:46:-;1571:5;;;;1557:10;:19;1553:173;;1695:5;;1592:123;;1614:100;;1667:10;;1695:5;;1614:35;:100::i;3361:602:33:-;3502:20;;;3498:127;;3538:76;3560:53;:51;:53::i;3538:76::-;3700:18;;;;;;;:10;:18;;;;;;;;3696:134;;;3734:85;3756:62;3811:6;3756:54;:62::i;3734:85::-;3840:18;;;;;;;3861:4;3840:18;;;;;;;;:25;;;;;;;;3875:11;:24;;;;;;;;;;;;;;;;;;;;;3914:42;3945:10;;3840:18;3914:42;;;3361:602;:::o;6210:923:23:-;6408:32;6433:6;6408:24;:32::i;:::-;6451:82;6497:6;6517;6451:32;:82::i;:::-;6657:36;;;;;;;:28;:36;;;;;;;;:44;;;;;;;;6623:108;;6715:6;6623:20;:108::i;:::-;6839:31;;;;:23;:31;;;;;6805:95;;6884:6;6805:20;:95::i;:::-;7064:30;7037:59;;:20;:59;;7003:123;7037:59;7110:6;7003:20;:123::i;5094:886::-;5287:32;5312:6;5287:24;:32::i;:::-;5330:82;5376:6;5396;5330:32;:82::i;:::-;5536:36;;;;;;;:28;:36;;;;;;;;:44;;;;;;;;5502:108;;5594:6;5502:20;:108::i;:::-;5718:31;;;;:23;:31;;;;;5684:95;;5763:6;5684:20;:95::i;:::-;5911:30;5884:59;;:20;:59;;5850:123;5884:59;5957:6;5850:20;:123::i;1359:1121:25:-;1582:33;1600:7;1609:5;1582:17;:33::i;:::-;1578:70;;;1631:7;;1578:70;1704:34;;:::i;:::-;1741:28;1761:7;1741:19;:28::i;:::-;1704:65;;1779:32;;:::i;:::-;1814:26;1834:5;1814:19;:26::i;:::-;1779:61;;1899:4;:21;;;1890:30;;:6;:30;1886:248;;;1936:187;1975:134;2042:6;2070:4;:21;;;1975:134;;:45;:134::i;1936:187::-;2213:21;;;;2205:65;;:46;;:30;;2244:6;2205:38;:46::i;:65::-;2181:89;;;;:21;;;;:89;;;;2310:19;;;2302:63;;:44;;:28;2339:6;2302:36;:44::i;:63::-;2280:85;;:19;;;:85;2411:28;2425:7;2434:4;2411:13;:28::i;:::-;2449:24;2463:5;2470:2;2449:13;:24::i;:::-;1359:1121;;;;;:::o;8049:393:27:-;8145:16;8164:17;;;:9;:17;;;;;:26;;;8204:10;:22;;8200:236;;8242:183;8281:130;8355:10;8387:6;8281:52;:130::i;6997:919::-;818:5:7;7202:34:27;;;;7198:712;;;7307:218;7329:195;7386:66;7470:6;7494:16;7329:39;:195::i;7307:218::-;7198:712;;;7565:20;7546:39;;:16;:39;;;7542:368;;;7674:225;7696:202;7753:73;7844:6;7868:16;7696:39;:202::i;2790:241:38:-;2887:12;1459:10;2958:36;;3008:6;2922:102;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2790:241:38;;;:::o;4138:881:33:-;4268:18;;;;;;;:10;:18;;;;;;;;4263:131;;4302:81;4324:58;4375:6;4324:50;:58::i;4302:81::-;4416:11;:18;4407:27;;4403:201;;4450:143;4472:120;4537:5;4560:11;:18;;;;4472:47;:120::i;4450:143::-;4639:6;4617:28;;:11;4629:5;4617:18;;;;;;;;;;;;;;;;;;;;:28;4613:212;;4661:153;4683:130;4757:11;4769:5;4757:18;;;;;;;;;;;;;;;;;;;;4793:6;4683:56;:130::i;4661:153::-;4842:18;;;;;;;:10;:18;;;;;4835:25;;;;;;4891:11;4903:18;;:22;;;;4891:35;;;;;;;;;;;;;;;;4870:11;:18;;4891:35;;;;;4882:5;;4870:18;;;;;;;;;;;;;;:56;;;;;;;;;;;;;;;;;;4936:11;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4968:44;;5001:10;;4936:17;4968:44;;;;;4936:17;4968:44;4138:881;;:::o;5220:789:31:-;5484:22;:48;;;5542:26;:56;;;;;;;;;;;;;;5608:16;:36;;;5654:25;:54;;5718:58;;;;;;5654:54;;;;;;;;5718:58;;;;;;;5792:210;;;;;;5509:23;;5571:27;;5627:17;;5682:26;;5748:28;;5792:210;:::i;:::-;;;;;;;;5220:789;;;;;:::o;4001:266:20:-;4117:12;1556:10;4188:35;;4237:13;4152:108;;;;;;;;:::i;5828:512:22:-;6092:11;6079:9;:24;;:42;;;;-1:-1:-1;6107:9:22;:14;;6079:42;6075:259;;;6137:186;6176:133;6249:11;6282:9;6176:51;:133::i;4954:681::-;5099:20;5226:17;;;:9;:17;;;;;:26;5099:20;;;;5182:100;;5226:26;;5236:6;5182:30;:100::i;:::-;:120;;;5158:144;;;-1:-1:-1;5328:33:22;:10;5158:144;5328:18;:33::i;:::-;5469:26;;5313:48;;-1:-1:-1;5387:195:22;;5422:150;;5469:26;;818:5:7;5313:48:22;5422:29;:150::i;:::-;5387:13;;:21;:195::i;:::-;5371:211;;5592:36;4954:681;;;;;:::o;1383:383:44:-;1469:7;1504:5;;;1523;;;1519:223;;;1544:187;1566:164;1623:55;1696:1;1715;1566:39;:164::i;3289:530:25:-;3456:37;;:::i;:::-;3496:31;3516:10;3496:19;:31::i;:::-;3456:71;;3564:68;:49;3606:6;3572:7;:24;;;3564:33;;:41;;:49;;;;:::i;:68::-;3537:95;;;;:24;;;:95;3680:27;;;;3672:71;;:52;;:36;3717:6;3672:44;:52::i;3453:1312:28:-;3621:37;3651:6;3621:29;:37::i;:::-;3714:15;3732:205;3769:6;3789;3911:1;3926;3732:23;:205::i;:::-;4251:36;;;;;;;:28;:36;;;;;;;;:44;;;;;;;;3714:223;;-1:-1:-1;4231:65:28;;:19;:65::i;:::-;4172:36;;;;;;;;:28;:36;;;;;;;;:44;;;;;;;;;:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4345:12;;4341:236;;4421:37;4442:6;4450:7;4421:20;:37::i;:::-;4523:17;:15;:17::i;:::-;:26;;;4550:6;4558:7;4523:43;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4341:236;4727:31;4751:6;4727:23;:31::i;1766:320:5:-;1930:19;1963:20;2029:50;2072:6;2029:42;:50::i;:::-;1999:80;;;;-1:-1:-1;1766:320:5;-1:-1:-1;;1766:320:5:o;7028:624:28:-;7204:22;;7269:17;7265:333;;7319:11;7302:28;;7265:333;;;7378:144;7424:22;;;818:5:7;7497:11:28;7378:28;:144::i;:::-;7361:161;-1:-1:-1;7552:35:28;:11;7361:161;7552:19;:35::i;:::-;7536:51;;7265:333;7028:624;;;;;;:::o;6364:414:27:-;983:42:7;6468:17:27;;;:9;:17;;;;;:26;:41;:26;:41;6464:308;;6596:165;6635:112;6696:6;6724:5;6635:39;:112::i;1577:285:32:-;1701:32;:30;:32::i;:::-;1814:15;1781:30;:48;1854:1;1839:12;:16;1577:285::o;3424:669:31:-;3525:29;:27;:29::i;:::-;3627:7;3681:28;3747:21;3814:1;3863;3875:211;3627:7;3681:28;3747:21;3814:1;3863;3875:10;:211::i;952:395:19:-;1071:1;1087:10;;;:15;;1083:240;;1118:194;1140:171;1200:78;1296:1;1140:42;:171::i;8018:1833:28:-;8288:12;;8234:14;;8310:44;;:::i;:::-;-1:-1:-1;8357:36:28;;;;;;;:28;:36;;;;;;;;:44;;;;;;;;;8310:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8629:44;;8625:83;;;8696:1;8689:8;;;;;;8625:83;8852:174;8900:14;8928:13;8955:24;8993:23;8852:34;:174::i;:::-;9187:27;;8843:183;;-1:-1:-1;9145:31:28;;9179:47;;:36;;9224:1;9179:44;:47::i;:::-;9145:81;;9245:246;9273:208;9323:6;9347:14;:34;;;9273:208;;9399:14;:27;;;9273:208;;9444:23;9273:32;:208::i;:::-;9245:6;;:14;:246::i;:::-;9236:255;;9591:229;9619:191;9669:6;9693:14;:31;;;9619:191;;9742:23;9783:13;9619:32;:191::i;9591:229::-;9582:238;;9831:13;;;8018:1833;;;;;;;:::o;717:159:42:-;835:34;;;;;;;;;;;;;;;;;717:159;:::o;10954:206:30:-;11100:19;11145:8;;;10954:206::o;8837:1858::-;9151:23;;9040:15;;9147:73;;9195:14;;9147:73;9230:31;9291:16;:14;:16::i;:::-;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9230:96;;9402:17;9458;:36;;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9422:112;;;;;:91;;;;;;;;:112;;9530:1;;9422:112;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9402:132;;9576:14;9593:17;:24;;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9576:43;-1:-1:-1;9763:31:30;9796:49;9841:1;9796:28;:49::i;:::-;:69;;;;;10153:23;;;;10190:34;;;;10238:25;;9763:102;;;;;-1:-1:-1;9935:8:30;9900:32;;;:43;;10034:280;;9900:43;;10102:9;;9900:43;;10153:23;10190:34;10238:25;;;;;10277:27;;;;10034:26;:280::i;:::-;10558:37;;;;10517:32;;10024:290;;-1:-1:-1;10490:24:30;;10517:79;;:40;:79::i;:::-;10490:106;;10629:7;10610:16;:26;10606:83;;;10662:16;10652:26;;10606:83;8837:1858;;;;;;;;;;:::o;5433:993:28:-;5577:22;5601:21;5638:25;;:::i;:::-;-1:-1:-1;5666:17:28;;;;:9;:17;;;;;;;;;5638:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5785:112;;5855:6;5875:12;5785:24;:112::i;:::-;5751:146;;-1:-1:-1;5751:146:28;-1:-1:-1;5912:18:28;;5908:173;;6013:17;:15;:17::i;:::-;6040:13;;6013:57;;;;;:26;;;;;;;;:57;;6055:14;;6013:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5908:173;6095:17;;6091:280;;6176:43;6197:6;6205:13;6176:20;:43::i;:::-;6303:57;6324:6;6332:13;6347:12;6303:20;:57::i;:::-;6381:38;5433:993;;;;;;:::o;2288:241:38:-;2385:12;1149:10;2456:36;;2506:6;2420:102;;;;;;;;:::i;779:322:45:-;932:12;244:10;1003:28;;1045:9;1068:1;1083;967:127;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;779:322:45;;;;;:::o;5229:344:20:-;5386:12;2189:10;5457:38;;5509:12;5535:21;5421:145;;;;;;;;;:::i;1459:395:19:-;1578:1;1594:10;;;:15;;1590:240;;1625:194;1647:171;1707:78;1803:1;1647:42;:171::i;5816:510:25:-;6165:20;;6139:46;;6225:24;;;;6292:27;;;;;6195:54;6259:60;;;;;;6195:54;;;;;;;6139:46;;;;;;;;;;;;6195:54;;;;;6259:60;;;;5816:510::o;435:276:42:-;559:12;231:10;630:25;;669:6;689:5;594:110;;;;;;;;;:::i;3037:161:38:-;3156:35;;;;;;;;;;;;;;;;;3037:161;:::o;2535:249::-;2636:12;1308:10;2707:40;;2761:6;2671:106;;;;;;;;:::i;5853:408:27:-;983:42:7;5951:17:27;;;:9;:17;;;;;:26;:41;:26;5947:308;;6079:165;6118:112;6179:6;6207:5;6118:39;:112::i;5248:409:25:-;5405:37;;:::i;:::-;5445:31;5465:10;5445:19;:31::i;:::-;5405:71;;5513:68;:49;5555:6;5521:7;:24;;;5513:33;;:41;;:49;;;;:::i;:68::-;5486:95;;:24;;;:95;5616:34;5630:10;5486:7;5616:13;:34::i;4673:404::-;4825:37;;:::i;:::-;4865:31;4885:10;4865:19;:31::i;:::-;4825:71;;4933:68;:49;4975:6;4941:7;:24;;;4933:33;;:41;;:49;;;;:::i;6568:525::-;6940:38;6996:42;6919:133;;6568:525::o;4894:329:20:-;5043:12;2027:10;5114:45;;5173:13;5200:6;5078:138;;;;;;;;;:::i;6269:367::-;6448:12;2864:10;6519:29;;6562:10;6586:6;6606:13;6483:146;;;;;;;;;;:::i;1990:292:38:-;2121:12;998:10;2192:34;;2240:5;2259:6;2156:119;;;;;;;;;:::i;1665:319::-;1810:12;844:10;1881:42;;1937:10;1961:6;1845:132;;;;;;;;;:::i;6945:376:20:-;7118:12;3616:10;7189:43;;7246:23;7283:21;7153:161;;;;;;;;;:::i;3215:300:40:-;3379:21;3432:46;3466:11;3432:25;:9;3450:6;3432:17;:25::i;:::-;:33;;:46::i;2230:218:5:-;2388:53;2434:6;2388:45;:53::i;11988:245:28:-;12106:23;;;;:15;:23;;;;;;:39;;12138:6;12106:31;:39::i;:::-;12080:23;;;;:15;:23;;;;;:65;12184:26;;:42;;12219:6;12184:34;:42::i;:::-;12155:26;:71;-1:-1:-1;;11988:245:28:o;4031:293:26:-;4283:34;4304:6;4312:1;4315;4283:20;:34::i;6677:334:22:-;6856:19;6889:20;6955:49;6997:6;6955:41;:49::i;3802:545:40:-;3965:21;4205:104;4297:11;4205:70;4252:22;4297:11;4272:1;4252:19;:22::i;:::-;4205:25;:9;4223:6;4205:17;:25::i;:::-;:46;;:70::i;6642:297:20:-;6775:12;3007:10;6846:29;;6889:6;6909:13;6810:122;;;;;;;;;:::i;2944:369:32:-;3034:30;;:35;3030:277;;3085:211;3124:158;3186:78;3124:40;:158::i;4174:542:31:-;4261:22;;:27;;;;:74;;-1:-1:-1;4304:26:31;;;;:31;;4261:74;:111;;;;-1:-1:-1;4351:16:31;;:21;;4261:111;:157;;;;-1:-1:-1;4388:25:31;;;;:30;;4261:157;:205;;;;-1:-1:-1;4434:27:31;;;;;;;:32;;4261:205;4257:453;;;4491:208;4530:155;4592:75;4530:40;:155::i;1107:297:45:-;1247:12;392:10;1318:31;;1363:9;1386:1;1282:115;;;;;;;;;:::i;10304:1151:28:-;10568:7;10690:29;;;:61;;-1:-1:-1;10723:28:28;;10690:61;10686:100;;;-1:-1:-1;10774:1:28;10767:8;;10686:100;10929:31;10994:24;:13;11016:1;10994:21;:24::i;:::-;10963:27;;:55;;;;:150;;11082:14;:31;;;10963:150;;;11033:14;:34;;;10963:150;10929:184;;;-1:-1:-1;11179:28:28;11175:67;;11230:1;11223:8;;;;;11175:67;11297:151;11340:24;11378:23;11415;11297:29;:151::i;:::-;11290:158;10304:1151;-1:-1:-1;;;;;;10304:1151:28:o;4716:1006:26:-;4930:14;5043:28;;;:54;;;5089:8;5075:10;:22;5043:54;5039:93;;;-1:-1:-1;5120:1:26;5113:8;;5039:93;5196:8;5183:10;:21;5175:53;;;;;;;;;;;;:::i;:::-;5276:36;;:::i;:::-;5315:47;5343:6;5351:10;5315:27;:47::i;:::-;5276:86;;5372:34;;:::i;:::-;5409:45;5437:6;5445:8;5409:27;:45::i;:::-;5372:82;;5500:215;5542:9;:19;;;5575:9;:21;;;5610:11;:21;;;5645:11;:23;;;5682;5500:28;:215::i;1780:2058:16:-;2048:15;2079;2097:37;2118:4;2124:9;2097:20;:37::i;:::-;2079:55;;2144:17;2164:39;2185:5;2192:10;2164:20;:39::i;:::-;2144:59;-1:-1:-1;2217:13:16;;;:32;;-1:-1:-1;2234:15:16;;2217:32;2213:81;;;2282:1;2272:11;;2265:18;;;;2213:81;3057:8;3080:10;3068:8;:22;;:128;;3158:38;3175:10;3187:8;3158:16;:38::i;:::-;3068:128;;;3105:38;3122:8;3132:10;3105:16;:38::i;:::-;3057:139;;3210:191;3240:151;3277:18;3293:1;3277:15;:18::i;:::-;3320:14;3313:22;;3360:16;3353:24;;3240:19;:151::i;:::-;3210:16;:191::i;:::-;3206:195;;3623:10;3611:8;:22;;:114;;3694:31;3711:10;3723:1;3694:16;:31::i;:::-;3611:114;;;3648:31;3665:10;3677:1;3648:16;:31::i;:::-;3607:118;;3794:37;3815:1;3818:12;3794:20;:37::i;:::-;3784:47;1780:2058;-1:-1:-1;;;;;;;;;;;1780:2058:16:o;11599:245:28:-;11717:23;;;;:15;:23;;;;;;:39;;11749:6;11717:31;:39::i;:::-;11691:23;;;;:15;:23;;;;;:65;11795:26;;:42;;11830:6;11795:34;:42::i;2008:1776:26:-;2294:23;2320:42;;;:34;:42;;;;;;2396:12;;2498:32;;;2494:69;;;2546:7;;;;2494:69;2573:51;;:::i;:::-;-1:-1:-1;2639:32:26;;;;:24;:32;;;;;;;;:49;;;;;;;;;2573:115;;;;;;;;;;;;;;;;;;;2740:41;;:::i;:::-;2795:50;2818:26;2795:22;:50::i;:::-;2791:790;;;3007:187;3041:26;:36;;;3095:26;:38;;;3151:6;3175:5;3007:16;:187::i;:::-;2975:28;;;2946:248;;;;;;3337:126;;2946:248;3337:22;:126::i;:::-;3305:28;;;3276:187;;;2791:790;;;3523:28;;;3494:76;;;;;;2791:790;3643:32;;;;:24;:32;;;;;;;;:47;;;;;;;;:66;;;;;;;;;;;;;;;;3719:42;;;:34;:42;;;;;;:58;-1:-1:-1;;;;2008:1776:26:o;170:448:44:-;256:7;283:6;279:45;;-1:-1:-1;312:1:44;305:8;;279:45;345:5;;;349:1;345;:5;:1;364:5;;;;;:10;360:234;;390:193;412:170;469:61;548:1;567;412:39;:170::i;624:383::-;710:7;737:6;733:223;;759:186;781:163;838:54;910:1;929;781:39;:163::i;759:186::-;965:9;981:1;977;:5;;;;;;;624:383;-1:-1:-1;;;;624:383:44:o;7155:232:22:-;7328:52;7373:6;7328:44;:52::i;6686:502:30:-;6831:14;6859:20;6904:17;6924:23;6945:1;6924:12;;:20;;:23;;;;:::i;:::-;6904:43;;6957:35;;:::i;:::-;-1:-1:-1;6995:24:30;;;;:16;:24;;;;;;;;:35;;;;;;;;6957:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7100:33;;;:22;:33;;;;;;7049:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6957:73;7049:85;;6957:73;;7049:39;:85::i;:::-;7040:94;;7159:9;:22;;;7144:37;;6686:502;;;;;:::o;7327:249:20:-;7434:12;7505:29;7554:4;7548:11;;;;;;;;7469:100;;;;;;;;:::i;6605:1136:26:-;6719:41;;:::i;:::-;-1:-1:-1;6844:32:26;;;;:24;:32;;;;;;;;:39;;;;;;;;;6825:58;;;;;;;;;;;;;;;;;;;6897:40;6825:58;6897:22;:40::i;:::-;6893:94;;;6953:23;;6893:94;7048:17;7068:16;:5;7082:1;7068:13;:16::i;:::-;7113:32;;;;:24;:32;;;;;;;;:43;;;;;;;;;7094:62;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7048:36:26;-1:-1:-1;7170:40:26;7094:62;7170:22;:40::i;:::-;7166:94;;;7226:23;;;7166:94;7338:23;7364:42;;;:34;:42;;;;;;7420:23;;;7416:237;;;7478:32;;;;:24;:32;;;;;;;;:49;;;;;;;;;7459:68;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7545:40:26;7459:68;7545:22;:40::i;:::-;7541:102;;;7605:23;;;;7541:102;-1:-1:-1;;7711:23:26;;;;;;;;;-1:-1:-1;7711:23:26;;7732:1;7711:23;;;;;6605:1136;-1:-1:-1;;;6605:1136:26:o;3332:588:39:-;3509:14;3543:6;3539:45;;-1:-1:-1;3572:1:39;3565:8;;3539:45;3597:7;3593:113;;3636:59;3692:2;3636:30;:1;3663:2;3636:26;:30::i;:59::-;3627:68;;3620:75;;3593:113;3715:17;3735:64;3784:14;:2;3795;3784:10;:14::i;:::-;3735:27;:2;3759;3735:23;:27::i;:64::-;3715:84;-1:-1:-1;3809:11:39;3823:21;3715:84;3841:2;3823:17;:21::i;:::-;3809:35;-1:-1:-1;3861:52:39;3910:2;3861:27;:1;3809:35;3861:22;:27::i;:52::-;3854:59;;;;3332:588;;;;;;;;:::o;5160:582:17:-;5222:8;5265:1;5253;5246:21;5242:215;;;5283:163;5305:140;5364:48;5430:1;5305:41;:140::i;5283:163::-;5489:1;5477;5470:21;5466:215;;;5507:163;5529:140;5588:48;5654:1;5529:41;:140::i;5507:163::-;5694:41;5699:24;5711:1;887:66;5699:4;:24::i;:::-;5732:1;5694:4;:41::i;2618:112::-;2674:8;2698:25;2703:16;2708:1;887:66;2703:4;:16::i;5993:5424::-;6038:8;887:66;6062:1;:14;6058:206;;;6092:161;6114:138;6171:48;6237:1;6114:39;:138::i;6092:161::-;6282:1;6277;:6;6273:198;;6299:161;6321:138;6378:48;6444:1;6321:39;:138::i;6299:161::-;887:66;6484:1;:12;6480:51;;;-1:-1:-1;6519:1:17;6512:8;;6480:51;1366:66;6544:1;:15;6540:64;;-1:-1:-1;1546:75:17;6575:18;;6540:64;6614:8;6632;6650;6963:66;6951:1;:79;6947:316;;7046:79;;;;;7172:66;887;7151:11;;:88;7147:92;;6947:316;7307:66;7295:1;:79;7291:316;;7390:79;;;;;7516:66;887;7495:11;;:88;7491:92;;7291:316;7650:66;7638:1;:79;7634:314;;7733:79;;;;;7858:66;887;7837:11;;:88;7833:92;;7634:314;7991:66;7979:1;:79;7975:314;;8074:79;;;;;8199:66;887;8178:11;;:88;8174:92;;7975:314;8332:66;8320:1;:79;8316:314;;8415:79;;;;;8540:66;887;8519:11;;:88;8515:92;;8316:314;8673:66;8661:1;:79;8657:314;;8756:79;;;;;8881:66;8768;8860:11;;:88;8856:92;;8657:314;9016:66;9004:1;:79;9000:318;;9099:79;;;;;9226:66;887;9205:11;;:88;9201:92;;9000:318;9364:66;9352:1;:79;9348:320;;9447:79;;;;;9575:66;887;9554:11;;:88;9550:92;;9348:320;9715:66;9703:1;:79;9699:322;;9798:79;;;;;9927:66;887;9906:11;;:88;9902:92;;9699:322;10186:11;;;;-1:-1:-1;10186:11:17;;-1:-1:-1;887:66:17;10211:5;;;:15;;-1:-1:-1;10289:35:17;10246:39;;;10241:45;;:83;10236:88;;;;887:66;10334:1;10330;:5;:15;;;;;;10326:19;;10437:35;10432:1;10394:35;:39;10389:1;:45;:83;;;;;;10384:88;;;;887:66;10482:1;10478;:5;:15;;;;;;10474:19;;10585:35;10580:1;10542:35;:39;10537:1;:45;:83;;;;;;10532:88;;;;887:66;10630:1;10626;:5;:15;;;;;;10622:19;;10733:35;10728:1;10690:35;:39;10685:1;:45;:83;;;;;;10680:88;;;;887:66;10778:1;10774;:5;:15;;;;;;10770:19;;10881:35;10876:1;10838:35;:39;10833:1;:45;:83;;;;;;10828:88;;;;887:66;10926:1;10922;:5;:15;;;;;;10918:19;;11029:35;11024:1;10986:35;:39;10981:1;:45;:83;;;;;;10976:88;;;;887:66;11074:1;11070;:5;:15;;;;;;11066:19;;11177:35;11172:1;11134:35;:39;11129:1;:45;:83;;;;;;11124:88;;;;887:66;11222:1;11218;:5;:15;;;;;;11214:19;;11325:35;11320:1;11282:35;:39;11277:1;:45;:83;;;;;;11272:88;;;;5993:5424;;;;;;:::o;2802:119::-;2871:8;2895:19;2900:10;2905:1;2908;2900:4;:10::i;11514:5743::-;11560:8;1546:75;11584:15;;11580:105;;;-1:-1:-1;11673:1:17;11666:8;;11580:105;11698:6;11694:51;;-1:-1:-1;887:66:17;11720:14;;11694:51;1486:1;11758;:15;11754:207;;;11789:161;11811:138;11868:48;11934:1;11811:39;:138::i;11789:161::-;887:66;12430;12426:70;;12510:5;;;:15;;;12536:18;12532:22;;12527:27;;;;;12426:70;;12594:5;;;:15;12590:19;;12616:1;12620:18;12616:22;12611:27;;;;887:66;12682:1;12678;:5;:15;;;;;;12674:19;;12700:1;12704:18;12700:22;12695:27;;;;887:66;12766:1;12762;:5;:15;;;;;;12758:19;;12784:1;12788:18;12784:22;12779:27;;;;887:66;12850:1;12846;:5;:15;;;;;;12842:19;;12868:1;12872:18;12868:22;12863:27;;;;887:66;12934:1;12930;:5;:15;;;;;;12926:19;;12952:1;12956:18;12952:22;12947:27;;;;887:66;13018:1;13014;:5;:15;;;;;;13010:19;;13036:1;13040:18;13036:22;13031:27;;;;887:66;13102:1;13098;:5;:15;;;;;;13094:19;;13120:1;13124:18;13120:22;13115:27;;;;887:66;13186:1;13182;:5;:15;;;;;;13178:19;;13204:1;13208:18;13204:22;13199:27;;;;887:66;13270:1;13266;:5;:15;;;;;;13262:19;;13288:1;13292:18;13288:22;13283:27;;;;887:66;13354:1;13350;:5;:15;;;;;;13346:19;;13372:1;13376:18;13372:22;13367:27;;;;887:66;13438:1;13434;:5;:15;;;;;;13430:19;;13456:1;13460:18;13456:22;13451:27;;;;887:66;13522:1;13518;:5;:15;;;;;;13514:19;;13540:1;13544:18;13540:22;13535:27;;;;887:66;13606:1;13602;:5;:15;;;;;;13598:19;;13624:1;13628:18;13624:22;13619:27;;;;887:66;13690:1;13686;:5;:15;;;;;;13682:19;;13708:1;13712:18;13708:22;13703:27;;;;887:66;13774:1;13770;:5;:15;;;;;;13766:19;;13792:1;13796:18;13792:22;13787:27;;;;887:66;13858:1;13854;:5;:15;;;;;;13850:19;;13876:1;13880:18;13876:22;13871:27;;;;887:66;13942:1;13938;:5;:15;;;;;;13934:19;;13960:1;13964:18;13960:22;13955:27;;;;887:66;14026:1;14022;:5;:15;;;;;14256:2;;;;;;14110:18;14022:15;;;14039:27;;;14106:22;:26;;887:66;14106:36;;14022:15;-1:-1:-1;14303:66:17;14292:78;;14291:85;14287:304;;14500:66;14407;14396:78;;:171;14392:175;;14287:304;14635:66;14624:78;;14623:85;14619:304;;14832:66;14739;14728:78;;:171;14724:175;;14619:304;14966:66;14955:78;;14954:85;14950:303;;15163:66;15070;15059:78;;:171;15055:175;;14950:303;15296:66;15285:78;;15284:85;15280:303;;15493:66;15400;15389:78;;:171;15385:175;;15280:303;15626:66;15615:78;;15614:85;15610:303;;15823:66;15730;15719:78;;:171;15715:175;;15610:303;15956:66;15945:78;;15944:85;15940:303;;16153:66;16060;16049:78;;:171;16045:175;;15940:303;16288:66;16277:78;;16276:85;16272:305;;16485:66;16392;16381:78;;:171;16377:175;;16272:305;16623:66;16612:78;;16611:85;16607:306;;16820:66;16727;16716:78;;:171;16712:175;;16607:306;16960:66;16949:78;;16948:85;16944:307;;17157:66;17064;17053:78;;:171;17049:175;;16944:307;11514:5743;;;;;:::o;2443:107::-;2499:8;887:66;2523:10;2528:1;2531;2523:4;:10::i;:::-;:20;;;;;;;2443:107;-1:-1:-1;;;2443:107:17:o;3136:437::-;3197:7;3239:1;3227;3220:21;3216:215;;;3257:163;3279:140;3338:48;3404:1;3279:41;:140::i;3257:163::-;3440:8;3451:18;3456:1;3466;3451:4;:18::i;:::-;3440:29;;3488:1;3483;:6;3479:45;;3512:1;3505:8;;;;;3479:45;3562:3;3548:17;;3136:437;-1:-1:-1;;;3136:437:17:o;1099:369:26:-;1428:28;;;:33;;;1099:369::o;456:572:39:-;615:17;;694:7;690:79;;-1:-1:-1;737:2:39;;-1:-1:-1;755:2:39;717:41;;690:79;782:7;778:79;;-1:-1:-1;825:2:39;;-1:-1:-1;843:2:39;805:41;;778:79;878:64;927:14;:2;938;927:10;:14::i;:::-;878:27;:2;902;878:23;:27::i;:64::-;866:76;-1:-1:-1;966:14:39;:2;977;966:10;:14::i;:::-;952:28;;456:572;;;;;;;;:::o;2735:285::-;2876:23;2913:25;2970:43;2980:9;2991:11;3004:8;2970:9;:43::i;:::-;2963:50;;;;2735:285;;;;;:::o;8005:575:30:-;8157:12;;8137:17;;8157:23;;8178:1;8157:20;:23::i;:::-;8137:43;;8190:35;;:::i;:::-;-1:-1:-1;8228:24:30;;;;:16;:24;;;;;;;;:35;;;;;;;;;8190:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8347:28;8343:231;;8391:172;8430:119;8494:6;8522:9;8430:42;:119::i;1764:289:18:-;1895:12;1966:29;2015:5;2009:12;;;;;;;;2035:1;1930:116;;;;;;;;;:::i;17339:408:17:-;17395:8;17419:6;;;:16;;-1:-1:-1;17429:6:17;;17419:16;17415:55;;;-1:-1:-1;17458:1:17;17451:8;;17415:55;-1:-1:-1;17483:5:17;;;17487:1;17483;:5;:1;17502:5;;;;;:10;;:24;;;;17525:1;17520;17516;:5;;;;;;:10;;17502:24;17498:243;;;17542:188;17564:165;17615:62;17695:1;17714;17564:33;:165::i;17834:570::-;17890:8;17914:6;17910:218;;17936:181;17958:158;18009:55;18082:1;18101;17958:33;:158::i;17936:181::-;1021:66;18141:1;:18;:29;;;;;18163:1;18168:2;18163:7;18141:29;18137:242;;;18186:182;18208:159;18259:56;18333:1;18352;18208:33;:159::i;18186:182::-;18396:1;18392;:5;;;;1474:284:18;1602:12;1673:27;1720:5;1714:12;;;;;;;1483:904:39;1650:23;1687:25;1907:8;1895:9;:20;:46;;;;1933:8;1919:11;:22;1895:46;1891:437;;;1957:19;1992:11;1979:9;:24;;:50;;2018:11;1979:50;;;2006:9;1979:50;1957:72;-1:-1:-1;2057:29:39;1957:72;2077:8;2057:19;:29::i;:::-;2043:43;-1:-1:-1;2118:30:39;:9;2043:43;2118:17;:30::i;:::-;2100:48;-1:-1:-1;2182:32:39;:11;2202;2182:19;:32::i;:::-;2162:52;;1891:437;;;;-1:-1:-1;2263:9:39;;2306:11;;-1:-1:-1;;1483:904:39:o;8400:291:20:-;8531:12;3941:10;8602:33;;8649:6;8669:5;8566:118;;;;;;;;;:::i;2059:305:18:-;2199:12;2270:21;2311:5;2305:12;;;;;;;;2331:1;2346;2234:123;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;555:162::-;638:20;;40774:1;40764:12;;40754:2;;40790:1;;40780:12;725:444;;838:3;831:4;823:6;819:17;815:27;805:2;;-1:-1;;846:12;805:2;886:6;880:13;34907:18;;34899:6;34896:30;34893:2;;;-1:-1;;34929:12;34893:2;34562;34556:9;35070:4;;35002:9;831:4;34987:6;34983:17;34979:33;34592:6;34588:17;;34699:6;34687:10;34684:22;34907:18;34651:10;34648:34;34645:62;34642:2;;;-1:-1;;34710:12;34642:2;34740:10;34562:2;34729:22;;899:74;;;993:6;986:5;979:21;1097:3;35070:4;1088:6;1021;1079:16;;1076:25;1073:2;;;1114:1;;1104:12;1073:2;39624:1;39615:10;;39631:101;39645:6;39642:1;39639:13;39631:101;;;39712:11;;;;;39706:18;39693:11;;;;;39686:39;39660:10;;;;39631:101;;;39747:6;39744:1;39741:13;39738:2;;;39624:1;35070:4;39803:6;1055:5;39794:16;;39787:27;39738:2;;;;;798:371;;;;:::o;1211:160::-;;1324:2;1315:6;1310:3;1306:16;1302:25;1299:2;;;-1:-1;;1330:12;1656:128;1722:20;;37138:10;37127:22;;40988:34;;40978:2;;41036:1;;41026:12;1791:241;;1895:2;1883:9;1874:7;1870:23;1866:32;1863:2;;;-1:-1;;1901:12;1863:2;85:6;72:20;97:33;124:5;97:33;:::i;2039:263::-;;2154:2;2142:9;2133:7;2129:23;2125:32;2122:2;;;-1:-1;;2160:12;2122:2;226:6;220:13;238:33;265:5;238:33;:::i;2309:491::-;;;;2447:2;2435:9;2426:7;2422:23;2418:32;2415:2;;;-1:-1;;2453:12;2415:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;2505:63;-1:-1;2605:2;2644:22;;72:20;97:33;72:20;97:33;:::i;:::-;2409:391;;2613:63;;-1:-1;;;2713:2;2752:22;;;;1445:20;;2409:391::o;2807:366::-;;;2928:2;2916:9;2907:7;2903:23;2899:32;2896:2;;;-1:-1;;2934:12;2896:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;2986:63;3086:2;3125:22;;;;485:20;;-1:-1;;;2890:283::o;3180:398::-;;;3317:2;3305:9;3296:7;3292:23;3288:32;3285:2;;;-1:-1;;3323:12;3285:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;3375:63;-1:-1;3493:69;3554:7;3475:2;3530:22;;3493:69;:::i;:::-;3483:79;;3279:299;;;;;:::o;3585:1144::-;;;;;;;3805:3;3793:9;3784:7;3780:23;3776:33;3773:2;;;-1:-1;;3812:12;3773:2;226:6;220:13;238:33;265:5;238:33;:::i;:::-;3996:2;3981:18;;3975:25;3864:74;;-1:-1;4020:18;4009:30;;;4006:2;;;-1:-1;;4042:12;4006:2;4072:74;4138:7;4129:6;4118:9;4114:22;4072:74;:::i;:::-;4062:84;;4204:2;4193:9;4189:18;4183:25;4169:39;;4020:18;4220:6;4217:30;4214:2;;;-1:-1;;4250:12;4214:2;;4280:74;4346:7;4337:6;4326:9;4322:22;4280:74;:::i;:::-;4270:84;;;4391:2;4445:9;4441:22;1593:13;4399:74;;4510:3;4565:9;4561:22;220:13;238:33;265:5;238:33;:::i;:::-;4630:3;4681:22;;220:13;4519:74;;-1:-1;238:33;220:13;238:33;:::i;:::-;4639:74;;;;3767:962;;;;;;;;:::o;5109:257::-;;5221:2;5209:9;5200:7;5196:23;5192:32;5189:2;;;-1:-1;;5227:12;5189:2;364:6;358:13;40528:5;36032:13;36025:21;40506:5;40503:32;40493:2;;-1:-1;;40539:12;5373:241;;5477:2;5465:9;5456:7;5452:23;5448:32;5445:2;;;-1:-1;;5483:12;5445:2;-1:-1;485:20;;5439:175;-1:-1;5439:175::o;5621:366::-;;;5742:2;5730:9;5721:7;5717:23;5713:32;5710:2;;;-1:-1;;5748:12;5710:2;498:6;485:20;5800:63;;5900:2;5943:9;5939:22;72:20;97:33;124:5;97:33;:::i;:::-;5908:63;;;;5704:283;;;;;:::o;5994:366::-;;;6115:2;6103:9;6094:7;6090:23;6086:32;6083:2;;;-1:-1;;6121:12;6083:2;-1:-1;;485:20;;;6273:2;6312:22;;;1445:20;;-1:-1;6077:283::o;6367:364::-;;;6487:2;6475:9;6466:7;6462:23;6458:32;6455:2;;;-1:-1;;6493:12;6455:2;498:6;485:20;6545:63;;6663:52;6707:7;6645:2;6687:9;6683:22;6663:52;:::i;6738:273::-;;6858:2;6846:9;6837:7;6833:23;6829:32;6826:2;;;-1:-1;;6864:12;6826:2;6926:69;6987:7;6963:22;6926:69;:::i;7018:609::-;;;;7214:3;7202:9;7193:7;7189:23;7185:33;7182:2;;;-1:-1;;7221:12;7182:2;7283:82;7357:7;7333:22;7283:82;:::i;:::-;7273:92;;7420:82;7494:7;7402:2;7474:9;7470:22;7420:82;:::i;:::-;7410:92;;7539:3;7583:9;7579:22;1445:20;7548:63;;7176:451;;;;;:::o;7882:263::-;;7997:2;7985:9;7976:7;7972:23;7968:32;7965:2;;;-1:-1;;8003:12;7965:2;-1:-1;1593:13;;7959:186;-1:-1;7959:186::o;8152:1144::-;;;;;;;8372:3;8360:9;8351:7;8347:23;8343:33;8340:2;;;-1:-1;;8379:12;8340:2;1599:6;1593:13;8431:74;;8563:2;8552:9;8548:18;8542:25;8587:18;;8579:6;8576:30;8573:2;;;-1:-1;;8609:12;8573:2;8639:74;8705:7;8696:6;8685:9;8681:22;8639:74;:::i;:::-;8629:84;;8771:2;8760:9;8756:18;8750:25;8736:39;;8587:18;8787:6;8784:30;8781:2;;;-1:-1;;8817:12;9303:737;;;;;;9472:3;9460:9;9451:7;9447:23;9443:33;9440:2;;;-1:-1;;9479:12;9440:2;1458:6;1445:20;9531:63;;9649:52;9693:7;9631:2;9673:9;9669:22;9649:52;:::i;:::-;9639:62;;9738:2;9781:9;9777:22;1445:20;9746:63;;9864:52;9908:7;9846:2;9888:9;9884:22;9864:52;:::i;:::-;9854:62;;9972:52;10016:7;9953:3;9996:9;9992:22;9972:52;:::i;:::-;9962:62;;9434:606;;;;;;;;:::o;18233:222::-;36932:42;36921:54;;;;10290:37;;18360:2;18345:18;;18331:124::o;18462:333::-;36932:42;36921:54;;;10290:37;;36921:54;;18781:2;18766:18;;10290:37;18617:2;18602:18;;18588:207::o;18802:444::-;36932:42;36921:54;;;10290:37;;36921:54;;;;19149:2;19134:18;;10290:37;19232:2;19217:18;;11370:37;;;;18985:2;18970:18;;18956:290::o;19253:333::-;36932:42;36921:54;;;;10290:37;;19572:2;19557:18;;11370:37;19408:2;19393:18;;19379:207::o;19933:370::-;20110:2;20124:47;;;35353:12;;20095:18;;;35628:19;;;19933:370;;20110:2;35207:14;;;;35668;;;;19933:370;10898:260;10923:6;10920:1;10917:13;10898:260;;;10984:13;;36932:42;36921:54;10290:37;;35483:14;;;;10201;;;;10945:1;10938:9;10898:260;;;-1:-1;20177:116;;20081:222;-1:-1;;;;;;20081:222::o;20310:210::-;36032:13;;36025:21;11253:34;;20431:2;20416:18;;20402:118::o;20527:222::-;11370:37;;;20654:2;20639:18;;20625:124::o;20756:440::-;11370:37;;;36932:42;36921:54;;;;21101:2;21086:18;;10290:37;37138:10;37127:22;21182:2;21167:18;;17740:36;20937:2;20922:18;;20908:288::o;21203:321::-;11370:37;;;36032:13;36025:21;21510:2;21495:18;;11253:34;21352:2;21337:18;;21323:201::o;21531:333::-;11370:37;;;21850:2;21835:18;;11370:37;21686:2;21671:18;;21657:207::o;22949:480::-;23150:2;23135:18;;39924:1;39914:12;;39904:2;;39930:9;39904:2;12202:68;;;23332:2;23317:18;;11370:37;;;;23415:2;23400:18;;;11370:37;23121:308;:::o;23436:375::-;23612:2;23597:18;;40045:1;40035:12;;40025:2;;40051:9;40025:2;12374:71;;;23797:2;23782:18;11370:37;23583:228;:::o;23818:492::-;24025:2;24010:18;;36545:61;36600:5;36545:61;:::i;:::-;12554:76;;;24215:2;24200:18;;11370:37;;;;37138:10;37127:22;24296:2;24281:18;;;17740:36;23996:314;:::o;24317:379::-;24495:2;24480:18;;36545:61;36600:5;36545:61;:::i;:::-;12736:73;;;36932:42;36921:54;;;;24682:2;24667:18;;;10290:37;24466:230;:::o;25059:416::-;25259:2;25273:47;;;13312:2;25244:18;;;35628:19;13348:30;35668:14;;;13328:51;13398:12;;;25230:245::o;25905:416::-;26105:2;26119:47;;;14041:2;26090:18;;;35628:19;14077:29;35668:14;;;14057:50;14126:12;;;26076:245::o;26328:416::-;26528:2;26542:47;;;14377:2;26513:18;;;35628:19;14413:30;35668:14;;;14393:51;14463:12;;;26499:245::o;26751:416::-;26951:2;26965:47;;;14714:2;26936:18;;;35628:19;14750:21;35668:14;;;14730:42;14791:12;;;26922:245::o;27174:416::-;27374:2;27388:47;;;15042:2;27359:18;;;35628:19;15078:22;35668:14;;;15058:43;15120:12;;;27345:245::o;27597:330::-;15429:23;;11370:37;;15609:4;15598:16;;;15592:23;15669:14;;;11370:37;15771:4;15760:16;;;15754:23;15831:14;;;11370:37;;;;27778:2;27763:18;;27749:178::o;27934:310::-;16132:23;;36932:42;36921:54;;;10290:37;;16312:4;16301:16;;;16295:23;37138:10;37127:22;16370:14;;;17740:36;16470:4;16459:16;;;16453:23;36921:54;16530:14;;;10290:37;;;;28105:2;28090:18;;28076:168::o;28251:346::-;16871:23;;37233:18;37222:30;17964:36;;17055:4;17044:16;;;17038:23;37424:26;37413:38;;;17113:14;;;18185:36;;;;17219:4;17208:16;;;17202:23;37413:38;17277:14;;;18185:36;;;;28440:2;28425:18;;28411:186::o;29173:444::-;11370:37;;;29520:2;29505:18;;11370:37;;;;29603:2;29588:18;;11370:37;29356:2;29341:18;;29327:290::o;29624:556::-;11370:37;;;30000:2;29985:18;;11370:37;;;;30083:2;30068:18;;11370:37;30166:2;30151:18;;11370:37;29835:3;29820:19;;29806:374::o;30187:668::-;11370:37;;;30591:2;30576:18;;11370:37;;;;30674:2;30659:18;;11370:37;;;;30757:2;30742:18;;11370:37;30840:3;30825:19;;11370:37;30426:3;30411:19;;30397:458::o;30862:660::-;11370:37;;;37138:10;37127:22;;;31260:2;31245:18;;17740:36;31343:2;31328:18;;11370:37;;;;37127:22;;31425:2;31410:18;;17620:49;37127:22;31507:3;31492:19;;17620:49;31097:3;31082:19;;31068:454::o;32192:428::-;11370:37;;;37335:4;37324:16;;;32527:2;32512:18;;18079:35;37324:16;32606:2;32591:18;;18079:35;32367:2;32352:18;;32338:282::o;32627:218::-;37138:10;37127:22;;;;17740:36;;32752:2;32737:18;;32723:122::o;32852:325::-;37138:10;37127:22;;;17740:36;;37127:22;;33163:2;33148:18;;17740:36;33003:2;32988:18;;32974:203::o;33184:214::-;37335:4;37324:16;;;;18079:35;;33307:2;33292:18;;33278:120::o;33405:321::-;37335:4;37324:16;;;;18079:35;;33712:2;33697:18;;11370:37;33554:2;33539:18;;33525:201::o;33733:428::-;37335:4;37324:16;;;;18079:35;;34066:2;34051:18;;11370:37;;;;34147:2;34132:18;;11370:37;33908:2;33893:18;;33879:282::o;40074:119::-;40171:1;40164:5;40161:12;40151:2;;40177:9;40323:117;36932:42;40410:5;36921:54;40385:5;40382:35;40372:2;;40431:1;;40421:12"
			}
		}
	},
	"sourceTreeHashHex": "0x2e05bca517e5f3951752fd3d9c27eebb890e2a150e339decae0b1b2131bfbd8c",
	"sources": {
		"./Staking.sol": {
			"id": 5
		},
		"./interfaces/IStaking.sol": {
			"id": 11
		},
		"../utils/0xUtils/IEtherToken.sol": {
			"id": 37
		},
		"../utils/0xUtils/IERC20Token.sol": {
			"id": 36
		},
		"./interfaces/IStructs.sol": {
			"id": 15
		},
		"./interfaces/IGrgVault.sol": {
			"id": 10
		},
		"./sys/MixinParams.sol": {
			"id": 31
		},
		"../utils/0xUtils/LibRichErrors.sol": {
			"id": 43
		},
		"./immutable/MixinStorage.sol": {
			"id": 9
		},
		"./immutable/MixinConstants.sol": {
			"id": 7
		},
		"../utils/0xUtils/Authorizable.sol": {
			"id": 33
		},
		"../utils/0xUtils/interfaces/IAuthorizable.sol": {
			"id": 47
		},
		"../utils/0xUtils/interfaces/IOwnable.sol": {
			"id": 48
		},
		"../utils/0xUtils/LibAuthorizableRichErrors.sol": {
			"id": 38
		},
		"../utils/0xUtils/Ownable.sol": {
			"id": 46
		},
		"../utils/0xUtils/LibOwnableRichErrors.sol": {
			"id": 42
		},
		"./libs/LibStakingRichErrors.sol": {
			"id": 20
		},
		"./interfaces/IStakingEvents.sol": {
			"id": 12
		},
		"./interfaces/IStakingProxy.sol": {
			"id": 13
		},
		"./stake/MixinStake.sol": {
			"id": 23
		},
		"../utils/0xUtils/LibSafeMath.sol": {
			"id": 44
		},
		"../utils/0xUtils/LibSafeMathRichErrors.sol": {
			"id": 45
		},
		"./staking_pools/MixinStakingPool.sol": {
			"id": 27
		},
		"./sys/MixinAbstract.sol": {
			"id": 29
		},
		"./staking_pools/MixinStakingPoolRewards.sol": {
			"id": 28
		},
		"../utils/0xUtils/LibMath.sol": {
			"id": 40
		},
		"../utils/0xUtils/LibMathRichErrors.sol": {
			"id": 41
		},
		"./staking_pools/MixinCumulativeRewards.sol": {
			"id": 26
		},
		"../utils/0xUtils/LibFractions.sol": {
			"id": 39
		},
		"./stake/MixinStakeBalances.sol": {
			"id": 24
		},
		"./libs/LibSafeDowncast.sol": {
			"id": 19
		},
		"./immutable/MixinDeploymentConstants.sol": {
			"id": 8
		},
		"../protocol/DragoRegistry/IDragoRegistry.sol": {
			"id": 0
		},
		"../rigoToken/RigoToken/RigoTokenFace.sol": {
			"id": 3
		},
		"./stake/MixinStakeStorage.sol": {
			"id": 25
		},
		"./sys/MixinScheduler.sol": {
			"id": 32
		},
		"./rewards/MixinPopRewards.sol": {
			"id": 22
		},
		"./sys/MixinFinalizer.sol": {
			"id": 30
		},
		"../rigoToken/Inflation/InflationFace.sol": {
			"id": 1
		},
		"../rigoToken/ProofOfPerformance/ProofOfPerformanceFace.sol": {
			"id": 2
		},
		"./libs/LibCobbDouglas.sol": {
			"id": 16
		},
		"./libs/LibFixedMath.sol": {
			"id": 17
		},
		"./libs/LibFixedMathRichErrors.sol": {
			"id": 18
		},
		"./rewards/MixinPopManager.sol": {
			"id": 21
		}
	},
	"sourceCodes": {
		"./Staking.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.7.1;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IStaking.sol\";\nimport \"./sys/MixinParams.sol\";\nimport \"./stake/MixinStake.sol\";\nimport \"./rewards/MixinPopRewards.sol\";\n\n\ncontract Staking is\n    //IStaking,\n    MixinParams,\n    MixinStake,\n    MixinPopRewards\n{\n    /// @dev Initialize storage owned by this contract.\n    ///      This function should not be called directly.\n    ///      The StakingProxy contract will call it in `attachStakingContract()`.\n    function init()\n        public\n        onlyAuthorized\n    {\n        // DANGER! When performing upgrades, take care to modify this logic\n        // to prevent accidentally clearing prior state.\n        _initMixinScheduler();\n        _initMixinParams();\n    }\n    \n    /// @dev Computes the reward owed to a pool during finalization.\n    ///      Does nothing if the pool is already finalized.\n    /// @param poolId The pool's ID.\n    /// @return totalReward The total reward owed to a pool.\n    /// @return membersStake The total stake for all non-operator members in\n    ///         this pool.\n    function _getUnfinalizedPoolRewards(bytes32 poolId)\n        internal\n        view\n        override(MixinPopRewards, MixinStakingPool)\n        returns (\n            uint256 totalReward,\n            uint256 membersStake)\n    {\n        (totalReward, membersStake) = MixinPopRewards._getUnfinalizedPoolRewards(poolId);\n    }\n\n    /// @dev Asserts that a pool has been finalized last epoch.\n    /// @param poolId The id of the pool that should have been finalized.\n    function _assertPoolFinalizedLastEpoch(bytes32 poolId)\n        internal\n        view\n        override(MixinPopRewards, MixinStakingPool)\n    {\n        return MixinPopRewards._assertPoolFinalizedLastEpoch(poolId);\n    }\n}\n",
		"./interfaces/IStaking.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/IEtherToken.sol\";\nimport \"./IStructs.sol\";\nimport \"./IGrgVault.sol\";\n\n\ninterface IStaking {\n\n    /// @dev Adds a new proof_of_performance address\n    /// @param addr Address of proof_of_performance contract to add\n    function addPopAddress(address addr)\n        external;\n\n    /// @dev Create a new staking pool. The sender will be the operator of this pool.\n    /// Note that an operator must be payable.\n    /// @param operatorShare Portion of rewards owned by the operator, in ppm.\n    /// @param addOperatorAsMaker Adds operator to the created pool as a maker for convenience iff true.\n    /// @return poolId The unique pool id generated for this pool.\n    function createStakingPool(uint32 operatorShare, bool addOperatorAsMaker)\n        external\n        returns (bytes32 poolId);\n\n    /// @dev Decreases the operator share for the given pool (i.e. increases pool rewards for members).\n    /// @param poolId Unique Id of pool.\n    /// @param newOperatorShare The newly decreased percentage of any rewards owned by the operator.\n    function decreaseStakingPoolOperatorShare(bytes32 poolId, uint32 newOperatorShare)\n        external;\n\n    /// @dev Begins a new epoch, preparing the prior one for finalization.\n    ///      Throws if not enough time has passed between epochs or if the\n    ///      previous epoch was not fully finalized.\n    /// @return numPoolsToFinalize The number of unfinalized pools.\n    function endEpoch()\n        external\n        returns (uint256);\n\n    /// @dev Instantly finalizes a single pool that earned rewards in the previous\n    ///      epoch, crediting it rewards for members and withdrawing operator's\n    ///      rewards as WETH. This can be called by internal functions that need\n    ///      to finalize a pool immediately. Does nothing if the pool is already\n    ///      finalized or did not earn rewards in the previous epoch.\n    /// @param poolId The pool ID to finalize.\n    function finalizePool(bytes32 poolId)\n        external;\n\n    /// @dev Initialize storage owned by this contract.\n    ///      This function should not be called directly.\n    ///      The StakingProxy contract will call it in `attachStakingContract()`.\n    function init()\n        external;\n\n    /// @dev Allows caller to join a staking pool as a rigoblock pool id subaccount.\n    /// @param stakingPoolId Unique id of staking pool.\n    /// @param rigoblockPoolAccount Address of subaccount to be added to staking pool.\n    function joinStakingPoolAsRbPoolAccount(\n        bytes32 stakingPoolId,\n        address rigoblockPoolAccount)\n        external;\n\n    /// @dev Moves stake between statuses: 'undelegated' or 'delegated'.\n    ///      Delegated stake can also be moved between pools.\n    ///      This change comes into effect next epoch.\n    /// @param from status to move stake out of.\n    /// @param to status to move stake into.\n    /// @param amount of stake to move.\n    function moveStake(\n        IStructs.StakeInfo calldata from,\n        IStructs.StakeInfo calldata to,\n        uint256 amount\n    )\n        external;\n\n    /// @dev Pays a protocol fee in ETH.\n    /// @param makerAddress The address of the order's maker.\n    /// @param payerAddress The address that is responsible for paying the protocol fee.\n    /// @param protocolFee The amount of protocol fees that should be paid.\n    function payProtocolFee(\n        address makerAddress,\n        address payerAddress,\n        uint256 protocolFee\n    )\n        external\n        payable;\n\n    /// @dev Removes an existing proof_of_performance address\n    /// @param addr Address of proof_of_performance contract to remove\n    function removePopAddress(address addr)\n        external;\n\n    /// @dev Set all configurable parameters at once.\n    /// @param _epochDurationInSeconds Minimum seconds between epochs.\n    /// @param _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @param _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @param _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @param _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function setParams(\n        uint256 _epochDurationInSeconds,\n        uint32 _rewardDelegatedStakeWeight,\n        uint256 _minimumPoolStake,\n        uint32 _cobbDouglasAlphaNumerator,\n        uint32 _cobbDouglasAlphaDenominator\n    )\n        external;\n\n    /// @dev Stake GRG tokens. Tokens are deposited into the GRG Vault.\n    ///      Unstake to retrieve the GRG. Stake is in the 'Active' status.\n    /// @param amount of GRG to stake.\n    function stake(uint256 amount)\n        external;\n\n    /// @dev Unstake. Tokens are withdrawn from the GRG Vault and returned to\n    ///      the staker. Stake must be in the 'undelegated' status in both the\n    ///      current and next epoch in order to be unstaked.\n    /// @param amount of GRG to unstake.\n    function unstake(uint256 amount)\n        external;\n\n    /// @dev Withdraws the caller's WETH rewards that have accumulated\n    ///      until the last epoch.\n    /// @param poolId Unique id of pool.\n    function withdrawDelegatorRewards(bytes32 poolId)\n        external;\n\n    /// @dev Computes the reward balance in ETH of a specific member of a pool.\n    /// @param poolId Unique id of pool.\n    /// @param member The member of the pool.\n    /// @return reward Balance in ETH.\n    function computeRewardBalanceOfDelegator(bytes32 poolId, address member)\n        external\n        view\n        returns (uint256 reward);\n\n    /// @dev Computes the reward balance in ETH of the operator of a pool.\n    /// @param poolId Unique id of pool.\n    /// @return reward Balance in ETH.\n    function computeRewardBalanceOfOperator(bytes32 poolId)\n        external\n        view\n        returns (uint256 reward);\n\n    /// @dev Returns the earliest end time in seconds of this epoch.\n    ///      The next epoch can begin once this time is reached.\n    ///      Epoch period = [startTimeInSeconds..endTimeInSeconds)\n    /// @return Time in seconds.\n    function getCurrentEpochEarliestEndTimeInSeconds()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Gets global stake for a given status.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Global stake for given status.\n    function getGlobalStakeByStatus(IStructs.StakeStatus stakeStatus)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Gets an owner's stake balances by status.\n    /// @param staker Owner of stake.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Owner's stake balances for given status.\n    function getOwnerStakeByStatus(\n        address staker,\n        IStructs.StakeStatus stakeStatus\n    )\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Retrieves all configurable parameter values.\n    /// @return _epochDurationInSeconds Minimum seconds between epochs.\n    /// @return _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @return _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @return _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @return _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function getParams()\n        external\n        view\n        returns (\n            uint256 _epochDurationInSeconds,\n            uint32 _rewardDelegatedStakeWeight,\n            uint256 _minimumPoolStake,\n            uint32 _cobbDouglasAlphaNumerator,\n            uint32 _cobbDouglasAlphaDenominator\n        );\n\n    /// @param staker of stake.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Stake delegated to pool by staker.\n    function getStakeDelegatedToPoolByOwner(address staker, bytes32 poolId)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Returns a staking pool\n    /// @param poolId Unique id of pool.\n    function getStakingPool(bytes32 poolId)\n        external\n        view\n        returns (IStructs.Pool memory);\n\n    /// @dev Get stats on a staking pool in this epoch.\n    /// @param poolId Pool Id to query.\n    /// @return PoolStats struct for pool id.\n    function getStakingPoolStatsThisEpoch(bytes32 poolId)\n        external\n        view\n        returns (IStructs.PoolStats memory);\n\n    /// @dev Returns the total stake delegated to a specific staking pool,\n    ///      across all members.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Total stake delegated to pool.\n    function getTotalStakeDelegatedToPool(bytes32 poolId)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev An overridable way to access the deployed WETH contract.\n    ///      Must be view to allow overrides to access state.\n    /// @return wethContract The WETH contract instance.\n    function getWethContract()\n        external\n        view\n        returns (IEtherToken wethContract);\n\n    /// @dev An overridable way to access the deployed grgVault.\n    ///      Must be view to allow overrides to access state.\n    /// @return grgVault The grgVault contract.\n    function getGrgVault()\n        external\n        view\n        returns (IGrgVault grgVault);\n}\n",
		"../utils/0xUtils/IEtherToken.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >= 0.5.9;\n\nimport \"./IERC20Token.sol\";\n\n\nabstract contract IEtherToken is\n    IERC20Token\n{\n    function deposit()\n        public\n        virtual\n        payable;\n\n    function withdraw(uint256 amount)\n        public\n        virtual;\n}\n",
		"../utils/0xUtils/IERC20Token.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nabstract contract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        virtual\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        virtual\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        virtual\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        virtual\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        virtual\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        virtual\n        returns (uint256);\n}\n",
		"./interfaces/IStructs.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IStructs {\n\n    /// @dev Stats for a pool that earned rewards.\n    /// @param feesCollected Fees collected in ETH by this pool.\n    /// @param weightedStake Amount of weighted stake in the pool.\n    /// @param membersStake Amount of non-operator stake in the pool.\n    struct PoolStats {\n        uint256 feesCollected;\n        uint256 weightedStake;\n        uint256 membersStake;\n    }\n\n    /// @dev Holds stats aggregated across a set of pools.\n    /// @param rewardsAvailable Rewards (ETH) available to the epoch\n    ///        being finalized (the previous epoch). This is simply the balance\n    ///        of the contract at the end of the epoch.\n    /// @param numPoolsToFinalize The number of pools that have yet to be finalized through `finalizePools()`.\n    /// @param totalFeesCollected The total fees collected for the epoch being finalized.\n    /// @param totalWeightedStake The total fees collected for the epoch being finalized.\n    /// @param totalRewardsFinalized Amount of rewards that have been paid during finalization.\n    struct AggregatedStats {\n        uint256 rewardsAvailable;\n        uint256 numPoolsToFinalize;\n        uint256 totalFeesCollected;\n        uint256 totalWeightedStake;\n        uint256 totalRewardsFinalized;\n    }\n\n    /// @dev Encapsulates a balance for the current and next epochs.\n    /// Note that these balances may be stale if the current epoch\n    /// is greater than `currentEpoch`.\n    /// @param currentEpoch The current epoch\n    /// @param currentEpochBalance Balance in the current epoch.\n    /// @param nextEpochBalance Balance in `currentEpoch+1`.\n    struct StoredBalance {\n        uint64 currentEpoch;\n        uint96 currentEpochBalance;\n        uint96 nextEpochBalance;\n    }\n\n    /// @dev Statuses that stake can exist in.\n    ///      Any stake can be (re)delegated effective at the next epoch\n    ///      Undelegated stake can be withdrawn if it is available in both the current and next epoch\n    enum StakeStatus {\n        UNDELEGATED,\n        DELEGATED\n    }\n\n    /// @dev Info used to describe a status.\n    /// @param status Status of the stake.\n    /// @param poolId Unique Id of pool. This is set when status=DELEGATED.\n    struct StakeInfo {\n        StakeStatus status;\n        bytes32 poolId;\n    }\n\n    /// @dev Struct to represent a fraction.\n    /// @param numerator Numerator of fraction.\n    /// @param denominator Denominator of fraction.\n    struct Fraction {\n        uint256 numerator;\n        uint256 denominator;\n    }\n\n    /// @dev Holds the metadata for a staking pool.\n    /// @param operator Operator of the pool.\n    /// @param operatorShare Fraction of the total balance owned by the operator, in ppm.\n    /// @param stakingPal Wallet that collects 10% of otherwise redistributed community rewards.\n    struct Pool {\n        address operator;\n        uint32 operatorShare;\n        address stakingPal;\n    }\n}\n",
		"./interfaces/IGrgVault.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IGrgVault {\n\n    /// @dev Emmitted whenever a StakingProxy is set in a vault.\n    event StakingProxySet(address stakingProxyAddress);\n\n    /// @dev Emitted when the Staking contract is put into Catastrophic Failure Mode\n    /// @param sender Address of sender (`msg.sender`)\n    event InCatastrophicFailureMode(address sender);\n\n    /// @dev Emitted when Grg Tokens are deposited into the vault.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens deposited.\n    event Deposit(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted when Grg Tokens are withdrawn from the vault.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens withdrawn.\n    event Withdraw(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted whenever the GRG AssetProxy is set.\n    event GrgProxySet(address grgProxyAddress);\n\n    /// @dev Sets the address of the StakingProxy contract.\n    /// Note that only the contract staker can call this function.\n    /// @param _stakingProxyAddress Address of Staking proxy contract.\n    function setStakingProxy(address _stakingProxyAddress)\n        external;\n\n    /// @dev Vault enters into Catastrophic Failure Mode.\n    /// *** WARNING - ONCE IN CATOSTROPHIC FAILURE MODE, YOU CAN NEVER GO BACK! ***\n    /// Note that only the contract staker can call this function.\n    function enterCatastrophicFailure()\n        external;\n\n    /// @dev Sets the Grg proxy.\n    /// Note that only the contract staker can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param grgProxyAddress Address of the RigoBlock Grg Proxy.\n    function setGrgProxy(address grgProxyAddress)\n        external;\n\n    /// @dev Deposit an `amount` of Grg Tokens from `staker` into the vault.\n    /// Note that only the Staking contract can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens to deposit.\n    function depositFrom(address staker, uint256 amount)\n        external;\n\n    /// @dev Withdraw an `amount` of Grg Tokens to `staker` from the vault.\n    /// Note that only the Staking contract can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens to withdraw.\n    function withdrawFrom(address staker, uint256 amount)\n        external;\n\n    /// @dev Withdraw ALL Grg Tokens to `staker` from the vault.\n    /// Note that this can only be called when *in* Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    function withdrawAllFrom(address staker)\n        external\n        returns (uint256);\n\n    /// @dev Returns the balance in Grg Tokens of the `staker`\n    /// @return Balance in Grg.\n    function balanceOf(address staker)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the entire balance of Grg tokens in the vault.\n    function balanceOfGrgVault()\n        external\n        view\n        returns (uint256);\n}\n",
		"./sys/MixinParams.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../immutable/MixinStorage.sol\";\nimport \"../immutable/MixinConstants.sol\";\nimport \"../interfaces/IStakingEvents.sol\";\nimport \"../interfaces/IStakingProxy.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\n\n\ncontract MixinParams is\n    IStakingEvents,\n    MixinStorage,\n    MixinConstants\n{\n    /// @dev Set all configurable parameters at once.\n    /// @param _epochDurationInSeconds Minimum seconds between epochs.\n    /// @param _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @param _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @param _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @param _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function setParams(\n        uint256 _epochDurationInSeconds,\n        uint32 _rewardDelegatedStakeWeight,\n        uint256 _minimumPoolStake,\n        uint32 _cobbDouglasAlphaNumerator,\n        uint32 _cobbDouglasAlphaDenominator\n    )\n        external\n        onlyAuthorized\n    {\n        _setParams(\n            _epochDurationInSeconds,\n            _rewardDelegatedStakeWeight,\n            _minimumPoolStake,\n            _cobbDouglasAlphaNumerator,\n            _cobbDouglasAlphaDenominator\n        );\n\n        // Let the staking proxy enforce that these parameters are within\n        // acceptable ranges.\n        IStakingProxy(address(this)).assertValidStorageParams();\n    }\n\n    /// @dev Retrieves all configurable parameter values.\n    /// @return _epochDurationInSeconds Minimum seconds between epochs.\n    /// @return _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @return _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @return _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @return _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function getParams()\n        external\n        view\n        returns (\n            uint256 _epochDurationInSeconds,\n            uint32 _rewardDelegatedStakeWeight,\n            uint256 _minimumPoolStake,\n            uint32 _cobbDouglasAlphaNumerator,\n            uint32 _cobbDouglasAlphaDenominator\n        )\n    {\n        _epochDurationInSeconds = epochDurationInSeconds;\n        _rewardDelegatedStakeWeight = rewardDelegatedStakeWeight;\n        _minimumPoolStake = minimumPoolStake;\n        _cobbDouglasAlphaNumerator = cobbDouglasAlphaNumerator;\n        _cobbDouglasAlphaDenominator = cobbDouglasAlphaDenominator;\n    }\n\n    /// @dev Initialize storage belonging to this mixin.\n    function _initMixinParams()\n        internal\n    {\n        // Ensure state is uninitialized.\n        _assertParamsNotInitialized();\n\n        // Set up defaults.\n        uint256 _epochDurationInSeconds = 14 days;\n        uint32 _rewardDelegatedStakeWeight = (90 * PPM_DENOMINATOR) / 100;\n        uint256 _minimumPoolStake = 100 * MIN_TOKEN_VALUE;\n        uint32 _cobbDouglasAlphaNumerator = 2;\n        uint32 _cobbDouglasAlphaDenominator = 3;\n\n        _setParams(\n            _epochDurationInSeconds,\n            _rewardDelegatedStakeWeight,\n            _minimumPoolStake,\n            _cobbDouglasAlphaNumerator,\n            _cobbDouglasAlphaDenominator\n        );\n    }\n\n    /// @dev Asserts that upgradable storage has not yet been initialized.\n    function _assertParamsNotInitialized()\n        internal\n        view\n    {\n        if (epochDurationInSeconds != 0 &&\n            rewardDelegatedStakeWeight != 0 &&\n            minimumPoolStake != 0 &&\n            cobbDouglasAlphaNumerator != 0 &&\n            cobbDouglasAlphaDenominator != 0\n        ) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InitializationError(\n                    LibStakingRichErrors.InitializationErrorCodes.MixinParamsAlreadyInitialized\n                )\n            );\n        }\n    }\n\n    /// @dev Set all configurable parameters at once.\n    /// @param _epochDurationInSeconds Minimum seconds between epochs.\n    /// @param _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @param _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @param _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @param _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function _setParams(\n        uint256 _epochDurationInSeconds,\n        uint32 _rewardDelegatedStakeWeight,\n        uint256 _minimumPoolStake,\n        uint32 _cobbDouglasAlphaNumerator,\n        uint32 _cobbDouglasAlphaDenominator\n    )\n        private\n    {\n        epochDurationInSeconds = _epochDurationInSeconds;\n        rewardDelegatedStakeWeight = _rewardDelegatedStakeWeight;\n        minimumPoolStake = _minimumPoolStake;\n        cobbDouglasAlphaNumerator = _cobbDouglasAlphaNumerator;\n        cobbDouglasAlphaDenominator = _cobbDouglasAlphaDenominator;\n\n        emit ParamsSet(\n            _epochDurationInSeconds,\n            _rewardDelegatedStakeWeight,\n            _minimumPoolStake,\n            _cobbDouglasAlphaNumerator,\n            _cobbDouglasAlphaDenominator\n        );\n    }\n}\n",
		"../utils/0xUtils/LibRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
		"./immutable/MixinStorage.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinConstants.sol\";\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/Authorizable.sol\";\nimport \"../interfaces/IGrgVault.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\n\n\n// solhint-disable max-states-count, no-empty-blocks\ncontract MixinStorage is\n    Authorizable\n{\n    // address of staking contract\n    address public stakingContract;\n\n    // mapping from StakeStatus to global stored balance\n    // NOTE: only Status.DELEGATED is used to access this mapping, but this format\n    // is used for extensibility\n    mapping (uint8 => IStructs.StoredBalance) internal _globalStakeByStatus;\n\n    // mapping from StakeStatus to address of staker to stored balance\n    mapping (uint8 => mapping (address => IStructs.StoredBalance)) internal _ownerStakeByStatus;\n\n    // Mapping from Owner to Pool Id to Amount Delegated\n    mapping (address => mapping (bytes32 => IStructs.StoredBalance)) internal _delegatedStakeToPoolByOwner;\n\n    // Mapping from Pool Id to Amount Delegated\n    mapping (bytes32 => IStructs.StoredBalance) internal _delegatedStakeByPoolId;\n\n    // tracking Pool Id, a unique identifier for each staking pool.\n    bytes32 public lastPoolId;\n\n    /// @dev Mapping from RigoBlock pool subaccount to pool Id of rigoblock pool\n    /// @dev 0 RigoBlock pool subaccount address.\n    /// @return 0 The pool ID.\n    mapping (address => bytes32) public poolIdByRbPoolAccount;\n\n    // mapping from Pool Id to Pool\n    mapping (bytes32 => IStructs.Pool) internal _poolById;\n\n    /// @dev mapping from pool ID to reward balance of members\n    /// @dev 0 Pool ID.\n    /// @return 0 The total reward balance of members in this pool.\n    mapping (bytes32 => uint256) public rewardsByPoolId;\n\n    // The current epoch.\n    uint256 public currentEpoch;\n\n    // The current epoch start time.\n    uint256 public currentEpochStartTimeInSeconds;\n\n    // mapping from Pool Id to Epoch to Reward Ratio\n    mapping (bytes32 => mapping (uint256 => IStructs.Fraction)) internal _cumulativeRewardsByPool;\n\n    // mapping from Pool Id to Epoch\n    mapping (bytes32 => uint256) internal _cumulativeRewardsByPoolLastStored;\n\n    /// @dev Registered RigoBlock Proof_of_Performance contracts, capable of paying protocol fees.\n    /// @dev 0 The address to check.\n    /// @return 0 Whether the address is a registered proof_of_performance.\n    mapping (address => bool) public validPops;\n\n    /* Tweakable parameters */\n\n    // Minimum seconds between epochs.\n    uint256 public epochDurationInSeconds;\n\n    // How much delegated stake is weighted vs operator stake, in ppm.\n    uint32 public rewardDelegatedStakeWeight;\n\n    // Minimum amount of stake required in a pool to collect rewards.\n    uint256 public minimumPoolStake;\n\n    // Numerator for cobb douglas alpha factor.\n    uint32 public cobbDouglasAlphaNumerator;\n\n    // Denominator for cobb douglas alpha factor.\n    uint32 public cobbDouglasAlphaDenominator;\n\n    /* State for finalization */\n\n    /// @dev Stats for each pool that generated fees with sufficient stake to earn rewards.\n    ///      See `_minimumPoolStake` in `MixinParams`.\n    /// @dev 0 Pool ID.\n    /// @dev 1 Epoch number.\n    /// @return 0 Pool fee stats.\n    mapping (bytes32 => mapping (uint256 => IStructs.PoolStats)) public poolStatsByEpoch;\n\n    /// @dev Aggregated stats across all pools that generated fees with sufficient stake to earn rewards.\n    ///      See `_minimumPoolStake` in MixinParams.\n    /// @dev 0 Epoch number.\n    /// @return 0 Reward computation stats.\n    mapping (uint256 => IStructs.AggregatedStats) public aggregatedStatsByEpoch;\n\n    /// @dev The WETH balance of this contract that is reserved for pool reward payouts.\n    uint256 public wethReservedForPoolRewards;\n}\n",
		"./immutable/MixinConstants.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ncontract MixinConstants {\n\n    // 100% in parts-per-million.\n    uint32 constant internal PPM_DENOMINATOR = 10**6;\n\n    bytes32 constant internal NIL_POOL_ID = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    address constant internal NIL_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n    uint256 constant internal MIN_TOKEN_VALUE = 10**18;\n}\n",
		"../utils/0xUtils/Authorizable.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./interfaces/IAuthorizable.sol\";\nimport \"./LibAuthorizableRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\nimport \"./Ownable.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract Authorizable is\n    Ownable,\n    IAuthorizable\n{\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        _assertSenderIsAuthorized();\n        _;\n    }\n\n    /// @dev Whether an address is authorized to call privileged functions.\n    /// @dev 0 Address to query.\n    /// @return 0 Whether the address is authorized.\n    mapping (address => bool) public authorized;\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @dev 0 Index of authorized address.\n    /// @return 0 Authorized address.\n    address[] public authorities;\n\n    /// @dev Initializes the `owner` address.\n    constructor()\n        Ownable()\n    {}\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        _addAuthorizedAddress(target);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        if (!authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetNotAuthorizedError(target));\n        }\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                _removeAuthorizedAddressAtIndex(target, i);\n                break;\n            }\n        }\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        override\n        onlyOwner\n    {\n        _removeAuthorizedAddressAtIndex(target, index);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        override\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n\n    /// @dev Reverts if msg.sender is not authorized.\n    function _assertSenderIsAuthorized()\n        internal\n        view\n    {\n        if (!authorized[msg.sender]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.SenderNotAuthorizedError(msg.sender));\n        }\n    }\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function _addAuthorizedAddress(address target)\n        internal\n    {\n        // Ensure that the target is not the zero address.\n        if (target == address(0)) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.ZeroCantBeAuthorizedError());\n        }\n\n        // Ensure that the target is not already authorized.\n        if (authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetAlreadyAuthorizedError(target));\n        }\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorization of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function _removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        internal\n    {\n        if (!authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetNotAuthorizedError(target));\n        }\n        if (index >= authorities.length) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.IndexOutOfBoundsError(\n                index,\n                authorities.length\n            ));\n        }\n        if (authorities[index] != target) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.AuthorizedAddressMismatchError(\n                authorities[index],\n                target\n            ));\n        }\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.pop();\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n}\n",
		"../utils/0xUtils/interfaces/IAuthorizable.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./IOwnable.sol\";\n\n\nabstract contract IAuthorizable is\n    IOwnable\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        virtual;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        virtual;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        virtual;\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        virtual\n        returns (address[] memory);\n}\n",
		"../utils/0xUtils/interfaces/IOwnable.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nabstract contract IOwnable {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner)\n        public\n        virtual;\n}\n",
		"../utils/0xUtils/LibAuthorizableRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nlibrary LibAuthorizableRichErrors {\n\n    // bytes4(keccak256(\"AuthorizedAddressMismatchError(address,address)\"))\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\n        0x140a84db;\n\n    // bytes4(keccak256(\"IndexOutOfBoundsError(uint256,uint256)\"))\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\n        0xe9f83771;\n\n    // bytes4(keccak256(\"SenderNotAuthorizedError(address)\"))\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xb65a25b9;\n\n    // bytes4(keccak256(\"TargetAlreadyAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\n        0xde16f1a0;\n\n    // bytes4(keccak256(\"TargetNotAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xeb5108a2;\n\n    // bytes4(keccak256(\"ZeroCantBeAuthorizedError()\"))\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\n        hex\"57654fe4\";\n\n    // solhint-disable func-name-mixedcase\n    function AuthorizedAddressMismatchError(\n        address authorized,\n        address target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\n            authorized,\n            target\n        );\n    }\n\n    function IndexOutOfBoundsError(\n        uint256 index,\n        uint256 length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\n            index,\n            length\n        );\n    }\n\n    function SenderNotAuthorizedError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\n            sender\n        );\n    }\n\n    function TargetAlreadyAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function TargetNotAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function ZeroCantBeAuthorizedError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\n    }\n}\n",
		"../utils/0xUtils/Ownable.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./interfaces/IOwnable.sol\";\nimport \"./LibOwnableRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\ncontract Ownable is\n    IOwnable\n{\n    /// @dev The owner of this contract.\n    /// @return 0 The owner address.\n    address public owner;\n\n    constructor ()\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    /// @dev Change the owner of this contract.\n    /// @param newOwner New owner address.\n    function transferOwnership(address newOwner)\n        public\n        override\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            LibRichErrors.rrevert(LibOwnableRichErrors.TransferOwnerToZeroError());\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            LibRichErrors.rrevert(LibOwnableRichErrors.OnlyOwnerError(\n                msg.sender,\n                owner\n            ));\n        }\n    }\n}\n",
		"../utils/0xUtils/LibOwnableRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nlibrary LibOwnableRichErrors {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n",
		"./libs/LibStakingRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../interfaces/IStructs.sol\";\n\n\nlibrary LibStakingRichErrors {\n\n    enum OperatorShareErrorCodes {\n        OperatorShareTooLarge,\n        CanOnlyDecreaseOperatorShare\n    }\n\n    enum InitializationErrorCodes {\n        MixinSchedulerAlreadyInitialized,\n        MixinParamsAlreadyInitialized\n    }\n\n    enum InvalidParamValueErrorCodes {\n        InvalidCobbDouglasAlpha,\n        InvalidRewardDelegatedStakeWeight,\n        InvalidMaximumMakersInPool,\n        InvalidMinimumPoolStake,\n        InvalidEpochDuration\n    }\n\n    enum PopManagerErrorCodes {\n        PopAlreadyRegistered,\n        PopNotRegistered\n    }\n\n    // bytes4(keccak256(\"OnlyCallableByExchangeError(address)\")) // TODO: amend to OnlyCallableByPopError\n    bytes4 internal constant ONLY_CALLABLE_BY_POP_ERROR_SELECTOR =\n        0xb56d2df0;\n\n    // bytes4(keccak256(\"PopManagerError(uint8,address)\"))\n    bytes4 internal constant POP_MANAGER_ERROR_SELECTOR =\n        0xb9588e43;\n\n    // bytes4(keccak256(\"InsufficientBalanceError(uint256,uint256)\"))\n    bytes4 internal constant INSUFFICIENT_BALANCE_ERROR_SELECTOR =\n        0x84c8b7c9;\n\n    // bytes4(keccak256(\"OnlyCallableByPoolOperatorError(address,bytes32)\"))\n    bytes4 internal constant ONLY_CALLABLE_BY_POOL_OPERATOR_ERROR_SELECTOR =\n        0x82ded785;\n\n    // bytes4(keccak256(\"BlockTimestampTooLowError(uint256,uint256)\"))\n    bytes4 internal constant BLOCK_TIMESTAMP_TOO_LOW_ERROR_SELECTOR =\n        0xa6bcde47;\n\n    // bytes4(keccak256(\"OnlyCallableByStakingContractError(address)\"))\n    bytes4 internal constant ONLY_CALLABLE_BY_STAKING_CONTRACT_ERROR_SELECTOR =\n        0xca1d07a2;\n\n    // bytes4(keccak256(\"OnlyCallableIfInCatastrophicFailureError()\"))\n    bytes internal constant ONLY_CALLABLE_IF_IN_CATASTROPHIC_FAILURE_ERROR =\n        hex\"3ef081cc\";\n\n    // bytes4(keccak256(\"OnlyCallableIfNotInCatastrophicFailureError()\"))\n    bytes internal constant ONLY_CALLABLE_IF_NOT_IN_CATASTROPHIC_FAILURE_ERROR =\n        hex\"7dd020ce\";\n\n    // bytes4(keccak256(\"OperatorShareError(uint8,bytes32,uint32)\"))\n    bytes4 internal constant OPERATOR_SHARE_ERROR_SELECTOR =\n        0x22df9597;\n\n    // bytes4(keccak256(\"PoolExistenceError(bytes32,bool)\"))\n    bytes4 internal constant POOL_EXISTENCE_ERROR_SELECTOR =\n        0x9ae94f01;\n\n    // bytes4(keccak256(\"ProxyDestinationCannotBeNilError()\"))\n    bytes internal constant PROXY_DESTINATION_CANNOT_BE_NIL_ERROR =\n        hex\"6eff8285\";\n\n    // bytes4(keccak256(\"InitializationError(uint8)\"))\n    bytes4 internal constant INITIALIZATION_ERROR_SELECTOR =\n        0x0b02d773;\n\n    // bytes4(keccak256(\"InvalidParamValueError(uint8)\"))\n    bytes4 internal constant INVALID_PARAM_VALUE_ERROR_SELECTOR =\n        0xfc45bd11;\n\n    // bytes4(keccak256(\"InvalidProtocolFeePaymentError(uint256,uint256)\"))\n    bytes4 internal constant INVALID_PROTOCOL_FEE_PAYMENT_ERROR_SELECTOR =\n        0x31d7a505;\n\n    // bytes4(keccak256(\"PreviousEpochNotFinalizedError(uint256,uint256)\"))\n    bytes4 internal constant PREVIOUS_EPOCH_NOT_FINALIZED_ERROR_SELECTOR =\n        0x614b800a;\n\n    // bytes4(keccak256(\"PoolNotFinalizedError(bytes32,uint256)\"))\n    bytes4 internal constant POOL_NOT_FINALIZED_ERROR_SELECTOR =\n        0x5caa0b05;\n\n    // solhint-disable func-name-mixedcase\n    function OnlyCallableByPopError(\n        address senderAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_CALLABLE_BY_POP_ERROR_SELECTOR,\n            senderAddress\n        );\n    }\n\n    function PopManagerError(\n        PopManagerErrorCodes errorCodes,\n        address popAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            POP_MANAGER_ERROR_SELECTOR,\n            errorCodes,\n            popAddress\n        );\n    }\n\n    function InsufficientBalanceError(\n        uint256 amount,\n        uint256 balance\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INSUFFICIENT_BALANCE_ERROR_SELECTOR,\n            amount,\n            balance\n        );\n    }\n\n    function OnlyCallableByPoolOperatorError(\n        address senderAddress,\n        bytes32 poolId\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_CALLABLE_BY_POOL_OPERATOR_ERROR_SELECTOR,\n            senderAddress,\n            poolId\n        );\n    }\n\n    function BlockTimestampTooLowError(\n        uint256 epochEndTime,\n        uint256 currentBlockTimestamp\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            BLOCK_TIMESTAMP_TOO_LOW_ERROR_SELECTOR,\n            epochEndTime,\n            currentBlockTimestamp\n        );\n    }\n\n    function OnlyCallableByStakingContractError(\n        address senderAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_CALLABLE_BY_STAKING_CONTRACT_ERROR_SELECTOR,\n            senderAddress\n        );\n    }\n\n    function OnlyCallableIfInCatastrophicFailureError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ONLY_CALLABLE_IF_IN_CATASTROPHIC_FAILURE_ERROR;\n    }\n\n    function OnlyCallableIfNotInCatastrophicFailureError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ONLY_CALLABLE_IF_NOT_IN_CATASTROPHIC_FAILURE_ERROR;\n    }\n\n    function OperatorShareError(\n        OperatorShareErrorCodes errorCodes,\n        bytes32 poolId,\n        uint32 operatorShare\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            OPERATOR_SHARE_ERROR_SELECTOR,\n            errorCodes,\n            poolId,\n            operatorShare\n        );\n    }\n\n    function PoolExistenceError(\n        bytes32 poolId,\n        bool alreadyExists\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            POOL_EXISTENCE_ERROR_SELECTOR,\n            poolId,\n            alreadyExists\n        );\n    }\n\n    function InvalidProtocolFeePaymentError(\n        uint256 expectedProtocolFeePaid,\n        uint256 actualProtocolFeePaid\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_PROTOCOL_FEE_PAYMENT_ERROR_SELECTOR,\n            expectedProtocolFeePaid,\n            actualProtocolFeePaid\n        );\n    }\n\n    function InitializationError(InitializationErrorCodes code)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INITIALIZATION_ERROR_SELECTOR,\n            uint8(code)\n        );\n    }\n\n    function InvalidParamValueError(InvalidParamValueErrorCodes code)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_PARAM_VALUE_ERROR_SELECTOR,\n            uint8(code)\n        );\n    }\n\n    function ProxyDestinationCannotBeNilError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return PROXY_DESTINATION_CANNOT_BE_NIL_ERROR;\n    }\n\n    function PreviousEpochNotFinalizedError(\n        uint256 unfinalizedEpoch,\n        uint256 unfinalizedPoolsRemaining\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            PREVIOUS_EPOCH_NOT_FINALIZED_ERROR_SELECTOR,\n            unfinalizedEpoch,\n            unfinalizedPoolsRemaining\n        );\n    }\n\n    function PoolNotFinalizedError(\n        bytes32 poolId,\n        uint256 epoch\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            POOL_NOT_FINALIZED_ERROR_SELECTOR,\n            poolId,\n            epoch\n        );\n    }\n}\n",
		"./interfaces/IStakingEvents.sol": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IStakingEvents {\n\n    /// @dev Emitted by MixinStake when GRG is staked.\n    /// @param staker of GRG.\n    /// @param amount of GRG staked.\n    event Stake(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted by MixinStake when GRG is unstaked.\n    /// @param staker of GRG.\n    /// @param amount of GRG unstaked.\n    event Unstake(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted by MixinStake when GRG is unstaked.\n    /// @param staker of GRG.\n    /// @param amount of GRG unstaked.\n    event MoveStake(\n        address indexed staker,\n        uint256 amount,\n        uint8 fromStatus,\n        bytes32 indexed fromPool,\n        uint8 toStatus,\n        bytes32 indexed toPool\n    );\n\n    /// @dev Emitted by MixinExchangeManager when an exchange is added.\n    /// @param exchangeAddress Address of new exchange.\n    event PopAdded(\n        address exchangeAddress\n    );\n\n    /// @dev Emitted by MixinExchangeManager when an exchange is removed.\n    /// @param exchangeAddress Address of removed exchange.\n    event PopRemoved(\n        address exchangeAddress\n    );\n\n    /// @dev Emitted by MixinExchangeFees when a pool starts earning rewards in an epoch.\n    /// @param epoch The epoch in which the pool earned rewards.\n    /// @param poolId The ID of the pool.\n    event StakingPoolEarnedRewardsInEpoch(\n        uint256 indexed epoch,\n        bytes32 indexed poolId\n    );\n\n    /// @dev Emitted by MixinFinalizer when an epoch has ended.\n    /// @param epoch The epoch that ended.\n    /// @param numPoolsToFinalize Number of pools that earned rewards during `epoch` and must be finalized.\n    /// @param rewardsAvailable Rewards available to all pools that earned rewards during `epoch`.\n    /// @param totalWeightedStake Total weighted stake across all pools that earned rewards during `epoch`.\n    /// @param totalFeesCollected Total fees collected across all pools that earned rewards during `epoch`.\n    event EpochEnded(\n        uint256 indexed epoch,\n        uint256 numPoolsToFinalize,\n        uint256 rewardsAvailable,\n        uint256 totalFeesCollected,\n        uint256 totalWeightedStake\n    );\n\n    /// @dev Emitted by MixinFinalizer when an epoch is fully finalized.\n    /// @param epoch The epoch being finalized.\n    /// @param rewardsPaid Total amount of rewards paid out.\n    /// @param rewardsRemaining Rewards left over.\n    event EpochFinalized(\n        uint256 indexed epoch,\n        uint256 rewardsPaid,\n        uint256 rewardsRemaining\n    );\n\n    /// @dev Emitted by MixinFinalizer when rewards are paid out to a pool.\n    /// @param epoch The epoch when the rewards were paid out.\n    /// @param poolId The pool's ID.\n    /// @param operatorReward Amount of reward paid to pool operator.\n    /// @param membersReward Amount of reward paid to pool members.\n    event RewardsPaid(\n        uint256 indexed epoch,\n        bytes32 indexed poolId,\n        uint256 operatorReward,\n        uint256 membersReward\n    );\n\n    /// @dev Emitted whenever staking parameters are changed via the `setParams()` function.\n    /// @param epochDurationInSeconds Minimum seconds between epochs.\n    /// @param rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @param minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @param cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @param cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    event ParamsSet(\n        uint256 epochDurationInSeconds,\n        uint32 rewardDelegatedStakeWeight,\n        uint256 minimumPoolStake,\n        uint256 cobbDouglasAlphaNumerator,\n        uint256 cobbDouglasAlphaDenominator\n    );\n\n    /// @dev Emitted by MixinStakingPool when a new pool is created.\n    /// @param poolId Unique id generated for pool.\n    /// @param operator The operator (creator) of pool.\n    /// @param operatorShare The share of rewards given to the operator, in ppm.\n    event StakingPoolCreated(\n        bytes32 poolId,\n        address operator,\n        uint32 operatorShare\n    );\n\n    /// @dev Emitted by MixinStakingPool when a rigoblock pool is added to its staking pool.\n    /// @param rbPoolAddress Adress of maker added to pool.\n    /// @param poolId Unique id of pool.\n    event RbPoolStakingPoolSet(\n        address indexed rbPoolAddress,\n        bytes32 indexed poolId\n    );\n\n    /// @dev Emitted when a staking pool's operator share is decreased.\n    /// @param poolId Unique Id of pool.\n    /// @param oldOperatorShare Previous share of rewards owned by operator.\n    /// @param newOperatorShare Newly decreased share of rewards owned by operator.\n    event OperatorShareDecreased(\n        bytes32 indexed poolId,\n        uint32 oldOperatorShare,\n        uint32 newOperatorShare\n    );\n}\n",
		"./interfaces/IStakingProxy.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IStructs.sol\";\n\n\nabstract contract IStakingProxy {\n\n    /// @dev Emitted by StakingProxy when a staking contract is attached.\n    /// @param newStakingContractAddress Address of newly attached staking contract.\n    event StakingContractAttachedToProxy(\n        address newStakingContractAddress\n    );\n\n    /// @dev Emitted by StakingProxy when a staking contract is detached.\n    event StakingContractDetachedFromProxy();\n\n    /// @dev Attach a staking contract; future calls will be delegated to the staking contract.\n    /// Note that this is callable only by an authorized address.\n    /// @param _stakingContract Address of staking contract.\n    function attachStakingContract(address _stakingContract)\n        external\n        virtual;\n\n    /// @dev Detach the current staking contract.\n    /// Note that this is callable only by an authorized address.\n    function detachStakingContract()\n        external\n        virtual;\n\n    /// @dev Asserts that an epoch is between 5 and 30 days long.\n    //       Asserts that 0 < cobb douglas alpha value <= 1.\n    //       Asserts that a stake weight is <= 100%.\n    //       Asserts that pools allow >= 1 maker.\n    //       Asserts that all addresses are initialized.\n    function assertValidStorageParams()\n        external\n        view\n        virtual;\n}\n",
		"./stake/MixinStake.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../staking_pools/MixinStakingPool.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\n\n\ncontract MixinStake is\n    MixinStakingPool\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Stake GRG tokens. Tokens are deposited into the GRG Vault.\n    ///      Unstake to retrieve the GRG. Stake is in the 'Active' status.\n    /// @param amount Amount of GRG to stake.\n    function stake(uint256 amount)\n        external\n    {\n        address staker = msg.sender;\n\n        // deposit equivalent amount of GRG into vault\n        getGrgVault().depositFrom(staker, amount);\n\n        // mint stake\n        _increaseCurrentAndNextBalance(\n            _ownerStakeByStatus[uint8(IStructs.StakeStatus.UNDELEGATED)][staker],\n            amount\n        );\n\n        // notify\n        emit Stake(\n            staker,\n            amount\n        );\n    }\n\n    /// @dev Unstake. Tokens are withdrawn from the GRG Vault and returned to\n    ///      the staker. Stake must be in the 'undelegated' status in both the\n    ///      current and next epoch in order to be unstaked.\n    /// @param amount Amount of GRG to unstake.\n    function unstake(uint256 amount)\n        external\n    {\n        address staker = msg.sender;\n\n        IStructs.StoredBalance memory undelegatedBalance =\n            _loadCurrentBalance(_ownerStakeByStatus[uint8(IStructs.StakeStatus.UNDELEGATED)][staker]);\n\n        // stake must be undelegated in current and next epoch to be withdrawn\n        uint256 currentWithdrawableStake = LibSafeMath.min256(\n            undelegatedBalance.currentEpochBalance,\n            undelegatedBalance.nextEpochBalance\n        );\n\n        if (amount > currentWithdrawableStake) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InsufficientBalanceError(\n                    amount,\n                    currentWithdrawableStake\n                )\n            );\n        }\n\n        // burn undelegated stake\n        _decreaseCurrentAndNextBalance(\n            _ownerStakeByStatus[uint8(IStructs.StakeStatus.UNDELEGATED)][staker],\n            amount\n        );\n\n        // withdraw equivalent amount of GRG from vault\n        getGrgVault().withdrawFrom(staker, amount);\n\n        // emit stake event\n        emit Unstake(\n            staker,\n            amount\n        );\n    }\n\n    /// @dev Moves stake between statuses: 'undelegated' or 'delegated'.\n    ///      Delegated stake can also be moved between pools.\n    ///      This change comes into effect next epoch.\n    /// @param from Status to move stake out of.\n    /// @param to Status to move stake into.\n    /// @param amount Amount of stake to move.\n    function moveStake(\n        IStructs.StakeInfo calldata from,\n        IStructs.StakeInfo calldata to,\n        uint256 amount\n    )\n        external\n    {\n        address staker = msg.sender;\n\n        // Sanity check: no-op if no stake is being moved.\n        if (amount == 0) {\n            return;\n        }\n\n        // Sanity check: no-op if moving stake from undelegated to undelegated.\n        if (from.status == IStructs.StakeStatus.UNDELEGATED &&\n            to.status == IStructs.StakeStatus.UNDELEGATED) {\n            return;\n        }\n\n        // handle delegation\n        if (from.status == IStructs.StakeStatus.DELEGATED) {\n            _undelegateStake(\n                from.poolId,\n                staker,\n                amount\n            );\n        }\n\n        if (to.status == IStructs.StakeStatus.DELEGATED) {\n            _delegateStake(\n                to.poolId,\n                staker,\n                amount\n            );\n        }\n\n        // execute move\n        IStructs.StoredBalance storage fromPtr = _ownerStakeByStatus[uint8(from.status)][staker];\n        IStructs.StoredBalance storage toPtr = _ownerStakeByStatus[uint8(to.status)][staker];\n        _moveStake(\n            fromPtr,\n            toPtr,\n            amount\n        );\n\n        // notify\n        emit MoveStake(\n            staker,\n            amount,\n            uint8(from.status),\n            from.poolId,\n            uint8(to.status),\n            to.poolId\n        );\n    }\n\n    /// @dev Delegates a owners stake to a staking pool.\n    /// @param poolId Id of pool to delegate to.\n    /// @param staker Owner who wants to delegate.\n    /// @param amount Amount of stake to delegate.\n    function _delegateStake(\n        bytes32 poolId,\n        address staker,\n        uint256 amount\n    )\n        private\n    {\n        // Sanity check the pool we're delegating to exists.\n        _assertStakingPoolExists(poolId);\n\n        _withdrawAndSyncDelegatorRewards(\n            poolId,\n            staker\n        );\n\n        // Increase how much stake the staker has delegated to the input pool.\n        _increaseNextBalance(\n            _delegatedStakeToPoolByOwner[staker][poolId],\n            amount\n        );\n\n        // Increase how much stake has been delegated to pool.\n        _increaseNextBalance(\n            _delegatedStakeByPoolId[poolId],\n            amount\n        );\n\n        // Increase next balance of global delegated stake.\n        _increaseNextBalance(\n            _globalStakeByStatus[uint8(IStructs.StakeStatus.DELEGATED)],\n            amount\n        );\n    }\n\n    /// @dev Un-Delegates a owners stake from a staking pool.\n    /// @param poolId Id of pool to un-delegate from.\n    /// @param staker Owner who wants to un-delegate.\n    /// @param amount Amount of stake to un-delegate.\n    function _undelegateStake(\n        bytes32 poolId,\n        address staker,\n        uint256 amount\n    )\n        private\n    {\n        // sanity check the pool we're undelegating from exists\n        _assertStakingPoolExists(poolId);\n\n        _withdrawAndSyncDelegatorRewards(\n            poolId,\n            staker\n        );\n\n        // Decrease how much stake the staker has delegated to the input pool.\n        _decreaseNextBalance(\n            _delegatedStakeToPoolByOwner[staker][poolId],\n            amount\n        );\n\n        // Decrease how much stake has been delegated to pool.\n        _decreaseNextBalance(\n            _delegatedStakeByPoolId[poolId],\n            amount\n        );\n\n        // Decrease next balance of global delegated stake (aggregated across all stakers).\n        _decreaseNextBalance(\n            _globalStakeByStatus[uint8(IStructs.StakeStatus.DELEGATED)],\n            amount\n        );\n    }\n}\n",
		"../utils/0xUtils/LibSafeMath.sol": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"../utils/0xUtils/LibSafeMathRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity >=0.5.4 <0.8.0;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
		"./staking_pools/MixinStakingPool.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../sys/MixinAbstract.sol\";\nimport \"./MixinStakingPoolRewards.sol\";\n\n\ncontract MixinStakingPool is\n    MixinAbstract,\n    MixinStakingPoolRewards\n{\n    using LibSafeMath for uint256;\n    using LibSafeDowncast for uint256;\n\n    /// @dev Asserts that the sender is the operator of the input pool.\n    /// @param poolId Pool sender must be operator of.\n    modifier onlyStakingPoolOperator(bytes32 poolId) {\n        _assertSenderIsPoolOperator(poolId);\n        _;\n    }\n\n    /// @dev Create a new staking pool. The sender will be the operator of this pool.\n    /// Note that an operator must be payable.\n    /// @param rigoblockPoolAddress Adds rigoblock pool to the created staking pool for convenience if non-null.\n    /// @return poolId The unique pool id generated for this pool.\n    function createStakingPool(address rigoblockPoolAddress)\n        external\n        returns (bytes32 poolId)\n    {\n        // TODO: test\n        (uint256 rbPoolId, , , , address rbPoolOwner, ) = getDragoRegistry().fromAddress(rigoblockPoolAddress);\n        require(\n            rbPoolId != uint256(0),\n            \"NON_REGISTERED_RB_POOL_ERROR\"\n        );\n        // note that an operator must be payable\n        address operator = rbPoolOwner;\n\n        // add stakingPal, which will receive part of community reward if not pool operator\n        // staking pal can be added in storage in Pool by adding 1 address\n        address stakingPal;\n        if (rbPoolOwner != msg.sender) {\n            stakingPal = msg.sender;\n        }\n\n        // operator initially shares 30% with stakers\n        uint32 operatorShare = uint32(700000);\n\n        // check that staking pool does not exist and add unique id for this pool\n        _assertStakingPoolDoesNotExist(bytes32(rbPoolId));\n        poolId = bytes32(rbPoolId);\n\n        // sanity check on operator share\n        _assertNewOperatorShare(\n            poolId,\n            PPM_DENOMINATOR,    // max operator share\n            operatorShare\n        );\n\n        // create and store pool\n        IStructs.Pool memory pool = IStructs.Pool({\n            operator: operator,\n            operatorShare: operatorShare,\n            stakingPal: stakingPal\n        });\n        _poolById[poolId] = pool;\n\n        // Staking pool has been created\n        emit StakingPoolCreated(poolId, operator, operatorShare);\n\n        joinStakingPoolAsRbPoolAccount(poolId, rigoblockPoolAddress);\n\n        return poolId;\n    }\n    \n    // TODO: pool operator can reset stakingpal\n    /*\n    function setStakingPal(bytes32 poolId, address stakingPal)\n        external\n        onlyStakingPoolOperator(poolId)\n    {\n        stakingPal = stakingPal;\n    }\n    */\n\n    /// @dev Decreases the operator share for the given pool (i.e. increases pool rewards for members).\n    /// @param poolId Unique Id of pool.\n    /// @param newOperatorShare The newly decreased percentage of any rewards owned by the operator.\n    function decreaseStakingPoolOperatorShare(bytes32 poolId, uint32 newOperatorShare)\n        external\n        onlyStakingPoolOperator(poolId)\n    {\n        // load pool and assert that we can decrease\n        uint32 currentOperatorShare = _poolById[poolId].operatorShare;\n        _assertNewOperatorShare(\n            poolId,\n            currentOperatorShare,\n            newOperatorShare\n        );\n\n        // decrease operator share\n        _poolById[poolId].operatorShare = newOperatorShare;\n        emit OperatorShareDecreased(\n            poolId,\n            currentOperatorShare,\n            newOperatorShare\n        );\n    }\n\n    /// @dev Allows caller to join a staking pool as a rigoblock pool account.\n    /// @param poolId Unique id of pool.\n    /// @param rigoblockPoolAccount Address of subaccount to be added to staking pool.\n    function joinStakingPoolAsRbPoolAccount(\n        bytes32 poolId,\n        address rigoblockPoolAccount)\n        public\n    {\n        //TODO: test\n        (address poolAddress, , , uint256 rbPoolId, , ) = getDragoRegistry().fromId(uint256(poolId));\n        \n        // only rigoblock pools registered in drago registry can have accounts added to their staking pool\n        if (rbPoolId == uint256(0)) {\n            revert(\"NON_REGISTERED_POOL_ID_ERROR\");\n        }\n        \n        // only allow pool itself to be registered account\n        if (poolAddress != rigoblockPoolAccount) {\n            revert(\"POOL_TO_JOIN_NOT_SELF_ERROR\");\n        }\n        \n        // write to storage\n        poolIdByRbPoolAccount[poolAddress] = poolId;\n        emit RbPoolStakingPoolSet(\n            rigoblockPoolAccount,\n            poolId\n        );\n    }\n\n    /// @dev Returns a staking pool\n    /// @param poolId Unique id of pool.\n    function getStakingPool(bytes32 poolId)\n        public\n        view\n        returns (IStructs.Pool memory)\n    {\n        return _poolById[poolId];\n    }\n\n    /// @dev Reverts iff a staking pool does not exist.\n    /// @param poolId Unique id of pool.\n    function _assertStakingPoolExists(bytes32 poolId)\n        internal\n        view\n    {\n        if (_poolById[poolId].operator == NIL_ADDRESS) {\n            // we use the pool's operator as a proxy for its existence\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.PoolExistenceError(\n                    poolId,\n                    false\n                )\n            );\n        }\n    }\n    \n    /// @dev Reverts iff a staking pool does exist.\n    /// @param poolId Unique id of pool.\n    function _assertStakingPoolDoesNotExist(bytes32 poolId)\n        internal\n        view\n    {\n        if (_poolById[poolId].operator != NIL_ADDRESS) {\n            // we use the pool's operator as a proxy for its existence\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.PoolExistenceError(\n                    poolId,\n                    false\n                )\n            );\n        }\n    }\n\n    /// @dev Reverts iff the new operator share is invalid.\n    /// @param poolId Unique id of pool.\n    /// @param currentOperatorShare Current operator share.\n    /// @param newOperatorShare New operator share.\n    function _assertNewOperatorShare(\n        bytes32 poolId,\n        uint32 currentOperatorShare,\n        uint32 newOperatorShare\n    )\n        private\n        pure\n    {\n        // sanity checks\n        if (newOperatorShare > PPM_DENOMINATOR) {\n            // operator share must be a valid fraction\n            LibRichErrors.rrevert(LibStakingRichErrors.OperatorShareError(\n                LibStakingRichErrors.OperatorShareErrorCodes.OperatorShareTooLarge,\n                poolId,\n                newOperatorShare\n            ));\n        } else if (newOperatorShare > currentOperatorShare) {\n            // new share must be less than or equal to the current share\n            LibRichErrors.rrevert(LibStakingRichErrors.OperatorShareError(\n                LibStakingRichErrors.OperatorShareErrorCodes.CanOnlyDecreaseOperatorShare,\n                poolId,\n                newOperatorShare\n            ));\n        }\n    }\n\n    /// @dev Asserts that the sender is the operator of the input pool.\n    /// @param poolId Pool sender must be operator of.\n    function _assertSenderIsPoolOperator(bytes32 poolId)\n        private\n        view\n    {\n        address operator = _poolById[poolId].operator;\n        if (msg.sender != operator) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.OnlyCallableByPoolOperatorError(\n                    msg.sender,\n                    poolId\n                )\n            );\n        }\n    }\n    \n    /// @dev Computes the reward owed to a pool during finalization.\n    ///      Does nothing if the pool is already finalized.\n    /// @param poolId The pool's ID.\n    /// @return totalReward The total reward owed to a pool.\n    /// @return membersStake The total stake for all non-operator members in\n    ///         this pool.\n    function _getUnfinalizedPoolRewards(bytes32 poolId)\n        internal\n        view\n        virtual\n        override(MixinAbstract, MixinStakingPoolRewards)\n        returns (\n            uint256 totalReward,\n            uint256 membersStake)\n    {}\n\n    /// @dev Asserts that a pool has been finalized last epoch.\n    /// @param poolId The id of the pool that should have been finalized.\n    function _assertPoolFinalizedLastEpoch(bytes32 poolId)\n        internal\n        view\n        virtual\n        override(MixinAbstract, MixinStakingPoolRewards)\n    {}\n}\n",
		"./sys/MixinAbstract.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Exposes some internal functions from various contracts to avoid\n///      cyclical dependencies.\nabstract contract MixinAbstract {\n\n    /// @dev Computes the reward owed to a pool during finalization.\n    ///      Does nothing if the pool is already finalized.\n    /// @param poolId The pool's ID.\n    /// @return totalReward The total reward owed to a pool.\n    /// @return membersStake The total stake for all non-operator members in\n    ///         this pool.\n    function _getUnfinalizedPoolRewards(bytes32 poolId)\n        internal\n        view\n        virtual\n        returns (\n            uint256 totalReward,\n            uint256 membersStake\n        );\n\n    /// @dev Asserts that a pool has been finalized last epoch.\n    /// @param poolId The id of the pool that should have been finalized.\n    function _assertPoolFinalizedLastEpoch(bytes32 poolId)\n        internal\n        view\n        virtual;\n}\n",
		"./staking_pools/MixinStakingPoolRewards.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibMath.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"./MixinCumulativeRewards.sol\";\nimport \"../sys/MixinAbstract.sol\";\n\n\ncontract MixinStakingPoolRewards is\n    MixinAbstract,\n    MixinCumulativeRewards\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Withdraws the caller's WETH rewards that have accumulated\n    ///      until the last epoch.\n    /// @param poolId Unique id of pool.\n    function withdrawDelegatorRewards(bytes32 poolId)\n        external\n    {\n        _withdrawAndSyncDelegatorRewards(poolId, msg.sender);\n    }\n\n    /// @dev Computes the reward balance in ETH of the operator of a pool.\n    /// @param poolId Unique id of pool.\n    /// @return reward totalReward Balance in ETH.\n    function computeRewardBalanceOfOperator(bytes32 poolId)\n        external\n        view\n        returns (uint256 reward)\n    {\n        // Because operator rewards are immediately withdrawn as WETH\n        // on finalization, the only factor in this function are unfinalized\n        // rewards.\n        IStructs.Pool memory pool = _poolById[poolId];\n        // Get any unfinalized rewards.\n        (uint256 unfinalizedTotalRewards, uint256 unfinalizedMembersStake) =\n            _getUnfinalizedPoolRewards(poolId);\n\n        // Get the operators' portion.\n        (reward,) = _computePoolRewardsSplit(\n            pool.operatorShare,\n            unfinalizedTotalRewards,\n            unfinalizedMembersStake\n        );\n        return reward;\n    }\n\n    /// @dev Computes the reward balance in ETH of a specific member of a pool.\n    /// @param poolId Unique id of pool.\n    /// @param member The member of the pool.\n    /// @return reward totalReward Balance in ETH.\n    function computeRewardBalanceOfDelegator(bytes32 poolId, address member)\n        external\n        view\n        returns (uint256 reward)\n    {\n        IStructs.Pool memory pool = _poolById[poolId];\n        // Get any unfinalized rewards.\n        (uint256 unfinalizedTotalRewards, uint256 unfinalizedMembersStake) =\n            _getUnfinalizedPoolRewards(poolId);\n\n        // Get the members' portion.\n        (, uint256 unfinalizedMembersReward) = _computePoolRewardsSplit(\n            pool.operatorShare,\n            unfinalizedTotalRewards,\n            unfinalizedMembersStake\n        );\n        return _computeDelegatorReward(\n            poolId,\n            member,\n            unfinalizedMembersReward,\n            unfinalizedMembersStake\n        );\n    }\n\n    /// @dev Syncs rewards for a delegator. This includes withdrawing rewards\n    ///      rewards and adding/removing dependencies on cumulative rewards.\n    /// @param poolId Unique id of pool.\n    /// @param member of the pool.\n    function _withdrawAndSyncDelegatorRewards(\n        bytes32 poolId,\n        address member\n    )\n        internal\n    {\n        // Ensure the pool is finalized.\n        _assertPoolFinalizedLastEpoch(poolId);\n\n        // Compute balance owed to delegator\n        uint256 balance = _computeDelegatorReward(\n            poolId,\n            member,\n            // No unfinalized values because we ensured the pool is already\n            // finalized.\n            0,\n            0\n        );\n\n        // Sync the delegated stake balance. This will ensure future calls of\n        // `_computeDelegatorReward` during this epoch will return 0,\n        // preventing a delegator from withdrawing more than once an epoch.\n        _delegatedStakeToPoolByOwner[member][poolId] =\n            _loadCurrentBalance(_delegatedStakeToPoolByOwner[member][poolId]);\n\n        // Withdraw non-0 balance\n        if (balance != 0) {\n            // Decrease the balance of the pool\n            _decreasePoolRewards(poolId, balance);\n\n            // Withdraw the member's WETH balance\n            getWethContract().transfer(member, balance);\n        }\n\n        // Ensure a cumulative reward entry exists for this epoch,\n        // copying the previous epoch's CR if one doesn't exist already.\n        _updateCumulativeReward(poolId);\n    }\n\n    /// @dev Handles a pool's reward at the current epoch.\n    ///      This will split the reward between the operator and members,\n    ///      depositing them into their respective vaults, and update the\n    ///      accounting needed to allow members to withdraw their individual\n    ///      rewards.\n    /// @param poolId Unique Id of pool.\n    /// @param reward received by the pool.\n    /// @param membersStake the amount of non-operator delegated stake that\n    ///        will split the  reward.\n    /// @return operatorReward Portion of `reward` given to the pool operator.\n    /// @return membersReward Portion of `reward` given to the pool members.\n    function _syncPoolRewards(\n        bytes32 poolId,\n        uint256 reward,\n        uint256 membersStake\n    )\n        internal\n        returns (uint256 operatorReward, uint256 membersReward)\n    {\n        IStructs.Pool memory pool = _poolById[poolId];\n\n        // Split the reward between operator and members\n        (operatorReward, membersReward) = _computePoolRewardsSplit(\n            pool.operatorShare,\n            reward,\n            membersStake\n        );\n\n        if (operatorReward > 0) {\n            // Transfer the operator's weth reward to the operator\n            getWethContract().transfer(pool.operator, operatorReward);\n        }\n\n        if (membersReward > 0) {\n            // Increase the balance of the pool\n            _increasePoolRewards(poolId, membersReward);\n            // Create a cumulative reward entry at the current epoch.\n            _addCumulativeReward(poolId, membersReward, membersStake);\n        }\n\n        return (operatorReward, membersReward);\n    }\n\n    /// @dev Compute the split of a pool reward between the operator and members\n    ///      based on the `operatorShare` and `membersStake`.\n    /// @param operatorShare The fraction of rewards owed to the operator,\n    ///        in PPM.\n    /// @param totalReward The pool reward.\n    /// @param membersStake The amount of member (non-operator) stake delegated\n    ///        to the pool in the epoch the rewards were earned.\n    /// @return operatorReward Portion of `totalReward` given to the pool operator.\n    /// @return membersReward Portion of `totalReward` given to the pool members.\n    function _computePoolRewardsSplit(\n        uint32 operatorShare,\n        uint256 totalReward,\n        uint256 membersStake\n    )\n        internal\n        pure\n        returns (uint256 operatorReward, uint256 membersReward)\n    {\n        if (membersStake == 0) {\n            operatorReward = totalReward;\n        } else {\n            operatorReward = LibMath.getPartialAmountCeil(\n                uint256(operatorShare),\n                PPM_DENOMINATOR,\n                totalReward\n            );\n            membersReward = totalReward.safeSub(operatorReward);\n        }\n        return (operatorReward, membersReward);\n    }\n\n    /// @dev Computes the reward balance in ETH of a specific member of a pool.\n    /// @param poolId Unique id of pool.\n    /// @param member of the pool.\n    /// @param unfinalizedMembersReward Unfinalized total members reward (if any).\n    /// @param unfinalizedMembersStake Unfinalized total members stake (if any).\n    /// @return reward Balance in WETH.\n    function _computeDelegatorReward(\n        bytes32 poolId,\n        address member,\n        uint256 unfinalizedMembersReward,\n        uint256 unfinalizedMembersStake\n    )\n        private\n        view\n        returns (uint256 reward)\n    {\n        uint256 currentEpoch_ = currentEpoch;\n        IStructs.StoredBalance memory delegatedStake = _delegatedStakeToPoolByOwner[member][poolId];\n\n        // There can be no rewards if the last epoch when stake was stored is\n        // equal to the current epoch, because all prior rewards, including\n        // rewards finalized this epoch have been claimed.\n        if (delegatedStake.currentEpoch == currentEpoch_) {\n            return 0;\n        }\n\n        // We account for rewards over 3 intervals, below.\n\n        // 1/3 Unfinalized rewards earned in `currentEpoch - 1`.\n        reward = _computeUnfinalizedDelegatorReward(\n            delegatedStake,\n            currentEpoch_,\n            unfinalizedMembersReward,\n            unfinalizedMembersStake\n        );\n\n        // 2/3 Finalized rewards earned in epochs [`delegatedStake.currentEpoch + 1` .. `currentEpoch - 1`]\n        uint256 delegatedStakeNextEpoch = uint256(delegatedStake.currentEpoch).safeAdd(1);\n        reward = reward.safeAdd(\n            _computeMemberRewardOverInterval(\n                poolId,\n                delegatedStake.currentEpochBalance,\n                delegatedStake.currentEpoch,\n                delegatedStakeNextEpoch\n            )\n        );\n\n        // 3/3 Finalized rewards earned in epoch `delegatedStake.currentEpoch`.\n        reward = reward.safeAdd(\n            _computeMemberRewardOverInterval(\n                poolId,\n                delegatedStake.nextEpochBalance,\n                delegatedStakeNextEpoch,\n                currentEpoch_\n            )\n        );\n\n        return reward;\n    }\n\n    /// @dev Computes the unfinalized rewards earned by a delegator in the last epoch.\n    /// @param delegatedStake Amount of stake delegated to pool by a specific staker\n    /// @param currentEpoch_ The epoch in which this call is executing\n    /// @param unfinalizedMembersReward Unfinalized total members reward (if any).\n    /// @param unfinalizedMembersStake Unfinalized total members stake (if any).\n    /// @return reward Balance in WETH.\n    function _computeUnfinalizedDelegatorReward(\n        IStructs.StoredBalance memory delegatedStake,\n        uint256 currentEpoch_,\n        uint256 unfinalizedMembersReward,\n        uint256 unfinalizedMembersStake\n    )\n        private\n        pure\n        returns (uint256)\n    {\n        // If there are unfinalized rewards this epoch, compute the member's\n        // share.\n        if (unfinalizedMembersReward == 0 || unfinalizedMembersStake == 0) {\n            return 0;\n        }\n\n        // Unfinalized rewards are always earned from stake in\n        // the prior epoch so we want the stake at `currentEpoch_-1`.\n        uint256 unfinalizedStakeBalance = delegatedStake.currentEpoch >= currentEpoch_.safeSub(1) ?\n            delegatedStake.currentEpochBalance :\n            delegatedStake.nextEpochBalance;\n\n        // Sanity check to save gas on computation\n        if (unfinalizedStakeBalance == 0) {\n            return 0;\n        }\n\n        // Compute unfinalized reward\n        return LibMath.getPartialAmountFloor(\n            unfinalizedMembersReward,\n            unfinalizedMembersStake,\n            unfinalizedStakeBalance\n        );\n    }\n\n    /// @dev Increases rewards for a pool.\n    /// @param poolId Unique id of pool.\n    /// @param amount Amount to increment rewards by.\n    function _increasePoolRewards(bytes32 poolId, uint256 amount)\n        private\n    {\n        rewardsByPoolId[poolId] = rewardsByPoolId[poolId].safeAdd(amount);\n        wethReservedForPoolRewards = wethReservedForPoolRewards.safeAdd(amount);\n    }\n\n    /// @dev Decreases rewards for a pool.\n    /// @param poolId Unique id of pool.\n    /// @param amount Amount to decrement rewards by.\n    function _decreasePoolRewards(bytes32 poolId, uint256 amount)\n        private\n    {\n        rewardsByPoolId[poolId] = rewardsByPoolId[poolId].safeSub(amount);\n        wethReservedForPoolRewards = wethReservedForPoolRewards.safeSub(amount);\n    }\n\n\n    /// @dev Computes the reward owed to a pool during finalization.\n    ///      Does nothing if the pool is already finalized.\n    /// @param poolId The pool's ID.\n    /// @return totalReward The total reward owed to a pool.\n    /// @return membersStake The total stake for all non-operator members in\n    ///         this pool.\n    function _getUnfinalizedPoolRewards(bytes32 poolId)\n        internal\n        view\n        virtual\n        override\n        returns (\n            uint256 totalReward,\n            uint256 membersStake)\n    {}\n\n    /// @dev Asserts that a pool has been finalized last epoch.\n    /// @param poolId The id of the pool that should have been finalized.\n    function _assertPoolFinalizedLastEpoch(bytes32 poolId)\n        internal\n        view\n        virtual\n        override\n    {}\n}\n",
		"../utils/0xUtils/LibMath.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./LibSafeMath.sol\";\nimport \"./LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
		"../utils/0xUtils/LibMathRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
		"./staking_pools/MixinCumulativeRewards.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibFractions.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../stake/MixinStakeBalances.sol\";\nimport \"../immutable/MixinConstants.sol\";\n\n\ncontract MixinCumulativeRewards is\n    MixinStakeBalances,\n    MixinConstants\n{\n    using LibSafeMath for uint256;\n\n    /// @dev returns true iff Cumulative Rewards are set\n    function _isCumulativeRewardSet(IStructs.Fraction memory cumulativeReward)\n        internal\n        pure\n        returns (bool)\n    {\n        // We use the denominator as a proxy for whether the cumulative\n        // reward is set, as setting the cumulative reward always sets this\n        // field to at least 1.\n        return cumulativeReward.denominator != 0;\n    }\n\n    /// @dev Sets a pool's cumulative delegator rewards for the current epoch,\n    ///      given the rewards earned and stake from the last epoch, which will\n    ///      be summed with the previous cumulative rewards for this pool.\n    ///      If the last cumulative reward epoch is the current epoch, this is a\n    ///      no-op.\n    /// @param poolId The pool ID.\n    /// @param reward The total reward earned by pool delegators from the last epoch.\n    /// @param stake The total delegated stake in the pool in the last epoch.\n    function _addCumulativeReward(\n        bytes32 poolId,\n        uint256 reward,\n        uint256 stake\n    )\n        internal\n    {\n        // Fetch the last epoch at which we stored an entry for this pool;\n        // this is the most up-to-date cumulative rewards for this pool.\n        uint256 lastStoredEpoch = _cumulativeRewardsByPoolLastStored[poolId];\n        uint256 currentEpoch_ = currentEpoch;\n\n        // If we already have a record for this epoch, don't overwrite it.\n        if (lastStoredEpoch == currentEpoch_) {\n            return;\n        }\n\n        IStructs.Fraction memory mostRecentCumulativeReward =\n            _cumulativeRewardsByPool[poolId][lastStoredEpoch];\n\n        // Compute new cumulative reward\n        IStructs.Fraction memory cumulativeReward;\n        if (_isCumulativeRewardSet(mostRecentCumulativeReward)) {\n            // If we have a prior cumulative reward entry, we sum them as fractions.\n            (cumulativeReward.numerator, cumulativeReward.denominator) = LibFractions.add(\n                mostRecentCumulativeReward.numerator,\n                mostRecentCumulativeReward.denominator,\n                reward,\n                stake\n            );\n            // Normalize to prevent overflows in future operations.\n            (cumulativeReward.numerator, cumulativeReward.denominator) = LibFractions.normalize(\n                cumulativeReward.numerator,\n                cumulativeReward.denominator\n            );\n        } else {\n            (cumulativeReward.numerator, cumulativeReward.denominator) = (reward, stake);\n        }\n\n        // Store cumulative rewards for this epoch.\n        _cumulativeRewardsByPool[poolId][currentEpoch_] = cumulativeReward;\n        _cumulativeRewardsByPoolLastStored[poolId] = currentEpoch_;\n    }\n\n    /// @dev Sets a pool's cumulative delegator rewards for the current epoch,\n    ///      using the last stored cumulative rewards. If we've already set\n    ///      a CR for this epoch, this is a no-op.\n    /// @param poolId The pool ID.\n    function _updateCumulativeReward(bytes32 poolId)\n        internal\n    {\n        // Just add empty rewards for this epoch, which will be added to\n        // the previous CR, so we end up with the previous CR being set for\n        // this epoch.\n        _addCumulativeReward(poolId, 0, 1);\n    }\n\n    /// @dev Computes a member's reward over a given epoch interval.\n    /// @param poolId Uniqud Id of pool.\n    /// @param memberStakeOverInterval Stake delegated to pool by member over\n    ///        the interval.\n    /// @param beginEpoch Beginning of interval.\n    /// @param endEpoch End of interval.\n    /// @return reward Reward accumulated over interval [beginEpoch, endEpoch]\n    function _computeMemberRewardOverInterval(\n        bytes32 poolId,\n        uint256 memberStakeOverInterval,\n        uint256 beginEpoch,\n        uint256 endEpoch\n    )\n        internal\n        view\n        returns (uint256 reward)\n    {\n        // Sanity check if we can skip computation, as it will result in zero.\n        if (memberStakeOverInterval == 0 || beginEpoch == endEpoch) {\n            return 0;\n        }\n\n        // Sanity check interval\n        require(beginEpoch < endEpoch, \"CR_INTERVAL_INVALID\");\n\n        // Sanity check begin reward\n        IStructs.Fraction memory beginReward = _getCumulativeRewardAtEpoch(poolId, beginEpoch);\n        IStructs.Fraction memory endReward = _getCumulativeRewardAtEpoch(poolId, endEpoch);\n\n        // Compute reward\n        reward = LibFractions.scaleDifference(\n            endReward.numerator,\n            endReward.denominator,\n            beginReward.numerator,\n            beginReward.denominator,\n            memberStakeOverInterval\n        );\n    }\n\n    /// @dev Fetch the most recent cumulative reward entry for a pool.\n    /// @param poolId Unique ID of pool.\n    /// @return cumulativeReward The most recent cumulative reward `poolId`.\n    function _getMostRecentCumulativeReward(bytes32 poolId)\n        private\n        view\n        returns (IStructs.Fraction memory cumulativeReward)\n    {\n        uint256 lastStoredEpoch = _cumulativeRewardsByPoolLastStored[poolId];\n        return _cumulativeRewardsByPool[poolId][lastStoredEpoch];\n    }\n\n    /// @dev Fetch the cumulative reward for a given epoch.\n    ///      If the corresponding CR does not exist in state, then we backtrack\n    ///      to find its value by querying `epoch-1` and then most recent CR.\n    /// @param poolId Unique ID of pool.\n    /// @param epoch The epoch to find the\n    /// @return cumulativeReward The cumulative reward for `poolId` at `epoch`.\n    function _getCumulativeRewardAtEpoch(bytes32 poolId, uint256 epoch)\n        private\n        view\n        returns (IStructs.Fraction memory cumulativeReward)\n    {\n        // Return CR at `epoch`, given it's set.\n        cumulativeReward = _cumulativeRewardsByPool[poolId][epoch];\n        if (_isCumulativeRewardSet(cumulativeReward)) {\n            return cumulativeReward;\n        }\n\n        // Return CR at `epoch-1`, given it's set.\n        uint256 lastEpoch = epoch.safeSub(1);\n        cumulativeReward = _cumulativeRewardsByPool[poolId][lastEpoch];\n        if (_isCumulativeRewardSet(cumulativeReward)) {\n            return cumulativeReward;\n        }\n\n        // Return the most recent CR, given it's less than `epoch`.\n        uint256 mostRecentEpoch = _cumulativeRewardsByPoolLastStored[poolId];\n        if (mostRecentEpoch < epoch) {\n            cumulativeReward = _cumulativeRewardsByPool[poolId][mostRecentEpoch];\n            if (_isCumulativeRewardSet(cumulativeReward)) {\n                return cumulativeReward;\n            }\n        }\n\n        // Otherwise return an empty CR.\n        return IStructs.Fraction(0, 1);\n    }\n}\n",
		"../utils/0xUtils/LibFractions.sol": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity >=0.5.4 <0.8.0;\n\nimport \"./LibSafeMath.sol\";\n\n\nlibrary LibFractions {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Safely adds two fractions `n1/d1 + n2/d2`\n    /// @param n1 numerator of `1`\n    /// @param d1 denominator of `1`\n    /// @param n2 numerator of `2`\n    /// @param d2 denominator of `2`\n    /// @return numerator Numerator of sum\n    /// @return denominator Denominator of sum\n    function add(\n        uint256 n1,\n        uint256 d1,\n        uint256 n2,\n        uint256 d2\n    )\n        internal\n        pure\n        returns (\n            uint256 numerator,\n            uint256 denominator\n        )\n    {\n        if (n1 == 0) {\n            return (numerator = n2, denominator = d2);\n        }\n        if (n2 == 0) {\n            return (numerator = n1, denominator = d1);\n        }\n        numerator = n1\n            .safeMul(d2)\n            .safeAdd(n2.safeMul(d1));\n        denominator = d1.safeMul(d2);\n        return (numerator, denominator);\n    }\n\n    /// @dev Rescales a fraction to prevent overflows during addition if either\n    ///      the numerator or the denominator are > `maxValue`.\n    /// @param numerator The numerator.\n    /// @param denominator The denominator.\n    /// @param maxValue The maximum value allowed for both the numerator and\n    ///        denominator.\n    /// @return scaledNumerator The rescaled numerator.\n    /// @return scaledDenominator The rescaled denominator.\n    function normalize(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 maxValue\n    )\n        internal\n        pure\n        returns (\n            uint256 scaledNumerator,\n            uint256 scaledDenominator\n        )\n    {\n        // If either the numerator or the denominator are > `maxValue`,\n        // re-scale them by `maxValue` to prevent overflows in future operations.\n        if (numerator > maxValue || denominator > maxValue) {\n            uint256 rescaleBase = numerator >= denominator ? numerator : denominator;\n            rescaleBase = rescaleBase.safeDiv(maxValue);\n            scaledNumerator = numerator.safeDiv(rescaleBase);\n            scaledDenominator = denominator.safeDiv(rescaleBase);\n        } else {\n            scaledNumerator = numerator;\n            scaledDenominator = denominator;\n        }\n        return (scaledNumerator, scaledDenominator);\n    }\n\n    /// @dev Rescales a fraction to prevent overflows during addition if either\n    ///      the numerator or the denominator are > 2 ** 127.\n    /// @param numerator The numerator.\n    /// @param denominator The denominator.\n    /// @return scaledNumerator The rescaled numerator.\n    /// @return scaledDenominator The rescaled denominator.\n    function normalize(\n        uint256 numerator,\n        uint256 denominator\n    )\n        internal\n        pure\n        returns (\n            uint256 scaledNumerator,\n            uint256 scaledDenominator\n        )\n    {\n        return normalize(numerator, denominator, 2 ** 127);\n    }\n\n    /// @dev Safely scales the difference between two fractions.\n    /// @param n1 numerator of `1`\n    /// @param d1 denominator of `1`\n    /// @param n2 numerator of `2`\n    /// @param d2 denominator of `2`\n    /// @param s scalar to multiply by difference.\n    /// @return result `s * (n1/d1 - n2/d2)`.\n    function scaleDifference(\n        uint256 n1,\n        uint256 d1,\n        uint256 n2,\n        uint256 d2,\n        uint256 s\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        if (s == 0) {\n            return 0;\n        }\n        if (n2 == 0) {\n            return result = s\n                .safeMul(n1)\n                .safeDiv(d1);\n        }\n        uint256 numerator = n1\n            .safeMul(d2)\n            .safeSub(n2.safeMul(d1));\n        uint256 tmp = numerator.safeDiv(d2);\n        return s\n            .safeMul(tmp)\n            .safeDiv(d1);\n    }\n}\n",
		"./stake/MixinStakeBalances.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibSafeDowncast.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../immutable/MixinDeploymentConstants.sol\";\nimport \"./MixinStakeStorage.sol\";\n\n\ncontract MixinStakeBalances is\n    MixinStakeStorage,\n    MixinDeploymentConstants\n{\n    using LibSafeMath for uint256;\n    using LibSafeDowncast for uint256;\n\n    /// @dev Gets global stake for a given status.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Global stake for given status.\n    function getGlobalStakeByStatus(IStructs.StakeStatus stakeStatus)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance)\n    {\n        balance = _loadCurrentBalance(\n            _globalStakeByStatus[uint8(IStructs.StakeStatus.DELEGATED)]\n        );\n        if (stakeStatus == IStructs.StakeStatus.UNDELEGATED) {\n            // Undelegated stake is the difference between total stake and delegated stake\n            // Note that any ZRX erroneously sent to the vault will be counted as undelegated stake\n            uint256 totalStake = getGrgVault().balanceOfGrgVault();\n            balance.currentEpochBalance = totalStake.safeSub(balance.currentEpochBalance).downcastToUint96();\n            balance.nextEpochBalance = totalStake.safeSub(balance.nextEpochBalance).downcastToUint96();\n        }\n        return balance;\n    }\n\n    /// @dev Gets an owner's stake balances by status.\n    /// @param staker Owner of stake.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Owner's stake balances for given status.\n    function getOwnerStakeByStatus(\n        address staker,\n        IStructs.StakeStatus stakeStatus\n    )\n        external\n        view\n        returns (IStructs.StoredBalance memory balance)\n    {\n        balance = _loadCurrentBalance(\n            _ownerStakeByStatus[uint8(stakeStatus)][staker]\n        );\n        return balance;\n    }\n\n    /// @dev Returns the total stake for a given staker.\n    /// @param staker of stake.\n    /// @return Total GRG staked by `staker`.\n    function getTotalStake(address staker)\n        public\n        view\n        returns (uint256)\n    {\n        return getGrgVault().balanceOf(staker);\n    }\n\n    /// @dev Returns the stake delegated to a specific staking pool, by a given staker.\n    /// @param staker of stake.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Stake delegated to pool by staker.\n    function getStakeDelegatedToPoolByOwner(address staker, bytes32 poolId)\n        public\n        view\n        returns (IStructs.StoredBalance memory balance)\n    {\n        balance = _loadCurrentBalance(_delegatedStakeToPoolByOwner[staker][poolId]);\n        return balance;\n    }\n\n    /// @dev Returns the total stake delegated to a specific staking pool,\n    ///      across all members.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Total stake delegated to pool.\n    function getTotalStakeDelegatedToPool(bytes32 poolId)\n        public\n        view\n        returns (IStructs.StoredBalance memory balance)\n    {\n        balance = _loadCurrentBalance(_delegatedStakeByPoolId[poolId]);\n        return balance;\n    }\n}\n",
		"./libs/LibSafeDowncast.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeDowncast {\n\n    /// @dev Safely downcasts to a uint96\n    /// Note that this reverts if the input value is too large.\n    function downcastToUint96(uint256 a)\n        internal\n        pure\n        returns (uint96 b)\n    {\n        b = uint96(a);\n        if (uint256(b) != a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256DowncastError(\n                LibSafeMathRichErrors.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n                a\n            ));\n        }\n        return b;\n    }\n\n    /// @dev Safely downcasts to a uint64\n    /// Note that this reverts if the input value is too large.\n    function downcastToUint64(uint256 a)\n        internal\n        pure\n        returns (uint64 b)\n    {\n        b = uint64(a);\n        if (uint256(b) != a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256DowncastError(\n                LibSafeMathRichErrors.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n                a\n            ));\n        }\n        return b;\n    }\n\n    /// @dev Safely downcasts to a uint32\n    /// Note that this reverts if the input value is too large.\n    function downcastToUint32(uint256 a)\n        internal\n        pure\n        returns (uint32 b)\n    {\n        b = uint32(a);\n        if (uint256(b) != a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256DowncastError(\n                LibSafeMathRichErrors.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n                a\n            ));\n        }\n        return b;\n    }\n}\n",
		"./immutable/MixinDeploymentConstants.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/IEtherToken.sol\";\nimport \"../interfaces/IGrgVault.sol\";\nimport \"../../protocol/DragoRegistry/IDragoRegistry.sol\";\nimport \"../../rigoToken/RigoToken/RigoTokenFace.sol\";\n\n\n// solhint-disable separate-by-one-line-in-contract\ncontract MixinDeploymentConstants {\n\n    // Mainnet WETH9 Address\n    address constant private WETH_ADDRESS = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    // Kovan WETH9 Address\n    // address constant private WETH_ADDRESS = address(0xd0A1E359811322d97991E03f863a0C30C2cF029C);\n\n    // Ropsten & Rinkeby WETH9 Address\n    // address constant private WETH_ADDRESS = address(0xc778417E063141139Fce010982780140Aa0cD5Ab);\n\n    // Mainnet GrgVault address\n    address constant private GRG_VAULT_ADDRESS = address(0xBa7f8b5fB1b19c1211c5d49550fcD149177A5Eaf);\n\n    // Kovan GrgVault address\n    // address constant private GRG_VAULT_ADDRESS = address(0xf36eabdFE986B35b62c8FD5a98A7f2aEBB79B291);\n\n    // Ropsten GrgVault address\n    // address constant private GRG_VAULT_ADDRESS = address(0xffD161026865Ad8B4aB28a76840474935eEc4DfA);\n\n    // Rinkeby GrgVault address\n    // address constant private GRG_VAULT_ADDRESS = address(0xA5Bf6aC73bC40790FC6Ffc9DBbbCE76c9176e224);\n    \n    // Mainnet DragoRegistry address\n    address constant private DRAGO_REGISTRY_ADDRESS = address(0xdE6445484a8dcD9bf35fC95eb4E3990Cc358822e);\n    \n    // Ropsten DragoRegistry address\n    // address constant private DRAGO_REGISTRY_ADDRESS = address(0x4e868D1dDF940316964eA7673E21bE6CBED8b30B);\n    \n    // Mainnet GRG Address\n    address constant private GRG_ADDRESS = address(0x4FbB350052Bca5417566f188eB2EBCE5b19BC964);\n\n    // Ropsten GRG Address\n    // address constant private GRG_ADDRESS = address(0x6FA8590920c5966713b1a86916f7b0419411e474);\n\n    /// @dev An overridable way to access the deployed WETH contract.\n    ///      Must be view to allow overrides to access state.\n    /// @return wethContract The WETH contract instance.\n    function getWethContract()\n        public\n        view\n        returns (IEtherToken wethContract)\n    {\n        wethContract = IEtherToken(WETH_ADDRESS);\n        return wethContract;\n    }\n\n    /// @dev An overridable way to access the deployed grgVault.\n    ///      Must be view to allow overrides to access state.\n    /// @return grgVault The grgVault contract.\n    function getGrgVault()\n        public\n        view\n        returns (IGrgVault grgVault)\n    {\n        grgVault = IGrgVault(GRG_VAULT_ADDRESS);\n        return grgVault;\n    }\n    \n    /// @dev An overridable way to access the deployed dragoRegistry.\n    ///      Must be view to allow overrides to access state.\n    /// @return dragoRegistry The dragoRegistry contract.\n    function getDragoRegistry()\n        public\n        view\n        returns (IDragoRegistry dragoRegistry)\n    {\n        dragoRegistry = IDragoRegistry(DRAGO_REGISTRY_ADDRESS);\n        return dragoRegistry;\n    }\n    \n    /// @dev An overridable way to access the deployed GRG contract.\n    ///      Must be view to allow overrides to access state.\n    /// @return grgContract The GRG contract instance.\n    function getGrgContract()\n        public\n        view\n        returns (RigoTokenFace grgContract)\n    {\n        grgContract = RigoTokenFace(GRG_ADDRESS);\n        return grgContract;\n    }\n}\n",
		"../protocol/DragoRegistry/IDragoRegistry.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Drago Registry Interface - Allows external interaction with Drago Registry.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface IDragoRegistry {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function register(address _drago, string calldata _name, string calldata _symbol, uint256 _dragoId, address _owner) external payable returns (bool);\n    function unregister(uint256 _id) external;\n    function setMeta(uint256 _id, bytes32 _key, bytes32 _value) external;\n    function addGroup(address _group) external;\n    function setFee(uint256 _fee) external;\n    function updateOwner(uint256 _id) external;\n    function updateOwners(uint256[] calldata _id) external;\n    function upgrade(address _newAddress) external payable; //payable as there is a transfer of value, otherwise opcode might throw an error\n    function setUpgraded(uint256 _version) external;\n    function drain() external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function dragoCount() external view returns (uint256);\n    function fromId(uint256 _id) external view returns (address drago, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromAddress(address _drago) external view returns (uint256 id, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromName(string calldata _name) external view returns (uint256 id, address drago, string memory symbol, uint256 dragoId, address owner, address group);\n    function getNameFromAddress(address _pool) external view returns (string memory);\n    function getSymbolFromAddress(address _pool) external view returns (string memory);\n    function meta(uint256 _id, bytes32 _key) external view returns (bytes32);\n    function getGroups() external view returns (address[] memory);\n    function getFee() external view returns (uint256);\n}\n",
		"../rigoToken/RigoToken/RigoTokenFace.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.5.0;\n\n/// @title Rigo Token Interface - Allows interaction with the Rigo token.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface RigoTokenFace {\n\n    function minter() external view returns (address);\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n\n    function mintToken(address _recipient, uint256 _amount) external;\n    function changeMintingAddress(address _newAddress) external;\n    function changeRigoblockAddress(address _newAddress) external;\n}\n",
		"./stake/MixinStakeStorage.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../libs/LibSafeDowncast.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../sys/MixinScheduler.sol\";\n\n\n/// @dev This mixin contains logic for managing stake storage.\ncontract MixinStakeStorage is\n    MixinScheduler\n{\n    using LibSafeMath for uint256;\n    using LibSafeDowncast for uint256;\n\n    /// @dev Moves stake between states: 'undelegated' or 'delegated'.\n    ///      This change comes into effect next epoch.\n    /// @param fromPtr pointer to storage location of `from` stake.\n    /// @param toPtr pointer to storage location of `to` stake.\n    /// @param amount of stake to move.\n    function _moveStake(\n        IStructs.StoredBalance storage fromPtr,\n        IStructs.StoredBalance storage toPtr,\n        uint256 amount\n    )\n        internal\n    {\n        // do nothing if pointers are equal\n        if (_arePointersEqual(fromPtr, toPtr)) {\n            return;\n        }\n\n        // load current balances from storage\n        IStructs.StoredBalance memory from = _loadCurrentBalance(fromPtr);\n        IStructs.StoredBalance memory to = _loadCurrentBalance(toPtr);\n\n        // sanity check on balance\n        if (amount > from.nextEpochBalance) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InsufficientBalanceError(\n                    amount,\n                    from.nextEpochBalance\n                )\n            );\n        }\n\n        // move stake for next epoch\n        from.nextEpochBalance = uint256(from.nextEpochBalance).safeSub(amount).downcastToUint96();\n        to.nextEpochBalance = uint256(to.nextEpochBalance).safeAdd(amount).downcastToUint96();\n\n        // update state in storage\n        _storeBalance(fromPtr, from);\n        _storeBalance(toPtr, to);\n    }\n\n    /// @dev Loads a balance from storage and updates its fields to reflect values for the current epoch.\n    /// @param balancePtr to load.\n    /// @return balance current balance.\n    function _loadCurrentBalance(IStructs.StoredBalance storage balancePtr)\n        internal\n        view\n        returns (IStructs.StoredBalance memory balance)\n    {\n        balance = balancePtr;\n        uint256 currentEpoch_ = currentEpoch;\n        if (currentEpoch_ > balance.currentEpoch) {\n            balance.currentEpoch = currentEpoch_.downcastToUint64();\n            balance.currentEpochBalance = balance.nextEpochBalance;\n        }\n        return balance;\n    }\n\n    /// @dev Increments both the `current` and `next` fields.\n    /// @param balancePtr storage pointer to balance.\n    /// @param amount to mint.\n    function _increaseCurrentAndNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n        internal\n    {\n        // Remove stake from balance\n        IStructs.StoredBalance memory balance = _loadCurrentBalance(balancePtr);\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeAdd(amount).downcastToUint96();\n        balance.currentEpochBalance = uint256(balance.currentEpochBalance).safeAdd(amount).downcastToUint96();\n\n        // update state\n        _storeBalance(balancePtr, balance);\n    }\n\n    /// @dev Decrements both the `current` and `next` fields.\n    /// @param balancePtr storage pointer to balance.\n    /// @param amount to mint.\n    function _decreaseCurrentAndNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n        internal\n    {\n        // Remove stake from balance\n        IStructs.StoredBalance memory balance = _loadCurrentBalance(balancePtr);\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeSub(amount).downcastToUint96();\n        balance.currentEpochBalance = uint256(balance.currentEpochBalance).safeSub(amount).downcastToUint96();\n\n        // update state\n        _storeBalance(balancePtr, balance);\n    }\n\n    /// @dev Increments the `next` field (but not the `current` field).\n    /// @param balancePtr storage pointer to balance.\n    /// @param amount to increment by.\n    function _increaseNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n        internal\n    {\n        // Add stake to balance\n        IStructs.StoredBalance memory balance = _loadCurrentBalance(balancePtr);\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeAdd(amount).downcastToUint96();\n\n        // update state\n        _storeBalance(balancePtr, balance);\n    }\n\n    /// @dev Decrements the `next` field (but not the `current` field).\n    /// @param balancePtr storage pointer to balance.\n    /// @param amount to decrement by.\n    function _decreaseNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n        internal\n    {\n        // Remove stake from balance\n        IStructs.StoredBalance memory balance = _loadCurrentBalance(balancePtr);\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeSub(amount).downcastToUint96();\n\n        // update state\n        _storeBalance(balancePtr, balance);\n    }\n\n    /// @dev Stores a balance in storage.\n    /// @param balancePtr points to where `balance` will be stored.\n    /// @param balance to save to storage.\n    function _storeBalance(\n        IStructs.StoredBalance storage balancePtr,\n        IStructs.StoredBalance memory balance\n    )\n        private\n    {\n        // note - this compresses into a single `sstore` when optimizations are enabled,\n        // since the StoredBalance struct occupies a single word of storage.\n        balancePtr.currentEpoch = balance.currentEpoch;\n        balancePtr.nextEpochBalance = balance.nextEpochBalance;\n        balancePtr.currentEpochBalance = balance.currentEpochBalance;\n    }\n\n    /// @dev Returns true iff storage pointers resolve to same storage location.\n    /// @param balancePtrA first storage pointer.\n    /// @param balancePtrB second storage pointer.\n    /// @return areEqual true iff pointers are equal.\n    function _arePointersEqual(\n        // solhint-disable-next-line no-unused-vars\n        IStructs.StoredBalance storage balancePtrA,\n        // solhint-disable-next-line no-unused-vars\n        IStructs.StoredBalance storage balancePtrB\n    )\n        private\n        pure\n        returns (bool areEqual)\n    {\n        assembly {\n            areEqual := and(\n                eq(balancePtrA.slot, balancePtrB.slot),\n                eq(balancePtrA.offset, balancePtrB.offset)\n            )\n        }\n        return areEqual;\n    }\n}\n",
		"./sys/MixinScheduler.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\nimport \"../immutable/MixinStorage.sol\";\nimport \"../interfaces/IStakingEvents.sol\";\n\n\ncontract MixinScheduler is\n    IStakingEvents,\n    MixinStorage\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Returns the earliest end time in seconds of this epoch.\n    ///      The next epoch can begin once this time is reached.\n    ///      Epoch period = [startTimeInSeconds..endTimeInSeconds)\n    /// @return Time in seconds.\n    function getCurrentEpochEarliestEndTimeInSeconds()\n        public\n        view\n        returns (uint256)\n    {\n        return currentEpochStartTimeInSeconds.safeAdd(epochDurationInSeconds);\n    }\n\n    /// @dev Initializes state owned by this mixin.\n    ///      Fails if state was already initialized.\n    function _initMixinScheduler()\n        internal\n    {\n        // assert the current values before overwriting them.\n        _assertSchedulerNotInitialized();\n\n        // solhint-disable-next-line\n        currentEpochStartTimeInSeconds = block.timestamp;\n        currentEpoch = 1;\n    }\n\n    /// @dev Moves to the next epoch, given the current epoch period has ended.\n    ///      Time intervals that are measured in epochs (like timeLocks) are also incremented, given\n    ///      their periods have ended.\n    function _goToNextEpoch()\n        internal\n    {\n        // get current timestamp\n        // solhint-disable-next-line not-rely-on-time\n        uint256 currentBlockTimestamp = block.timestamp;\n\n        // validate that we can increment the current epoch\n        uint256 epochEndTime = getCurrentEpochEarliestEndTimeInSeconds();\n        if (epochEndTime > currentBlockTimestamp) {\n            LibRichErrors.rrevert(LibStakingRichErrors.BlockTimestampTooLowError(\n                epochEndTime,\n                currentBlockTimestamp\n            ));\n        }\n\n        // incremment epoch\n        uint256 nextEpoch = currentEpoch.safeAdd(1);\n        currentEpoch = nextEpoch;\n        currentEpochStartTimeInSeconds = currentBlockTimestamp;\n    }\n\n    /// @dev Assert scheduler state before initializing it.\n    /// This must be updated for each migration.\n    function _assertSchedulerNotInitialized()\n        internal\n        view\n    {\n        if (currentEpochStartTimeInSeconds != 0) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InitializationError(\n                    LibStakingRichErrors.InitializationErrorCodes.MixinSchedulerAlreadyInitialized\n                )\n            );\n        }\n    }\n}\n",
		"./rewards/MixinPopRewards.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibMath.sol\";\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../sys/MixinFinalizer.sol\";\nimport \"../staking_pools/MixinStakingPool.sol\";\nimport \"./MixinPopManager.sol\";\n\n\ncontract MixinPopRewards is\n    MixinPopManager,\n    MixinStakingPool,\n    MixinFinalizer\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Pays a protocol fee in ETH or WETH.\n    ///      Only a known 0x exchange can call this method. See\n    ///      (MixinExchangeManager).\n    /// @param makerAddress The address of the order's maker.\n    /// @param payerAddress The address of the protocol fee payer.\n    /// @param protocolFee The protocol fee amount. This is either passed as ETH or transferred as WETH.\n    function payProtocolFee(\n        address makerAddress,\n        address payerAddress,\n        uint256 protocolFee\n    )\n        external\n        payable\n        onlyPop\n    {\n        _assertValidProtocolFee(protocolFee);\n\n        // Transfer the protocol fee to this address if it should be paid in\n        // WETH.\n        if (msg.value == 0) {\n            require(\n                getWethContract().transferFrom(\n                    payerAddress,\n                    address(this),\n                    protocolFee\n                ),\n                \"WETH_TRANSFER_FAILED\"\n            );\n        }\n\n        // Get the pool id of the maker address.\n        bytes32 poolId = poolIdByRbPoolAccount[makerAddress];\n\n        // Only attribute the protocol fee payment to a pool if the maker is\n        // registered to a pool.\n        if (poolId == NIL_POOL_ID) {\n            return;\n        }\n\n        uint256 poolStake = getTotalStakeDelegatedToPool(poolId).currentEpochBalance;\n        // Ignore pools with dust stake.\n        if (poolStake < minimumPoolStake) {\n            return;\n        }\n\n        // Look up the pool stats and aggregated stats for this epoch.\n        uint256 currentEpoch_ = currentEpoch;\n        IStructs.PoolStats storage poolStatsPtr = poolStatsByEpoch[poolId][currentEpoch_];\n        IStructs.AggregatedStats storage aggregatedStatsPtr = aggregatedStatsByEpoch[currentEpoch_];\n\n        // Perform some initialization if this is the pool's first protocol fee in this epoch.\n        uint256 feesCollectedByPool = poolStatsPtr.feesCollected;\n        if (feesCollectedByPool == 0) {\n            // Compute member and total weighted stake.\n            (uint256 membersStakeInPool, uint256 weightedStakeInPool) = _computeMembersAndWeightedStake(poolId, poolStake);\n            poolStatsPtr.membersStake = membersStakeInPool;\n            poolStatsPtr.weightedStake = weightedStakeInPool;\n\n            // Increase the total weighted stake.\n            aggregatedStatsPtr.totalWeightedStake = aggregatedStatsPtr.totalWeightedStake.safeAdd(weightedStakeInPool);\n\n            // Increase the number of pools to finalize.\n            aggregatedStatsPtr.numPoolsToFinalize = aggregatedStatsPtr.numPoolsToFinalize.safeAdd(1);\n\n            // Emit an event so keepers know what pools earned rewards this epoch.\n            emit StakingPoolEarnedRewardsInEpoch(currentEpoch_, poolId);\n        }\n\n        // Credit the fees to the pool.\n        poolStatsPtr.feesCollected = feesCollectedByPool.safeAdd(protocolFee);\n\n        // Increase the total fees collected this epoch.\n        aggregatedStatsPtr.totalFeesCollected = aggregatedStatsPtr.totalFeesCollected.safeAdd(protocolFee);\n    }\n\n    /// @dev Get stats on a staking pool in this epoch.\n    /// @param poolId Pool Id to query.\n    /// @return PoolStats struct for pool id.\n    function getStakingPoolStatsThisEpoch(bytes32 poolId)\n        external\n        view\n        returns (IStructs.PoolStats memory)\n    {\n        return poolStatsByEpoch[poolId][currentEpoch];\n    }\n\n    /// @dev Computes the members and weighted stake for a pool at the current\n    ///      epoch.\n    /// @param poolId ID of the pool.\n    /// @param totalStake Total (unweighted) stake in the pool.\n    /// @return membersStake Non-operator stake in the pool.\n    /// @return weightedStake Weighted stake of the pool.\n    function _computeMembersAndWeightedStake(\n        bytes32 poolId,\n        uint256 totalStake\n    )\n        private\n        view\n        returns (uint256 membersStake, uint256 weightedStake)\n    {\n        uint256 operatorStake = getStakeDelegatedToPoolByOwner(\n            _poolById[poolId].operator,\n            poolId\n        ).currentEpochBalance;\n\n        membersStake = totalStake.safeSub(operatorStake);\n        weightedStake = operatorStake.safeAdd(\n            LibMath.getPartialAmountFloor(\n                rewardDelegatedStakeWeight,\n                PPM_DENOMINATOR,\n                membersStake\n            )\n        );\n        return (membersStake, weightedStake);\n    }\n\n    /// @dev Checks that the protocol fee passed into `payProtocolFee()` is\n    ///      valid.\n    /// @param protocolFee The `protocolFee` parameter to\n    ///        `payProtocolFee.`\n    function _assertValidProtocolFee(uint256 protocolFee)\n        private\n        view\n    {\n        // The protocol fee must equal the value passed to the contract; unless\n        // the value is zero, in which case the fee is taken in WETH.\n        if (msg.value != protocolFee && msg.value != 0) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InvalidProtocolFeePaymentError(\n                    protocolFee,\n                    msg.value\n                )\n            );\n        }\n    }\n\n    /// @dev Computes the reward owed to a pool during finalization.\n    ///      Does nothing if the pool is already finalized.\n    /// @param poolId The pool's ID.\n    /// @return totalReward The total reward owed to a pool.\n    /// @return membersStake The total stake for all non-operator members in\n    ///         this pool.\n    function _getUnfinalizedPoolRewards(bytes32 poolId)\n        internal\n        view\n        virtual\n        override(MixinFinalizer, MixinStakingPool)\n        returns (\n            uint256 totalReward,\n            uint256 membersStake)\n    {\n        (totalReward, membersStake) = MixinFinalizer._getUnfinalizedPoolRewards(poolId);\n    }\n\n    /// @dev Asserts that a pool has been finalized last epoch.\n    /// @param poolId The id of the pool that should have been finalized.\n    function _assertPoolFinalizedLastEpoch(bytes32 poolId)\n        internal\n        view\n        virtual\n        override(MixinFinalizer, MixinStakingPool)\n    {\n        return MixinFinalizer._assertPoolFinalizedLastEpoch(poolId);\n    }\n}\n",
		"./sys/MixinFinalizer.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\n//import \"../../rigoToken/RigoToken/RigoTokenFace.sol\";\nimport \"../../rigoToken/Inflation/InflationFace.sol\";\nimport \"../../rigoToken/ProofOfPerformance/ProofOfPerformanceFace.sol\";\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../libs/LibCobbDouglas.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../staking_pools/MixinStakingPoolRewards.sol\";\n\n\ncontract MixinFinalizer is\n    MixinStakingPoolRewards\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Begins a new epoch, preparing the prior one for finalization.\n    ///      Throws if not enough time has passed between epochs or if the\n    ///      previous epoch was not fully finalized.\n    /// @return numPoolsToFinalize The number of unfinalized pools.\n    function endEpoch()\n        external\n        returns (uint256)\n    {\n        uint256 currentEpoch_ = currentEpoch;\n        uint256 prevEpoch = currentEpoch_.safeSub(1);\n\n        // Make sure the previous epoch has been fully finalized.\n        uint256 numPoolsToFinalizeFromPrevEpoch = aggregatedStatsByEpoch[prevEpoch].numPoolsToFinalize;\n        if (numPoolsToFinalizeFromPrevEpoch != 0) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.PreviousEpochNotFinalizedError(\n                    prevEpoch,\n                    numPoolsToFinalizeFromPrevEpoch\n                )\n            );\n        }\n\n        // Convert all ETH to WETH; the WETH balance of this contract is the total rewards.\n        _wrapEth();\n\n        // Load aggregated stats for the epoch we're ending.\n        aggregatedStatsByEpoch[currentEpoch_].rewardsAvailable = _getAvailableWethBalance();\n        IStructs.AggregatedStats memory aggregatedStats = aggregatedStatsByEpoch[currentEpoch_];\n\n        // Emit an event.\n        emit EpochEnded(\n            currentEpoch_,\n            aggregatedStats.numPoolsToFinalize,\n            aggregatedStats.rewardsAvailable,\n            aggregatedStats.totalFeesCollected,\n            aggregatedStats.totalWeightedStake\n        );\n\n        // Advance the epoch. This will revert if not enough time has passed.\n        _goToNextEpoch();\n\n        // If there are no pools to finalize then the epoch is finalized.\n        if (aggregatedStats.numPoolsToFinalize == 0) {\n            emit EpochFinalized(currentEpoch_, 0, aggregatedStats.rewardsAvailable);\n        }\n\n        return aggregatedStats.numPoolsToFinalize;\n    }\n\n    /// @dev Instantly finalizes a single pool that earned rewards in the previous\n    ///      epoch, crediting it rewards for members and withdrawing operator's\n    ///      rewards as WETH. This can be called by internal functions that need\n    ///      to finalize a pool immediately. Does nothing if the pool is already\n    ///      finalized or did not earn rewards in the previous epoch.\n    /// @param poolId The pool ID to finalize.\n    function finalizePool(bytes32 poolId)\n        external\n    {\n        // allow smart contract calls only from whitelisted smart contract\n        if (_isContract(msg.sender)) {\n            require(\n                validPops[msg.sender] = true,\n                \"CALLER_IS_NON_WHITELISTED_SMART_CONTRACT_ERROR\"\n            );\n        }\n\n        // Compute relevant epochs\n        uint256 currentEpoch_ = currentEpoch;\n        uint256 prevEpoch = currentEpoch_.safeSub(1);\n\n        // Load the aggregated stats into memory; noop if no pools to finalize.\n        IStructs.AggregatedStats memory aggregatedStats = aggregatedStatsByEpoch[prevEpoch];\n        if (aggregatedStats.numPoolsToFinalize == 0) {\n            return;\n        }\n\n        // Noop if the pool did not earn rewards or already finalized (has no fees).\n        IStructs.PoolStats memory poolStats = poolStatsByEpoch[poolId][prevEpoch];\n        if (poolStats.feesCollected == 0) {\n            return;\n        }\n\n        // Clear the pool stats so we don't finalize it again, and to recoup\n        // some gas.\n        delete poolStatsByEpoch[poolId][prevEpoch];\n\n        // Compute the rewards.\n        uint256 rewards = _getUnfinalizedPoolRewardsFromPoolStats(poolStats, aggregatedStats);\n\n        // Pay the operator and update rewards for the pool.\n        // Note that we credit at the CURRENT epoch even though these rewards\n        // were earned in the previous epoch.\n        (uint256 operatorReward, uint256 membersReward) = _syncPoolRewards(\n            poolId,\n            rewards,\n            poolStats.membersStake\n        );\n\n        // Emit an event.\n        emit RewardsPaid(\n            currentEpoch_,\n            poolId,\n            operatorReward,\n            membersReward\n        );\n\n        uint256 totalReward = operatorReward.safeAdd(membersReward);\n\n        // Increase `totalRewardsFinalized`.\n        aggregatedStatsByEpoch[prevEpoch].totalRewardsFinalized =\n            aggregatedStats.totalRewardsFinalized =\n            aggregatedStats.totalRewardsFinalized.safeAdd(totalReward);\n\n        // Decrease the number of unfinalized pools left.\n        aggregatedStatsByEpoch[prevEpoch].numPoolsToFinalize =\n            aggregatedStats.numPoolsToFinalize =\n            aggregatedStats.numPoolsToFinalize.safeSub(1);\n\n        // If there are no more unfinalized pools remaining, the epoch is\n        // finalized.\n        if (aggregatedStats.numPoolsToFinalize == 0) {\n            emit EpochFinalized(\n                prevEpoch,\n                aggregatedStats.totalRewardsFinalized,\n                aggregatedStats.rewardsAvailable.safeSub(aggregatedStats.totalRewardsFinalized)\n            );\n        }\n    }\n\n    /// @dev Computes the reward owed to a pool during finalization.\n    ///      Does nothing if the pool is already finalized.\n    /// @param poolId The pool's ID.\n    /// @return reward The total reward owed to a pool.\n    /// @return membersStake The total stake for all non-operator members in\n    ///         this pool.\n    function _getUnfinalizedPoolRewards(bytes32 poolId)\n        internal\n        view\n        virtual\n        override\n        returns (\n            uint256 reward,\n            uint256 membersStake\n        )\n    {\n        uint256 prevEpoch = currentEpoch.safeSub(1);\n        IStructs.PoolStats memory poolStats = poolStatsByEpoch[poolId][prevEpoch];\n        reward = _getUnfinalizedPoolRewardsFromPoolStats(poolStats, aggregatedStatsByEpoch[prevEpoch]);\n        membersStake = poolStats.membersStake;\n    }\n\n    /// @dev Converts the entire ETH balance of this contract into WETH.\n    function _wrapEth()\n        internal\n    {\n        uint256 ethBalance = address(this).balance;\n        if (ethBalance != 0) {\n            getWethContract().deposit{value: ethBalance}();\n        }\n    }\n\n    /// @dev Returns the WETH balance of this contract, minus\n    ///      any WETH that has already been reserved for rewards.\n    function _getAvailableWethBalance()\n        internal\n        view\n        returns (uint256 wethBalance)\n    {\n        wethBalance = getWethContract().balanceOf(address(this))\n            .safeSub(wethReservedForPoolRewards);\n\n        return wethBalance;\n    }\n\n    /// @dev Asserts that a pool has been finalized last epoch.\n    /// @param poolId The id of the pool that should have been finalized.\n    function _assertPoolFinalizedLastEpoch(bytes32 poolId)\n        internal\n        view\n        virtual\n        override\n    {\n        uint256 prevEpoch = currentEpoch.safeSub(1);\n        IStructs.PoolStats memory poolStats = poolStatsByEpoch[poolId][prevEpoch];\n\n        // A pool that has any fees remaining has not been finalized\n        if (poolStats.feesCollected != 0) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.PoolNotFinalizedError(\n                    poolId,\n                    prevEpoch\n                )\n            );\n        }\n    }\n\n    /// @dev Computes the reward owed to a pool during finalization.\n    /// @param poolStats Stats for a specific pool.\n    /// @param aggregatedStats Stats aggregated across all pools.\n    /// @return rewards Unfinalized rewards for the input pool.\n    function _getUnfinalizedPoolRewardsFromPoolStats(\n        IStructs.PoolStats memory poolStats,\n        IStructs.AggregatedStats memory aggregatedStats\n    )\n        private\n        view\n        returns (uint256 rewards)\n    {\n        // There can't be any rewards if the pool did not collect any fees.\n        if (poolStats.feesCollected == 0) {\n            return rewards;\n        }\n\n        InflationFace inflationInstance = InflationFace(\n            getGrgContract().minter()\n        );\n\n        //TODO: use non-weighted stake and query stats correctly\n        uint256 popReward = ProofOfPerformanceFace(\n            inflationInstance.proofOfPerformance()\n        ).getPop(bytes32(uint256(1))); //.getPop(bytes32(1));\n        \n        uint256 period = inflationInstance.period();\n        \n        //TODO: calculate total stake allocated to pool\n        //TODO: check whether inputs can be sent from calling method\n        uint256 totalGrgDelegatedToPool =getTotalStakeDelegatedToPool(bytes32(uint256(1))).currentEpochBalance;\n        uint256 maxEpochReward = totalGrgDelegatedToPool * period / 365 days;\n\n        // Use the cobb-douglas function to compute the total reward.\n        rewards = LibCobbDouglas.cobbDouglas(\n            maxEpochReward,\n            popReward,\n            maxEpochReward,\n            poolStats.weightedStake,\n            aggregatedStats.totalWeightedStake,\n            cobbDouglasAlphaNumerator,\n            cobbDouglasAlphaDenominator\n        );\n\n        // Clip the reward to always be under\n        // `rewardsAvailable - totalRewardsPaid`,\n        // in case cobb-douglas overflows, which should be unlikely.\n        uint256 rewardsRemaining = aggregatedStats.rewardsAvailable.safeSub(aggregatedStats.totalRewardsFinalized);\n        if (rewardsRemaining < rewards) {\n            rewards = rewardsRemaining;\n        }\n    }\n    \n    /// @dev Determines whether an address is an account or a contract\n    /// @param target Address to be inspected\n    /// @return Boolean the address is a contract\n    /// @notice if it is a contract, we use this function to lookup for the owner\n    function _isContract(address target)\n        internal view\n        returns (bool)\n    {\n        uint size;\n        assembly {\n            size := extcodesize(target)\n        }\n        return size > 0;\n    }\n}\n",
		"../rigoToken/Inflation/InflationFace.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.8.0;\n\n/// @title Inflation Interface - Allows interaction with the Inflation contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface InflationFace {\n\n    function proofOfPerformance() external view returns (address);\n    function period() external view returns (uint256);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function mintInflation(bytes32 stakingPoolId, uint256 reward) external returns (bool);\n    function setInflationFactor(address groupAddress, uint256 inflationFactor) external;\n    function setMinimumRigo(uint256 minimum) external;\n    function setRigoblock(address newRigoblockDaoAddress) external;\n    function setAuthority(address authorityAddress) external;\n    function setProofOfPerformance(address popAddress) external;\n    function setPeriod(uint256 newPeriod) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function canWithdraw(bytes32 stakingPoolId) external view returns (bool);\n    function timeUntilClaim(bytes32 stakingPoolId) external view returns (uint256);\n    function getInflationFactor(address groupAddress) external view returns (uint256);\n    function getMaxEpochReward(uint256 totalGrgDelegatedToPool) external view returns (uint256);\n}\n",
		"../rigoToken/ProofOfPerformance/ProofOfPerformanceFace.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.8.0;\n\n/// @title Proof of Performance Interface - Allows interaction with the PoP contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface ProofOfPerformanceFace {\n    \n    function minter() external view returns (address);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows anyone to allocate the pop reward to pool wizards.\n    /// @param stakingPoolId Number of pool id in registry.\n    /// @param reward Value of the stake-rebased reward.\n    function claimPop(\n        bytes32 stakingPoolId,\n        uint256 reward\n    )\n        external;\n\n    /// @dev Allows RigoBlock Dao to update the pools registry.\n    /// @param _dragoRegistry Address of new registry.\n    function setRegistry(address _dragoRegistry) external;\n\n    /// @dev Allows RigoBlock Dao to update its address.\n    /// @param _rigoblockDao Address of new dao.\n    function setRigoblockDao(address _rigoblockDao) external;\n\n    /// @dev Allows RigoBlock Dao to set the ratio between assets and performance reward for a group.\n    /// @param _ofGroup Id of the pool.\n    /// @param _ratio Id of the pool.\n    /// @notice onlyRigoblockDao can set ratio.\n    function setRatio(address _ofGroup, uint256 _ratio) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Gets data of a pool.\n    /// @param poolId Id of the pool.\n    /// @return active Bool the pool is active.\n    /// @return thePoolAddress address of the pool.\n    /// @return thePoolGroup address of the pool factory.\n    /// @return thePoolPrice price of the pool in wei.\n    /// @return thePoolSupply total supply of the pool in units.\n    /// @return poolValue total value of the pool in wei.\n    /// @return epochReward value of the reward factor or said pool.\n    /// @return ratio of assets/performance reward (from 0 to 10000).\n    /// @return pop value of the pop reward to be claimed in GRGs.\n    function getPoolData(uint256 poolId)\n        external\n        view\n        returns (\n            bool active,\n            address thePoolAddress,\n            address thePoolGroup,\n            uint256 thePoolPrice,\n            uint256 thePoolSupply,\n            uint256 poolValue,\n            uint256 epochReward,\n            uint256 ratio,\n            uint256 pop\n        );\n\n    /// @dev Returns the highwatermark of a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the all-time-high pool nav.\n    function getHwm(uint256 poolId) external view returns (uint256);\n\n    /// @dev Returns the reward factor for a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the reward factor.\n    function getEpochReward(uint256 poolId)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the split ratio of asset and performance reward.\n    /// @param poolId Id of the pool.\n    /// @return Value of the ratio from 1 to 100.\n    function getRatio(uint256 poolId)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the proof of performance reward for a pool.\n    /// @param poolId Id of the pool.\n    /// @return popReward Value of the pop reward in Rigo tokens.\n    /// @return performanceReward Split of the performance reward in Rigo tokens.\n    /// @notice epoch reward should be big enough that it.\n    /// @notice can be decreased if number of funds increases.\n    /// @notice should be at least 10^6 (just as pool base) to start with.\n    /// @notice rigo token has 10^18 decimals.\n    function proofOfPerformance(uint256 poolId)\n        external\n        view\n        returns (uint256 popReward, uint256 performanceReward);\n\n    /// @dev Checks whether a pool is registered and active.\n    /// @param poolId Id of the pool.\n    /// @return Bool the pool is active.\n    function isActive(uint256 poolId)\n        external\n        view\n        returns (bool);\n\n    /// @dev Returns the address and the group of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return pool Address of the target pool.\n    /// @return group Address of the pool's group.\n    function addressFromId(uint256 poolId)\n        external\n        view\n        returns (\n            address pool,\n            address group\n        );\n\n    /// @dev Returns the price a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return thePoolPrice Price of the pool in wei.\n    /// @return totalTokens Number of tokens of a pool (totalSupply).\n    function getPoolPrice(uint256 poolId)\n        external\n        view\n        returns (\n            uint256 thePoolPrice,\n            uint256 totalTokens\n        );\n\n    /// @dev Returns the value of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return aum Total value of the pool in ETH.\n    function calcPoolValue(uint256 poolId)\n        external\n        view\n        returns (\n            uint256 aum\n        );\n    \n    /// @dev Returns the aggregated reward of all rigoblock pools belonging to a staking pool.\n    /// @param stakingPoolId Hex-encoded staking pool id.\n    /// @return popReward Value of the aggregated reward.\n    function getPop(bytes32 stakingPoolId)\n        external\n        view\n        returns (uint256 popReward);\n}\n",
		"./libs/LibCobbDouglas.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\n\nlibrary LibCobbDouglas {\n\n    /// @dev The cobb-douglas function used to compute fee-based rewards for\n    ///      staking pools in a given epoch. This function does not perform\n    ///      bounds checking on the inputs, but the following conditions\n    ///      need to be true:\n    ///         0 <= fees / totalFees <= 1\n    ///         0 <= stake / totalStake <= 1\n    ///         0 <= alphaNumerator / alphaDenominator <= 1\n    /// @param totalRewards collected over an epoch.\n    /// @param fees Fees attributed to the the staking pool.\n    /// @param totalFees Total fees collected across all pools that earned rewards.\n    /// @param stake Stake attributed to the staking pool.\n    /// @param totalStake Total stake across all pools that earned rewards.\n    /// @param alphaNumerator Numerator of `alpha` in the cobb-douglas function.\n    /// @param alphaDenominator Denominator of `alpha` in the cobb-douglas\n    ///        function.\n    /// @return rewards Rewards owed to the staking pool.\n    function cobbDouglas(\n        uint256 totalRewards,\n        uint256 fees,\n        uint256 totalFees,\n        uint256 stake,\n        uint256 totalStake,\n        uint32 alphaNumerator,\n        uint32 alphaDenominator\n    )\n        internal\n        pure\n        returns (uint256 rewards)\n    {\n        int256 feeRatio = LibFixedMath.toFixed(fees, totalFees);\n        int256 stakeRatio = LibFixedMath.toFixed(stake, totalStake);\n        if (feeRatio == 0 || stakeRatio == 0) {\n            return rewards = 0;\n        }\n        // The cobb-doublas function has the form:\n        // `totalRewards * feeRatio ^ alpha * stakeRatio ^ (1-alpha)`\n        // This is equivalent to:\n        // `totalRewards * stakeRatio * e^(alpha * (ln(feeRatio / stakeRatio)))`\n        // However, because `ln(x)` has the domain of `0 < x < 1`\n        // and `exp(x)` has the domain of `x < 0`,\n        // and fixed-point math easily overflows with multiplication,\n        // we will choose the following if `stakeRatio > feeRatio`:\n        // `totalRewards * stakeRatio / e^(alpha * (ln(stakeRatio / feeRatio)))`\n\n        // Compute\n        // `e^(alpha * ln(feeRatio/stakeRatio))` if feeRatio <= stakeRatio\n        // or\n        // `e^(alpa * ln(stakeRatio/feeRatio))` if feeRatio > stakeRatio\n        int256 n = feeRatio <= stakeRatio ?\n            LibFixedMath.div(feeRatio, stakeRatio) :\n            LibFixedMath.div(stakeRatio, feeRatio);\n        n = LibFixedMath.exp(\n            LibFixedMath.mulDiv(\n                LibFixedMath.ln(n),\n                int256(alphaNumerator),\n                int256(alphaDenominator)\n            )\n        );\n        // Compute\n        // `totalRewards * n` if feeRatio <= stakeRatio\n        // or\n        // `totalRewards / n` if stakeRatio > feeRatio\n        // depending on the choice we made earlier.\n        n = feeRatio <= stakeRatio ?\n            LibFixedMath.mul(stakeRatio, n) :\n            LibFixedMath.div(stakeRatio, n);\n        // Multiply the above with totalRewards.\n        rewards = LibFixedMath.uintMul(n, totalRewards);\n    }\n}\n",
		"./libs/LibFixedMath.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./LibFixedMathRichErrors.sol\";\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.SignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_SMALL,\n                b\n            ));\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _mul(a, b) / FIXED_1;\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _div(_mul(a, FIXED_1), b);\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.UnsignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                u\n            ));\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.SignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_SMALL,\n                f\n            ));\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.UnsignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                n\n            ));\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.UnsignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                n\n            ));\n        }\n        if (int256(d) < int256(0)) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.UnsignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                d\n            ));\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.SignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                x\n            ));\n        }\n        if (x <= 0) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.SignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_SMALL,\n                x\n            ));\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.SignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                x\n            ));\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.BinOpError(\n                LibFixedMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.BinOpError(\n                LibFixedMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.BinOpError(\n                LibFixedMathRichErrors.BinOpErrorCodes.DIVISION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.BinOpError(\n                LibFixedMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n    }\n}\n",
		"./libs/LibFixedMathRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\n\n\nlibrary LibFixedMathRichErrors {\n\n    enum ValueErrorCodes {\n        TOO_SMALL,\n        TOO_LARGE\n    }\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        DIVISION_BY_ZERO,\n        DIVISION_OVERFLOW\n    }\n\n    // bytes4(keccak256(\"SignedValueError(uint8,int256)\"))\n    bytes4 internal constant SIGNED_VALUE_ERROR_SELECTOR =\n        0xed2f26a1;\n\n    // bytes4(keccak256(\"UnsignedValueError(uint8,uint256)\"))\n    bytes4 internal constant UNSIGNED_VALUE_ERROR_SELECTOR =\n        0xbd79545f;\n\n    // bytes4(keccak256(\"BinOpError(uint8,int256,int256)\"))\n    bytes4 internal constant BIN_OP_ERROR_SELECTOR =\n        0x8c12dfe7;\n\n    // solhint-disable func-name-mixedcase\n    function SignedValueError(\n        ValueErrorCodes error,\n        int256 n\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SIGNED_VALUE_ERROR_SELECTOR,\n            uint8(error),\n            n\n        );\n    }\n\n    function UnsignedValueError(\n        ValueErrorCodes error,\n        uint256 n\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UNSIGNED_VALUE_ERROR_SELECTOR,\n            uint8(error),\n            n\n        );\n    }\n\n    function BinOpError(\n        BinOpErrorCodes error,\n        int256 a,\n        int256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            BIN_OP_ERROR_SELECTOR,\n            uint8(error),\n            a,\n            b\n        );\n    }\n}\n",
		"./rewards/MixinPopManager.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\nimport \"../interfaces/IStakingEvents.sol\";\nimport \"../immutable/MixinStorage.sol\";\n\n\ncontract MixinPopManager is\n    IStakingEvents,\n    MixinStorage\n{\n    /// @dev Asserts that the call is coming from a valid pop.\n    modifier onlyPop() {\n        if (!validPops[msg.sender]) {\n            LibRichErrors.rrevert(LibStakingRichErrors.OnlyCallableByPopError(\n                msg.sender\n            ));\n        }\n        _;\n    }\n\n    /// @dev Adds a new pop address\n    /// @param addr Address of pop contract to add\n    function addPopAddress(address addr)\n        external\n        onlyAuthorized\n    {\n        if (validPops[addr]) {\n            LibRichErrors.rrevert(LibStakingRichErrors.PopManagerError(\n                LibStakingRichErrors.PopManagerErrorCodes.PopAlreadyRegistered,\n                addr\n            ));\n        }\n        validPops[addr] = true;\n        emit PopAdded(addr);\n    }\n\n    /// @dev Removes an existing exchange address\n    /// @param addr Address of exchange contract to remove\n    function removeExchangeAddress(address addr)\n        external\n        onlyAuthorized\n    {\n        if (!validPops[addr]) {\n            LibRichErrors.rrevert(LibStakingRichErrors.PopManagerError(\n                LibStakingRichErrors.PopManagerErrorCodes.PopNotRegistered,\n                addr\n            ));\n        }\n        validPops[addr] = false;\n        emit PopRemoved(addr);\n    }\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.7.1+commit.f4a555be",
		"settings": {
			"remappings": [],
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}