{
	"schemaVersion": "2.0.0",
	"contractName": "Staking",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "reason",
						"type": "string"
					}
				],
				"name": "CatchStringEvent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "numPoolsToFinalize",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsAvailable",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalFeesCollected",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalWeightedStake",
						"type": "uint256"
					}
				],
				"name": "EpochEnded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsPaid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsRemaining",
						"type": "uint256"
					}
				],
				"name": "EpochFinalized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "grgAmount",
						"type": "uint256"
					}
				],
				"name": "GrgMintEvent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "fromStatus",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "fromPool",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "toStatus",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "toPool",
						"type": "bytes32"
					}
				],
				"name": "MoveStake",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "oldOperatorShare",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "newOperatorShare",
						"type": "uint32"
					}
				],
				"name": "OperatorShareDecreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "minimumPoolStake",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "cobbDouglasAlphaNumerator",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "cobbDouglasAlphaDenominator",
						"type": "uint256"
					}
				],
				"name": "ParamsSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "exchangeAddress",
						"type": "address"
					}
				],
				"name": "PopAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "exchangeAddress",
						"type": "address"
					}
				],
				"name": "PopRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "rbPoolAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "RbPoolStakingPoolSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "reason",
						"type": "bytes"
					}
				],
				"name": "ReturnDataEvent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "operatorReward",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "membersReward",
						"type": "uint256"
					}
				],
				"name": "RewardsPaid",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Stake",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "operatorShare",
						"type": "uint32"
					}
				],
				"name": "StakingPoolCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "StakingPoolEarnedRewardsInEpoch",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Unstake",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "addAuthorizedAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "addPopAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "aggregatedStatsByEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "rewardsAvailable",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "numPoolsToFinalize",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalFeesCollected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalWeightedStake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalRewardsFinalized",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "authorities",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "authorized",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cobbDouglasAlphaDenominator",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cobbDouglasAlphaNumerator",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "member",
						"type": "address"
					}
				],
				"name": "computeRewardBalanceOfDelegator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "computeRewardBalanceOfOperator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "rigoblockPoolAddress",
						"type": "address"
					}
				],
				"name": "createStakingPool",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "poolAccount",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "popReward",
						"type": "uint256"
					}
				],
				"name": "creditPopReward",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentEpochStartTimeInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "uint32",
						"name": "newOperatorShare",
						"type": "uint32"
					}
				],
				"name": "decreaseStakingPoolOperatorShare",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "epochDurationInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "finalizePool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAuthorizedAddresses",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCurrentEpochEarliestEndTimeInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDragoRegistry",
				"outputs": [
					{
						"internalType": "contract IDragoRegistry",
						"name": "dragoRegistry",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum IStructs.StakeStatus",
						"name": "stakeStatus",
						"type": "uint8"
					}
				],
				"name": "getGlobalStakeByStatus",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGrgContract",
				"outputs": [
					{
						"internalType": "contract RigoTokenFace",
						"name": "grgContract",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGrgVault",
				"outputs": [
					{
						"internalType": "contract IGrgVault",
						"name": "grgVault",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"internalType": "enum IStructs.StakeStatus",
						"name": "stakeStatus",
						"type": "uint8"
					}
				],
				"name": "getOwnerStakeByStatus",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getParams",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_minimumPoolStake",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaNumerator",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaDenominator",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakeDelegatedToPoolByOwner",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakingPool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "operator",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "stakingPal",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "operatorShare",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "stakingPalShare",
								"type": "uint32"
							}
						],
						"internalType": "struct IStructs.Pool",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakingPoolStatsThisEpoch",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "feesCollected",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "weightedStake",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "membersStake",
								"type": "uint256"
							}
						],
						"internalType": "struct IStructs.PoolStats",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					}
				],
				"name": "getTotalStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getTotalStakeDelegatedToPool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "grgReservedForPoolRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "init",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "rigoblockPoolAccount",
						"type": "address"
					}
				],
				"name": "joinStakingPoolAsRbPoolAccount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minimumPoolStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum IStructs.StakeStatus",
								"name": "status",
								"type": "uint8"
							},
							{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}
						],
						"internalType": "struct IStructs.StakeInfo",
						"name": "from",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "enum IStructs.StakeStatus",
								"name": "status",
								"type": "uint8"
							},
							{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}
						],
						"internalType": "struct IStructs.StakeInfo",
						"name": "to",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "moveStake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "poolIdByRbPoolAccount",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "poolStatsByEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "feesCollected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "weightedStake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "membersStake",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "removeAuthorizedAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "removeAuthorizedAddressAtIndex",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "removePopAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardDelegatedStakeWeight",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "rewardsByPoolId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_minimumPoolStake",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaNumerator",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaDenominator",
						"type": "uint32"
					}
				],
				"name": "setParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "newStakingPalAddress",
						"type": "address"
					}
				],
				"name": "setStakingPalAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "unstake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "validPops",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "withdrawDelegatorRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addAuthorizedAddress(address)": {
					"details": "Authorizes an address.",
					"params": {
						"target": "Address to authorize."
					}
				},
				"addPopAddress(address)": {
					"details": "Adds a new pop address.",
					"params": {
						"addr": "Address of pop contract to add."
					}
				},
				"computeRewardBalanceOfDelegator(bytes32,address)": {
					"details": "Computes the reward balance in ETH of a specific member of a pool.",
					"params": {
						"member": "The member of the pool.",
						"poolId": "Unique id of pool."
					},
					"returns": {
						"reward": "totalReward Balance in ETH."
					}
				},
				"computeRewardBalanceOfOperator(bytes32)": {
					"details": "Computes the reward balance in ETH of the operator of a pool.",
					"params": {
						"poolId": "Unique id of pool."
					},
					"returns": {
						"reward": "totalReward Balance in ETH."
					}
				},
				"createStakingPool(address)": {
					"details": "Create a new staking pool. The sender will be the staking pal of this pool. Note that a staking pal must be payable.",
					"params": {
						"rigoblockPoolAddress": "Adds rigoblock pool to the created staking pool for convenience if non-null."
					},
					"returns": {
						"poolId": "The unique pool id generated for this pool."
					}
				},
				"creditPopReward(address,uint256)": {
					"details": "Credits the value of a pool's pop reward.      Only a known RigoBlock pop can call this method. See      (MixinPopManager).",
					"params": {
						"poolAccount": "The address of the rigoblock pool account.",
						"popReward": "The pop reward."
					}
				},
				"decreaseStakingPoolOperatorShare(bytes32,uint32)": {
					"details": "Decreases the operator share for the given pool (i.e. increases pool rewards for members).",
					"params": {
						"newOperatorShare": "The newly decreased percentage of any rewards owned by the operator.",
						"poolId": "Unique Id of pool."
					}
				},
				"endEpoch()": {
					"details": "Begins a new epoch, preparing the prior one for finalization.      Throws if not enough time has passed between epochs or if the      previous epoch was not fully finalized.",
					"returns": {
						"_0": "numPoolsToFinalize The number of unfinalized pools."
					}
				},
				"finalizePool(bytes32)": {
					"details": "Instantly finalizes a single pool that earned rewards in the previous      epoch, crediting it rewards for members and withdrawing operator's      rewards as WETH. This can be called by internal functions that need      to finalize a pool immediately. Does nothing if the pool is already      finalized or did not earn rewards in the previous epoch.",
					"params": {
						"poolId": "The pool ID to finalize."
					}
				},
				"getAuthorizedAddresses()": {
					"details": "Gets all authorized addresses.",
					"returns": {
						"_0": "Array of authorized addresses."
					}
				},
				"getCurrentEpochEarliestEndTimeInSeconds()": {
					"details": "Returns the earliest end time in seconds of this epoch.      The next epoch can begin once this time is reached.      Epoch period = [startTimeInSeconds..endTimeInSeconds)",
					"returns": {
						"_0": "Time in seconds."
					}
				},
				"getDragoRegistry()": {
					"details": "An overridable way to access the deployed dragoRegistry.      Must be view to allow overrides to access state.",
					"returns": {
						"dragoRegistry": "The dragoRegistry contract."
					}
				},
				"getGlobalStakeByStatus(uint8)": {
					"details": "Gets global stake for a given status.",
					"params": {
						"stakeStatus": "UNDELEGATED or DELEGATED"
					},
					"returns": {
						"balance": "Global stake for given status."
					}
				},
				"getGrgContract()": {
					"details": "An overridable way to access the deployed GRG contract.      Must be view to allow overrides to access state.",
					"returns": {
						"grgContract": "The GRG contract instance."
					}
				},
				"getGrgVault()": {
					"details": "An overridable way to access the deployed grgVault.      Must be view to allow overrides to access state.",
					"returns": {
						"grgVault": "The grgVault contract."
					}
				},
				"getOwnerStakeByStatus(address,uint8)": {
					"details": "Gets an owner's stake balances by status.",
					"params": {
						"stakeStatus": "UNDELEGATED or DELEGATED",
						"staker": "Owner of stake."
					},
					"returns": {
						"balance": "Owner's stake balances for given status."
					}
				},
				"getParams()": {
					"details": "Retrieves all configurable parameter values.",
					"returns": {
						"_cobbDouglasAlphaDenominator": "Denominator for cobb douglas alpha factor.",
						"_cobbDouglasAlphaNumerator": "Numerator for cobb douglas alpha factor.",
						"_epochDurationInSeconds": "Minimum seconds between epochs.",
						"_minimumPoolStake": "Minimum amount of stake required in a pool to collect rewards.",
						"_rewardDelegatedStakeWeight": "How much delegated stake is weighted vs operator stake, in ppm."
					}
				},
				"getStakeDelegatedToPoolByOwner(address,bytes32)": {
					"details": "Returns the stake delegated to a specific staking pool, by a given staker.",
					"params": {
						"poolId": "Unique Id of pool.",
						"staker": "of stake."
					},
					"returns": {
						"balance": "Stake delegated to pool by staker."
					}
				},
				"getStakingPool(bytes32)": {
					"details": "Returns a staking pool",
					"params": {
						"poolId": "Unique id of pool."
					}
				},
				"getStakingPoolStatsThisEpoch(bytes32)": {
					"details": "Get stats on a staking pool in this epoch.",
					"params": {
						"poolId": "Pool Id to query."
					},
					"returns": {
						"_0": "PoolStats struct for pool id."
					}
				},
				"getTotalStake(address)": {
					"details": "Returns the total stake for a given staker.",
					"params": {
						"staker": "of stake."
					},
					"returns": {
						"_0": "Total GRG staked by `staker`."
					}
				},
				"getTotalStakeDelegatedToPool(bytes32)": {
					"details": "Returns the total stake delegated to a specific staking pool,      across all members.",
					"params": {
						"poolId": "Unique Id of pool."
					},
					"returns": {
						"balance": "Total stake delegated to pool."
					}
				},
				"init()": {
					"details": "Initialize storage owned by this contract.      This function should not be called directly.      The StakingProxy contract will call it in `attachStakingContract()`."
				},
				"joinStakingPoolAsRbPoolAccount(bytes32,address)": {
					"details": "Allows caller to join a staking pool as a rigoblock pool account.",
					"params": {
						"poolId": "Unique id of pool.",
						"rigoblockPoolAccount": "Address of subaccount to be added to staking pool."
					}
				},
				"moveStake((uint8,bytes32),(uint8,bytes32),uint256)": {
					"details": "Moves stake between statuses: 'undelegated' or 'delegated'.      Delegated stake can also be moved between pools.      This change comes into effect next epoch.",
					"params": {
						"amount": "Amount of stake to move.",
						"from": "Status to move stake out of.",
						"to": "Status to move stake into."
					}
				},
				"removeAuthorizedAddress(address)": {
					"details": "Removes authorizion of an address.",
					"params": {
						"target": "Address to remove authorization from."
					}
				},
				"removeAuthorizedAddressAtIndex(address,uint256)": {
					"details": "Removes authorizion of an address.",
					"params": {
						"index": "Index of target in authorities array.",
						"target": "Address to remove authorization from."
					}
				},
				"removePopAddress(address)": {
					"details": "Removes an existing proof_of_performance address.",
					"params": {
						"addr": "Address of proof_of_performance contract to remove."
					}
				},
				"setParams(uint256,uint32,uint256,uint32,uint32)": {
					"details": "Set all configurable parameters at once.",
					"params": {
						"_cobbDouglasAlphaDenominator": "Denominator for cobb douglas alpha factor.",
						"_cobbDouglasAlphaNumerator": "Numerator for cobb douglas alpha factor.",
						"_epochDurationInSeconds": "Minimum seconds between epochs.",
						"_minimumPoolStake": "Minimum amount of stake required in a pool to collect rewards.",
						"_rewardDelegatedStakeWeight": "How much delegated stake is weighted vs operator stake, in ppm."
					}
				},
				"setStakingPalAddress(bytes32,address)": {
					"details": "Allows the operator to update the staking pal address.",
					"params": {
						"newStakingPalAddress": "Address of the new staking pal.",
						"poolId": "Unique id of pool."
					}
				},
				"stake(uint256)": {
					"details": "Stake GRG tokens. Tokens are deposited into the GRG Vault.      Unstake to retrieve the GRG. Stake is in the 'Active' status.",
					"params": {
						"amount": "Amount of GRG to stake."
					}
				},
				"transferOwnership(address)": {
					"details": "Change the owner of this contract.",
					"params": {
						"newOwner": "New owner address."
					}
				},
				"unstake(uint256)": {
					"details": "Unstake. Tokens are withdrawn from the GRG Vault and returned to      the staker. Stake must be in the 'undelegated' status in both the      current and next epoch in order to be unstaked.",
					"params": {
						"amount": "Amount of GRG to unstake."
					}
				},
				"withdrawDelegatorRewards(bytes32)": {
					"details": "Withdraws the caller's WETH rewards that have accumulated      until the last epoch.",
					"params": {
						"poolId": "Unique id of pool."
					}
				}
			},
			"version": 1
		},
		"evm": {
			"bytecode": {
				"generatedSources": [],
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556152c4806100326000396000f3fe6080604052600436106102e45760003560e01c80638da5cb5b11610190578063d39de6e9116100dc578063e907f00311610095578063ef4ba6801161006f578063ef4ba680146108a5578063f252b7a1146108ba578063f2fde38b146108da578063ff691b11146108fa576102e4565b8063e907f0031461085d578063ecc128f21461087d578063ee99205c14610890576102e4565b8063d39de6e9146107c7578063e0822db7146107e9578063e0ee036e146107fe578063e1c7392a14610813578063e804d0a414610828578063e8eeb3f814610848576102e4565b8063b510879f11610149578063bb7ef7e011610123578063bb7ef7e014610752578063be111af414610772578063c18c914114610792578063d14dc231146107b2576102e4565b8063b510879f146106fd578063b652b41f1461071d578063b918161114610732576102e4565b80638da5cb5b1461065e5780639ad26744146106735780639c3ccc8214610693578063a26171e2146106b3578063a694fc3a146106c8578063b2baa33e146106e8576102e4565b806346b979591161024f5780635d91121d1161020857806370712939116101e257806370712939146105e757806376671808146106075780637fa140c71461061c578063816667961461063c576102e4565b80635d91121d1461058c5780635e615a6b146105ac57806363403801146105d2576102e4565b806346b97959146104a3578063494503d4146104d05780634bcc3f67146104fd578063540c2d531461052a578063587da0231461055757806358f6c7e31461056c576102e4565b806336d7dd8e116102a157806336d7dd8e146103c557806338229d93146103e55780633a832382146104165780633e4ad7321461043657806342f1181e1461046357806344a6958b14610483576102e4565b80630b9663db146102e95780631a67a0a0146103145780631e7ff8f6146103365780631f81eb80146103565780632a94c279146103765780632e17de78146103a5575b600080fd5b3480156102f557600080fd5b506102fe61091a565b60405161030b9190614f1f565b60405180910390f35b34801561032057600080fd5b5061033461032f366004614ce1565b610c44565b005b34801561034257600080fd5b506102fe610351366004614b5c565b610d80565b34801561036257600080fd5b50610334610371366004614b5c565b610e0d565b34801561038257600080fd5b50610396610391366004614d10565b610ea2565b60405161030b939291906150df565b3480156103b157600080fd5b506103346103c0366004614cc9565b610ece565b3480156103d157600080fd5b506103346103e0366004614b5c565b611045565b3480156103f157600080fd5b50610405610400366004614cc9565b6110cb565b60405161030b959493929190615110565b34801561042257600080fd5b50610334610431366004614ce1565b6110fa565b34801561044257600080fd5b50610456610451366004614cc9565b611164565b60405161030b91906150a6565b34801561046f57600080fd5b5061033461047e366004614b5c565b611183565b34801561048f57600080fd5b5061045661049e366004614bbf565b611197565b3480156104af57600080fd5b506104c36104be366004614cc9565b6111e9565b60405161030b9190615040565b3480156104dc57600080fd5b506104f06104eb366004614cc9565b611234565b60405161030b9190614e9a565b34801561050957600080fd5b5061051d610518366004614cc9565b61125e565b60405161030b9190615061565b34801561053657600080fd5b5061054a610545366004614b5c565b6112c7565b60405161030b9190614f14565b34801561056357600080fd5b506102fe6112dc565b34801561057857600080fd5b50610334610587366004614d6d565b6112e2565b34801561059857600080fd5b506103346105a7366004614d31565b6114b7565b3480156105b857600080fd5b506105c161154c565b60405161030b959493929190615133565b3480156105de57600080fd5b506102fe611575565b3480156105f357600080fd5b50610334610602366004614b5c565b61157b565b34801561061357600080fd5b506102fe611609565b34801561062857600080fd5b506102fe610637366004614b5c565b61160f565b34801561064857600080fd5b50610651611621565b60405161030b9190615177565b34801561066a57600080fd5b506104f061162d565b34801561067f57600080fd5b5061033461068e366004614c97565b61163c565b34801561069f57600080fd5b506103346106ae366004614e18565b61164e565b3480156106bf57600080fd5b506102fe6116bb565b3480156106d457600080fd5b506103346106e3366004614cc9565b6116c1565b3480156106f457600080fd5b506102fe6117af565b34801561070957600080fd5b50610334610718366004614cc9565b6117cd565b34801561072957600080fd5b506104f06117d7565b34801561073e57600080fd5b5061054a61074d366004614b5c565b6117ef565b34801561075e57600080fd5b506102fe61076d366004614cc9565b611804565b34801561077e57600080fd5b506102fe61078d366004614b5c565b611891565b34801561079e57600080fd5b506102fe6107ad366004614cc9565b611a60565b3480156107be57600080fd5b506102fe611a72565b3480156107d357600080fd5b506107dc611a78565b60405161030b9190614ec7565b3480156107f557600080fd5b506104f0611ada565b34801561080a57600080fd5b50610651611af2565b34801561081f57600080fd5b50610334611afe565b34801561083457600080fd5b50610456610843366004614d53565b611b18565b34801561085457600080fd5b50610651611c46565b34801561086957600080fd5b506102fe610878366004614ce1565b611c5a565b61033461088b366004614c97565b611cf9565b34801561089c57600080fd5b506104f0611e44565b3480156108b157600080fd5b506104f0611e53565b3480156108c657600080fd5b506104566108d5366004614b94565b611e6b565b3480156108e657600080fd5b506103346108f5366004614b5c565b611e9f565b34801561090657600080fd5b50610334610915366004614cc9565b611f10565b600b546000908161092c82600161211f565b600081815260156020526040902060010154909150801561095957610959610954838361213e565b612183565b6001831115610b3f5761096a611e53565b6001600160a01b031663075461726040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a257600080fd5b505afa1580156109b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109da9190614b78565b6001600160a01b031663c551a2f96040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a1457600080fd5b505af1925050508015610a44575060408051601f3d908101601f19168201909252610a4191810190614daa565b60015b610b0657610a506151d5565b80610a5b5750610a98565b7f1fc94326c4f979e0a19555aef364d7490acf6840560fc01c723e320d6f2d96c181604051610a8a9190614f4d565b60405180910390a150610b01565b3d808015610ac2576040519150601f19603f3d011682016040523d82523d6000602084013e610ac7565b606091505b507f349211c9e282ed467b636a7fe2ccdd287a3f7c67969d4e5fd2ee539df22ed61381604051610af79190614f4d565b60405180910390a1505b610b3f565b7f02781ecbb97cbe2fbf6a9b934f9aa6422aca2d528ad53fbfb31f70bc47bcfa5b81604051610b359190614f1f565b60405180910390a1505b610b4761218b565b600084815260156020526040902055610b5e614a00565b50600083815260156020908152604091829020825160a08101845281548082526001830154938201849052600283015482860181905260038401546060840181905260049094015460808401529451919488947fbb4a26fa0ace13ee4da343896c20eaa44a618fb9071fdd8c2e2c960a4583189d94610be094919392916150f5565b60405180910390a2610bf0612216565b6020810151610c3757805160405185917fb463d19ecf455be65365092cf8e1db6934a0334cf8cd532ddf9964d01f36b5b291610c2e91600091614f60565b60405180910390a25b6020015193505050505b90565b600080610c4f6117d7565b60405163309dfc6b60e21b81526001600160a01b03919091169063c277f1ac90610c7d908790600401614f1f565b60006040518083038186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cd19190810190614bf3565b50509350505091506000811415610d035760405162461bcd60e51b8152600401610cfa90614f6e565b60405180910390fd5b826001600160a01b0316826001600160a01b031614610d345760405162461bcd60e51b8152600401610cfa90614fa5565b6001600160a01b038083166000908152600860205260408082208790555186928616917fe8b9f7ee7a4480d45b60e98f7b2090dd82e2353b8557a6ee2dd2d5ee9196bac291a350505050565b6000610d8a611ada565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401610db59190614e9a565b60206040518083038186803b158015610dcd57600080fd5b505afa158015610de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e059190614daa565b90505b919050565b610e15612253565b6001600160a01b0381166000908152600f602052604090205460ff1615610e4457610e44610954600083612276565b6001600160a01b0381166000908152600f602052604090819020805460ff19166001179055517f5738ee3c8e8fe8b0b9c4c21b16fdca42ec02e271237dfeabbf3b5af1584d732b90610e97908390614e9a565b60405180910390a150565b601460209081526000928352604080842090915290825290208054600182015460029092015490919083565b33610ed7614a2f565b6001600160a01b03821660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60205260409020610f17906122e4565b90506000610f3f82602001516001600160601b031683604001516001600160601b0316612368565b905080841115610f5657610f56610954858361237e565b6001600160a01b03831660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60205260409020610f9790856123c3565b610f9f611ada565b6001600160a01b0316639470b0bd84866040518363ffffffff1660e01b8152600401610fcc929190614eae565b600060405180830381600087803b158015610fe657600080fd5b505af1158015610ffa573d6000803e3d6000fd5b50505050826001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd856040516110379190614f1f565b60405180910390a250505050565b61104d612253565b6001600160a01b0381166000908152600f602052604090205460ff1661107b5761107b610954600183612276565b6001600160a01b0381166000908152600f602052604090819020805460ff19169055517f9bf55462cb5fa187f725d06de0a70bc01c4e40695570bdc25ad116f9be46bda790610e97908390614e9a565b601560205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b8161110481612435565b60008381526009602052604090206001600160a01b0383161580611137575060018101546001600160a01b038481169116145b15611142575061115f565b60010180546001600160a01b0319166001600160a01b0384161790555b505050565b61116c614a2f565b6000828152600760205260409020610e05906122e4565b61118b612461565b6111948161248e565b50565b61119f614a2f565b6111e0600560008460018111156111b257fe5b60ff168152602080820192909252604090810160009081206001600160a01b038816825290925290206122e4565b90505b92915050565b6111f1614a4f565b506000908152601460209081526040808320600b548452825291829020825160608101845281548152600182015492810192909252600201549181019190915290565b6002818154811061124457600080fd5b6000918252602090912001546001600160a01b0316905081565b611266614a70565b50600090815260096020908152604091829020825160808101845281546001600160a01b0390811682526001909201549182169281019290925263ffffffff600160a01b8204811693830193909352600160c01b9004909116606082015290565b600f6020526000908152604090205460ff1681565b600c5481565b33816112ee575061115f565b60006112fd6020860186614d53565b600181111561130857fe5b14801561132c5750600061131f6020850185614d53565b600181111561132a57fe5b145b15611337575061115f565b60016113466020860186614d53565b600181111561135157fe5b14156113665761136684602001358284612562565b60016113756020850185614d53565b600181111561138057fe5b141561139557611395836020013582846125ee565b60006005816113a76020880188614d53565b60018111156113b257fe5b60ff168152602080820192909252604090810160009081206001600160a01b0386168252835290812092509060059082906113ef90880188614d53565b60018111156113fa57fe5b60ff168152602080820192909252604090810160009081206001600160a01b03871682529092529020905061143082828661267a565b6020808601359087018035906001600160a01b038616907f7d3ad1dcf03b9027064d1d9a474a69e0cecc31324c541d3eb9b5e6fa2f106c8d908890611475908c614d53565b600181111561148057fe5b61148d60208c018c614d53565b600181111561149857fe5b6040516114a79392919061515e565b60405180910390a4505050505050565b816114c181612435565b600083815260096020526040902060010154600160a01b900463ffffffff166114eb84828561274e565b60008481526009602052604090819020600101805463ffffffff60a01b1916600160a01b63ffffffff8716021790555184907f8ea2a7a959bd25f226b7b0a4393613f7fdcaa8404e8bad96aa52dc1c14590167906110379084908790615188565b601054601154601254601354929363ffffffff9283169391928281169264010000000090041690565b60105481565b611583612461565b6001600160a01b03811660009081526001602052604090205460ff166115af576115af61095482612796565b60005b60025481101561160557816001600160a01b0316600282815481106115d357fe5b6000918252602090912001546001600160a01b031614156115fd576115f882826127de565b611605565b6001016115b2565b5050565b600b5481565b60086020526000908152604090205481565b60135463ffffffff1681565b6000546001600160a01b031681565b611644612461565b61160582826127de565b611656612253565b6116638585858585612972565b306001600160a01b031663c6f3a4276040518163ffffffff1660e01b815260040160006040518083038186803b15801561169c57600080fd5b505afa1580156116b0573d6000803e3d6000fd5b505050505050505050565b60125481565b336116ca611ada565b6001600160a01b03166315cc36f282846040518363ffffffff1660e01b81526004016116f7929190614eae565b600060405180830381600087803b15801561171157600080fd5b505af1158015611725573d6000803e3d6000fd5b505050506001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc6020526040902061176a9083612a03565b806001600160a01b03167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a836040516117a39190614f1f565b60405180910390a25050565b60006117c8601054600c54612a5990919063ffffffff16565b905090565b6111948133612a75565b73de6445484a8dcd9bf35fc95eb4e3990cc358822e90565b60016020526000908152604090205460ff1681565b600061180e614a70565b506000828152600960209081526040808320815160808101835281546001600160a01b0390811682526001909201549182169381019390935263ffffffff600160a01b8204811692840192909252600160c01b9004166060820152908061187485612be3565b9150915061188783604001518383612ca0565b5095945050505050565b600080600061189e6117d7565b6001600160a01b031663b72e717d856040518263ffffffff1660e01b81526004016118c99190614e9a565b60006040518083038186803b1580156118e157600080fd5b505afa1580156118f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261191d9190810190614dc2565b509450505050915060008214156119465760405162461bcd60e51b8152600401610cfa90614fdc565b8033620aae60620186a061195986612cdb565b8560001b9650611967614a70565b50604080516080810182526001600160a01b038087168252858116602080840191825263ffffffff8088168587019081528782166060870190815260008f8152600990945292879020865181549087166001600160a01b0319918216178255945160019091018054925194518416600160c01b0263ffffffff60c01b1995909416600160a01b0263ffffffff60a01b1992909716929095169190911716939093171691909117905590517fcec6fc86ea644053f6edff1160dfe3fa5c61e7a5ef9f873f145bb03a0bd319e790611a42908a9088908790614f28565b60405180910390a1611a54888a610c44565b50505050505050919050565b600a6020526000908152604090205481565b60165481565b60606002805480602002602001604051908101604052809291908181526020018280548015611ad057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ab2575b5050505050905090565b730a33744ee5d57d6d69944213d8e6ad80d64fdc5890565b60115463ffffffff1681565b611b06612253565b611b0e612d06565b611b16612d19565b565b611b20614a2f565b60016000526004602052611b537fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe056122e4565b90506000826001811115611b6357fe5b1415610e08576000611b73611ada565b6001600160a01b0316636b6df5aa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bab57600080fd5b505afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be39190614daa565b9050611c0d611c0883602001516001600160601b03168361211f90919063ffffffff16565b612d44565b6001600160601b0390811660208401526040830151611c3291611c089184911661211f565b6001600160601b0316604083015250919050565b601354640100000000900463ffffffff1681565b6000611c64614a70565b506000838152600960209081526040808320815160808101835281546001600160a01b0390811682526001909201549182169381019390935263ffffffff600160a01b8204811692840192909252600160c01b90041660608201529080611cca86612be3565b915091506000611cdf84604001518484612ca0565b915050611cee87878385612d63565b979650505050505050565b336000908152600f602052604090205460ff16611d1c57611d1c61095433612e6f565b6001600160a01b03821660009081526008602052604090205480611d405750611605565b6000611d4b82611164565b602001516001600160601b03169050601254811015611d6b575050611605565b600b54600083815260146020908152604080832084845282528083206015909252909120815480611e0e57600080611da38888612eb7565b600287018290556001870181905560038601549193509150611dc59082612a59565b6003850155600180850154611dd991612a59565b6001850155604051889087907f14b098103235344975b17508c2391721cc9ac3f3fa2b56c7ff46f8480dfd074f90600090a350505b80871115611e3a578683556002820154611e34908290611e2e908a612a59565b9061211f565b60028301555b5050505050505050565b6003546001600160a01b031681565b734fbb350052bca5417566f188eb2ebce5b19bc96490565b611e73614a2f565b6001600160a01b038316600090815260066020908152604080832085845290915290206111e0906122e4565b611ea7612461565b6001600160a01b038116611ec557611ec0610954612f25565b611194565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b600b546000611f2082600161211f565b9050611f2a614a00565b50600081815260156020908152604091829020825160a08101845281548152600182015492810183905260028201549381019390935260038101546060840152600401546080830152611f7f57505050611194565b611f87614a4f565b5060008481526014602090815260408083208584528252918290208251606081018452815480825260018301549382019390935260029091015492810192909252611fd55750505050611194565b60008581526014602090815260408083208684529091528120818155600181018290556002018190556120088284612f43565b905060008061201c88848660400151612fb2565b9150915087877ff1116b309178aa62dcb6bf8c3b8bc2321724907c7ebf52192d14c8ce3aa9194c8484604051612053929190614f60565b60405180910390a360006120678383612a59565b60808701519091506120799082612a59565b608087018190526000888152601560209081526040909120600401919091558601516120a690600161211f565b602080880182815260008a81526015909252604090912060010191909155516116b0576080860151865188917fb463d19ecf455be65365092cf8e1db6934a0334cf8cd532ddf9964d01f36b5b2916120fe908261211f565b60405161210c929190614f60565b60405180910390a2505050505050505050565b6000828211156121385761213861095460028585613266565b50900390565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b03166330a5c00560e11b17905292915050565b805160208201fd5b60006117c860165461219b611e53565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016121c69190614e9a565b60206040518083038186803b1580156121de57600080fd5b505afa1580156121f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2e9190614daa565b4260006122216117af565b9050818111156122385761223861095482846132d8565b600b54600090612249906001612a59565b600b555050600c55565b3360009081526001602052604090205460ff16611b1657611b166109543361331d565b606063b9588e4360e01b83836040516024018083600181111561229557fe5b81526001600160a01b0390921660208084019190915260408051808503830181529381019052820180516001600160e01b03166001600160e01b03199095169490941790935295945050505050565b6122ec614a2f565b506040805160608101825282546001600160401b0381168083526001600160601b03600160401b830481166020850152600160a01b90920490911692820192909252600b5490918111156123625761234381613365565b6001600160401b0316825260408201516001600160601b031660208301525b50919050565b600081831061237757816111e0565b5090919050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b03166384c8b7c960e01b17905292915050565b6123cb614a2f565b6123d4836122e4565b90506123f9611c088383604001516001600160601b031661211f90919063ffffffff16565b6001600160601b039081166040830152602082015161241d91611c0891168461211f565b6001600160601b0316602082015261115f8382613384565b6000818152600960205260409020546001600160a01b03163381146116055761160561095433846133ee565b6000546001600160a01b03163314611b1657600054611b16906109549033906001600160a01b031661343b565b6001600160a01b0381166124a7576124a761095461348c565b6001600160a01b03811660009081526001602052604090205460ff16156124d4576124d4610954826134aa565b6001600160a01b0381166000818152600160208190526040808320805460ff19168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b03191684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b61256b836134f2565b6125758383612a75565b6001600160a01b038216600090815260066020908152604080832086845290915290206125a2908261351c565b60008381526007602052604090206125ba908261351c565b6001600052600460205261115f7fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe058261351c565b6125f7836134f2565b6126018383612a75565b6001600160a01b0382166000908152600660209081526040808320868452909152902061262e908261356a565b6000838152600760205260409020612646908261356a565b6001600052600460205261115f7fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe058261356a565b61268483836135a0565b1561268e5761115f565b612696614a2f565b61269f846122e4565b90506126a9614a2f565b6126b2846122e4565b905081604001516001600160601b03168311156126e3576126e36109548484604001516001600160601b031661237e565b60408201516126ff90611c08906001600160601b03168561211f565b6001600160601b0390811660408085019190915282015161272591611c08911685612a59565b6001600160601b0316604082015261273d8583613384565b6127478482613384565b5050505050565b620f424063ffffffff821611156127735761276e610954600085846135a7565b61115f565b8163ffffffff168163ffffffff16111561115f5761115f610954600185846135a7565b604080516001600160a01b0383166024808301919091528251808303909101815260449091019091526020810180516001600160e01b03166375a8845160e11b179052919050565b6001600160a01b03821660009081526001602052604090205460ff1661280a5761280a61095483612796565b6002548110612825576128256109548260028054905061361f565b816001600160a01b03166002828154811061283c57fe5b6000918252602090912001546001600160a01b031614612884576128846109546002838154811061286957fe5b6000918252602090912001546001600160a01b031684613664565b6001600160a01b0382166000908152600160205260409020805460ff191690556002805460001981019081106128b657fe5b600091825260209091200154600280546001600160a01b0390921691839081106128dc57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600280548061291557fe5b600082815260208120820160001990810180546001600160a01b031916905590910190915560405133916001600160a01b038516917f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b09190a35050565b60108590556011805463ffffffff80871663ffffffff19928316179092556012859055601380548484166401000000000267ffffffff00000000199487169190931617929092161790556040517f613157dbb0e920deab8ad6ddd3805e87cbf57344b9fe780f1764790ec7897542906129f49087908790879087908790615133565b60405180910390a15050505050565b612a0b614a2f565b612a14836122e4565b9050612a39611c088383604001516001600160601b0316612a5990919063ffffffff16565b6001600160601b039081166040830152602082015161241d91611c089116845b6000828201838110156111e0576111e061095460008686613266565b612a7e826136b5565b6000612a8d8383600080612d63565b6001600160a01b03831660009081526006602090815260408083208784529091529020909150612abc906122e4565b6001600160a01b0383811660009081526006602090815260408083208884528252918290208451815492860151959093015167ffffffffffffffff199092166001600160401b03909316929092176bffffffffffffffffffffffff60401b1916600160401b6001600160601b039586160217909216600160a01b93909216929092021790558015612bda57612b518382613723565b612b59611e53565b6001600160a01b031663a9059cbb83836040518363ffffffff1660e01b8152600401612b86929190614eae565b602060405180830381600087803b158015612ba057600080fd5b505af1158015612bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd89190614ca9565b505b61115f8361375f565b6000806000612bfe6001600b5461211f90919063ffffffff16565b9050612c08614a4f565b50600084815260146020908152604080832084845282528083208151606080820184528254825260018084015483870152600293840154838601528787526015865295849020845160a0810186528154815296810154958701959095529184015492850192909252600383015490840152600490910154608083015290612c90908290612f43565b9350806040015192505050915091565b60008082612cb057839150612cd3565b612cc463ffffffff8616620f42408661376c565b9150612cd0848361211f565b90505b935093915050565b6000818152600960205260409020546001600160a01b03161561119457611194610954826000613790565b612d0e6137d6565b42600c556001600b55565b612d216137eb565b62127500620dbba068056bc75e2d63100000600260036127478585858585612972565b806001600160601b0381168114610e0857610e08610954600284613850565b600b54600090612d71614a2f565b506001600160a01b0385166000908152600660209081526040808320898452825291829020825160608101845290546001600160401b0381168083526001600160601b03600160401b8304811694840194909452600160a01b90910490921692810192909252821415612de957600092505050612e67565b612df5818387876138b5565b8151909350600090612e11906001600160401b03166001612a59565b9050612e43612e3c8984602001516001600160601b031685600001516001600160401b03168561392c565b8590612a59565b9350612e61612e3c8984604001516001600160601b0316848761392c565b93505050505b949350505050565b604080516001600160a01b0383166024808301919091528251808303909101815260449091019091526020810180516001600160e01b03166330f65c0160e11b179052919050565b60008281526009602052604081205481908190612edd906001600160a01b031686611e6b565b602001516001600160601b03169050612ef6848261211f565b601154909350612f1b90612f149063ffffffff16620f4240866139ab565b8290612a59565b9150509250929050565b604080518082019091526004815263734f6e1f60e11b602082015290565b8151600090612f51576111e3565b81518351604084015160208601516060860151601354612f8795949392919063ffffffff808216916401000000009004166139bb565b60808301518351919250600091612f9d9161211f565b905081811015612fab578091505b5092915050565b600080612fbd614a70565b50600085815260096020908152604091829020825160808101845281546001600160a01b0390811682526001909201549182169281019290925263ffffffff600160a01b82048116938301849052600160c01b90910416606082015290613025908686612ca0565b909350915082156132425780602001516001600160a01b031681600001516001600160a01b031614156130e25761305a611e53565b815160405163a9059cbb60e01b81526001600160a01b03929092169163a9059cbb9161308a918790600401614eae565b602060405180830381600087803b1580156130a457600080fd5b505af11580156130b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130dc9190614ca9565b50613242565b6000613114620f424063ffffffff1661310e846060015163ffffffff1687613a7d90919063ffffffff16565b90613aae565b905061311e611e53565b6001600160a01b031663a9059cbb8360200151836040518363ffffffff1660e01b815260040161314f929190614eae565b602060405180830381600087803b15801561316957600080fd5b505af115801561317d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a19190614ca9565b506131aa611e53565b6001600160a01b031663a9059cbb83600001516131d0848861211f90919063ffffffff16565b6040518363ffffffff1660e01b81526004016131ed929190614eae565b602060405180830381600087803b15801561320757600080fd5b505af115801561321b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323f9190614ca9565b50505b811561325d576132528683613ad8565b61325d868386613b0d565b50935093915050565b606063e946c1bb60e01b8484846040516024018084600381111561328657fe5b81526020018381526020018281526020019350505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090509392505050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a6bcde4760e01b17905292915050565b604080516001600160a01b0383166024808301919091528251808303909101815260449091019091526020810180516001600160e01b031663b65a25b960e01b179052919050565b806001600160401b0381168114610e0857610e08610954600184613850565b8051825460408301516020909301516001600160601b03908116600160401b026bffffffffffffffffffffffff60401b1991909416600160a01b026001600160a01b036001600160401b0390941667ffffffffffffffff1990931692909217929092161716179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b03166382ded78560e01b17905292915050565b604080516001600160a01b03808516602483015283166044808301919091528251808303909101815260649091019091526020810180516001600160e01b0316631de45ad160e01b17905292915050565b60408051808201909152600481526315d953f960e21b602082015290565b604080516001600160a01b0383166024808301919091528251808303909101815260449091019091526020810180516001600160e01b03166306f0b78d60e51b179052919050565b6000818152600960205260409020546001600160a01b031661119457611194610954826000613790565b613524614a2f565b61352d836122e4565b9050613552611c088383604001516001600160601b031661211f90919063ffffffff16565b6001600160601b0316604082015261115f8382613384565b613572614a2f565b61357b836122e4565b9050613552611c088383604001516001600160601b0316612a5990919063ffffffff16565b1460011690565b60606322df959760e01b848484604051602401808460018111156135c757fe5b81526020018381526020018263ffffffff1681526020019350505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090509392505050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663e9f8377160e01b17905292915050565b604080516001600160a01b03808516602483015283166044808301919091528251808303909101815260649091019091526020810180516001600160e01b031663140a84db60e01b17905292915050565b600b546000906136c690600161211f565b90506136d0614a4f565b50600082815260146020908152604080832084845282529182902082516060810184528154808252600183015493820193909352600290910154928101929092521561115f5761115f6109548484613bf6565b6000828152600a602052604090205461373c908261211f565b6000838152600a6020526040902055601654613758908261211f565b6016555050565b6111948160006001613b0d565b6000612e678361310e61378082600161211f565b61378a8887613a7d565b90612a59565b60408051602481019390935290151560448084019190915281518084039091018152606490920190526020810180516001600160e01b0316639ae94f0160e01b17905290565b600c5415611b1657611b166109546000613c3b565b60105415801590613803575060115463ffffffff1615155b8015613810575060125415155b8015613823575060135463ffffffff1615155b801561383e5750601354640100000000900463ffffffff1615155b15611b1657611b166109546001613c3b565b606063c996af7b60e01b83836040516024018083600281111561386f57fe5b81526020808201939093526040805180830385018152918101905291820180516001600160e01b03166001600160e01b0319909516949094179093529250505092915050565b60008215806138c2575081155b156138cf57506000612e67565b60006138dc85600161211f565b86516001600160401b031610156138f75785604001516138fd565b85602001515b6001600160601b0316905080613917576000915050612e67565b6139228484836139ab565b9695505050505050565b600083158061393a57508183145b1561394757506000612e67565b8183106139665760405162461bcd60e51b8152600401610cfa90615013565b61396e614a97565b6139788685613c9e565b9050613982614a97565b61398c8785613c9e565b9050611cee81600001518260200151846000015185602001518a613db5565b6000612e678361310e8685613a7d565b6000806139c88888613e23565b905060006139d68787613e23565b90508115806139e3575080155b156139f357600092505050611cee565b600081831315613a0c57613a078284613e69565b613a16565b613a168383613e69565b9050613a3f613a3a613a2783613e7c565b8863ffffffff168863ffffffff166142d1565b6142e0565b905081831315613a5857613a538282613e69565b613a62565b613a628282614746565b9050613a6e818c614766565b9b9a5050505050505050505050565b600082613a8c575060006111e3565b82820282848281613a9957fe5b04146111e0576111e061095460018686613266565b600081613ac457613ac461095460038585613266565b6000828481613acf57fe5b04949350505050565b6000828152600a6020526040902054613af19082612a59565b6000838152600a60205260409020556016546137589082612a59565b6000838152600e6020526040902054600b5480821415613b2e57505061115f565b613b36614a97565b506000858152600d602090815260408083208584528252918290208251808401909352805483526001015490820152613b6d614a97565b613b76826147a8565b15613baf57613b8f8260000151836020015188886147b1565b60208301819052818352613ba39190614801565b60208301528152613bba565b602081018590528581525b6000878152600d6020908152604080832086845282528083208451815593820151600190940193909355978152600e9097529095205550505050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b0316635caa0b0560e01b17905292915050565b6060630b02d77360e01b826001811115613c5157fe5b604051602401808260ff168152602001915050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050919050565b613ca6614a97565b506000828152600d602090815260408083208484528252918290208251808401909352805483526001015490820152613cde816147a8565b15613ce8576111e3565b6000613cf583600161211f565b6000858152600d60209081526040808320848452825291829020825180840190935280548352600101549082015292509050613d30826147a8565b15613d3b57506111e3565b6000848152600e602052604090205483811015613d97576000858152600d6020908152604080832084845282529182902082518084019093528054835260010154908201529250613d8b836147a8565b15613d975750506111e3565b50506040805180820190915260008152600160208201529392505050565b600081613dc457506000613e1a565b83613dde57613dd78561310e8489613a7d565b9050613e1a565b6000613df7613ded8688613a7d565b611e2e8987613a7d565b90506000613e058286613aae565b9050613e158761310e8684613a7d565b925050505b95945050505050565b600080831215613e3b57613e3b61095460018561481e565b6000821215613e5257613e5261095460018461481e565b6111e0613e63846001607f1b614885565b836148d8565b60006111e0613e63846001607f1b614885565b60006001607f1b821315613e9857613e9861095460018461491f565b60008213613eae57613eae61095460008461491f565b6001607f1b821415613ec257506000610e08565b640733048c5a8213613ede575060016101ff607c1b0319610e08565b60008060006a01c8464f761647600000008513613f2357700fffffffffffffffffffffffffffffffff19909301926a01c8464f761647600000006001607f1b86020594505b6cf1aaddd7742e900000000000008513613f67577007ffffffffffffffffffffffffffffffff19909301926cf1aaddd7742e900000000000006001607f1b86020594505b6615fc21041027af603f1b8513613fa5577003ffffffffffffffffffffffffffffffff19909301926615fc21041027af603f1b6001607f1b86020594505b660960aadc109e7b60461b8513613fe3577001ffffffffffffffffffffffffffffffff1990930192660960aadc109e7b60461b6001607f1b86020594505b660454aaa8efe073604a1b8513614020576fffffffffffffffffffffffffffffffff1990930192660454aaa8efe073604a1b6001607f1b86020594505b6602f16ac6c59de7604c1b85136140545760016001607f1b0319909301926602f16ac6c59de7604c1b6001607f1b86020594505b6609b4597e37cb05604b1b8513614091576f3fffffffffffffffffffffffffffffff19909301926609b4597e37cb05604b1b6001607f1b86020594505b6618ebef9eac820b604a1b85136140ce576f1fffffffffffffffffffffffffffffff19909301926618ebef9eac820b604a1b6001607f1b86020594505b6f70f5a893b608861e1f58934f97aea57d8513614117576f0fffffffffffffffffffffffffffffff19909301926f70f5a893b608861e1f58934f97aea57d6001607f1b86020594505b60016001607f1b0319850192508291506001607f1b828002059050600160801b838103830205840193506001607f1b8183028161415057fe5b059150600160811b836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0383028161417457fe5b05840193506001607f1b8183028161418857fe5b059150600360801b836f99999999999999999999999999999999038302816141ac57fe5b05840193506001607f1b818302816141c057fe5b059150600160821b836f92492492492492492492492492492492038302816141e457fe5b05840193506001607f1b818302816141f857fe5b059150600560801b836f8e38e38e38e38e38e38e38e38e38e38e0383028161421c57fe5b05840193506001607f1b8183028161423057fe5b059150600360811b836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b0383028161425457fe5b05840193506001607f1b8183028161426857fe5b059150600760801b836f89d89d89d89d89d89d89d89d89d89d890383028161428c57fe5b05840193506001607f1b818302816142a057fe5b059150600160831b836f88888888888888888888888888888888038302816142c457fe5b0584019350505050919050565b6000612e67613e638585614885565b600060016101ff607c1b03198212156142fb57506000610e08565b8161430b57506001607f1b610e08565b60008213156143225761432261095460018461491f565b6001607f1b6001607c1b83078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506001607f1b8282028161436a57fe5b05905080670168244fdac7800002830192506001607f1b8282028161438b57fe5b05905080664807432bc1800002830192506001607f1b828202816143ab57fe5b05905080660c0135dca0400002830192506001607f1b828202816143cb57fe5b059050806601b707b1cdc00002830192506001607f1b828202816143eb57fe5b059050806536e0f639b80002830192506001607f1b8282028161440a57fe5b05905080650618fee9f80002830192506001607f1b8282028161442957fe5b05905080649c197dcc0002830192506001607f1b8282028161444757fe5b05905080640e30dce40002830192506001607f1b8282028161446557fe5b0590508064012ebd130002830192506001607f1b8282028161448357fe5b059050806317499f0002830192506001607f1b828202816144a057fe5b059050806301a9d48002830192506001607f1b828202816144bd57fe5b05905080621c638002830192506001607f1b828202816144d957fe5b059050806201c63802830192506001607f1b828202816144f557fe5b05905080611ab802830192506001607f1b8282028161451057fe5b0590508061017c02830192506001607f1b8282028161452b57fe5b05905080601402830192506001607f1b8282028161454557fe5b600095909503946721c3677c82b400009190059384010582016001607f1b01929050600160841b84161561459b577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b600160831b8416156145d0577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b600160821b84161561460557701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b600160811b84161561463a577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b600160801b84161561466f5770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6001607f1b8416156146a3576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6001607e1b8416156146d7576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6001607d1b84161561470b576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6001607c1b84161561473f576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b60006001607f1b6147578484614885565b8161475e57fe5b059392505050565b60008082121561477e5761477e61095460018461481e565b600061478a8484614885565b90506000811361479e5760009150506111e3565b607f1c9392505050565b60200151151590565b600080856147c35750829050816147f8565b836147d25750849050836147f8565b6147e96147df8587613a7d565b61378a8886613a7d565b91506147f58584613a7d565b90505b94509492505050565b60008061481384846001607f1b614935565b915091509250929050565b606063bd79545f60e01b83600181111561483457fe5b6040805160ff9092166024830152604480830186905281518084039091018152606490920190526020810180516001600160e01b03166001600160e01b031990931692909217909152905092915050565b6000821580614892575081155b1561489f575060006111e3565b50818102818382816148ad57fe5b051415806148c45750828282816148c057fe5b0514155b156111e3576111e361095460018585614991565b6000816148ee576148ee61095460028585614991565b600160ff1b83148015614902575081600019145b156149165761491661095460038585614991565b81838161475e57fe5b606063ed2f26a160e01b83600181111561483457fe5b6000808285118061494557508284115b156149885760008486101561495a578461495c565b855b90506149688185613aae565b90506149748682613aae565b92506149808582613aae565b915050612cd3565b50929391925050565b6060638c12dfe760e01b8460038111156149a757fe5b6040805160ff909216602483015260448201869052606480830186905281518084039091018152608490920190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806000815260200160008152602001600081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604051806040016040528060008152602001600081525090565b803560028110610e0857600080fd5b600082601f830112614ad0578081fd5b81516001600160401b0380821115614ae457fe5b604051601f8301601f191681016020018281118282101715614b0257fe5b604052828152925082848301602001861015614b1d57600080fd5b614b2e83602083016020880161519f565b50505092915050565b600060408284031215612362578081fd5b803563ffffffff81168114610e0857600080fd5b600060208284031215614b6d578081fd5b81356111e081615279565b600060208284031215614b89578081fd5b81516111e081615279565b60008060408385031215614ba6578081fd5b8235614bb181615279565b946020939093013593505050565b60008060408385031215614bd1578182fd5b8235614bdc81615279565b9150614bea60208401614ab1565b90509250929050565b60008060008060008060c08789031215614c0b578182fd5b8651614c1681615279565b60208801519096506001600160401b0380821115614c32578384fd5b614c3e8a838b01614ac0565b96506040890151915080821115614c53578384fd5b50614c6089828a01614ac0565b945050606087015192506080870151614c7881615279565b60a0880151909250614c8981615279565b809150509295509295509295565b60008060408385031215614ba6578182fd5b600060208284031215614cba578081fd5b815180151581146111e0578182fd5b600060208284031215614cda578081fd5b5035919050565b60008060408385031215614cf3578182fd5b823591506020830135614d0581615279565b809150509250929050565b60008060408385031215614d22578182fd5b50508035926020909101359150565b60008060408385031215614d43578182fd5b82359150614bea60208401614b48565b600060208284031215614d64578081fd5b6111e082614ab1565b600080600060a08486031215614d81578283fd5b614d8b8585614b37565b9250614d9a8560408601614b37565b9150608084013590509250925092565b600060208284031215614dbb578081fd5b5051919050565b60008060008060008060c08789031215614dda578384fd5b8651955060208701516001600160401b0380821115614df7578586fd5b614e038a838b01614ac0565b96506040890151915080821115614c53578586fd5b600080600080600060a08688031215614e2f578283fd5b85359450614e3f60208701614b48565b935060408601359250614e5460608701614b48565b9150614e6260808701614b48565b90509295509295909350565b60008151808452614e8681602086016020860161519f565b601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015614f085783516001600160a01b031683529284019291840191600101614ee3565b50909695505050505050565b901515815260200190565b90815260200190565b9283526001600160a01b0391909116602083015263ffffffff16604082015260600190565b6000602082526111e06020830184614e6e565b918252602082015260400190565b6020808252601c908201527f4e4f4e5f524547495354455245445f504f4f4c5f49445f4552524f5200000000604082015260600190565b6020808252601b908201527f504f4f4c5f544f5f4a4f494e5f4e4f545f53454c465f4552524f520000000000604082015260600190565b6020808252601c908201527f4e4f4e5f524547495354455245445f52425f504f4f4c5f4552524f5200000000604082015260600190565b60208082526013908201527210d497d25395115495905317d2539590531251606a1b604082015260600190565b81518152602080830151908201526040918201519181019190915260600190565b81516001600160a01b0390811682526020808401519091169082015260408083015163ffffffff90811691830191909152606092830151169181019190915260800190565b81516001600160401b031681526020808301516001600160601b0390811691830191909152604092830151169181019190915260600190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b948552602085019390935260408401919091526060830152608082015260a00190565b94855263ffffffff938416602086015260408501929092528216606084015216608082015260a00190565b92835260ff918216602084015216604082015260600190565b63ffffffff91909116815260200190565b63ffffffff92831681529116602082015260400190565b60005b838110156151ba5781810151838201526020016151a2565b838111156151c9576000848401525b50505050565b60e01c90565b600060443d10156151e557610c41565b600481823e6308c379a06151f982516151cf565b1461520357610c41565b6040513d600319016004823e80513d6001600160401b0381602484011181841117156152325750505050610c41565b8284019250825191508082111561524c5750505050610c41565b503d8301602082840101111561526457505050610c41565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461119457600080fdfea26469706673582212204ac81f2c9573f75aa8ff37af1084d19894b3c8405e87a47e2a8a6c641012794464736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x52C4 DUP1 PUSH2 0x32 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2E4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x190 JUMPI DUP1 PUSH4 0xD39DE6E9 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xE907F003 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xEF4BA680 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xEF4BA680 EQ PUSH2 0x8A5 JUMPI DUP1 PUSH4 0xF252B7A1 EQ PUSH2 0x8BA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x8DA JUMPI DUP1 PUSH4 0xFF691B11 EQ PUSH2 0x8FA JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0xE907F003 EQ PUSH2 0x85D JUMPI DUP1 PUSH4 0xECC128F2 EQ PUSH2 0x87D JUMPI DUP1 PUSH4 0xEE99205C EQ PUSH2 0x890 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0xD39DE6E9 EQ PUSH2 0x7C7 JUMPI DUP1 PUSH4 0xE0822DB7 EQ PUSH2 0x7E9 JUMPI DUP1 PUSH4 0xE0EE036E EQ PUSH2 0x7FE JUMPI DUP1 PUSH4 0xE1C7392A EQ PUSH2 0x813 JUMPI DUP1 PUSH4 0xE804D0A4 EQ PUSH2 0x828 JUMPI DUP1 PUSH4 0xE8EEB3F8 EQ PUSH2 0x848 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0xB510879F GT PUSH2 0x149 JUMPI DUP1 PUSH4 0xBB7EF7E0 GT PUSH2 0x123 JUMPI DUP1 PUSH4 0xBB7EF7E0 EQ PUSH2 0x752 JUMPI DUP1 PUSH4 0xBE111AF4 EQ PUSH2 0x772 JUMPI DUP1 PUSH4 0xC18C9141 EQ PUSH2 0x792 JUMPI DUP1 PUSH4 0xD14DC231 EQ PUSH2 0x7B2 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0xB510879F EQ PUSH2 0x6FD JUMPI DUP1 PUSH4 0xB652B41F EQ PUSH2 0x71D JUMPI DUP1 PUSH4 0xB9181611 EQ PUSH2 0x732 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0x9AD26744 EQ PUSH2 0x673 JUMPI DUP1 PUSH4 0x9C3CCC82 EQ PUSH2 0x693 JUMPI DUP1 PUSH4 0xA26171E2 EQ PUSH2 0x6B3 JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x6C8 JUMPI DUP1 PUSH4 0xB2BAA33E EQ PUSH2 0x6E8 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0x46B97959 GT PUSH2 0x24F JUMPI DUP1 PUSH4 0x5D91121D GT PUSH2 0x208 JUMPI DUP1 PUSH4 0x70712939 GT PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x70712939 EQ PUSH2 0x5E7 JUMPI DUP1 PUSH4 0x76671808 EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0x7FA140C7 EQ PUSH2 0x61C JUMPI DUP1 PUSH4 0x81666796 EQ PUSH2 0x63C JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0x5D91121D EQ PUSH2 0x58C JUMPI DUP1 PUSH4 0x5E615A6B EQ PUSH2 0x5AC JUMPI DUP1 PUSH4 0x63403801 EQ PUSH2 0x5D2 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0x46B97959 EQ PUSH2 0x4A3 JUMPI DUP1 PUSH4 0x494503D4 EQ PUSH2 0x4D0 JUMPI DUP1 PUSH4 0x4BCC3F67 EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0x540C2D53 EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0x587DA023 EQ PUSH2 0x557 JUMPI DUP1 PUSH4 0x58F6C7E3 EQ PUSH2 0x56C JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0x36D7DD8E GT PUSH2 0x2A1 JUMPI DUP1 PUSH4 0x36D7DD8E EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x38229D93 EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0x3A832382 EQ PUSH2 0x416 JUMPI DUP1 PUSH4 0x3E4AD732 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x42F1181E EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0x44A6958B EQ PUSH2 0x483 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0xB9663DB EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x1A67A0A0 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x1E7FF8F6 EQ PUSH2 0x336 JUMPI DUP1 PUSH4 0x1F81EB80 EQ PUSH2 0x356 JUMPI DUP1 PUSH4 0x2A94C279 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x2E17DE78 EQ PUSH2 0x3A5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x91A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x32F CALLDATASIZE PUSH1 0x4 PUSH2 0x4CE1 JUMP JUMPDEST PUSH2 0xC44 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x351 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0xD80 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x371 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0xE0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x396 PUSH2 0x391 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D10 JUMP JUMPDEST PUSH2 0xEA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50DF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x3C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0xECE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x3E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x1045 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x405 PUSH2 0x400 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x10CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5110 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CE1 JUMP JUMPDEST PUSH2 0x10FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x456 PUSH2 0x451 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x1164 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x50A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x47E CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x1183 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x456 PUSH2 0x49E CALLDATASIZE PUSH1 0x4 PUSH2 0x4BBF JUMP JUMPDEST PUSH2 0x1197 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C3 PUSH2 0x4BE CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x11E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x5040 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x4EB CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x1234 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51D PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x125E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x5061 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH2 0x545 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x12C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x4F14 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x12DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x587 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D6D JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x598 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x5A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D31 JUMP JUMPDEST PUSH2 0x14B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5C1 PUSH2 0x154C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5133 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x1575 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x602 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x157B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x1609 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x637 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x160F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x648 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x651 PUSH2 0x1621 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x5177 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x162D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x68E CALLDATASIZE PUSH1 0x4 PUSH2 0x4C97 JUMP JUMPDEST PUSH2 0x163C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x6AE CALLDATASIZE PUSH1 0x4 PUSH2 0x4E18 JUMP JUMPDEST PUSH2 0x164E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x16BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x6E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x16C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x17AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x709 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x718 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x17CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x729 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x17D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH2 0x74D CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x17EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x75E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x76D CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x1804 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x77E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x78D CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x1891 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x7AD CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x1A60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x1A72 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7DC PUSH2 0x1A78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x4EC7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x1ADA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x651 PUSH2 0x1AF2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x81F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x1AFE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x834 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x456 PUSH2 0x843 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D53 JUMP JUMPDEST PUSH2 0x1B18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x854 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x651 PUSH2 0x1C46 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x869 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x878 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CE1 JUMP JUMPDEST PUSH2 0x1C5A JUMP JUMPDEST PUSH2 0x334 PUSH2 0x88B CALLDATASIZE PUSH1 0x4 PUSH2 0x4C97 JUMP JUMPDEST PUSH2 0x1CF9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x89C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x1E44 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x1E53 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x456 PUSH2 0x8D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B94 JUMP JUMPDEST PUSH2 0x1E6B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x8F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x1E9F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x915 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0x92C DUP3 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP DUP1 ISZERO PUSH2 0x959 JUMPI PUSH2 0x959 PUSH2 0x954 DUP4 DUP4 PUSH2 0x213E JUMP JUMPDEST PUSH2 0x2183 JUMP JUMPDEST PUSH1 0x1 DUP4 GT ISZERO PUSH2 0xB3F JUMPI PUSH2 0x96A PUSH2 0x1E53 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7546172 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9B6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9DA SWAP2 SWAP1 PUSH2 0x4B78 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC551A2F9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xA44 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA41 SWAP2 DUP2 ADD SWAP1 PUSH2 0x4DAA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB06 JUMPI PUSH2 0xA50 PUSH2 0x51D5 JUMP JUMPDEST DUP1 PUSH2 0xA5B JUMPI POP PUSH2 0xA98 JUMP JUMPDEST PUSH32 0x1FC94326C4F979E0A19555AEF364D7490ACF6840560FC01C723E320D6F2D96C1 DUP2 PUSH1 0x40 MLOAD PUSH2 0xA8A SWAP2 SWAP1 PUSH2 0x4F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH2 0xB01 JUMP JUMPDEST RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xAC2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAC7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH32 0x349211C9E282ED467B636A7FE2CCDD287A3F7C67969D4E5FD2EE539DF22ED613 DUP2 PUSH1 0x40 MLOAD PUSH2 0xAF7 SWAP2 SWAP1 PUSH2 0x4F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMPDEST PUSH2 0xB3F JUMP JUMPDEST PUSH32 0x2781ECBB97CBE2FBF6A9B934F9AA6422ACA2D528AD53FBFB31F70BC47BCFA5B DUP2 PUSH1 0x40 MLOAD PUSH2 0xB35 SWAP2 SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMPDEST PUSH2 0xB47 PUSH2 0x218B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xB5E PUSH2 0x4A00 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x2 DUP4 ADD SLOAD DUP3 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE SWAP5 MLOAD SWAP2 SWAP5 DUP9 SWAP5 PUSH32 0xBB4A26FA0ACE13EE4DA343896C20EAA44A618FB9071FDD8C2E2C960A4583189D SWAP5 PUSH2 0xBE0 SWAP5 SWAP2 SWAP4 SWAP3 SWAP2 PUSH2 0x50F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xBF0 PUSH2 0x2216 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0xC37 JUMPI DUP1 MLOAD PUSH1 0x40 MLOAD DUP6 SWAP2 PUSH32 0xB463D19ECF455BE65365092CF8E1DB6934A0334CF8CD532DDF9964D01F36B5B2 SWAP2 PUSH2 0xC2E SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x4F60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x20 ADD MLOAD SWAP4 POP POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC4F PUSH2 0x17D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x309DFC6B PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xC277F1AC SWAP1 PUSH2 0xC7D SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4F1F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCA9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xCD1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4BF3 JUMP JUMPDEST POP POP SWAP4 POP POP POP SWAP2 POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0xD03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCFA SWAP1 PUSH2 0x4F6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCFA SWAP1 PUSH2 0x4FA5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 SWAP1 SSTORE MLOAD DUP7 SWAP3 DUP7 AND SWAP2 PUSH32 0xE8B9F7EE7A4480D45B60E98F7B2090DD82E2353B8557A6EE2DD2D5EE9196BAC2 SWAP2 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD8A PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDB5 SWAP2 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDE1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE05 SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE15 PUSH2 0x2253 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE44 JUMPI PUSH2 0xE44 PUSH2 0x954 PUSH1 0x0 DUP4 PUSH2 0x2276 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x5738EE3C8E8FE8B0B9C4C21B16FDCA42EC02E271237DFEABBF3B5AF1584D732B SWAP1 PUSH2 0xE97 SWAP1 DUP4 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST CALLER PUSH2 0xED7 PUSH2 0x4A2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xF17 SWAP1 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF3F DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2368 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0xF56 JUMPI PUSH2 0xF56 PUSH2 0x954 DUP6 DUP4 PUSH2 0x237E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xF97 SWAP1 DUP6 PUSH2 0x23C3 JUMP JUMPDEST PUSH2 0xF9F PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9470B0BD DUP5 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFCC SWAP3 SWAP2 SWAP1 PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFFA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x85082129D87B2FE11527CB1B3B7A520AEB5AA6913F88A3D8757FE40D1DB02FDD DUP6 PUSH1 0x40 MLOAD PUSH2 0x1037 SWAP2 SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x104D PUSH2 0x2253 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x107B JUMPI PUSH2 0x107B PUSH2 0x954 PUSH1 0x1 DUP4 PUSH2 0x2276 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0x9BF55462CB5FA187F725D06DE0A70BC01C4E40695570BDC25AD116F9BE46BDA7 SWAP1 PUSH2 0xE97 SWAP1 DUP4 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP6 JUMP JUMPDEST DUP2 PUSH2 0x1104 DUP2 PUSH2 0x2435 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 PUSH2 0x1137 JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x1142 JUMPI POP PUSH2 0x115F JUMP JUMPDEST PUSH1 0x1 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x116C PUSH2 0x4A2F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xE05 SWAP1 PUSH2 0x22E4 JUMP JUMPDEST PUSH2 0x118B PUSH2 0x2461 JUMP JUMPDEST PUSH2 0x1194 DUP2 PUSH2 0x248E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x119F PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x11E0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x11B2 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x11F1 PUSH2 0x4A4F JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xB SLOAD DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 ADD SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x1266 PUSH2 0x4A70 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x80 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SLOAD SWAP2 DUP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST CALLER DUP2 PUSH2 0x12EE JUMPI POP PUSH2 0x115F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12FD PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1308 JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x132C JUMPI POP PUSH1 0x0 PUSH2 0x131F PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x132A JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x1337 JUMPI POP PUSH2 0x115F JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1346 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1351 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1366 JUMPI PUSH2 0x1366 DUP5 PUSH1 0x20 ADD CALLDATALOAD DUP3 DUP5 PUSH2 0x2562 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1375 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1380 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1395 JUMPI PUSH2 0x1395 DUP4 PUSH1 0x20 ADD CALLDATALOAD DUP3 DUP5 PUSH2 0x25EE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP2 PUSH2 0x13A7 PUSH1 0x20 DUP9 ADD DUP9 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x13B2 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE DUP4 MSTORE SWAP1 DUP2 KECCAK256 SWAP3 POP SWAP1 PUSH1 0x5 SWAP1 DUP3 SWAP1 PUSH2 0x13EF SWAP1 DUP9 ADD DUP9 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x13FA JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 SWAP1 POP PUSH2 0x1430 DUP3 DUP3 DUP7 PUSH2 0x267A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP7 ADD CALLDATALOAD SWAP1 DUP8 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH32 0x7D3AD1DCF03B9027064D1D9A474A69E0CECC31324C541D3EB9B5E6FA2F106C8D SWAP1 DUP9 SWAP1 PUSH2 0x1475 SWAP1 DUP13 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1480 JUMPI INVALID JUMPDEST PUSH2 0x148D PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1498 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x515E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x14C1 DUP2 PUSH2 0x2435 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0x14EB DUP5 DUP3 DUP6 PUSH2 0x274E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH4 0xFFFFFFFF DUP8 AND MUL OR SWAP1 SSTORE MLOAD DUP5 SWAP1 PUSH32 0x8EA2A7A959BD25F226B7B0A4393613F7FDCAA8404E8BAD96AA52DC1C14590167 SWAP1 PUSH2 0x1037 SWAP1 DUP5 SWAP1 DUP8 SWAP1 PUSH2 0x5188 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD SWAP3 SWAP4 PUSH4 0xFFFFFFFF SWAP3 DUP4 AND SWAP4 SWAP2 SWAP3 DUP3 DUP2 AND SWAP3 PUSH5 0x100000000 SWAP1 DIV AND SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1583 PUSH2 0x2461 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x15AF JUMPI PUSH2 0x15AF PUSH2 0x954 DUP3 PUSH2 0x2796 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x1605 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x15D3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x15FD JUMPI PUSH2 0x15F8 DUP3 DUP3 PUSH2 0x27DE JUMP JUMPDEST PUSH2 0x1605 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x15B2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x13 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1644 PUSH2 0x2461 JUMP JUMPDEST PUSH2 0x1605 DUP3 DUP3 PUSH2 0x27DE JUMP JUMPDEST PUSH2 0x1656 PUSH2 0x2253 JUMP JUMPDEST PUSH2 0x1663 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2972 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC6F3A427 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x169C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH2 0x16CA PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x15CC36F2 DUP3 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F7 SWAP3 SWAP2 SWAP1 PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1725 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x176A SWAP1 DUP4 PUSH2 0x2A03 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xEBEDB8B3C678666E7F36970BC8F57ABF6D8FA2E828C0DA91EA5B75BF68ED101A DUP4 PUSH1 0x40 MLOAD PUSH2 0x17A3 SWAP2 SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17C8 PUSH1 0x10 SLOAD PUSH1 0xC SLOAD PUSH2 0x2A59 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1194 DUP2 CALLER PUSH2 0x2A75 JUMP JUMPDEST PUSH20 0xDE6445484A8DCD9BF35FC95EB4E3990CC358822E SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180E PUSH2 0x4A70 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SLOAD SWAP2 DUP3 AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV AND PUSH1 0x60 DUP3 ADD MSTORE SWAP1 DUP1 PUSH2 0x1874 DUP6 PUSH2 0x2BE3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1887 DUP4 PUSH1 0x40 ADD MLOAD DUP4 DUP4 PUSH2 0x2CA0 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x189E PUSH2 0x17D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB72E717D DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18C9 SWAP2 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x191D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4DC2 JUMP JUMPDEST POP SWAP5 POP POP POP POP SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x1946 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCFA SWAP1 PUSH2 0x4FDC JUMP JUMPDEST DUP1 CALLER PUSH3 0xAAE60 PUSH3 0x186A0 PUSH2 0x1959 DUP7 PUSH2 0x2CDB JUMP JUMPDEST DUP6 PUSH1 0x0 SHL SWAP7 POP PUSH2 0x1967 PUSH2 0x4A70 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP3 MSTORE DUP6 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP9 AND DUP6 DUP8 ADD SWAP1 DUP2 MSTORE DUP8 DUP3 AND PUSH1 0x60 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x9 SWAP1 SWAP5 MSTORE SWAP3 DUP8 SWAP1 KECCAK256 DUP7 MLOAD DUP2 SLOAD SWAP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR DUP3 SSTORE SWAP5 MLOAD PUSH1 0x1 SWAP1 SWAP2 ADD DUP1 SLOAD SWAP3 MLOAD SWAP5 MLOAD DUP5 AND PUSH1 0x1 PUSH1 0xC0 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0xC0 SHL NOT SWAP6 SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT SWAP3 SWAP1 SWAP8 AND SWAP3 SWAP1 SWAP6 AND SWAP2 SWAP1 SWAP2 OR AND SWAP4 SWAP1 SWAP4 OR AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 MLOAD PUSH32 0xCEC6FC86EA644053F6EDFF1160DFE3FA5C61E7A5EF9F873F145BB03A0BD319E7 SWAP1 PUSH2 0x1A42 SWAP1 DUP11 SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH2 0x4F28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1A54 DUP9 DUP11 PUSH2 0xC44 JUMP JUMPDEST POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x16 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1AD0 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1AB2 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH20 0xA33744EE5D57D6D69944213D8E6AD80D64FDC58 SWAP1 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1B06 PUSH2 0x2253 JUMP JUMPDEST PUSH2 0x1B0E PUSH2 0x2D06 JUMP JUMPDEST PUSH2 0x1B16 PUSH2 0x2D19 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B20 PUSH2 0x4A2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x1B53 PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1B63 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xE08 JUMPI PUSH1 0x0 PUSH2 0x1B73 PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6B6DF5AA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BBF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BE3 SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST SWAP1 POP PUSH2 0x1C0D PUSH2 0x1C08 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH2 0x211F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2D44 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1C32 SWAP2 PUSH2 0x1C08 SWAP2 DUP5 SWAP2 AND PUSH2 0x211F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x13 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C64 PUSH2 0x4A70 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SLOAD SWAP2 DUP3 AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV AND PUSH1 0x60 DUP3 ADD MSTORE SWAP1 DUP1 PUSH2 0x1CCA DUP7 PUSH2 0x2BE3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1CDF DUP5 PUSH1 0x40 ADD MLOAD DUP5 DUP5 PUSH2 0x2CA0 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1CEE DUP8 DUP8 DUP4 DUP6 PUSH2 0x2D63 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1D1C JUMPI PUSH2 0x1D1C PUSH2 0x954 CALLER PUSH2 0x2E6F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x1D40 JUMPI POP PUSH2 0x1605 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D4B DUP3 PUSH2 0x1164 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH1 0x12 SLOAD DUP2 LT ISZERO PUSH2 0x1D6B JUMPI POP POP PUSH2 0x1605 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x15 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP2 SLOAD DUP1 PUSH2 0x1E0E JUMPI PUSH1 0x0 DUP1 PUSH2 0x1DA3 DUP9 DUP9 PUSH2 0x2EB7 JUMP JUMPDEST PUSH1 0x2 DUP8 ADD DUP3 SWAP1 SSTORE PUSH1 0x1 DUP8 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP7 ADD SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x1DC5 SWAP1 DUP3 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE PUSH1 0x1 DUP1 DUP6 ADD SLOAD PUSH2 0x1DD9 SWAP2 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SSTORE PUSH1 0x40 MLOAD DUP9 SWAP1 DUP8 SWAP1 PUSH32 0x14B098103235344975B17508C2391721CC9AC3F3FA2B56C7FF46F8480DFD074F SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMPDEST DUP1 DUP8 GT ISZERO PUSH2 0x1E3A JUMPI DUP7 DUP4 SSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0x1E34 SWAP1 DUP3 SWAP1 PUSH2 0x1E2E SWAP1 DUP11 PUSH2 0x2A59 JUMP JUMPDEST SWAP1 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH20 0x4FBB350052BCA5417566F188EB2EBCE5B19BC964 SWAP1 JUMP JUMPDEST PUSH2 0x1E73 PUSH2 0x4A2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x11E0 SWAP1 PUSH2 0x22E4 JUMP JUMPDEST PUSH2 0x1EA7 PUSH2 0x2461 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1EC5 JUMPI PUSH2 0x1EC0 PUSH2 0x954 PUSH2 0x2F25 JUMP JUMPDEST PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 CALLER SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 PUSH2 0x1F20 DUP3 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST SWAP1 POP PUSH2 0x1F2A PUSH2 0x4A00 JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x1F7F JUMPI POP POP POP PUSH2 0x1194 JUMP JUMPDEST PUSH2 0x1F87 PUSH2 0x4A4F JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x1FD5 JUMPI POP POP POP POP PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 ADD DUP2 SWAP1 SSTORE PUSH2 0x2008 DUP3 DUP5 PUSH2 0x2F43 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x201C DUP9 DUP5 DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x2FB2 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP8 DUP8 PUSH32 0xF1116B309178AA62DCB6BF8C3B8BC2321724907C7EBF52192D14C8CE3AA9194C DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x2053 SWAP3 SWAP2 SWAP1 PUSH2 0x4F60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 PUSH2 0x2067 DUP4 DUP4 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x2079 SWAP1 DUP3 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x80 DUP8 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP7 ADD MLOAD PUSH2 0x20A6 SWAP1 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP9 ADD DUP3 DUP2 MSTORE PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x15 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH2 0x16B0 JUMPI PUSH1 0x80 DUP7 ADD MLOAD DUP7 MLOAD DUP9 SWAP2 PUSH32 0xB463D19ECF455BE65365092CF8E1DB6934A0334CF8CD532DDF9964D01F36B5B2 SWAP2 PUSH2 0x20FE SWAP1 DUP3 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x210C SWAP3 SWAP2 SWAP1 PUSH2 0x4F60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2138 JUMPI PUSH2 0x2138 PUSH2 0x954 PUSH1 0x2 DUP6 DUP6 PUSH2 0x3266 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x30A5C005 PUSH1 0xE1 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH2 0x17C8 PUSH1 0x16 SLOAD PUSH2 0x219B PUSH2 0x1E53 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21C6 SWAP2 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E2E SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST TIMESTAMP PUSH1 0x0 PUSH2 0x2221 PUSH2 0x17AF JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2238 JUMPI PUSH2 0x2238 PUSH2 0x954 DUP3 DUP5 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2249 SWAP1 PUSH1 0x1 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0xB SSTORE POP POP PUSH1 0xC SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1B16 JUMPI PUSH2 0x1B16 PUSH2 0x954 CALLER PUSH2 0x331D JUMP JUMPDEST PUSH1 0x60 PUSH4 0xB9588E43 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2295 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 SUB DUP4 ADD DUP2 MSTORE SWAP4 DUP2 ADD SWAP1 MSTORE DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x22EC PUSH2 0x4A2F JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x1 PUSH1 0x40 SHL DUP4 DIV DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xB SLOAD SWAP1 SWAP2 DUP2 GT ISZERO PUSH2 0x2362 JUMPI PUSH2 0x2343 DUP2 PUSH2 0x3365 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2377 JUMPI DUP2 PUSH2 0x11E0 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x84C8B7C9 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x23CB PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x23D4 DUP4 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x23F9 PUSH2 0x1C08 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x211F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x241D SWAP2 PUSH2 0x1C08 SWAP2 AND DUP5 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x115F DUP4 DUP3 PUSH2 0x3384 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ PUSH2 0x1605 JUMPI PUSH2 0x1605 PUSH2 0x954 CALLER DUP5 PUSH2 0x33EE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1B16 JUMPI PUSH1 0x0 SLOAD PUSH2 0x1B16 SWAP1 PUSH2 0x954 SWAP1 CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x343B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x24A7 JUMPI PUSH2 0x24A7 PUSH2 0x954 PUSH2 0x348C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x24D4 JUMPI PUSH2 0x24D4 PUSH2 0x954 DUP3 PUSH2 0x34AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 DUP4 ADD DUP2 SSTORE DUP4 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD CALLER SWAP3 SWAP2 PUSH32 0x3147867C59D17E8FA9D522465651D44AAE0A9E38F902F3475B97E58072F0ED4C SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x256B DUP4 PUSH2 0x34F2 JUMP JUMPDEST PUSH2 0x2575 DUP4 DUP4 PUSH2 0x2A75 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x25A2 SWAP1 DUP3 PUSH2 0x351C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x25BA SWAP1 DUP3 PUSH2 0x351C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x115F PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 DUP3 PUSH2 0x351C JUMP JUMPDEST PUSH2 0x25F7 DUP4 PUSH2 0x34F2 JUMP JUMPDEST PUSH2 0x2601 DUP4 DUP4 PUSH2 0x2A75 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x262E SWAP1 DUP3 PUSH2 0x356A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2646 SWAP1 DUP3 PUSH2 0x356A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x115F PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 DUP3 PUSH2 0x356A JUMP JUMPDEST PUSH2 0x2684 DUP4 DUP4 PUSH2 0x35A0 JUMP JUMPDEST ISZERO PUSH2 0x268E JUMPI PUSH2 0x115F JUMP JUMPDEST PUSH2 0x2696 PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x269F DUP5 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x26A9 PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x26B2 DUP5 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 GT ISZERO PUSH2 0x26E3 JUMPI PUSH2 0x26E3 PUSH2 0x954 DUP5 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x237E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x26FF SWAP1 PUSH2 0x1C08 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 ADD MLOAD PUSH2 0x2725 SWAP2 PUSH2 0x1C08 SWAP2 AND DUP6 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x273D DUP6 DUP4 PUSH2 0x3384 JUMP JUMPDEST PUSH2 0x2747 DUP5 DUP3 PUSH2 0x3384 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH3 0xF4240 PUSH4 0xFFFFFFFF DUP3 AND GT ISZERO PUSH2 0x2773 JUMPI PUSH2 0x276E PUSH2 0x954 PUSH1 0x0 DUP6 DUP5 PUSH2 0x35A7 JUMP JUMPDEST PUSH2 0x115F JUMP JUMPDEST DUP2 PUSH4 0xFFFFFFFF AND DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x115F JUMPI PUSH2 0x115F PUSH2 0x954 PUSH1 0x1 DUP6 DUP5 PUSH2 0x35A7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x75A88451 PUSH1 0xE1 SHL OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x280A JUMPI PUSH2 0x280A PUSH2 0x954 DUP4 PUSH2 0x2796 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 LT PUSH2 0x2825 JUMPI PUSH2 0x2825 PUSH2 0x954 DUP3 PUSH1 0x2 DUP1 SLOAD SWAP1 POP PUSH2 0x361F JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x283C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2884 JUMPI PUSH2 0x2884 PUSH2 0x954 PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x2869 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH2 0x3664 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x28B6 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x28DC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 DUP1 SLOAD DUP1 PUSH2 0x2915 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 DUP3 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE SWAP1 SWAP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x10 DUP6 SWAP1 SSTORE PUSH1 0x11 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP8 AND PUSH4 0xFFFFFFFF NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x12 DUP6 SWAP1 SSTORE PUSH1 0x13 DUP1 SLOAD DUP5 DUP5 AND PUSH5 0x100000000 MUL PUSH8 0xFFFFFFFF00000000 NOT SWAP5 DUP8 AND SWAP2 SWAP1 SWAP4 AND OR SWAP3 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x613157DBB0E920DEAB8AD6DDD3805E87CBF57344B9FE780F1764790EC7897542 SWAP1 PUSH2 0x29F4 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x5133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2A0B PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x2A14 DUP4 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A39 PUSH2 0x1C08 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2A59 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x241D SWAP2 PUSH2 0x1C08 SWAP2 AND DUP5 JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x11E0 JUMPI PUSH2 0x11E0 PUSH2 0x954 PUSH1 0x0 DUP7 DUP7 PUSH2 0x3266 JUMP JUMPDEST PUSH2 0x2A7E DUP3 PUSH2 0x36B5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A8D DUP4 DUP4 PUSH1 0x0 DUP1 PUSH2 0x2D63 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x2ABC SWAP1 PUSH2 0x22E4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD SWAP6 SWAP1 SWAP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP6 DUP7 AND MUL OR SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xA0 SHL SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 MUL OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x2BDA JUMPI PUSH2 0x2B51 DUP4 DUP3 PUSH2 0x3723 JUMP JUMPDEST PUSH2 0x2B59 PUSH2 0x1E53 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B86 SWAP3 SWAP2 SWAP1 PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2BB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BD8 SWAP2 SWAP1 PUSH2 0x4CA9 JUMP JUMPDEST POP JUMPDEST PUSH2 0x115F DUP4 PUSH2 0x375F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2BFE PUSH1 0x1 PUSH1 0xB SLOAD PUSH2 0x211F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2C08 PUSH2 0x4A4F JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP5 MSTORE DUP3 SLOAD DUP3 MSTORE PUSH1 0x1 DUP1 DUP5 ADD SLOAD DUP4 DUP8 ADD MSTORE PUSH1 0x2 SWAP4 DUP5 ADD SLOAD DUP4 DUP7 ADD MSTORE DUP8 DUP8 MSTORE PUSH1 0x15 DUP7 MSTORE SWAP6 DUP5 SWAP1 KECCAK256 DUP5 MLOAD PUSH1 0xA0 DUP2 ADD DUP7 MSTORE DUP2 SLOAD DUP2 MSTORE SWAP7 DUP2 ADD SLOAD SWAP6 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP2 DUP5 ADD SLOAD SWAP3 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP4 ADD SLOAD SWAP1 DUP5 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP1 PUSH2 0x2C90 SWAP1 DUP3 SWAP1 PUSH2 0x2F43 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH2 0x2CB0 JUMPI DUP4 SWAP2 POP PUSH2 0x2CD3 JUMP JUMPDEST PUSH2 0x2CC4 PUSH4 0xFFFFFFFF DUP7 AND PUSH3 0xF4240 DUP7 PUSH2 0x376C JUMP JUMPDEST SWAP2 POP PUSH2 0x2CD0 DUP5 DUP4 PUSH2 0x211F JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1194 JUMPI PUSH2 0x1194 PUSH2 0x954 DUP3 PUSH1 0x0 PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x2D0E PUSH2 0x37D6 JUMP JUMPDEST TIMESTAMP PUSH1 0xC SSTORE PUSH1 0x1 PUSH1 0xB SSTORE JUMP JUMPDEST PUSH2 0x2D21 PUSH2 0x37EB JUMP JUMPDEST PUSH3 0x127500 PUSH3 0xDBBA0 PUSH9 0x56BC75E2D63100000 PUSH1 0x2 PUSH1 0x3 PUSH2 0x2747 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2972 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH2 0xE08 PUSH2 0x954 PUSH1 0x2 DUP5 PUSH2 0x3850 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2D71 PUSH2 0x4A2F JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x1 PUSH1 0x40 SHL DUP4 DIV DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV SWAP1 SWAP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 EQ ISZERO PUSH2 0x2DE9 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x2E67 JUMP JUMPDEST PUSH2 0x2DF5 DUP2 DUP4 DUP8 DUP8 PUSH2 0x38B5 JUMP JUMPDEST DUP2 MLOAD SWAP1 SWAP4 POP PUSH1 0x0 SWAP1 PUSH2 0x2E11 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH2 0x2A59 JUMP JUMPDEST SWAP1 POP PUSH2 0x2E43 PUSH2 0x2E3C DUP10 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP6 PUSH2 0x392C JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x2A59 JUMP JUMPDEST SWAP4 POP PUSH2 0x2E61 PUSH2 0x2E3C DUP10 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP5 DUP8 PUSH2 0x392C JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x30F65C01 PUSH1 0xE1 SHL OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x2EDD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH2 0x1E6B JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH2 0x2EF6 DUP5 DUP3 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x11 SLOAD SWAP1 SWAP4 POP PUSH2 0x2F1B SWAP1 PUSH2 0x2F14 SWAP1 PUSH4 0xFFFFFFFF AND PUSH3 0xF4240 DUP7 PUSH2 0x39AB JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2A59 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x734F6E1F PUSH1 0xE1 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2F51 JUMPI PUSH2 0x11E3 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x13 SLOAD PUSH2 0x2F87 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH5 0x100000000 SWAP1 DIV AND PUSH2 0x39BB JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD DUP4 MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x2F9D SWAP2 PUSH2 0x211F JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x2FAB JUMPI DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2FBD PUSH2 0x4A70 JUMP JUMPDEST POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x80 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SLOAD SWAP2 DUP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP4 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP2 DIV AND PUSH1 0x60 DUP3 ADD MSTORE SWAP1 PUSH2 0x3025 SWAP1 DUP7 DUP7 PUSH2 0x2CA0 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP DUP3 ISZERO PUSH2 0x3242 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x30E2 JUMPI PUSH2 0x305A PUSH2 0x1E53 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x308A SWAP2 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30DC SWAP2 SWAP1 PUSH2 0x4CA9 JUMP JUMPDEST POP PUSH2 0x3242 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3114 PUSH3 0xF4240 PUSH4 0xFFFFFFFF AND PUSH2 0x310E DUP5 PUSH1 0x60 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP8 PUSH2 0x3A7D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x3AAE JUMP JUMPDEST SWAP1 POP PUSH2 0x311E PUSH2 0x1E53 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP4 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x314F SWAP3 SWAP2 SWAP1 PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x317D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31A1 SWAP2 SWAP1 PUSH2 0x4CA9 JUMP JUMPDEST POP PUSH2 0x31AA PUSH2 0x1E53 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x31D0 DUP5 DUP9 PUSH2 0x211F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x31ED SWAP3 SWAP2 SWAP1 PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x321B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x323F SWAP2 SWAP1 PUSH2 0x4CA9 JUMP JUMPDEST POP POP JUMPDEST DUP2 ISZERO PUSH2 0x325D JUMPI PUSH2 0x3252 DUP7 DUP4 PUSH2 0x3AD8 JUMP JUMPDEST PUSH2 0x325D DUP7 DUP4 DUP7 PUSH2 0x3B0D JUMP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3286 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA6BCDE47 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xB65A25B9 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH2 0xE08 PUSH2 0x954 PUSH1 0x1 DUP5 PUSH2 0x3850 JUMP JUMPDEST DUP1 MLOAD DUP3 SLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x20 SWAP1 SWAP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 SHL NOT SWAP2 SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP5 AND PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP3 SWAP1 SWAP3 AND OR AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x82DED785 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x1DE45AD1 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x15D953F9 PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x6F0B78D PUSH1 0xE5 SHL OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1194 JUMPI PUSH2 0x1194 PUSH2 0x954 DUP3 PUSH1 0x0 PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x3524 PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x352D DUP4 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x3552 PUSH2 0x1C08 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x211F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x115F DUP4 DUP3 PUSH2 0x3384 JUMP JUMPDEST PUSH2 0x3572 PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x357B DUP4 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x3552 PUSH2 0x1C08 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2A59 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST EQ PUSH1 0x1 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x22DF9597 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x35C7 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xE9F83771 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x140A84DB PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 PUSH2 0x36C6 SWAP1 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST SWAP1 POP PUSH2 0x36D0 PUSH2 0x4A4F JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x115F JUMPI PUSH2 0x115F PUSH2 0x954 DUP5 DUP5 PUSH2 0x3BF6 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x373C SWAP1 DUP3 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x16 SLOAD PUSH2 0x3758 SWAP1 DUP3 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x16 SSTORE POP POP JUMP JUMPDEST PUSH2 0x1194 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH2 0x3B0D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E67 DUP4 PUSH2 0x310E PUSH2 0x3780 DUP3 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST PUSH2 0x378A DUP9 DUP8 PUSH2 0x3A7D JUMP JUMPDEST SWAP1 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x44 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x9AE94F01 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xC SLOAD ISZERO PUSH2 0x1B16 JUMPI PUSH2 0x1B16 PUSH2 0x954 PUSH1 0x0 PUSH2 0x3C3B JUMP JUMPDEST PUSH1 0x10 SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3803 JUMPI POP PUSH1 0x11 SLOAD PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3810 JUMPI POP PUSH1 0x12 SLOAD ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3823 JUMPI POP PUSH1 0x13 SLOAD PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x383E JUMPI POP PUSH1 0x13 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1B16 JUMPI PUSH2 0x1B16 PUSH2 0x954 PUSH1 0x1 PUSH2 0x3C3B JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x386F JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP6 ADD DUP2 MSTORE SWAP2 DUP2 ADD SWAP1 MSTORE SWAP2 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 MSTORE SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x38C2 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x38CF JUMPI POP PUSH1 0x0 PUSH2 0x2E67 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38DC DUP6 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT ISZERO PUSH2 0x38F7 JUMPI DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x38FD JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP DUP1 PUSH2 0x3917 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x2E67 JUMP JUMPDEST PUSH2 0x3922 DUP5 DUP5 DUP4 PUSH2 0x39AB JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x393A JUMPI POP DUP2 DUP4 EQ JUMPDEST ISZERO PUSH2 0x3947 JUMPI POP PUSH1 0x0 PUSH2 0x2E67 JUMP JUMPDEST DUP2 DUP4 LT PUSH2 0x3966 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCFA SWAP1 PUSH2 0x5013 JUMP JUMPDEST PUSH2 0x396E PUSH2 0x4A97 JUMP JUMPDEST PUSH2 0x3978 DUP7 DUP6 PUSH2 0x3C9E JUMP JUMPDEST SWAP1 POP PUSH2 0x3982 PUSH2 0x4A97 JUMP JUMPDEST PUSH2 0x398C DUP8 DUP6 PUSH2 0x3C9E JUMP JUMPDEST SWAP1 POP PUSH2 0x1CEE DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP11 PUSH2 0x3DB5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E67 DUP4 PUSH2 0x310E DUP7 DUP6 PUSH2 0x3A7D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x39C8 DUP9 DUP9 PUSH2 0x3E23 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x39D6 DUP8 DUP8 PUSH2 0x3E23 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x39E3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x39F3 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x1CEE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x3A0C JUMPI PUSH2 0x3A07 DUP3 DUP5 PUSH2 0x3E69 JUMP JUMPDEST PUSH2 0x3A16 JUMP JUMPDEST PUSH2 0x3A16 DUP4 DUP4 PUSH2 0x3E69 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A3F PUSH2 0x3A3A PUSH2 0x3A27 DUP4 PUSH2 0x3E7C JUMP JUMPDEST DUP9 PUSH4 0xFFFFFFFF AND DUP9 PUSH4 0xFFFFFFFF AND PUSH2 0x42D1 JUMP JUMPDEST PUSH2 0x42E0 JUMP JUMPDEST SWAP1 POP DUP2 DUP4 SGT ISZERO PUSH2 0x3A58 JUMPI PUSH2 0x3A53 DUP3 DUP3 PUSH2 0x3E69 JUMP JUMPDEST PUSH2 0x3A62 JUMP JUMPDEST PUSH2 0x3A62 DUP3 DUP3 PUSH2 0x4746 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A6E DUP2 DUP13 PUSH2 0x4766 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3A8C JUMPI POP PUSH1 0x0 PUSH2 0x11E3 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x3A99 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x11E0 JUMPI PUSH2 0x11E0 PUSH2 0x954 PUSH1 0x1 DUP7 DUP7 PUSH2 0x3266 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3AC4 JUMPI PUSH2 0x3AC4 PUSH2 0x954 PUSH1 0x3 DUP6 DUP6 PUSH2 0x3266 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x3ACF JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3AF1 SWAP1 DUP3 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x16 SLOAD PUSH2 0x3758 SWAP1 DUP3 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xB SLOAD DUP1 DUP3 EQ ISZERO PUSH2 0x3B2E JUMPI POP POP PUSH2 0x115F JUMP JUMPDEST PUSH2 0x3B36 PUSH2 0x4A97 JUMP JUMPDEST POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x3B6D PUSH2 0x4A97 JUMP JUMPDEST PUSH2 0x3B76 DUP3 PUSH2 0x47A8 JUMP JUMPDEST ISZERO PUSH2 0x3BAF JUMPI PUSH2 0x3B8F DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP9 DUP9 PUSH2 0x47B1 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP2 DUP4 MSTORE PUSH2 0x3BA3 SWAP2 SWAP1 PUSH2 0x4801 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE PUSH2 0x3BBA JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP6 DUP2 MSTORE JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP4 DUP3 ADD MLOAD PUSH1 0x1 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP8 DUP2 MSTORE PUSH1 0xE SWAP1 SWAP8 MSTORE SWAP1 SWAP6 KECCAK256 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x5CAA0B05 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xB02D773 PUSH1 0xE0 SHL DUP3 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3C51 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3CA6 PUSH2 0x4A97 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x3CDE DUP2 PUSH2 0x47A8 JUMP JUMPDEST ISZERO PUSH2 0x3CE8 JUMPI PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CF5 DUP4 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP3 POP SWAP1 POP PUSH2 0x3D30 DUP3 PUSH2 0x47A8 JUMP JUMPDEST ISZERO PUSH2 0x3D3B JUMPI POP PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 DUP2 LT ISZERO PUSH2 0x3D97 JUMPI PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP3 POP PUSH2 0x3D8B DUP4 PUSH2 0x47A8 JUMP JUMPDEST ISZERO PUSH2 0x3D97 JUMPI POP POP PUSH2 0x11E3 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3DC4 JUMPI POP PUSH1 0x0 PUSH2 0x3E1A JUMP JUMPDEST DUP4 PUSH2 0x3DDE JUMPI PUSH2 0x3DD7 DUP6 PUSH2 0x310E DUP5 DUP10 PUSH2 0x3A7D JUMP JUMPDEST SWAP1 POP PUSH2 0x3E1A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DF7 PUSH2 0x3DED DUP7 DUP9 PUSH2 0x3A7D JUMP JUMPDEST PUSH2 0x1E2E DUP10 DUP8 PUSH2 0x3A7D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E05 DUP3 DUP7 PUSH2 0x3AAE JUMP JUMPDEST SWAP1 POP PUSH2 0x3E15 DUP8 PUSH2 0x310E DUP7 DUP5 PUSH2 0x3A7D JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x3E3B JUMPI PUSH2 0x3E3B PUSH2 0x954 PUSH1 0x1 DUP6 PUSH2 0x481E JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x3E52 JUMPI PUSH2 0x3E52 PUSH2 0x954 PUSH1 0x1 DUP5 PUSH2 0x481E JUMP JUMPDEST PUSH2 0x11E0 PUSH2 0x3E63 DUP5 PUSH1 0x1 PUSH1 0x7F SHL PUSH2 0x4885 JUMP JUMPDEST DUP4 PUSH2 0x48D8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11E0 PUSH2 0x3E63 DUP5 PUSH1 0x1 PUSH1 0x7F SHL PUSH2 0x4885 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x7F SHL DUP3 SGT ISZERO PUSH2 0x3E98 JUMPI PUSH2 0x3E98 PUSH2 0x954 PUSH1 0x1 DUP5 PUSH2 0x491F JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x3EAE JUMPI PUSH2 0x3EAE PUSH2 0x954 PUSH1 0x0 DUP5 PUSH2 0x491F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL DUP3 EQ ISZERO PUSH2 0x3EC2 JUMPI POP PUSH1 0x0 PUSH2 0xE08 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x3EDE JUMPI POP PUSH1 0x1 PUSH2 0x1FF PUSH1 0x7C SHL SUB NOT PUSH2 0xE08 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x3F23 JUMPI PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x3F67 JUMPI PUSH17 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x15FC21041027AF PUSH1 0x3F SHL DUP6 SGT PUSH2 0x3FA5 JUMPI PUSH17 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x15FC21041027AF PUSH1 0x3F SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x960AADC109E7B PUSH1 0x46 SHL DUP6 SGT PUSH2 0x3FE3 JUMPI PUSH17 0x1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x960AADC109E7B PUSH1 0x46 SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x454AAA8EFE073 PUSH1 0x4A SHL DUP6 SGT PUSH2 0x4020 JUMPI PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x454AAA8EFE073 PUSH1 0x4A SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x2F16AC6C59DE7 PUSH1 0x4C SHL DUP6 SGT PUSH2 0x4054 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x2F16AC6C59DE7 PUSH1 0x4C SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x9B4597E37CB05 PUSH1 0x4B SHL DUP6 SGT PUSH2 0x4091 JUMPI PUSH16 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x9B4597E37CB05 PUSH1 0x4B SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x18EBEF9EAC820B PUSH1 0x4A SHL DUP6 SGT PUSH2 0x40CE JUMPI PUSH16 0x1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x18EBEF9EAC820B PUSH1 0x4A SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x4117 JUMPI PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP1 MUL SDIV SWAP1 POP PUSH1 0x1 PUSH1 0x80 SHL DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x4150 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x1 PUSH1 0x81 SHL DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x4174 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x4188 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x3 PUSH1 0x80 SHL DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x41AC JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x41C0 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x1 PUSH1 0x82 SHL DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x41E4 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x41F8 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x5 PUSH1 0x80 SHL DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x421C JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x4230 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x3 PUSH1 0x81 SHL DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x4254 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x4268 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x7 PUSH1 0x80 SHL DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x428C JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x42A0 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x1 PUSH1 0x83 SHL DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x42C4 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E67 PUSH2 0x3E63 DUP6 DUP6 PUSH2 0x4885 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1FF PUSH1 0x7C SHL SUB NOT DUP3 SLT ISZERO PUSH2 0x42FB JUMPI POP PUSH1 0x0 PUSH2 0xE08 JUMP JUMPDEST DUP2 PUSH2 0x430B JUMPI POP PUSH1 0x1 PUSH1 0x7F SHL PUSH2 0xE08 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x4322 JUMPI PUSH2 0x4322 PUSH2 0x954 PUSH1 0x1 DUP5 PUSH2 0x491F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL PUSH1 0x1 PUSH1 0x7C SHL DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x436A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x438B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x43AB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x43CB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x43EB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x440A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4429 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4447 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4465 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4483 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x44A0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x44BD JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x44D9 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x44F5 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4510 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x452B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4545 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH1 0x1 PUSH1 0x7F SHL ADD SWAP3 SWAP1 POP PUSH1 0x1 PUSH1 0x84 SHL DUP5 AND ISZERO PUSH2 0x459B JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x83 SHL DUP5 AND ISZERO PUSH2 0x45D0 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x82 SHL DUP5 AND ISZERO PUSH2 0x4605 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x81 SHL DUP5 AND ISZERO PUSH2 0x463A JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP5 AND ISZERO PUSH2 0x466F JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL DUP5 AND ISZERO PUSH2 0x46A3 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x7E SHL DUP5 AND ISZERO PUSH2 0x46D7 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x7D SHL DUP5 AND ISZERO PUSH2 0x470B JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x7C SHL DUP5 AND ISZERO PUSH2 0x473F JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x7F SHL PUSH2 0x4757 DUP5 DUP5 PUSH2 0x4885 JUMP JUMPDEST DUP2 PUSH2 0x475E JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x477E JUMPI PUSH2 0x477E PUSH2 0x954 PUSH1 0x1 DUP5 PUSH2 0x481E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x478A DUP5 DUP5 PUSH2 0x4885 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x479E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x7F SHR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 ADD MLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH2 0x47C3 JUMPI POP DUP3 SWAP1 POP DUP2 PUSH2 0x47F8 JUMP JUMPDEST DUP4 PUSH2 0x47D2 JUMPI POP DUP5 SWAP1 POP DUP4 PUSH2 0x47F8 JUMP JUMPDEST PUSH2 0x47E9 PUSH2 0x47DF DUP6 DUP8 PUSH2 0x3A7D JUMP JUMPDEST PUSH2 0x378A DUP9 DUP7 PUSH2 0x3A7D JUMP JUMPDEST SWAP2 POP PUSH2 0x47F5 DUP6 DUP5 PUSH2 0x3A7D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4813 DUP5 DUP5 PUSH1 0x1 PUSH1 0x7F SHL PUSH2 0x4935 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xBD79545F PUSH1 0xE0 SHL DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4834 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x4892 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x489F JUMPI POP PUSH1 0x0 PUSH2 0x11E3 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x48AD JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x48C4 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x48C0 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x11E3 JUMPI PUSH2 0x11E3 PUSH2 0x954 PUSH1 0x1 DUP6 DUP6 PUSH2 0x4991 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x48EE JUMPI PUSH2 0x48EE PUSH2 0x954 PUSH1 0x2 DUP6 DUP6 PUSH2 0x4991 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF SHL DUP4 EQ DUP1 ISZERO PUSH2 0x4902 JUMPI POP DUP2 PUSH1 0x0 NOT EQ JUMPDEST ISZERO PUSH2 0x4916 JUMPI PUSH2 0x4916 PUSH2 0x954 PUSH1 0x3 DUP6 DUP6 PUSH2 0x4991 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x475E JUMPI INVALID JUMPDEST PUSH1 0x60 PUSH4 0xED2F26A1 PUSH1 0xE0 SHL DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4834 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP6 GT DUP1 PUSH2 0x4945 JUMPI POP DUP3 DUP5 GT JUMPDEST ISZERO PUSH2 0x4988 JUMPI PUSH1 0x0 DUP5 DUP7 LT ISZERO PUSH2 0x495A JUMPI DUP5 PUSH2 0x495C JUMP JUMPDEST DUP6 JUMPDEST SWAP1 POP PUSH2 0x4968 DUP2 DUP6 PUSH2 0x3AAE JUMP JUMPDEST SWAP1 POP PUSH2 0x4974 DUP7 DUP3 PUSH2 0x3AAE JUMP JUMPDEST SWAP3 POP PUSH2 0x4980 DUP6 DUP3 PUSH2 0x3AAE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2CD3 JUMP JUMPDEST POP SWAP3 SWAP4 SWAP2 SWAP3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x8C12DFE7 PUSH1 0xE0 SHL DUP5 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x49A7 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4AD0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4AE4 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x20 ADD DUP3 DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4B02 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE SWAP3 POP DUP3 DUP5 DUP4 ADD PUSH1 0x20 ADD DUP7 LT ISZERO PUSH2 0x4B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B2E DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x519F JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2362 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B6D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11E0 DUP2 PUSH2 0x5279 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B89 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11E0 DUP2 PUSH2 0x5279 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BA6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4BB1 DUP2 PUSH2 0x5279 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BD1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4BDC DUP2 PUSH2 0x5279 JUMP JUMPDEST SWAP2 POP PUSH2 0x4BEA PUSH1 0x20 DUP5 ADD PUSH2 0x4AB1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4C0B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 MLOAD PUSH2 0x4C16 DUP2 PUSH2 0x5279 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MLOAD SWAP1 SWAP7 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4C32 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4C3E DUP11 DUP4 DUP12 ADD PUSH2 0x4AC0 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4C53 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x4C60 DUP10 DUP3 DUP11 ADD PUSH2 0x4AC0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD MLOAD SWAP3 POP PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x4C78 DUP2 PUSH2 0x5279 JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x4C89 DUP2 PUSH2 0x5279 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BA6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CBA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x11E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CDA JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4CF3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4D05 DUP2 PUSH2 0x5279 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4D22 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4D43 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x4BEA PUSH1 0x20 DUP5 ADD PUSH2 0x4B48 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D64 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11E0 DUP3 PUSH2 0x4AB1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4D81 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4D8B DUP6 DUP6 PUSH2 0x4B37 JUMP JUMPDEST SWAP3 POP PUSH2 0x4D9A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x4B37 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4DBB JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4DDA JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 MLOAD SWAP6 POP PUSH1 0x20 DUP8 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4DF7 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x4E03 DUP11 DUP4 DUP12 ADD PUSH2 0x4AC0 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4C53 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4E2F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x4E3F PUSH1 0x20 DUP8 ADD PUSH2 0x4B48 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH2 0x4E54 PUSH1 0x60 DUP8 ADD PUSH2 0x4B48 JUMP JUMPDEST SWAP2 POP PUSH2 0x4E62 PUSH1 0x80 DUP8 ADD PUSH2 0x4B48 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4E86 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x519F JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4F08 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4EE3 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x11E0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4E6E JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F4E5F524547495354455245445F504F4F4C5F49445F4552524F5200000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x504F4F4C5F544F5F4A4F494E5F4E4F545F53454C465F4552524F520000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F4E5F524547495354455245445F52425F504F4F4C5F4552524F5200000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x10D497D25395115495905317D2539590531251 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH4 0xFFFFFFFF SWAP4 DUP5 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 AND PUSH1 0x60 DUP5 ADD MSTORE AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0xFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x51BA JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x51A2 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x51C9 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x51E5 JUMPI PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x4 DUP2 DUP3 RETURNDATACOPY PUSH4 0x8C379A0 PUSH2 0x51F9 DUP3 MLOAD PUSH2 0x51CF JUMP JUMPDEST EQ PUSH2 0x5203 JUMPI PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x3 NOT ADD PUSH1 0x4 DUP3 RETURNDATACOPY DUP1 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x5232 JUMPI POP POP POP POP PUSH2 0xC41 JUMP JUMPDEST DUP3 DUP5 ADD SWAP3 POP DUP3 MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x524C JUMPI POP POP POP POP PUSH2 0xC41 JUMP JUMPDEST POP RETURNDATASIZE DUP4 ADD PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x5264 JUMPI POP POP POP PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x20 ADD PUSH1 0x40 MSTORE SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1194 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0xC8 0x1F 0x2C SWAP6 PUSH20 0xF75AA8FF37AF1084D19894B3C8405E87A47E2A8A PUSH13 0x641012794464736F6C63430007 DIV STOP CALLER ",
				"sourceMap": "906:565:7:-:0;;;;;;;;;;;;-1:-1:-1;886:5:46;:18;;-1:-1:-1;;;;;;886:18:46;894:10;886:18;;;906:565:7;;;;;;"
			},
			"deployedBytecode": {
				"generatedSources": [
					{
						"ast": {
							"nodeType": "YulBlock",
							"src": "0:18916:51",
							"statements": [
								{
									"nodeType": "YulBlock",
									"src": "6:3:51",
									"statements": []
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "75:94:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "85:29:51",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "107:6:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "94:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "94:20:51"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "85:5:51"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "147:16:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "156:1:51",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "159:1:51",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "149:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "149:12:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "149:12:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "136:5:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "143:1:51",
																	"type": "",
																	"value": "2"
																}
															],
															"functionName": {
																"name": "lt",
																"nodeType": "YulIdentifier",
																"src": "133:2:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "133:12:51"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "126:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "126:20:51"
												},
												"nodeType": "YulIf",
												"src": "123:2:51"
											}
										]
									},
									"name": "abi_decode_t_enum$_StakeStatus",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "54:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "65:5:51",
											"type": ""
										}
									],
									"src": "14:155:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "240:608:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "289:24:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "298:5:51"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "305:5:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "291:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "291:20:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "291:20:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "268:6:51"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "276:4:51",
																			"type": "",
																			"value": "0x1f"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "264:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "264:17:51"
																},
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "283:3:51"
																}
															],
															"functionName": {
																"name": "slt",
																"nodeType": "YulIdentifier",
																"src": "260:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "260:27:51"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "253:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "253:35:51"
												},
												"nodeType": "YulIf",
												"src": "250:2:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "322:27:51",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "342:6:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "336:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "336:13:51"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "326:6:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "358:28:51",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "368:18:51",
													"type": "",
													"value": "0xffffffffffffffff"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "362:2:51",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "413:13:51",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "invalid",
																	"nodeType": "YulIdentifier",
																	"src": "415:7:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "415:9:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "415:9:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "401:6:51"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "409:2:51"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "398:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "398:14:51"
												},
												"nodeType": "YulIf",
												"src": "395:2:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "435:23:51",
												"value": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "455:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "449:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "449:9:51"
												},
												"variables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "439:6:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "467:73:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "493:6:51"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "509:6:51"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "517:4:51",
																					"type": "",
																					"value": "0x1f"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "505:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "505:17:51"
																		},
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "528:2:51",
																					"type": "",
																					"value": "31"
																				}
																			],
																			"functionName": {
																				"name": "not",
																				"nodeType": "YulIdentifier",
																				"src": "524:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "524:7:51"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "501:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "501:31:51"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "489:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "489:44:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "535:4:51",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "485:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "485:55:51"
												},
												"variables": [
													{
														"name": "newFreePtr",
														"nodeType": "YulTypedName",
														"src": "471:10:51",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "599:13:51",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "invalid",
																	"nodeType": "YulIdentifier",
																	"src": "601:7:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "601:9:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "601:9:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulIdentifier",
																	"src": "558:10:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "570:2:51"
																}
															],
															"functionName": {
																"name": "gt",
																"nodeType": "YulIdentifier",
																"src": "555:2:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "555:18:51"
														},
														{
															"arguments": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulIdentifier",
																	"src": "578:10:51"
																},
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "590:6:51"
																}
															],
															"functionName": {
																"name": "lt",
																"nodeType": "YulIdentifier",
																"src": "575:2:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "575:22:51"
														}
													],
													"functionName": {
														"name": "or",
														"nodeType": "YulIdentifier",
														"src": "552:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "552:46:51"
												},
												"nodeType": "YulIf",
												"src": "549:2:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "628:2:51",
															"type": "",
															"value": "64"
														},
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "632:10:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "621:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "621:22:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "621:22:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "652:15:51",
												"value": {
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "661:6:51"
												},
												"variableNames": [
													{
														"name": "array",
														"nodeType": "YulIdentifier",
														"src": "652:5:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "683:6:51"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "691:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "676:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "676:22:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "676:22:51"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "750:16:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "759:1:51",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "762:1:51",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "752:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "752:12:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "752:12:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "721:6:51"
																		},
																		{
																			"name": "length",
																			"nodeType": "YulIdentifier",
																			"src": "729:6:51"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "717:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "717:19:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "738:4:51",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "713:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "713:30:51"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "745:3:51"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "710:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "710:39:51"
												},
												"nodeType": "YulIf",
												"src": "707:2:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "801:6:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "809:4:51",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "797:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "797:17:51"
														},
														{
															"arguments": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "820:6:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "828:4:51",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "816:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "816:17:51"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "835:6:51"
														}
													],
													"functionName": {
														"name": "copy_memory_to_memory",
														"nodeType": "YulIdentifier",
														"src": "775:21:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "775:67:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "775:67:51"
											}
										]
									},
									"name": "abi_decode_t_string_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "214:6:51",
											"type": ""
										},
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "222:3:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "array",
											"nodeType": "YulTypedName",
											"src": "230:5:51",
											"type": ""
										}
									],
									"src": "174:674:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "928:93:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "967:24:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "976:5:51"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "983:5:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "969:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "969:20:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "969:20:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "949:3:51"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "954:6:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "945:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "945:16:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "963:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "941:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "941:25:51"
												},
												"nodeType": "YulIf",
												"src": "938:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1000:15:51",
												"value": {
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "1009:6:51"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "1000:5:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_t_struct$_StakeInfo_calldata",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "902:6:51",
											"type": ""
										},
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "910:3:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "918:5:51",
											"type": ""
										}
									],
									"src": "853:168:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1076:115:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "1086:29:51",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "1108:6:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1095:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "1095:20:51"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "1086:5:51"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1169:16:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1178:1:51",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:1:51",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1171:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "1171:12:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1171:12:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1137:5:51"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "1148:5:51"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1155:10:51",
																			"type": "",
																			"value": "0xffffffff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "1144:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1144:22:51"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "1134:2:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "1134:33:51"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "1127:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "1127:41:51"
												},
												"nodeType": "YulIf",
												"src": "1124:2:51"
											}
										]
									},
									"name": "abi_decode_t_uint32",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "1055:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "1066:5:51",
											"type": ""
										}
									],
									"src": "1026:165:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1266:189:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1312:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1321:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1329:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1314:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "1314:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1314:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "1287:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1296:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "1283:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "1283:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1308:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "1279:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "1279:32:51"
												},
												"nodeType": "YulIf",
												"src": "1276:2:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1347:36:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1373:9:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1360:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "1360:23:51"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1351:5:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "1419:5:51"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "1392:26:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "1392:33:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1392:33:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1434:15:51",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1444:5:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1434:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_address",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1232:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "1243:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "1255:6:51",
											"type": ""
										}
									],
									"src": "1196:259:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1541:182:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1587:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1596:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1604:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1589:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "1589:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1589:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "1562:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1571:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "1558:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "1558:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1583:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "1554:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "1554:32:51"
												},
												"nodeType": "YulIf",
												"src": "1551:2:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1622:29:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1641:9:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "1635:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "1635:16:51"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1626:5:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "1687:5:51"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "1660:26:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "1660:33:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1660:33:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1702:15:51",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1712:5:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1702:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_address_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1507:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "1518:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "1530:6:51",
											"type": ""
										}
									],
									"src": "1460:263:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1815:240:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1861:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1870:6:51"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1878:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1863:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "1863:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1863:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "1836:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1845:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "1832:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "1832:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1857:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "1828:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "1828:32:51"
												},
												"nodeType": "YulIf",
												"src": "1825:2:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1896:36:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1922:9:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1909:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "1909:23:51"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1900:5:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "1968:5:51"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "1941:26:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "1941:33:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1941:33:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1983:15:51",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1993:5:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1983:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "2007:42:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2034:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2045:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2030:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "2030:18:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "2017:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "2017:32:51"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "2007:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_addresst_bytes32",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1773:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "1784:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "1796:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "1804:6:51",
											"type": ""
										}
									],
									"src": "1728:327:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2163:258:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2209:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2218:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2226:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2211:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "2211:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2211:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "2184:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2193:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "2180:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "2180:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2205:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "2176:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "2176:32:51"
												},
												"nodeType": "YulIf",
												"src": "2173:2:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2244:36:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2270:9:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "2257:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "2257:23:51"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2248:5:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "2316:5:51"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "2289:26:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "2289:33:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2289:33:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2331:15:51",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "2341:5:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "2331:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "2355:60:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2400:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2411:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2396:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "2396:18:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_enum$_StakeStatus",
														"nodeType": "YulIdentifier",
														"src": "2365:30:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "2365:50:51"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "2355:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_addresst_enum$_StakeStatus_$3007",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "2121:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "2132:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "2144:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "2152:6:51",
											"type": ""
										}
									],
									"src": "2060:361:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2612:876:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2659:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "2668:6:51"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "2676:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2661:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "2661:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2661:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "2633:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2642:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "2629:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "2629:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2654:3:51",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "2625:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "2625:33:51"
												},
												"nodeType": "YulIf",
												"src": "2622:2:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2694:29:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2713:9:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "2707:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "2707:16:51"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2698:5:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "2759:5:51"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "2732:26:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "2732:33:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2732:33:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2774:15:51",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "2784:5:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "2774:6:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2798:39:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2822:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2833:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2818:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "2818:18:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "2812:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "2812:25:51"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2802:6:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2846:28:51",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2856:18:51",
													"type": "",
													"value": "0xffffffffffffffff"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "2850:2:51",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2901:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "2910:6:51"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "2918:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2903:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "2903:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2903:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2889:6:51"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "2897:2:51"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "2886:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "2886:14:51"
												},
												"nodeType": "YulIf",
												"src": "2883:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2936:73:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2981:9:51"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "2992:6:51"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2977:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "2977:22:51"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "3001:7:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_string_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "2946:30:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "2946:63:51"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "2936:6:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3018:41:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3044:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3055:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3040:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "3040:18:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "3034:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3034:25:51"
												},
												"variables": [
													{
														"name": "offset_1",
														"nodeType": "YulTypedName",
														"src": "3022:8:51",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3088:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "3097:6:51"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "3105:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3090:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "3090:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3090:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset_1",
															"nodeType": "YulIdentifier",
															"src": "3074:8:51"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "3084:2:51"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "3071:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3071:16:51"
												},
												"nodeType": "YulIf",
												"src": "3068:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "3123:75:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3168:9:51"
																},
																{
																	"name": "offset_1",
																	"nodeType": "YulIdentifier",
																	"src": "3179:8:51"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3164:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "3164:24:51"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "3190:7:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_string_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "3133:30:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3133:65:51"
												},
												"variableNames": [
													{
														"name": "value2",
														"nodeType": "YulIdentifier",
														"src": "3123:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "3207:35:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3227:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3238:2:51",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3223:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "3223:18:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "3217:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3217:25:51"
												},
												"variableNames": [
													{
														"name": "value3",
														"nodeType": "YulIdentifier",
														"src": "3207:6:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3251:41:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3276:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3287:3:51",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3272:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "3272:19:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "3266:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3266:26:51"
												},
												"variables": [
													{
														"name": "value_1",
														"nodeType": "YulTypedName",
														"src": "3255:7:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value_1",
															"nodeType": "YulIdentifier",
															"src": "3328:7:51"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "3301:26:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3301:35:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3301:35:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "3345:17:51",
												"value": {
													"name": "value_1",
													"nodeType": "YulIdentifier",
													"src": "3355:7:51"
												},
												"variableNames": [
													{
														"name": "value4",
														"nodeType": "YulIdentifier",
														"src": "3345:6:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3371:41:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3396:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3407:3:51",
																	"type": "",
																	"value": "160"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3392:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "3392:19:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "3386:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3386:26:51"
												},
												"variables": [
													{
														"name": "value_2",
														"nodeType": "YulTypedName",
														"src": "3375:7:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value_2",
															"nodeType": "YulIdentifier",
															"src": "3448:7:51"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "3421:26:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3421:35:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3421:35:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "3465:17:51",
												"value": {
													"name": "value_2",
													"nodeType": "YulIdentifier",
													"src": "3475:7:51"
												},
												"variableNames": [
													{
														"name": "value5",
														"nodeType": "YulIdentifier",
														"src": "3465:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_uint256t_addresst_address_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "2538:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "2549:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "2561:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "2569:6:51",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "2577:6:51",
											"type": ""
										},
										{
											"name": "value3",
											"nodeType": "YulTypedName",
											"src": "2585:6:51",
											"type": ""
										},
										{
											"name": "value4",
											"nodeType": "YulTypedName",
											"src": "2593:6:51",
											"type": ""
										},
										{
											"name": "value5",
											"nodeType": "YulTypedName",
											"src": "2601:6:51",
											"type": ""
										}
									],
									"src": "2426:1062:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "3580:240:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3626:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3635:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3643:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3628:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "3628:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3628:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "3601:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3610:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "3597:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "3597:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3622:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "3593:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3593:32:51"
												},
												"nodeType": "YulIf",
												"src": "3590:2:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3661:36:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3687:9:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "3674:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3674:23:51"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3665:5:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3733:5:51"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "3706:26:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3706:33:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3706:33:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "3748:15:51",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "3758:5:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "3748:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "3772:42:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3799:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3810:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3795:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "3795:18:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "3782:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3782:32:51"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "3772:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_addresst_uint256",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "3538:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "3549:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "3561:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "3569:6:51",
											"type": ""
										}
									],
									"src": "3493:327:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "3903:219:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3949:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3958:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3966:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3951:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "3951:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3951:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "3924:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3933:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "3920:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "3920:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3945:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "3916:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3916:32:51"
												},
												"nodeType": "YulIf",
												"src": "3913:2:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3984:29:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4003:9:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "3997:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "3997:16:51"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3988:5:51",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4066:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4075:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4083:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4068:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "4068:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4068:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4035:5:51"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "4056:5:51"
																				}
																			],
																			"functionName": {
																				"name": "iszero",
																				"nodeType": "YulIdentifier",
																				"src": "4049:6:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4049:13:51"
																		}
																	],
																	"functionName": {
																		"name": "iszero",
																		"nodeType": "YulIdentifier",
																		"src": "4042:6:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "4042:21:51"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "4032:2:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "4032:32:51"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "4025:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "4025:40:51"
												},
												"nodeType": "YulIf",
												"src": "4022:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4101:15:51",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "4111:5:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "4101:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_bool_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "3869:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "3880:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "3892:6:51",
											"type": ""
										}
									],
									"src": "3825:297:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4197:120:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4243:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4252:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4260:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4245:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "4245:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4245:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "4218:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4227:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "4214:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "4214:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4239:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "4210:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "4210:32:51"
												},
												"nodeType": "YulIf",
												"src": "4207:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4278:33:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4301:9:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "4288:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "4288:23:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "4278:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_bytes32",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4163:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "4174:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "4186:6:51",
											"type": ""
										}
									],
									"src": "4127:190:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4409:240:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4455:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4464:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4472:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4457:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "4457:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4457:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "4430:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4439:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "4426:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "4426:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4451:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "4422:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "4422:32:51"
												},
												"nodeType": "YulIf",
												"src": "4419:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4490:33:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4513:9:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "4500:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "4500:23:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "4490:6:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4532:45:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4562:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4573:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4558:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "4558:18:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "4545:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "4545:32:51"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4536:5:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "4613:5:51"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "4586:26:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "4586:33:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4586:33:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4628:15:51",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "4638:5:51"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "4628:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_bytes32t_address",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4367:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "4378:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "4390:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "4398:6:51",
											"type": ""
										}
									],
									"src": "4322:327:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4741:171:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4787:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4796:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4804:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4789:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "4789:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4789:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "4762:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4771:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "4758:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "4758:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4783:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "4754:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "4754:32:51"
												},
												"nodeType": "YulIf",
												"src": "4751:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4822:33:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4845:9:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "4832:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "4832:23:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "4822:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "4864:42:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4891:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4902:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4887:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "4887:18:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "4874:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "4874:32:51"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "4864:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_bytes32t_uint256",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4699:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "4710:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "4722:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "4730:6:51",
											"type": ""
										}
									],
									"src": "4654:258:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "5003:178:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5049:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5058:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5066:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5051:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "5051:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5051:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "5024:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5033:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "5020:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "5020:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5045:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "5016:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "5016:32:51"
												},
												"nodeType": "YulIf",
												"src": "5013:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "5084:33:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5107:9:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "5094:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "5094:23:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "5084:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "5126:49:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5160:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5171:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5156:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "5156:18:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint32",
														"nodeType": "YulIdentifier",
														"src": "5136:19:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "5136:39:51"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "5126:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_bytes32t_uint32",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4961:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "4972:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "4984:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "4992:6:51",
											"type": ""
										}
									],
									"src": "4917:264:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "5272:138:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5318:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5327:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5335:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5320:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "5320:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5320:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "5293:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5302:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "5289:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "5289:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5314:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "5285:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "5285:32:51"
												},
												"nodeType": "YulIf",
												"src": "5282:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "5353:51:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5394:9:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_enum$_StakeStatus",
														"nodeType": "YulIdentifier",
														"src": "5363:30:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "5363:41:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "5353:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_enum$_StakeStatus_$3007",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "5238:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "5249:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "5261:6:51",
											"type": ""
										}
									],
									"src": "5186:224:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "5577:296:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5624:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5633:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5641:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5626:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "5626:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5626:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "5598:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5607:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "5594:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "5594:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5619:3:51",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "5590:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "5590:33:51"
												},
												"nodeType": "YulIf",
												"src": "5587:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "5659:69:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5709:9:51"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "5720:7:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_struct$_StakeInfo_calldata",
														"nodeType": "YulIdentifier",
														"src": "5669:39:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "5669:59:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "5659:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "5737:78:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5791:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5802:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5787:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "5787:18:51"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "5807:7:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_struct$_StakeInfo_calldata",
														"nodeType": "YulIdentifier",
														"src": "5747:39:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "5747:68:51"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "5737:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "5824:43:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5851:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5862:3:51",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5847:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "5847:19:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "5834:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "5834:33:51"
												},
												"variableNames": [
													{
														"name": "value2",
														"nodeType": "YulIdentifier",
														"src": "5824:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_struct$_StakeInfo_$3012_calldata_ptrt_struct$_StakeInfo_$3012_calldata_ptrt_uint256",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "5527:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "5538:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "5550:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "5558:6:51",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "5566:6:51",
											"type": ""
										}
									],
									"src": "5415:458:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "5948:120:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5994:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6003:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6011:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5996:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "5996:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5996:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "5969:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5978:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "5965:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "5965:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5990:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "5961:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "5961:32:51"
												},
												"nodeType": "YulIf",
												"src": "5958:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "6029:33:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6052:9:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "6039:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6039:23:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "6029:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_uint256",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "5914:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "5925:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "5937:6:51",
											"type": ""
										}
									],
									"src": "5878:190:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "6154:113:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6200:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6209:6:51"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6217:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6202:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "6202:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6202:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "6175:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "6184:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "6171:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "6171:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6196:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "6167:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6167:32:51"
												},
												"nodeType": "YulIf",
												"src": "6164:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "6235:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6251:9:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "6245:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6245:16:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "6235:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_uint256_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "6120:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "6131:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "6143:6:51",
											"type": ""
										}
									],
									"src": "6073:194:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "6458:801:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6505:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6514:6:51"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6522:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6507:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "6507:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6507:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "6479:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "6488:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "6475:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "6475:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6500:3:51",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "6471:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6471:33:51"
												},
												"nodeType": "YulIf",
												"src": "6468:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "6540:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6556:9:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "6550:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6550:16:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "6540:6:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6575:39:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "6599:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "6610:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6595:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "6595:18:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "6589:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6589:25:51"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "6579:6:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6623:28:51",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6633:18:51",
													"type": "",
													"value": "0xffffffffffffffff"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "6627:2:51",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6678:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6687:6:51"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6695:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6680:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "6680:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6680:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "6666:6:51"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "6674:2:51"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "6663:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6663:14:51"
												},
												"nodeType": "YulIf",
												"src": "6660:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "6713:73:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "6758:9:51"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "6769:6:51"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6754:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "6754:22:51"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "6778:7:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_string_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "6723:30:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6723:63:51"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "6713:6:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6795:41:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "6821:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "6832:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6817:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "6817:18:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "6811:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6811:25:51"
												},
												"variables": [
													{
														"name": "offset_1",
														"nodeType": "YulTypedName",
														"src": "6799:8:51",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6865:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6874:6:51"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6882:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6867:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "6867:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6867:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset_1",
															"nodeType": "YulIdentifier",
															"src": "6851:8:51"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "6861:2:51"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "6848:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6848:16:51"
												},
												"nodeType": "YulIf",
												"src": "6845:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "6900:75:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "6945:9:51"
																},
																{
																	"name": "offset_1",
																	"nodeType": "YulIdentifier",
																	"src": "6956:8:51"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6941:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "6941:24:51"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "6967:7:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_string_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "6910:30:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6910:65:51"
												},
												"variableNames": [
													{
														"name": "value2",
														"nodeType": "YulIdentifier",
														"src": "6900:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "6984:35:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7004:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7015:2:51",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7000:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "7000:18:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "6994:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "6994:25:51"
												},
												"variableNames": [
													{
														"name": "value3",
														"nodeType": "YulIdentifier",
														"src": "6984:6:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "7028:39:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7051:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7062:3:51",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7047:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "7047:19:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "7041:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7041:26:51"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7032:5:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "7103:5:51"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "7076:26:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7076:33:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "7076:33:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "7118:15:51",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "7128:5:51"
												},
												"variableNames": [
													{
														"name": "value4",
														"nodeType": "YulIdentifier",
														"src": "7118:6:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "7142:41:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7167:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7178:3:51",
																	"type": "",
																	"value": "160"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7163:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "7163:19:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "7157:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7157:26:51"
												},
												"variables": [
													{
														"name": "value_1",
														"nodeType": "YulTypedName",
														"src": "7146:7:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value_1",
															"nodeType": "YulIdentifier",
															"src": "7219:7:51"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "7192:26:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7192:35:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "7192:35:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "7236:17:51",
												"value": {
													"name": "value_1",
													"nodeType": "YulIdentifier",
													"src": "7246:7:51"
												},
												"variableNames": [
													{
														"name": "value5",
														"nodeType": "YulIdentifier",
														"src": "7236:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_uint256t_string_memory_ptrt_string_memory_ptrt_uint256t_addresst_address_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "6384:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "6395:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "6407:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "6415:6:51",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "6423:6:51",
											"type": ""
										},
										{
											"name": "value3",
											"nodeType": "YulTypedName",
											"src": "6431:6:51",
											"type": ""
										},
										{
											"name": "value4",
											"nodeType": "YulTypedName",
											"src": "6439:6:51",
											"type": ""
										},
										{
											"name": "value5",
											"nodeType": "YulTypedName",
											"src": "6447:6:51",
											"type": ""
										}
									],
									"src": "6272:987:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "7399:347:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7446:26:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7455:6:51"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7463:6:51"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7448:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "7448:22:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7448:22:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "7420:7:51"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7429:9:51"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "7416:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "7416:23:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7441:3:51",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "7412:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7412:33:51"
												},
												"nodeType": "YulIf",
												"src": "7409:2:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "7481:33:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7504:9:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "7491:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7491:23:51"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "7481:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "7523:49:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7557:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7568:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7553:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "7553:18:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint32",
														"nodeType": "YulIdentifier",
														"src": "7533:19:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7533:39:51"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "7523:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "7581:42:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7608:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7619:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7604:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "7604:18:51"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "7591:12:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7591:32:51"
												},
												"variableNames": [
													{
														"name": "value2",
														"nodeType": "YulIdentifier",
														"src": "7581:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "7632:49:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7666:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7677:2:51",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7662:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "7662:18:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint32",
														"nodeType": "YulIdentifier",
														"src": "7642:19:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7642:39:51"
												},
												"variableNames": [
													{
														"name": "value3",
														"nodeType": "YulIdentifier",
														"src": "7632:6:51"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "7690:50:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7724:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7735:3:51",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7720:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "7720:19:51"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint32",
														"nodeType": "YulIdentifier",
														"src": "7700:19:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7700:40:51"
												},
												"variableNames": [
													{
														"name": "value4",
														"nodeType": "YulIdentifier",
														"src": "7690:6:51"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_uint256t_uint32t_uint256t_uint32t_uint32",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "7333:9:51",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "7344:7:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "7356:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "7364:6:51",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "7372:6:51",
											"type": ""
										},
										{
											"name": "value3",
											"nodeType": "YulTypedName",
											"src": "7380:6:51",
											"type": ""
										},
										{
											"name": "value4",
											"nodeType": "YulTypedName",
											"src": "7388:6:51",
											"type": ""
										}
									],
									"src": "7264:482:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "7802:208:51",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "7812:26:51",
												"value": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "7832:5:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "7826:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7826:12:51"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7816:6:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "7854:3:51"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "7859:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "7847:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7847:19:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "7847:19:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7901:5:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7908:4:51",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7897:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "7897:16:51"
														},
														{
															"arguments": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7919:3:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7924:4:51",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7915:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "7915:14:51"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "7931:6:51"
														}
													],
													"functionName": {
														"name": "copy_memory_to_memory",
														"nodeType": "YulIdentifier",
														"src": "7875:21:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7875:63:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "7875:63:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "7947:57:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7962:3:51"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "7975:6:51"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7983:2:51",
																					"type": "",
																					"value": "31"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7971:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7971:15:51"
																		},
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7992:2:51",
																					"type": "",
																					"value": "31"
																				}
																			],
																			"functionName": {
																				"name": "not",
																				"nodeType": "YulIdentifier",
																				"src": "7988:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7988:7:51"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "7967:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "7967:29:51"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7958:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "7958:39:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7999:4:51",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7954:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "7954:50:51"
												},
												"variableNames": [
													{
														"name": "end",
														"nodeType": "YulIdentifier",
														"src": "7947:3:51"
													}
												]
											}
										]
									},
									"name": "abi_encode_t_bytes",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "7779:5:51",
											"type": ""
										},
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "7786:3:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "7794:3:51",
											"type": ""
										}
									],
									"src": "7751:259:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "8116:102:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "8126:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8138:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8149:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8134:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8134:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "8126:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8168:9:51"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "8183:6:51"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8199:3:51",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8204:1:51",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nodeType": "YulIdentifier",
																				"src": "8195:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8195:11:51"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "8208:1:51",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nodeType": "YulIdentifier",
																		"src": "8191:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "8191:19:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "8179:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "8179:32:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "8161:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8161:51:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "8161:51:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "8085:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "8096:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "8107:4:51",
											"type": ""
										}
									],
									"src": "8015:203:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "8352:145:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "8362:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8374:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8385:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8370:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8370:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "8362:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8404:9:51"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "8419:6:51"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8435:3:51",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8440:1:51",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nodeType": "YulIdentifier",
																				"src": "8431:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8431:11:51"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "8444:1:51",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nodeType": "YulIdentifier",
																		"src": "8427:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "8427:19:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "8415:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "8415:32:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "8397:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8397:51:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "8397:51:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "8468:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "8479:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "8464:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "8464:18:51"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "8484:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "8457:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8457:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "8457:34:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "8313:9:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "8324:6:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "8332:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "8343:4:51",
											"type": ""
										}
									],
									"src": "8223:274:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "8653:510:51",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8663:12:51",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8673:2:51",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "8667:2:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8684:32:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8702:9:51"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "8713:2:51"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8698:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8698:18:51"
												},
												"variables": [
													{
														"name": "tail_1",
														"nodeType": "YulTypedName",
														"src": "8688:6:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8732:9:51"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "8743:2:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "8725:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8725:21:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "8725:21:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8755:17:51",
												"value": {
													"name": "tail_1",
													"nodeType": "YulIdentifier",
													"src": "8766:6:51"
												},
												"variables": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8759:3:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8781:27:51",
												"value": {
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "8801:6:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "8795:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8795:13:51"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8785:6:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "tail_1",
															"nodeType": "YulIdentifier",
															"src": "8824:6:51"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "8832:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "8817:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8817:22:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "8817:22:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "8848:25:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8859:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8870:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8855:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8855:18:51"
												},
												"variableNames": [
													{
														"name": "pos",
														"nodeType": "YulIdentifier",
														"src": "8848:3:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8882:29:51",
												"value": {
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "8900:6:51"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "8908:2:51"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8896:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8896:15:51"
												},
												"variables": [
													{
														"name": "srcPtr",
														"nodeType": "YulTypedName",
														"src": "8886:6:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8920:13:51",
												"value": {
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "8929:4:51"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "8924:1:51",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8991:146:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9012:3:51"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "srcPtr",
																						"nodeType": "YulIdentifier",
																						"src": "9027:6:51"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "9021:5:51"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9021:13:51"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9044:3:51",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9049:1:51",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "9040:3:51"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9040:11:51"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9053:1:51",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "9036:3:51"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9036:19:51"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "9017:3:51"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9017:39:51"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9005:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "9005:52:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9005:52:51"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9070:19:51",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9081:3:51"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "9086:2:51"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9077:3:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "9077:12:51"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9070:3:51"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9102:25:51",
															"value": {
																"arguments": [
																	{
																		"name": "srcPtr",
																		"nodeType": "YulIdentifier",
																		"src": "9116:6:51"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "9124:2:51"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9112:3:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "9112:15:51"
															},
															"variableNames": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulIdentifier",
																	"src": "9102:6:51"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "8953:1:51"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "8956:6:51"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "8950:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "8950:13:51"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "8964:18:51",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8966:14:51",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8975:1:51"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8978:1:51",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8971:3:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "8971:9:51"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "8966:1:51"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "8946:3:51",
													"statements": []
												},
												"src": "8942:195:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "9146:11:51",
												"value": {
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9154:3:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "9146:4:51"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "8622:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "8633:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "8644:4:51",
											"type": ""
										}
									],
									"src": "8502:661:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "9263:92:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "9273:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9285:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9296:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9281:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "9281:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "9273:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9315:9:51"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "9340:6:51"
																		}
																	],
																	"functionName": {
																		"name": "iszero",
																		"nodeType": "YulIdentifier",
																		"src": "9333:6:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "9333:14:51"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "9326:6:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "9326:22:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "9308:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "9308:41:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "9308:41:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "9232:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "9243:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "9254:4:51",
											"type": ""
										}
									],
									"src": "9168:187:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "9461:76:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "9471:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9483:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9494:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9479:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "9479:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "9471:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9513:9:51"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "9524:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "9506:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "9506:25:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "9506:25:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "9430:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "9441:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "9452:4:51",
											"type": ""
										}
									],
									"src": "9360:177:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "9697:205:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "9707:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9719:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9730:2:51",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9715:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "9715:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "9707:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9749:9:51"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "9760:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "9742:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "9742:25:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "9742:25:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "9787:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "9798:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "9783:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "9783:18:51"
														},
														{
															"arguments": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "9807:6:51"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9823:3:51",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9828:1:51",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nodeType": "YulIdentifier",
																				"src": "9819:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9819:11:51"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "9832:1:51",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nodeType": "YulIdentifier",
																		"src": "9815:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "9815:19:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "9803:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "9803:32:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "9776:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "9776:60:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "9776:60:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "9856:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "9867:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "9852:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "9852:18:51"
														},
														{
															"arguments": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "9876:6:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "9884:10:51",
																	"type": "",
																	"value": "0xffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "9872:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "9872:23:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "9845:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "9845:51:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "9845:51:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_bytes32_t_address_t_uint32__to_t_bytes32_t_address_t_uint32__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "9650:9:51",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "9661:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "9669:6:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "9677:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "9688:4:51",
											"type": ""
										}
									],
									"src": "9542:360:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "10026:100:51",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10043:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10054:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "10036:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "10036:21:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "10036:21:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "10066:54:51",
												"value": {
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "10093:6:51"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "10105:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "10116:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "10101:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "10101:18:51"
														}
													],
													"functionName": {
														"name": "abi_encode_t_bytes",
														"nodeType": "YulIdentifier",
														"src": "10074:18:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "10074:46:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "10066:4:51"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "9995:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "10006:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "10017:4:51",
											"type": ""
										}
									],
									"src": "9907:219:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "10254:102:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "10264:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10276:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10287:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10272:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "10272:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "10264:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10306:9:51"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "10321:6:51"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10337:3:51",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10342:1:51",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nodeType": "YulIdentifier",
																				"src": "10333:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10333:11:51"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "10346:1:51",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nodeType": "YulIdentifier",
																		"src": "10329:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "10329:19:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "10317:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "10317:32:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "10299:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "10299:51:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "10299:51:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_contract$_IDragoRegistry_$156__to_t_address__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "10223:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "10234:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "10245:4:51",
											"type": ""
										}
									],
									"src": "10131:225:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "10480:102:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "10490:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10502:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10513:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10498:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "10498:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "10490:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10532:9:51"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "10547:6:51"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10563:3:51",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10568:1:51",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nodeType": "YulIdentifier",
																				"src": "10559:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10559:11:51"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "10572:1:51",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nodeType": "YulIdentifier",
																		"src": "10555:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "10555:19:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "10543:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "10543:32:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "10525:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "10525:51:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "10525:51:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_contract$_IGrgVault_$2574__to_t_address__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "10449:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "10460:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "10471:4:51",
											"type": ""
										}
									],
									"src": "10361:221:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "10710:102:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "10720:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10732:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10743:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10728:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "10728:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "10720:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10762:9:51"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "10777:6:51"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10793:3:51",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10798:1:51",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nodeType": "YulIdentifier",
																				"src": "10789:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10789:11:51"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "10802:1:51",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nodeType": "YulIdentifier",
																		"src": "10785:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "10785:19:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "10773:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "10773:32:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "10755:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "10755:51:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "10755:51:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_contract$_RigoTokenFace_$1957__to_t_address__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "10679:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "10690:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "10701:4:51",
											"type": ""
										}
									],
									"src": "10587:225:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "10954:119:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "10964:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10976:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10987:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10972:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "10972:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "10964:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11006:9:51"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "11017:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "10999:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "10999:25:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "10999:25:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11044:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11055:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11040:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "11040:18:51"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "11060:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11033:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "11033:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11033:34:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_rational_0_by_1_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "10915:9:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "10926:6:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "10934:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "10945:4:51",
											"type": ""
										}
									],
									"src": "10817:256:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "11199:100:51",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11216:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11227:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11209:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "11209:21:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11209:21:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "11239:54:51",
												"value": {
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "11266:6:51"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11278:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11289:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11274:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "11274:18:51"
														}
													],
													"functionName": {
														"name": "abi_encode_t_bytes",
														"nodeType": "YulIdentifier",
														"src": "11247:18:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "11247:46:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "11239:4:51"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "11168:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "11179:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "11190:4:51",
											"type": ""
										}
									],
									"src": "11078:221:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "11478:178:51",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11495:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11506:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11488:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "11488:21:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11488:21:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11529:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11540:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11525:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "11525:18:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11545:2:51",
															"type": "",
															"value": "28"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11518:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "11518:30:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11518:30:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11568:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11579:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11564:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "11564:18:51"
														},
														{
															"kind": "string",
															"nodeType": "YulLiteral",
															"src": "11584:30:51",
															"type": "",
															"value": "NON_REGISTERED_POOL_ID_ERROR"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11557:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "11557:58:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11557:58:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "11624:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11636:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11647:2:51",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "11632:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "11632:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "11624:4:51"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_stringliteral_01a8c6e7bde5f94ca5ab5ed057dcb16da7c5f1634e1493d0ff060a5fe1ae4ed4__to_t_string_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "11455:9:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "11469:4:51",
											"type": ""
										}
									],
									"src": "11304:352:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "11835:177:51",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11852:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11863:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11845:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "11845:21:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11845:21:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11886:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11897:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11882:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "11882:18:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11902:2:51",
															"type": "",
															"value": "27"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11875:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "11875:30:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11875:30:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "11925:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11936:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11921:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "11921:18:51"
														},
														{
															"kind": "string",
															"nodeType": "YulLiteral",
															"src": "11941:29:51",
															"type": "",
															"value": "POOL_TO_JOIN_NOT_SELF_ERROR"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11914:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "11914:57:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11914:57:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "11980:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11992:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12003:2:51",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "11988:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "11988:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "11980:4:51"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_stringliteral_8f6664bbe6a91f5c799b309ae37aa521b00147e54b031340996c5e102a92663c__to_t_string_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "11812:9:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "11826:4:51",
											"type": ""
										}
									],
									"src": "11661:351:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "12191:178:51",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "12208:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12219:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12201:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "12201:21:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12201:21:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "12242:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "12253:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "12238:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "12238:18:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12258:2:51",
															"type": "",
															"value": "28"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12231:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "12231:30:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12231:30:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "12281:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "12292:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "12277:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "12277:18:51"
														},
														{
															"kind": "string",
															"nodeType": "YulLiteral",
															"src": "12297:30:51",
															"type": "",
															"value": "NON_REGISTERED_RB_POOL_ERROR"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12270:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "12270:58:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12270:58:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "12337:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "12349:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12360:2:51",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "12345:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "12345:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "12337:4:51"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_stringliteral_90b315804c43ebf95e51b646683205b2c3e265b7bd38a5c9fd8aa47d59ff861e__to_t_string_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "12168:9:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "12182:4:51",
											"type": ""
										}
									],
									"src": "12017:352:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "12548:169:51",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "12565:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12576:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12558:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "12558:21:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12558:21:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "12599:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "12610:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "12595:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "12595:18:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12615:2:51",
															"type": "",
															"value": "19"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12588:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "12588:30:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12588:30:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "12638:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "12649:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "12634:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "12634:18:51"
														},
														{
															"kind": "string",
															"nodeType": "YulLiteral",
															"src": "12654:21:51",
															"type": "",
															"value": "CR_INTERVAL_INVALID"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12627:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "12627:49:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12627:49:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "12685:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "12697:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12708:2:51",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "12693:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "12693:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "12685:4:51"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_stringliteral_cb473162baadb1fbc004fc9590a5cdf5bbfdbd29fce0956c765b12657956c3e6__to_t_string_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "12525:9:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "12539:4:51",
											"type": ""
										}
									],
									"src": "12374:343:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "12877:209:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "12887:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "12899:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12910:2:51",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "12895:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "12895:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "12887:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "12929:9:51"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "12946:6:51"
																}
															],
															"functionName": {
																"name": "mload",
																"nodeType": "YulIdentifier",
																"src": "12940:5:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "12940:13:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12922:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "12922:32:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12922:32:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "12974:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "12985:4:51",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "12970:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "12970:20:51"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "13002:6:51"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "13010:4:51",
																			"type": "",
																			"value": "0x20"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "12998:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "12998:17:51"
																}
															],
															"functionName": {
																"name": "mload",
																"nodeType": "YulIdentifier",
																"src": "12992:5:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "12992:24:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12963:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "12963:54:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12963:54:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "13037:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13048:4:51",
																	"type": "",
																	"value": "0x40"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13033:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13033:20:51"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "13065:6:51"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "13073:4:51",
																			"type": "",
																			"value": "0x40"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "13061:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "13061:17:51"
																}
															],
															"functionName": {
																"name": "mload",
																"nodeType": "YulIdentifier",
																"src": "13055:5:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13055:24:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "13026:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "13026:54:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "13026:54:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_struct$_PoolStats_$2986_memory_ptr__to_t_struct$_PoolStats_$2986_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "12846:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "12857:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "12868:4:51",
											"type": ""
										}
									],
									"src": "12722:364:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "13236:417:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "13246:27:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "13258:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13269:3:51",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "13254:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "13254:19:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "13246:4:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13282:29:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13300:3:51",
																	"type": "",
																	"value": "160"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13305:1:51",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "shl",
																"nodeType": "YulIdentifier",
																"src": "13296:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13296:11:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13309:1:51",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "13292:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "13292:19:51"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "13286:2:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "13327:9:51"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "13348:6:51"
																		}
																	],
																	"functionName": {
																		"name": "mload",
																		"nodeType": "YulIdentifier",
																		"src": "13342:5:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "13342:13:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "13357:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "13338:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13338:22:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "13320:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "13320:41:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "13320:41:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "13381:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13392:4:51",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13377:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13377:20:51"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "13413:6:51"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13421:4:51",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "13409:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13409:17:51"
																		}
																	],
																	"functionName": {
																		"name": "mload",
																		"nodeType": "YulIdentifier",
																		"src": "13403:5:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "13403:24:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "13429:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "13399:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13399:33:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "13370:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "13370:63:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "13370:63:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13442:44:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "13472:6:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13480:4:51",
																	"type": "",
																	"value": "0x40"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13468:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13468:17:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "13462:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "13462:24:51"
												},
												"variables": [
													{
														"name": "memberValue0",
														"nodeType": "YulTypedName",
														"src": "13446:12:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13495:20:51",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "13505:10:51",
													"type": "",
													"value": "0xffffffff"
												},
												"variables": [
													{
														"name": "_2",
														"nodeType": "YulTypedName",
														"src": "13499:2:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "13535:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13546:4:51",
																	"type": "",
																	"value": "0x40"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13531:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13531:20:51"
														},
														{
															"arguments": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulIdentifier",
																	"src": "13557:12:51"
																},
																{
																	"name": "_2",
																	"nodeType": "YulIdentifier",
																	"src": "13571:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "13553:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13553:21:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "13524:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "13524:51:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "13524:51:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "13595:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13606:4:51",
																	"type": "",
																	"value": "0x60"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13591:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13591:20:51"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "13627:6:51"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13635:4:51",
																					"type": "",
																					"value": "0x60"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "13623:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13623:17:51"
																		}
																	],
																	"functionName": {
																		"name": "mload",
																		"nodeType": "YulIdentifier",
																		"src": "13617:5:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "13617:24:51"
																},
																{
																	"name": "_2",
																	"nodeType": "YulIdentifier",
																	"src": "13643:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "13613:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13613:33:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "13584:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "13584:63:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "13584:63:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_struct$_Pool_$3026_memory_ptr__to_t_struct$_Pool_$3026_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "13205:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "13216:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "13227:4:51",
											"type": ""
										}
									],
									"src": "13091:562:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "13821:338:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "13831:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "13843:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13854:2:51",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "13839:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "13839:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "13831:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "13873:9:51"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "13894:6:51"
																		}
																	],
																	"functionName": {
																		"name": "mload",
																		"nodeType": "YulIdentifier",
																		"src": "13888:5:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "13888:13:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13903:18:51",
																	"type": "",
																	"value": "0xffffffffffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "13884:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13884:38:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "13866:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "13866:57:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "13866:57:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13932:44:51",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "13962:6:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13970:4:51",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13958:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "13958:17:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "13952:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "13952:24:51"
												},
												"variables": [
													{
														"name": "memberValue0",
														"nodeType": "YulTypedName",
														"src": "13936:12:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13985:36:51",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "13995:26:51",
													"type": "",
													"value": "0xffffffffffffffffffffffff"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "13989:2:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14041:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14052:4:51",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14037:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "14037:20:51"
														},
														{
															"arguments": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulIdentifier",
																	"src": "14063:12:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "14077:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "14059:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "14059:21:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "14030:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "14030:51:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14030:51:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14101:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14112:4:51",
																	"type": "",
																	"value": "0x40"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14097:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "14097:20:51"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "14133:6:51"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14141:4:51",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "14129:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14129:17:51"
																		}
																	],
																	"functionName": {
																		"name": "mload",
																		"nodeType": "YulIdentifier",
																		"src": "14123:5:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "14123:24:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "14149:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "14119:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "14119:33:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "14090:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "14090:63:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14090:63:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_struct$_StoredBalance_$3004_memory_ptr__to_t_struct$_StoredBalance_$3004_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "13790:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "13801:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "13812:4:51",
											"type": ""
										}
									],
									"src": "13658:501:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "14265:76:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "14275:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14287:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "14298:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "14283:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "14283:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "14275:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14317:9:51"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "14328:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "14310:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "14310:25:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14310:25:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "14234:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "14245:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "14256:4:51",
											"type": ""
										}
									],
									"src": "14164:177:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "14475:119:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "14485:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14497:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "14508:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "14493:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "14493:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "14485:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14527:9:51"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "14538:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "14520:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "14520:25:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14520:25:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14565:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14576:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14561:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "14561:18:51"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "14581:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "14554:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "14554:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14554:34:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "14436:9:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "14447:6:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "14455:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "14466:4:51",
											"type": ""
										}
									],
									"src": "14346:248:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "14756:162:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "14766:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14778:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "14789:2:51",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "14774:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "14774:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "14766:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14808:9:51"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "14819:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "14801:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "14801:25:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14801:25:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14846:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14857:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14842:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "14842:18:51"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "14862:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "14835:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "14835:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14835:34:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14889:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14900:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14885:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "14885:18:51"
														},
														{
															"name": "value2",
															"nodeType": "YulIdentifier",
															"src": "14905:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "14878:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "14878:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14878:34:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "14709:9:51",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "14720:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "14728:6:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "14736:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "14747:4:51",
											"type": ""
										}
									],
									"src": "14599:319:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "15108:206:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "15118:27:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "15130:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "15141:3:51",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "15126:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "15126:19:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "15118:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "15161:9:51"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "15172:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "15154:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "15154:25:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15154:25:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15199:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15210:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15195:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "15195:18:51"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "15215:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "15188:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "15188:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15188:34:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15242:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15253:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15238:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "15238:18:51"
														},
														{
															"name": "value2",
															"nodeType": "YulIdentifier",
															"src": "15258:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "15231:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "15231:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15231:34:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15285:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15296:2:51",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15281:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "15281:18:51"
														},
														{
															"name": "value3",
															"nodeType": "YulIdentifier",
															"src": "15301:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "15274:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "15274:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15274:34:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "15053:9:51",
											"type": ""
										},
										{
											"name": "value3",
											"nodeType": "YulTypedName",
											"src": "15064:6:51",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "15072:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "15080:6:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "15088:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "15099:4:51",
											"type": ""
										}
									],
									"src": "14923:391:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "15532:250:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "15542:27:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "15554:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "15565:3:51",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "15550:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "15550:19:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "15542:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "15585:9:51"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "15596:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "15578:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "15578:25:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15578:25:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15623:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15634:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15619:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "15619:18:51"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "15639:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "15612:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "15612:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15612:34:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15666:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15677:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15662:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "15662:18:51"
														},
														{
															"name": "value2",
															"nodeType": "YulIdentifier",
															"src": "15682:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "15655:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "15655:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15655:34:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15709:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15720:2:51",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15705:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "15705:18:51"
														},
														{
															"name": "value3",
															"nodeType": "YulIdentifier",
															"src": "15725:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "15698:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "15698:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15698:34:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15752:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15763:3:51",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15748:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "15748:19:51"
														},
														{
															"name": "value4",
															"nodeType": "YulIdentifier",
															"src": "15769:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "15741:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "15741:35:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15741:35:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "15469:9:51",
											"type": ""
										},
										{
											"name": "value4",
											"nodeType": "YulTypedName",
											"src": "15480:6:51",
											"type": ""
										},
										{
											"name": "value3",
											"nodeType": "YulTypedName",
											"src": "15488:6:51",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "15496:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "15504:6:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "15512:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "15523:4:51",
											"type": ""
										}
									],
									"src": "15319:463:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "15996:306:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "16006:27:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "16018:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "16029:3:51",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "16014:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16014:19:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "16006:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "16049:9:51"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "16060:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "16042:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16042:25:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "16042:25:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "16076:20:51",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "16086:10:51",
													"type": "",
													"value": "0xffffffff"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "16080:2:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "16116:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "16127:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "16112:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16112:18:51"
														},
														{
															"arguments": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "16136:6:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "16144:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "16132:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16132:15:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "16105:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16105:43:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "16105:43:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "16168:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "16179:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "16164:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16164:18:51"
														},
														{
															"name": "value2",
															"nodeType": "YulIdentifier",
															"src": "16184:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "16157:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16157:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "16157:34:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "16211:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "16222:2:51",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "16207:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16207:18:51"
														},
														{
															"arguments": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "16231:6:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "16239:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "16227:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16227:15:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "16200:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16200:43:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "16200:43:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "16263:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "16274:3:51",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "16259:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16259:19:51"
														},
														{
															"arguments": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "16284:6:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "16292:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "16280:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16280:15:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "16252:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16252:44:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "16252:44:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256_t_uint32_t_uint256_t_uint32_t_uint32__to_t_uint256_t_uint32_t_uint256_t_uint256_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "15933:9:51",
											"type": ""
										},
										{
											"name": "value4",
											"nodeType": "YulTypedName",
											"src": "15944:6:51",
											"type": ""
										},
										{
											"name": "value3",
											"nodeType": "YulTypedName",
											"src": "15952:6:51",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "15960:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "15968:6:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "15976:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "15987:4:51",
											"type": ""
										}
									],
									"src": "15787:515:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "16514:306:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "16524:27:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "16536:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "16547:3:51",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "16532:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16532:19:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "16524:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "16567:9:51"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "16578:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "16560:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16560:25:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "16560:25:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "16594:20:51",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "16604:10:51",
													"type": "",
													"value": "0xffffffff"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "16598:2:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "16634:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "16645:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "16630:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16630:18:51"
														},
														{
															"arguments": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "16654:6:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "16662:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "16650:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16650:15:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "16623:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16623:43:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "16623:43:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "16686:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "16697:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "16682:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16682:18:51"
														},
														{
															"name": "value2",
															"nodeType": "YulIdentifier",
															"src": "16702:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "16675:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16675:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "16675:34:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "16729:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "16740:2:51",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "16725:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16725:18:51"
														},
														{
															"arguments": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "16749:6:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "16757:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "16745:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16745:15:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "16718:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16718:43:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "16718:43:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "16781:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "16792:3:51",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "16777:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16777:19:51"
														},
														{
															"arguments": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "16802:6:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "16810:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "16798:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "16798:15:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "16770:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16770:44:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "16770:44:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256_t_uint32_t_uint256_t_uint32_t_uint32__to_t_uint256_t_uint32_t_uint256_t_uint32_t_uint32__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "16451:9:51",
											"type": ""
										},
										{
											"name": "value4",
											"nodeType": "YulTypedName",
											"src": "16462:6:51",
											"type": ""
										},
										{
											"name": "value3",
											"nodeType": "YulTypedName",
											"src": "16470:6:51",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "16478:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "16486:6:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "16494:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "16505:4:51",
											"type": ""
										}
									],
									"src": "16307:513:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "16974:184:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "16984:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "16996:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "17007:2:51",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "16992:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "16992:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "16984:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17026:9:51"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "17037:6:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "17019:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "17019:25:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "17019:25:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "17064:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "17075:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "17060:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "17060:18:51"
														},
														{
															"arguments": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "17084:6:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "17092:4:51",
																	"type": "",
																	"value": "0xff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "17080:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "17080:17:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "17053:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "17053:45:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "17053:45:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "17118:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "17129:2:51",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "17114:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "17114:18:51"
														},
														{
															"arguments": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "17138:6:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "17146:4:51",
																	"type": "",
																	"value": "0xff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "17134:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "17134:17:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "17107:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "17107:45:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "17107:45:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256_t_uint8_t_uint8__to_t_uint256_t_uint8_t_uint8__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "16927:9:51",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "16938:6:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "16946:6:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "16954:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "16965:4:51",
											"type": ""
										}
									],
									"src": "16825:333:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "17262:93:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "17272:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17284:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "17295:2:51",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "17280:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "17280:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "17272:4:51"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17314:9:51"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "17329:6:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "17337:10:51",
																	"type": "",
																	"value": "0xffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "17325:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "17325:23:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "17307:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "17307:42:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "17307:42:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "17231:9:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "17242:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "17253:4:51",
											"type": ""
										}
									],
									"src": "17163:192:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "17485:166:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "17495:26:51",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17507:9:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "17518:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "17503:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "17503:18:51"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "17495:4:51"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "17530:20:51",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "17540:10:51",
													"type": "",
													"value": "0xffffffff"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "17534:2:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "17566:9:51"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "17581:6:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "17589:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "17577:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "17577:15:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "17559:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "17559:34:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "17559:34:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "17613:9:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "17624:2:51",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "17609:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "17609:18:51"
														},
														{
															"arguments": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "17633:6:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "17641:2:51"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "17629:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "17629:15:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "17602:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "17602:43:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "17602:43:51"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint32_t_uint32__to_t_uint32_t_uint32__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "17446:9:51",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "17457:6:51",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "17465:6:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "17476:4:51",
											"type": ""
										}
									],
									"src": "17360:291:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "17709:205:51",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "17719:10:51",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "17728:1:51",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "17723:1:51",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17788:63:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "17813:3:51"
																			},
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "17818:1:51"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17809:3:51"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17809:11:51"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "src",
																						"nodeType": "YulIdentifier",
																						"src": "17832:3:51"
																					},
																					{
																						"name": "i",
																						"nodeType": "YulIdentifier",
																						"src": "17837:1:51"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "17828:3:51"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "17828:11:51"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "17822:5:51"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17822:18:51"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17802:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "17802:39:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17802:39:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "17749:1:51"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "17752:6:51"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "17746:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "17746:13:51"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "17760:19:51",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17762:15:51",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "17771:1:51"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17774:2:51",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17767:3:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "17767:10:51"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "17762:1:51"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "17742:3:51",
													"statements": []
												},
												"src": "17738:113:51"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17877:31:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "17890:3:51"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "17895:6:51"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17886:3:51"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17886:16:51"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17904:1:51",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17879:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "17879:27:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17879:27:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "17866:1:51"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "17869:6:51"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "17863:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "17863:13:51"
												},
												"nodeType": "YulIf",
												"src": "17860:2:51"
											}
										]
									},
									"name": "copy_memory_to_memory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "src",
											"nodeType": "YulTypedName",
											"src": "17687:3:51",
											"type": ""
										},
										{
											"name": "dst",
											"nodeType": "YulTypedName",
											"src": "17692:3:51",
											"type": ""
										},
										{
											"name": "length",
											"nodeType": "YulTypedName",
											"src": "17697:6:51",
											"type": ""
										}
									],
									"src": "17656:258:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "17976:31:51",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "17978:27:51",
												"value": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "17994:3:51",
															"type": "",
															"value": "224"
														},
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "17999:5:51"
														}
													],
													"functionName": {
														"name": "shr",
														"nodeType": "YulIdentifier",
														"src": "17990:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "17990:15:51"
												},
												"variableNames": [
													{
														"name": "newValue",
														"nodeType": "YulIdentifier",
														"src": "17978:8:51"
													}
												]
											}
										]
									},
									"name": "shift_right_224_unsigned",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "17953:5:51",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "newValue",
											"nodeType": "YulTypedName",
											"src": "17963:8:51",
											"type": ""
										}
									],
									"src": "17919:88:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "18059:717:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18099:9:51",
													"statements": [
														{
															"nodeType": "YulLeave",
															"src": "18101:5:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [],
															"functionName": {
																"name": "returndatasize",
																"nodeType": "YulIdentifier",
																"src": "18075:14:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "18075:16:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "18093:4:51",
															"type": "",
															"value": "0x44"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "18072:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18072:26:51"
												},
												"nodeType": "YulIf",
												"src": "18069:2:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "ret",
															"nodeType": "YulIdentifier",
															"src": "18132:3:51"
														},
														{
															"name": "ret",
															"nodeType": "YulIdentifier",
															"src": "18137:3:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "18142:1:51",
															"type": "",
															"value": "4"
														}
													],
													"functionName": {
														"name": "returndatacopy",
														"nodeType": "YulIdentifier",
														"src": "18117:14:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18117:27:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "18117:27:51"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18217:9:51",
													"statements": [
														{
															"nodeType": "YulLeave",
															"src": "18219:5:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "ret",
																					"nodeType": "YulIdentifier",
																					"src": "18197:3:51"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "18191:5:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18191:10:51"
																		}
																	],
																	"functionName": {
																		"name": "shift_right_224_unsigned",
																		"nodeType": "YulIdentifier",
																		"src": "18166:24:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "18166:36:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "18204:10:51",
																	"type": "",
																	"value": "0x08c379a0"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "18163:2:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "18163:52:51"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "18156:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18156:60:51"
												},
												"nodeType": "YulIf",
												"src": "18153:2:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "18235:21:51",
												"value": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "18253:2:51",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "18247:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18247:9:51"
												},
												"variables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "18239:4:51",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "data",
															"nodeType": "YulIdentifier",
															"src": "18280:4:51"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "18286:1:51",
															"type": "",
															"value": "4"
														},
														{
															"arguments": [
																{
																	"arguments": [],
																	"functionName": {
																		"name": "returndatasize",
																		"nodeType": "YulIdentifier",
																		"src": "18293:14:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "18293:16:51"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "18315:1:51",
																			"type": "",
																			"value": "3"
																		}
																	],
																	"functionName": {
																		"name": "not",
																		"nodeType": "YulIdentifier",
																		"src": "18311:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "18311:6:51"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "18289:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "18289:29:51"
														}
													],
													"functionName": {
														"name": "returndatacopy",
														"nodeType": "YulIdentifier",
														"src": "18265:14:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18265:54:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "18265:54:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "18328:25:51",
												"value": {
													"arguments": [
														{
															"name": "data",
															"nodeType": "YulIdentifier",
															"src": "18348:4:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "18342:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18342:11:51"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "18332:6:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "18362:26:51",
												"value": {
													"arguments": [],
													"functionName": {
														"name": "returndatasize",
														"nodeType": "YulIdentifier",
														"src": "18372:14:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18372:16:51"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "18366:2:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "18397:28:51",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "18407:18:51",
													"type": "",
													"value": "0xffffffffffffffff"
												},
												"variables": [
													{
														"name": "_2",
														"nodeType": "YulTypedName",
														"src": "18401:2:51",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18483:9:51",
													"statements": [
														{
															"nodeType": "YulLeave",
															"src": "18485:5:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "18443:6:51"
																},
																{
																	"name": "_2",
																	"nodeType": "YulIdentifier",
																	"src": "18451:2:51"
																}
															],
															"functionName": {
																"name": "gt",
																"nodeType": "YulIdentifier",
																"src": "18440:2:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "18440:14:51"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "18463:6:51"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "18471:4:51",
																			"type": "",
																			"value": "0x24"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "18459:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "18459:17:51"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "18478:2:51"
																}
															],
															"functionName": {
																"name": "gt",
																"nodeType": "YulIdentifier",
																"src": "18456:2:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "18456:25:51"
														}
													],
													"functionName": {
														"name": "or",
														"nodeType": "YulIdentifier",
														"src": "18437:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18437:45:51"
												},
												"nodeType": "YulIf",
												"src": "18434:2:51"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "18501:28:51",
												"value": {
													"arguments": [
														{
															"name": "data",
															"nodeType": "YulIdentifier",
															"src": "18516:4:51"
														},
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "18522:6:51"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "18512:3:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18512:17:51"
												},
												"variables": [
													{
														"name": "msg",
														"nodeType": "YulTypedName",
														"src": "18505:3:51",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "18538:24:51",
												"value": {
													"arguments": [
														{
															"name": "msg",
															"nodeType": "YulIdentifier",
															"src": "18558:3:51"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "18552:5:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18552:10:51"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "18542:6:51",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18589:9:51",
													"statements": [
														{
															"nodeType": "YulLeave",
															"src": "18591:5:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "18577:6:51"
														},
														{
															"name": "_2",
															"nodeType": "YulIdentifier",
															"src": "18585:2:51"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "18574:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18574:14:51"
												},
												"nodeType": "YulIf",
												"src": "18571:2:51"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18671:9:51",
													"statements": [
														{
															"nodeType": "YulLeave",
															"src": "18673:5:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "msg",
																			"nodeType": "YulIdentifier",
																			"src": "18621:3:51"
																		},
																		{
																			"name": "length",
																			"nodeType": "YulIdentifier",
																			"src": "18626:6:51"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "18617:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "18617:16:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "18635:4:51",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "18613:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "18613:27:51"
														},
														{
															"arguments": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "18646:4:51"
																},
																{
																	"arguments": [],
																	"functionName": {
																		"name": "returndatasize",
																		"nodeType": "YulIdentifier",
																		"src": "18652:14:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "18652:16:51"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "18642:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "18642:27:51"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "18610:2:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18610:60:51"
												},
												"nodeType": "YulIf",
												"src": "18607:2:51"
											},
											{
												"expression": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "18696:2:51",
															"type": "",
															"value": "64"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "msg",
																			"nodeType": "YulIdentifier",
																			"src": "18708:3:51"
																		},
																		{
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "18721:6:51"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "18729:2:51",
																							"type": "",
																							"value": "31"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "18717:3:51"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18717:15:51"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "18738:2:51",
																							"type": "",
																							"value": "31"
																						}
																					],
																					"functionName": {
																						"name": "not",
																						"nodeType": "YulIdentifier",
																						"src": "18734:3:51"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18734:7:51"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "18713:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18713:29:51"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "18704:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "18704:39:51"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "18745:4:51",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "18700:3:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "18700:50:51"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "18689:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18689:62:51"
												},
												"nodeType": "YulExpressionStatement",
												"src": "18689:62:51"
											},
											{
												"nodeType": "YulAssignment",
												"src": "18760:10:51",
												"value": {
													"name": "msg",
													"nodeType": "YulIdentifier",
													"src": "18767:3:51"
												},
												"variableNames": [
													{
														"name": "ret",
														"nodeType": "YulIdentifier",
														"src": "18760:3:51"
													}
												]
											}
										]
									},
									"name": "try_decode_error_message",
									"nodeType": "YulFunctionDefinition",
									"returnVariables": [
										{
											"name": "ret",
											"nodeType": "YulTypedName",
											"src": "18051:3:51",
											"type": ""
										}
									],
									"src": "18012:764:51"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "18828:86:51",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18892:16:51",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18901:1:51",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18904:1:51",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "18894:6:51"
																},
																"nodeType": "YulFunctionCall",
																"src": "18894:12:51"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18894:12:51"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "18851:5:51"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "18862:5:51"
																		},
																		{
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "18877:3:51",
																							"type": "",
																							"value": "160"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "18882:1:51",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "18873:3:51"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18873:11:51"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18886:1:51",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "sub",
																				"nodeType": "YulIdentifier",
																				"src": "18869:3:51"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18869:19:51"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "18858:3:51"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "18858:31:51"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "18848:2:51"
															},
															"nodeType": "YulFunctionCall",
															"src": "18848:42:51"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "18841:6:51"
													},
													"nodeType": "YulFunctionCall",
													"src": "18841:50:51"
												},
												"nodeType": "YulIf",
												"src": "18838:2:51"
											}
										]
									},
									"name": "validator_revert_t_address",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "18817:5:51",
											"type": ""
										}
									],
									"src": "18781:133:51"
								}
							]
						},
						"contents": "{\n    { }\n    function abi_decode_t_enum$_StakeStatus(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(lt(value, 2)) { revert(0, 0) }\n    }\n    function abi_decode_t_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let length := mload(offset)\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { invalid() }\n        let memPtr := mload(64)\n        let newFreePtr := add(add(memPtr, and(add(length, 0x1f), not(31))), 0x20)\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory(add(offset, 0x20), add(memPtr, 0x20), length)\n    }\n    function abi_decode_t_struct$_StakeInfo_calldata(offset, end) -> value\n    {\n        if slt(sub(end, offset), 64) { revert(value, value) }\n        value := offset\n    }\n    function abi_decode_t_uint32(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_enum$_StakeStatus_$3007(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := abi_decode_t_enum$_StakeStatus(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_uint256t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value4, value4) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let offset := mload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value4, value4) }\n        value1 := abi_decode_t_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(value4, value4) }\n        value2 := abi_decode_t_string_fromMemory(add(headStart, offset_1), dataEnd)\n        value3 := mload(add(headStart, 96))\n        let value_1 := mload(add(headStart, 128))\n        validator_revert_t_address(value_1)\n        value4 := value_1\n        let value_2 := mload(add(headStart, 160))\n        validator_revert_t_address(value_2)\n        value5 := value_2\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_t_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32t_uint32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_t_uint32(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_enum$_StakeStatus_$3007(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_enum$_StakeStatus(headStart)\n    }\n    function abi_decode_tuple_t_struct$_StakeInfo_$3012_calldata_ptrt_struct$_StakeInfo_$3012_calldata_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_StakeInfo_calldata(headStart, dataEnd)\n        value1 := abi_decode_t_struct$_StakeInfo_calldata(add(headStart, 64), dataEnd)\n        value2 := calldataload(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_string_memory_ptrt_string_memory_ptrt_uint256t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value2, value2) }\n        value0 := mload(headStart)\n        let offset := mload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value2, value2) }\n        value1 := abi_decode_t_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(value2, value2) }\n        value2 := abi_decode_t_string_fromMemory(add(headStart, offset_1), dataEnd)\n        value3 := mload(add(headStart, 96))\n        let value := mload(add(headStart, 128))\n        validator_revert_t_address(value)\n        value4 := value\n        let value_1 := mload(add(headStart, 160))\n        validator_revert_t_address(value_1)\n        value5 := value_1\n    }\n    function abi_decode_tuple_t_uint256t_uint32t_uint256t_uint32t_uint32(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_t_uint32(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_t_uint32(add(headStart, 96))\n        value4 := abi_decode_t_uint32(add(headStart, 128))\n    }\n    function abi_encode_t_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint32__to_t_bytes32_t_address_t_uint32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), and(value2, 0xffffffff))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_t_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_IDragoRegistry_$156__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IGrgVault_$2574__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_RigoTokenFace_$1957__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_rational_0_by_1_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_t_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_01a8c6e7bde5f94ca5ab5ed057dcb16da7c5f1634e1493d0ff060a5fe1ae4ed4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"NON_REGISTERED_POOL_ID_ERROR\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8f6664bbe6a91f5c799b309ae37aa521b00147e54b031340996c5e102a92663c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"POOL_TO_JOIN_NOT_SELF_ERROR\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_90b315804c43ebf95e51b646683205b2c3e265b7bd38a5c9fd8aa47d59ff861e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"NON_REGISTERED_RB_POOL_ERROR\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cb473162baadb1fbc004fc9590a5cdf5bbfdbd29fce0956c765b12657956c3e6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"CR_INTERVAL_INVALID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_PoolStats_$2986_memory_ptr__to_t_struct$_PoolStats_$2986_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        mstore(add(headStart, 0x40), mload(add(value0, 0x40)))\n    }\n    function abi_encode_tuple_t_struct$_Pool_$3026_memory_ptr__to_t_struct$_Pool_$3026_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(mload(value0), _1))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), _1))\n        let memberValue0 := mload(add(value0, 0x40))\n        let _2 := 0xffffffff\n        mstore(add(headStart, 0x40), and(memberValue0, _2))\n        mstore(add(headStart, 0x60), and(mload(add(value0, 0x60)), _2))\n    }\n    function abi_encode_tuple_t_struct$_StoredBalance_$3004_memory_ptr__to_t_struct$_StoredBalance_$3004_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(mload(value0), 0xffffffffffffffff))\n        let memberValue0 := mload(add(value0, 0x20))\n        let _1 := 0xffffffffffffffffffffffff\n        mstore(add(headStart, 0x20), and(memberValue0, _1))\n        mstore(add(headStart, 0x40), and(mload(add(value0, 0x40)), _1))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_uint256_t_uint32_t_uint256_t_uint32_t_uint32__to_t_uint256_t_uint32_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        let _1 := 0xffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), and(value4, _1))\n    }\n    function abi_encode_tuple_t_uint256_t_uint32_t_uint256_t_uint32_t_uint32__to_t_uint256_t_uint32_t_uint256_t_uint32_t_uint32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        let _1 := 0xffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), and(value4, _1))\n    }\n    function abi_encode_tuple_t_uint256_t_uint8_t_uint8__to_t_uint256_t_uint8_t_uint8__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), and(value2, 0xff))\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function abi_encode_tuple_t_uint32_t_uint32__to_t_uint32_t_uint32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function shift_right_224_unsigned(value) -> newValue\n    { newValue := shr(224, value) }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        returndatacopy(ret, ret, 4)\n        if iszero(eq(shift_right_224_unsigned(mload(ret)), 0x08c379a0)) { leave }\n        let data := mload(64)\n        returndatacopy(data, 4, add(returndatasize(), not(3)))\n        let offset := mload(data)\n        let _1 := returndatasize()\n        let _2 := 0xffffffffffffffff\n        if or(gt(offset, _2), gt(add(offset, 0x24), _1)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _2) { leave }\n        if gt(add(add(msg, length), 0x20), add(data, returndatasize())) { leave }\n        mstore(64, add(add(msg, and(add(length, 31), not(31))), 0x20))\n        ret := msg\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
						"id": 51,
						"language": "Yul",
						"name": "#utility.yul"
					}
				],
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x6080604052600436106102e45760003560e01c80638da5cb5b11610190578063d39de6e9116100dc578063e907f00311610095578063ef4ba6801161006f578063ef4ba680146108a5578063f252b7a1146108ba578063f2fde38b146108da578063ff691b11146108fa576102e4565b8063e907f0031461085d578063ecc128f21461087d578063ee99205c14610890576102e4565b8063d39de6e9146107c7578063e0822db7146107e9578063e0ee036e146107fe578063e1c7392a14610813578063e804d0a414610828578063e8eeb3f814610848576102e4565b8063b510879f11610149578063bb7ef7e011610123578063bb7ef7e014610752578063be111af414610772578063c18c914114610792578063d14dc231146107b2576102e4565b8063b510879f146106fd578063b652b41f1461071d578063b918161114610732576102e4565b80638da5cb5b1461065e5780639ad26744146106735780639c3ccc8214610693578063a26171e2146106b3578063a694fc3a146106c8578063b2baa33e146106e8576102e4565b806346b979591161024f5780635d91121d1161020857806370712939116101e257806370712939146105e757806376671808146106075780637fa140c71461061c578063816667961461063c576102e4565b80635d91121d1461058c5780635e615a6b146105ac57806363403801146105d2576102e4565b806346b97959146104a3578063494503d4146104d05780634bcc3f67146104fd578063540c2d531461052a578063587da0231461055757806358f6c7e31461056c576102e4565b806336d7dd8e116102a157806336d7dd8e146103c557806338229d93146103e55780633a832382146104165780633e4ad7321461043657806342f1181e1461046357806344a6958b14610483576102e4565b80630b9663db146102e95780631a67a0a0146103145780631e7ff8f6146103365780631f81eb80146103565780632a94c279146103765780632e17de78146103a5575b600080fd5b3480156102f557600080fd5b506102fe61091a565b60405161030b9190614f1f565b60405180910390f35b34801561032057600080fd5b5061033461032f366004614ce1565b610c44565b005b34801561034257600080fd5b506102fe610351366004614b5c565b610d80565b34801561036257600080fd5b50610334610371366004614b5c565b610e0d565b34801561038257600080fd5b50610396610391366004614d10565b610ea2565b60405161030b939291906150df565b3480156103b157600080fd5b506103346103c0366004614cc9565b610ece565b3480156103d157600080fd5b506103346103e0366004614b5c565b611045565b3480156103f157600080fd5b50610405610400366004614cc9565b6110cb565b60405161030b959493929190615110565b34801561042257600080fd5b50610334610431366004614ce1565b6110fa565b34801561044257600080fd5b50610456610451366004614cc9565b611164565b60405161030b91906150a6565b34801561046f57600080fd5b5061033461047e366004614b5c565b611183565b34801561048f57600080fd5b5061045661049e366004614bbf565b611197565b3480156104af57600080fd5b506104c36104be366004614cc9565b6111e9565b60405161030b9190615040565b3480156104dc57600080fd5b506104f06104eb366004614cc9565b611234565b60405161030b9190614e9a565b34801561050957600080fd5b5061051d610518366004614cc9565b61125e565b60405161030b9190615061565b34801561053657600080fd5b5061054a610545366004614b5c565b6112c7565b60405161030b9190614f14565b34801561056357600080fd5b506102fe6112dc565b34801561057857600080fd5b50610334610587366004614d6d565b6112e2565b34801561059857600080fd5b506103346105a7366004614d31565b6114b7565b3480156105b857600080fd5b506105c161154c565b60405161030b959493929190615133565b3480156105de57600080fd5b506102fe611575565b3480156105f357600080fd5b50610334610602366004614b5c565b61157b565b34801561061357600080fd5b506102fe611609565b34801561062857600080fd5b506102fe610637366004614b5c565b61160f565b34801561064857600080fd5b50610651611621565b60405161030b9190615177565b34801561066a57600080fd5b506104f061162d565b34801561067f57600080fd5b5061033461068e366004614c97565b61163c565b34801561069f57600080fd5b506103346106ae366004614e18565b61164e565b3480156106bf57600080fd5b506102fe6116bb565b3480156106d457600080fd5b506103346106e3366004614cc9565b6116c1565b3480156106f457600080fd5b506102fe6117af565b34801561070957600080fd5b50610334610718366004614cc9565b6117cd565b34801561072957600080fd5b506104f06117d7565b34801561073e57600080fd5b5061054a61074d366004614b5c565b6117ef565b34801561075e57600080fd5b506102fe61076d366004614cc9565b611804565b34801561077e57600080fd5b506102fe61078d366004614b5c565b611891565b34801561079e57600080fd5b506102fe6107ad366004614cc9565b611a60565b3480156107be57600080fd5b506102fe611a72565b3480156107d357600080fd5b506107dc611a78565b60405161030b9190614ec7565b3480156107f557600080fd5b506104f0611ada565b34801561080a57600080fd5b50610651611af2565b34801561081f57600080fd5b50610334611afe565b34801561083457600080fd5b50610456610843366004614d53565b611b18565b34801561085457600080fd5b50610651611c46565b34801561086957600080fd5b506102fe610878366004614ce1565b611c5a565b61033461088b366004614c97565b611cf9565b34801561089c57600080fd5b506104f0611e44565b3480156108b157600080fd5b506104f0611e53565b3480156108c657600080fd5b506104566108d5366004614b94565b611e6b565b3480156108e657600080fd5b506103346108f5366004614b5c565b611e9f565b34801561090657600080fd5b50610334610915366004614cc9565b611f10565b600b546000908161092c82600161211f565b600081815260156020526040902060010154909150801561095957610959610954838361213e565b612183565b6001831115610b3f5761096a611e53565b6001600160a01b031663075461726040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a257600080fd5b505afa1580156109b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109da9190614b78565b6001600160a01b031663c551a2f96040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a1457600080fd5b505af1925050508015610a44575060408051601f3d908101601f19168201909252610a4191810190614daa565b60015b610b0657610a506151d5565b80610a5b5750610a98565b7f1fc94326c4f979e0a19555aef364d7490acf6840560fc01c723e320d6f2d96c181604051610a8a9190614f4d565b60405180910390a150610b01565b3d808015610ac2576040519150601f19603f3d011682016040523d82523d6000602084013e610ac7565b606091505b507f349211c9e282ed467b636a7fe2ccdd287a3f7c67969d4e5fd2ee539df22ed61381604051610af79190614f4d565b60405180910390a1505b610b3f565b7f02781ecbb97cbe2fbf6a9b934f9aa6422aca2d528ad53fbfb31f70bc47bcfa5b81604051610b359190614f1f565b60405180910390a1505b610b4761218b565b600084815260156020526040902055610b5e614a00565b50600083815260156020908152604091829020825160a08101845281548082526001830154938201849052600283015482860181905260038401546060840181905260049094015460808401529451919488947fbb4a26fa0ace13ee4da343896c20eaa44a618fb9071fdd8c2e2c960a4583189d94610be094919392916150f5565b60405180910390a2610bf0612216565b6020810151610c3757805160405185917fb463d19ecf455be65365092cf8e1db6934a0334cf8cd532ddf9964d01f36b5b291610c2e91600091614f60565b60405180910390a25b6020015193505050505b90565b600080610c4f6117d7565b60405163309dfc6b60e21b81526001600160a01b03919091169063c277f1ac90610c7d908790600401614f1f565b60006040518083038186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cd19190810190614bf3565b50509350505091506000811415610d035760405162461bcd60e51b8152600401610cfa90614f6e565b60405180910390fd5b826001600160a01b0316826001600160a01b031614610d345760405162461bcd60e51b8152600401610cfa90614fa5565b6001600160a01b038083166000908152600860205260408082208790555186928616917fe8b9f7ee7a4480d45b60e98f7b2090dd82e2353b8557a6ee2dd2d5ee9196bac291a350505050565b6000610d8a611ada565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401610db59190614e9a565b60206040518083038186803b158015610dcd57600080fd5b505afa158015610de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e059190614daa565b90505b919050565b610e15612253565b6001600160a01b0381166000908152600f602052604090205460ff1615610e4457610e44610954600083612276565b6001600160a01b0381166000908152600f602052604090819020805460ff19166001179055517f5738ee3c8e8fe8b0b9c4c21b16fdca42ec02e271237dfeabbf3b5af1584d732b90610e97908390614e9a565b60405180910390a150565b601460209081526000928352604080842090915290825290208054600182015460029092015490919083565b33610ed7614a2f565b6001600160a01b03821660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60205260409020610f17906122e4565b90506000610f3f82602001516001600160601b031683604001516001600160601b0316612368565b905080841115610f5657610f56610954858361237e565b6001600160a01b03831660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60205260409020610f9790856123c3565b610f9f611ada565b6001600160a01b0316639470b0bd84866040518363ffffffff1660e01b8152600401610fcc929190614eae565b600060405180830381600087803b158015610fe657600080fd5b505af1158015610ffa573d6000803e3d6000fd5b50505050826001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd856040516110379190614f1f565b60405180910390a250505050565b61104d612253565b6001600160a01b0381166000908152600f602052604090205460ff1661107b5761107b610954600183612276565b6001600160a01b0381166000908152600f602052604090819020805460ff19169055517f9bf55462cb5fa187f725d06de0a70bc01c4e40695570bdc25ad116f9be46bda790610e97908390614e9a565b601560205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b8161110481612435565b60008381526009602052604090206001600160a01b0383161580611137575060018101546001600160a01b038481169116145b15611142575061115f565b60010180546001600160a01b0319166001600160a01b0384161790555b505050565b61116c614a2f565b6000828152600760205260409020610e05906122e4565b61118b612461565b6111948161248e565b50565b61119f614a2f565b6111e0600560008460018111156111b257fe5b60ff168152602080820192909252604090810160009081206001600160a01b038816825290925290206122e4565b90505b92915050565b6111f1614a4f565b506000908152601460209081526040808320600b548452825291829020825160608101845281548152600182015492810192909252600201549181019190915290565b6002818154811061124457600080fd5b6000918252602090912001546001600160a01b0316905081565b611266614a70565b50600090815260096020908152604091829020825160808101845281546001600160a01b0390811682526001909201549182169281019290925263ffffffff600160a01b8204811693830193909352600160c01b9004909116606082015290565b600f6020526000908152604090205460ff1681565b600c5481565b33816112ee575061115f565b60006112fd6020860186614d53565b600181111561130857fe5b14801561132c5750600061131f6020850185614d53565b600181111561132a57fe5b145b15611337575061115f565b60016113466020860186614d53565b600181111561135157fe5b14156113665761136684602001358284612562565b60016113756020850185614d53565b600181111561138057fe5b141561139557611395836020013582846125ee565b60006005816113a76020880188614d53565b60018111156113b257fe5b60ff168152602080820192909252604090810160009081206001600160a01b0386168252835290812092509060059082906113ef90880188614d53565b60018111156113fa57fe5b60ff168152602080820192909252604090810160009081206001600160a01b03871682529092529020905061143082828661267a565b6020808601359087018035906001600160a01b038616907f7d3ad1dcf03b9027064d1d9a474a69e0cecc31324c541d3eb9b5e6fa2f106c8d908890611475908c614d53565b600181111561148057fe5b61148d60208c018c614d53565b600181111561149857fe5b6040516114a79392919061515e565b60405180910390a4505050505050565b816114c181612435565b600083815260096020526040902060010154600160a01b900463ffffffff166114eb84828561274e565b60008481526009602052604090819020600101805463ffffffff60a01b1916600160a01b63ffffffff8716021790555184907f8ea2a7a959bd25f226b7b0a4393613f7fdcaa8404e8bad96aa52dc1c14590167906110379084908790615188565b601054601154601254601354929363ffffffff9283169391928281169264010000000090041690565b60105481565b611583612461565b6001600160a01b03811660009081526001602052604090205460ff166115af576115af61095482612796565b60005b60025481101561160557816001600160a01b0316600282815481106115d357fe5b6000918252602090912001546001600160a01b031614156115fd576115f882826127de565b611605565b6001016115b2565b5050565b600b5481565b60086020526000908152604090205481565b60135463ffffffff1681565b6000546001600160a01b031681565b611644612461565b61160582826127de565b611656612253565b6116638585858585612972565b306001600160a01b031663c6f3a4276040518163ffffffff1660e01b815260040160006040518083038186803b15801561169c57600080fd5b505afa1580156116b0573d6000803e3d6000fd5b505050505050505050565b60125481565b336116ca611ada565b6001600160a01b03166315cc36f282846040518363ffffffff1660e01b81526004016116f7929190614eae565b600060405180830381600087803b15801561171157600080fd5b505af1158015611725573d6000803e3d6000fd5b505050506001600160a01b03811660009081527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc6020526040902061176a9083612a03565b806001600160a01b03167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a836040516117a39190614f1f565b60405180910390a25050565b60006117c8601054600c54612a5990919063ffffffff16565b905090565b6111948133612a75565b73de6445484a8dcd9bf35fc95eb4e3990cc358822e90565b60016020526000908152604090205460ff1681565b600061180e614a70565b506000828152600960209081526040808320815160808101835281546001600160a01b0390811682526001909201549182169381019390935263ffffffff600160a01b8204811692840192909252600160c01b9004166060820152908061187485612be3565b9150915061188783604001518383612ca0565b5095945050505050565b600080600061189e6117d7565b6001600160a01b031663b72e717d856040518263ffffffff1660e01b81526004016118c99190614e9a565b60006040518083038186803b1580156118e157600080fd5b505afa1580156118f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261191d9190810190614dc2565b509450505050915060008214156119465760405162461bcd60e51b8152600401610cfa90614fdc565b8033620aae60620186a061195986612cdb565b8560001b9650611967614a70565b50604080516080810182526001600160a01b038087168252858116602080840191825263ffffffff8088168587019081528782166060870190815260008f8152600990945292879020865181549087166001600160a01b0319918216178255945160019091018054925194518416600160c01b0263ffffffff60c01b1995909416600160a01b0263ffffffff60a01b1992909716929095169190911716939093171691909117905590517fcec6fc86ea644053f6edff1160dfe3fa5c61e7a5ef9f873f145bb03a0bd319e790611a42908a9088908790614f28565b60405180910390a1611a54888a610c44565b50505050505050919050565b600a6020526000908152604090205481565b60165481565b60606002805480602002602001604051908101604052809291908181526020018280548015611ad057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ab2575b5050505050905090565b730a33744ee5d57d6d69944213d8e6ad80d64fdc5890565b60115463ffffffff1681565b611b06612253565b611b0e612d06565b611b16612d19565b565b611b20614a2f565b60016000526004602052611b537fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe056122e4565b90506000826001811115611b6357fe5b1415610e08576000611b73611ada565b6001600160a01b0316636b6df5aa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bab57600080fd5b505afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be39190614daa565b9050611c0d611c0883602001516001600160601b03168361211f90919063ffffffff16565b612d44565b6001600160601b0390811660208401526040830151611c3291611c089184911661211f565b6001600160601b0316604083015250919050565b601354640100000000900463ffffffff1681565b6000611c64614a70565b506000838152600960209081526040808320815160808101835281546001600160a01b0390811682526001909201549182169381019390935263ffffffff600160a01b8204811692840192909252600160c01b90041660608201529080611cca86612be3565b915091506000611cdf84604001518484612ca0565b915050611cee87878385612d63565b979650505050505050565b336000908152600f602052604090205460ff16611d1c57611d1c61095433612e6f565b6001600160a01b03821660009081526008602052604090205480611d405750611605565b6000611d4b82611164565b602001516001600160601b03169050601254811015611d6b575050611605565b600b54600083815260146020908152604080832084845282528083206015909252909120815480611e0e57600080611da38888612eb7565b600287018290556001870181905560038601549193509150611dc59082612a59565b6003850155600180850154611dd991612a59565b6001850155604051889087907f14b098103235344975b17508c2391721cc9ac3f3fa2b56c7ff46f8480dfd074f90600090a350505b80871115611e3a578683556002820154611e34908290611e2e908a612a59565b9061211f565b60028301555b5050505050505050565b6003546001600160a01b031681565b734fbb350052bca5417566f188eb2ebce5b19bc96490565b611e73614a2f565b6001600160a01b038316600090815260066020908152604080832085845290915290206111e0906122e4565b611ea7612461565b6001600160a01b038116611ec557611ec0610954612f25565b611194565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b600b546000611f2082600161211f565b9050611f2a614a00565b50600081815260156020908152604091829020825160a08101845281548152600182015492810183905260028201549381019390935260038101546060840152600401546080830152611f7f57505050611194565b611f87614a4f565b5060008481526014602090815260408083208584528252918290208251606081018452815480825260018301549382019390935260029091015492810192909252611fd55750505050611194565b60008581526014602090815260408083208684529091528120818155600181018290556002018190556120088284612f43565b905060008061201c88848660400151612fb2565b9150915087877ff1116b309178aa62dcb6bf8c3b8bc2321724907c7ebf52192d14c8ce3aa9194c8484604051612053929190614f60565b60405180910390a360006120678383612a59565b60808701519091506120799082612a59565b608087018190526000888152601560209081526040909120600401919091558601516120a690600161211f565b602080880182815260008a81526015909252604090912060010191909155516116b0576080860151865188917fb463d19ecf455be65365092cf8e1db6934a0334cf8cd532ddf9964d01f36b5b2916120fe908261211f565b60405161210c929190614f60565b60405180910390a2505050505050505050565b6000828211156121385761213861095460028585613266565b50900390565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b03166330a5c00560e11b17905292915050565b805160208201fd5b60006117c860165461219b611e53565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016121c69190614e9a565b60206040518083038186803b1580156121de57600080fd5b505afa1580156121f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2e9190614daa565b4260006122216117af565b9050818111156122385761223861095482846132d8565b600b54600090612249906001612a59565b600b555050600c55565b3360009081526001602052604090205460ff16611b1657611b166109543361331d565b606063b9588e4360e01b83836040516024018083600181111561229557fe5b81526001600160a01b0390921660208084019190915260408051808503830181529381019052820180516001600160e01b03166001600160e01b03199095169490941790935295945050505050565b6122ec614a2f565b506040805160608101825282546001600160401b0381168083526001600160601b03600160401b830481166020850152600160a01b90920490911692820192909252600b5490918111156123625761234381613365565b6001600160401b0316825260408201516001600160601b031660208301525b50919050565b600081831061237757816111e0565b5090919050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b03166384c8b7c960e01b17905292915050565b6123cb614a2f565b6123d4836122e4565b90506123f9611c088383604001516001600160601b031661211f90919063ffffffff16565b6001600160601b039081166040830152602082015161241d91611c0891168461211f565b6001600160601b0316602082015261115f8382613384565b6000818152600960205260409020546001600160a01b03163381146116055761160561095433846133ee565b6000546001600160a01b03163314611b1657600054611b16906109549033906001600160a01b031661343b565b6001600160a01b0381166124a7576124a761095461348c565b6001600160a01b03811660009081526001602052604090205460ff16156124d4576124d4610954826134aa565b6001600160a01b0381166000818152600160208190526040808320805460ff19168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b03191684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b61256b836134f2565b6125758383612a75565b6001600160a01b038216600090815260066020908152604080832086845290915290206125a2908261351c565b60008381526007602052604090206125ba908261351c565b6001600052600460205261115f7fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe058261351c565b6125f7836134f2565b6126018383612a75565b6001600160a01b0382166000908152600660209081526040808320868452909152902061262e908261356a565b6000838152600760205260409020612646908261356a565b6001600052600460205261115f7fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe058261356a565b61268483836135a0565b1561268e5761115f565b612696614a2f565b61269f846122e4565b90506126a9614a2f565b6126b2846122e4565b905081604001516001600160601b03168311156126e3576126e36109548484604001516001600160601b031661237e565b60408201516126ff90611c08906001600160601b03168561211f565b6001600160601b0390811660408085019190915282015161272591611c08911685612a59565b6001600160601b0316604082015261273d8583613384565b6127478482613384565b5050505050565b620f424063ffffffff821611156127735761276e610954600085846135a7565b61115f565b8163ffffffff168163ffffffff16111561115f5761115f610954600185846135a7565b604080516001600160a01b0383166024808301919091528251808303909101815260449091019091526020810180516001600160e01b03166375a8845160e11b179052919050565b6001600160a01b03821660009081526001602052604090205460ff1661280a5761280a61095483612796565b6002548110612825576128256109548260028054905061361f565b816001600160a01b03166002828154811061283c57fe5b6000918252602090912001546001600160a01b031614612884576128846109546002838154811061286957fe5b6000918252602090912001546001600160a01b031684613664565b6001600160a01b0382166000908152600160205260409020805460ff191690556002805460001981019081106128b657fe5b600091825260209091200154600280546001600160a01b0390921691839081106128dc57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600280548061291557fe5b600082815260208120820160001990810180546001600160a01b031916905590910190915560405133916001600160a01b038516917f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b09190a35050565b60108590556011805463ffffffff80871663ffffffff19928316179092556012859055601380548484166401000000000267ffffffff00000000199487169190931617929092161790556040517f613157dbb0e920deab8ad6ddd3805e87cbf57344b9fe780f1764790ec7897542906129f49087908790879087908790615133565b60405180910390a15050505050565b612a0b614a2f565b612a14836122e4565b9050612a39611c088383604001516001600160601b0316612a5990919063ffffffff16565b6001600160601b039081166040830152602082015161241d91611c089116845b6000828201838110156111e0576111e061095460008686613266565b612a7e826136b5565b6000612a8d8383600080612d63565b6001600160a01b03831660009081526006602090815260408083208784529091529020909150612abc906122e4565b6001600160a01b0383811660009081526006602090815260408083208884528252918290208451815492860151959093015167ffffffffffffffff199092166001600160401b03909316929092176bffffffffffffffffffffffff60401b1916600160401b6001600160601b039586160217909216600160a01b93909216929092021790558015612bda57612b518382613723565b612b59611e53565b6001600160a01b031663a9059cbb83836040518363ffffffff1660e01b8152600401612b86929190614eae565b602060405180830381600087803b158015612ba057600080fd5b505af1158015612bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd89190614ca9565b505b61115f8361375f565b6000806000612bfe6001600b5461211f90919063ffffffff16565b9050612c08614a4f565b50600084815260146020908152604080832084845282528083208151606080820184528254825260018084015483870152600293840154838601528787526015865295849020845160a0810186528154815296810154958701959095529184015492850192909252600383015490840152600490910154608083015290612c90908290612f43565b9350806040015192505050915091565b60008082612cb057839150612cd3565b612cc463ffffffff8616620f42408661376c565b9150612cd0848361211f565b90505b935093915050565b6000818152600960205260409020546001600160a01b03161561119457611194610954826000613790565b612d0e6137d6565b42600c556001600b55565b612d216137eb565b62127500620dbba068056bc75e2d63100000600260036127478585858585612972565b806001600160601b0381168114610e0857610e08610954600284613850565b600b54600090612d71614a2f565b506001600160a01b0385166000908152600660209081526040808320898452825291829020825160608101845290546001600160401b0381168083526001600160601b03600160401b8304811694840194909452600160a01b90910490921692810192909252821415612de957600092505050612e67565b612df5818387876138b5565b8151909350600090612e11906001600160401b03166001612a59565b9050612e43612e3c8984602001516001600160601b031685600001516001600160401b03168561392c565b8590612a59565b9350612e61612e3c8984604001516001600160601b0316848761392c565b93505050505b949350505050565b604080516001600160a01b0383166024808301919091528251808303909101815260449091019091526020810180516001600160e01b03166330f65c0160e11b179052919050565b60008281526009602052604081205481908190612edd906001600160a01b031686611e6b565b602001516001600160601b03169050612ef6848261211f565b601154909350612f1b90612f149063ffffffff16620f4240866139ab565b8290612a59565b9150509250929050565b604080518082019091526004815263734f6e1f60e11b602082015290565b8151600090612f51576111e3565b81518351604084015160208601516060860151601354612f8795949392919063ffffffff808216916401000000009004166139bb565b60808301518351919250600091612f9d9161211f565b905081811015612fab578091505b5092915050565b600080612fbd614a70565b50600085815260096020908152604091829020825160808101845281546001600160a01b0390811682526001909201549182169281019290925263ffffffff600160a01b82048116938301849052600160c01b90910416606082015290613025908686612ca0565b909350915082156132425780602001516001600160a01b031681600001516001600160a01b031614156130e25761305a611e53565b815160405163a9059cbb60e01b81526001600160a01b03929092169163a9059cbb9161308a918790600401614eae565b602060405180830381600087803b1580156130a457600080fd5b505af11580156130b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130dc9190614ca9565b50613242565b6000613114620f424063ffffffff1661310e846060015163ffffffff1687613a7d90919063ffffffff16565b90613aae565b905061311e611e53565b6001600160a01b031663a9059cbb8360200151836040518363ffffffff1660e01b815260040161314f929190614eae565b602060405180830381600087803b15801561316957600080fd5b505af115801561317d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a19190614ca9565b506131aa611e53565b6001600160a01b031663a9059cbb83600001516131d0848861211f90919063ffffffff16565b6040518363ffffffff1660e01b81526004016131ed929190614eae565b602060405180830381600087803b15801561320757600080fd5b505af115801561321b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323f9190614ca9565b50505b811561325d576132528683613ad8565b61325d868386613b0d565b50935093915050565b606063e946c1bb60e01b8484846040516024018084600381111561328657fe5b81526020018381526020018281526020019350505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090509392505050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a6bcde4760e01b17905292915050565b604080516001600160a01b0383166024808301919091528251808303909101815260449091019091526020810180516001600160e01b031663b65a25b960e01b179052919050565b806001600160401b0381168114610e0857610e08610954600184613850565b8051825460408301516020909301516001600160601b03908116600160401b026bffffffffffffffffffffffff60401b1991909416600160a01b026001600160a01b036001600160401b0390941667ffffffffffffffff1990931692909217929092161716179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b03166382ded78560e01b17905292915050565b604080516001600160a01b03808516602483015283166044808301919091528251808303909101815260649091019091526020810180516001600160e01b0316631de45ad160e01b17905292915050565b60408051808201909152600481526315d953f960e21b602082015290565b604080516001600160a01b0383166024808301919091528251808303909101815260449091019091526020810180516001600160e01b03166306f0b78d60e51b179052919050565b6000818152600960205260409020546001600160a01b031661119457611194610954826000613790565b613524614a2f565b61352d836122e4565b9050613552611c088383604001516001600160601b031661211f90919063ffffffff16565b6001600160601b0316604082015261115f8382613384565b613572614a2f565b61357b836122e4565b9050613552611c088383604001516001600160601b0316612a5990919063ffffffff16565b1460011690565b60606322df959760e01b848484604051602401808460018111156135c757fe5b81526020018381526020018263ffffffff1681526020019350505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090509392505050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663e9f8377160e01b17905292915050565b604080516001600160a01b03808516602483015283166044808301919091528251808303909101815260649091019091526020810180516001600160e01b031663140a84db60e01b17905292915050565b600b546000906136c690600161211f565b90506136d0614a4f565b50600082815260146020908152604080832084845282529182902082516060810184528154808252600183015493820193909352600290910154928101929092521561115f5761115f6109548484613bf6565b6000828152600a602052604090205461373c908261211f565b6000838152600a6020526040902055601654613758908261211f565b6016555050565b6111948160006001613b0d565b6000612e678361310e61378082600161211f565b61378a8887613a7d565b90612a59565b60408051602481019390935290151560448084019190915281518084039091018152606490920190526020810180516001600160e01b0316639ae94f0160e01b17905290565b600c5415611b1657611b166109546000613c3b565b60105415801590613803575060115463ffffffff1615155b8015613810575060125415155b8015613823575060135463ffffffff1615155b801561383e5750601354640100000000900463ffffffff1615155b15611b1657611b166109546001613c3b565b606063c996af7b60e01b83836040516024018083600281111561386f57fe5b81526020808201939093526040805180830385018152918101905291820180516001600160e01b03166001600160e01b0319909516949094179093529250505092915050565b60008215806138c2575081155b156138cf57506000612e67565b60006138dc85600161211f565b86516001600160401b031610156138f75785604001516138fd565b85602001515b6001600160601b0316905080613917576000915050612e67565b6139228484836139ab565b9695505050505050565b600083158061393a57508183145b1561394757506000612e67565b8183106139665760405162461bcd60e51b8152600401610cfa90615013565b61396e614a97565b6139788685613c9e565b9050613982614a97565b61398c8785613c9e565b9050611cee81600001518260200151846000015185602001518a613db5565b6000612e678361310e8685613a7d565b6000806139c88888613e23565b905060006139d68787613e23565b90508115806139e3575080155b156139f357600092505050611cee565b600081831315613a0c57613a078284613e69565b613a16565b613a168383613e69565b9050613a3f613a3a613a2783613e7c565b8863ffffffff168863ffffffff166142d1565b6142e0565b905081831315613a5857613a538282613e69565b613a62565b613a628282614746565b9050613a6e818c614766565b9b9a5050505050505050505050565b600082613a8c575060006111e3565b82820282848281613a9957fe5b04146111e0576111e061095460018686613266565b600081613ac457613ac461095460038585613266565b6000828481613acf57fe5b04949350505050565b6000828152600a6020526040902054613af19082612a59565b6000838152600a60205260409020556016546137589082612a59565b6000838152600e6020526040902054600b5480821415613b2e57505061115f565b613b36614a97565b506000858152600d602090815260408083208584528252918290208251808401909352805483526001015490820152613b6d614a97565b613b76826147a8565b15613baf57613b8f8260000151836020015188886147b1565b60208301819052818352613ba39190614801565b60208301528152613bba565b602081018590528581525b6000878152600d6020908152604080832086845282528083208451815593820151600190940193909355978152600e9097529095205550505050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b0316635caa0b0560e01b17905292915050565b6060630b02d77360e01b826001811115613c5157fe5b604051602401808260ff168152602001915050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050919050565b613ca6614a97565b506000828152600d602090815260408083208484528252918290208251808401909352805483526001015490820152613cde816147a8565b15613ce8576111e3565b6000613cf583600161211f565b6000858152600d60209081526040808320848452825291829020825180840190935280548352600101549082015292509050613d30826147a8565b15613d3b57506111e3565b6000848152600e602052604090205483811015613d97576000858152600d6020908152604080832084845282529182902082518084019093528054835260010154908201529250613d8b836147a8565b15613d975750506111e3565b50506040805180820190915260008152600160208201529392505050565b600081613dc457506000613e1a565b83613dde57613dd78561310e8489613a7d565b9050613e1a565b6000613df7613ded8688613a7d565b611e2e8987613a7d565b90506000613e058286613aae565b9050613e158761310e8684613a7d565b925050505b95945050505050565b600080831215613e3b57613e3b61095460018561481e565b6000821215613e5257613e5261095460018461481e565b6111e0613e63846001607f1b614885565b836148d8565b60006111e0613e63846001607f1b614885565b60006001607f1b821315613e9857613e9861095460018461491f565b60008213613eae57613eae61095460008461491f565b6001607f1b821415613ec257506000610e08565b640733048c5a8213613ede575060016101ff607c1b0319610e08565b60008060006a01c8464f761647600000008513613f2357700fffffffffffffffffffffffffffffffff19909301926a01c8464f761647600000006001607f1b86020594505b6cf1aaddd7742e900000000000008513613f67577007ffffffffffffffffffffffffffffffff19909301926cf1aaddd7742e900000000000006001607f1b86020594505b6615fc21041027af603f1b8513613fa5577003ffffffffffffffffffffffffffffffff19909301926615fc21041027af603f1b6001607f1b86020594505b660960aadc109e7b60461b8513613fe3577001ffffffffffffffffffffffffffffffff1990930192660960aadc109e7b60461b6001607f1b86020594505b660454aaa8efe073604a1b8513614020576fffffffffffffffffffffffffffffffff1990930192660454aaa8efe073604a1b6001607f1b86020594505b6602f16ac6c59de7604c1b85136140545760016001607f1b0319909301926602f16ac6c59de7604c1b6001607f1b86020594505b6609b4597e37cb05604b1b8513614091576f3fffffffffffffffffffffffffffffff19909301926609b4597e37cb05604b1b6001607f1b86020594505b6618ebef9eac820b604a1b85136140ce576f1fffffffffffffffffffffffffffffff19909301926618ebef9eac820b604a1b6001607f1b86020594505b6f70f5a893b608861e1f58934f97aea57d8513614117576f0fffffffffffffffffffffffffffffff19909301926f70f5a893b608861e1f58934f97aea57d6001607f1b86020594505b60016001607f1b0319850192508291506001607f1b828002059050600160801b838103830205840193506001607f1b8183028161415057fe5b059150600160811b836faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0383028161417457fe5b05840193506001607f1b8183028161418857fe5b059150600360801b836f99999999999999999999999999999999038302816141ac57fe5b05840193506001607f1b818302816141c057fe5b059150600160821b836f92492492492492492492492492492492038302816141e457fe5b05840193506001607f1b818302816141f857fe5b059150600560801b836f8e38e38e38e38e38e38e38e38e38e38e0383028161421c57fe5b05840193506001607f1b8183028161423057fe5b059150600360811b836f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b0383028161425457fe5b05840193506001607f1b8183028161426857fe5b059150600760801b836f89d89d89d89d89d89d89d89d89d89d890383028161428c57fe5b05840193506001607f1b818302816142a057fe5b059150600160831b836f88888888888888888888888888888888038302816142c457fe5b0584019350505050919050565b6000612e67613e638585614885565b600060016101ff607c1b03198212156142fb57506000610e08565b8161430b57506001607f1b610e08565b60008213156143225761432261095460018461491f565b6001607f1b6001607c1b83078080028290056710e1b3be415a0000810293909301929091818302059050806705a0913f6b1e000002830192506001607f1b8282028161436a57fe5b05905080670168244fdac7800002830192506001607f1b8282028161438b57fe5b05905080664807432bc1800002830192506001607f1b828202816143ab57fe5b05905080660c0135dca0400002830192506001607f1b828202816143cb57fe5b059050806601b707b1cdc00002830192506001607f1b828202816143eb57fe5b059050806536e0f639b80002830192506001607f1b8282028161440a57fe5b05905080650618fee9f80002830192506001607f1b8282028161442957fe5b05905080649c197dcc0002830192506001607f1b8282028161444757fe5b05905080640e30dce40002830192506001607f1b8282028161446557fe5b0590508064012ebd130002830192506001607f1b8282028161448357fe5b059050806317499f0002830192506001607f1b828202816144a057fe5b059050806301a9d48002830192506001607f1b828202816144bd57fe5b05905080621c638002830192506001607f1b828202816144d957fe5b059050806201c63802830192506001607f1b828202816144f557fe5b05905080611ab802830192506001607f1b8282028161451057fe5b0590508061017c02830192506001607f1b8282028161452b57fe5b05905080601402830192506001607f1b8282028161454557fe5b600095909503946721c3677c82b400009190059384010582016001607f1b01929050600160841b84161561459b577243cbaf42a000812488fc5c220ad7b97bf6e99e6cf1aaddd7742e56d32fb9f9974484020592505b600160831b8416156145d0577105d27a9f51c31b7c2f8038212a05747799916e0afe10820813d65dfe6a33c07f738f84020592505b600160821b84161561460557701b4c902e273a58678d6d3bfdb93db96d026f02582ab704279e8efd15e0265855c47a84020592505b600160811b84161561463a577003b1cc971a9bb5b9867477440d6d1577506f1152aaa3bf81cb9fdb76eae12d02957184020592505b600160801b84161561466f5770015bf0a8b1457695355fb8ac404e7a79e36f2f16ac6c59de6f8d5d6f63c1482a7c8684020592505b6001607f1b8416156146a3576fd3094c70f034de4b96ff7d5b6f99fcd86f4da2cbf1be5827f9eb3ad1aa9866ebb384020592505b6001607e1b8416156146d7576fa45af1e1f40c333b3de1db4dd55f29a76f63afbe7ab2082ba1a0ae5e4eb1b479dc84020592505b6001607d1b84161561470b576f910b022db7ae67ce76b441c27035c6a16f70f5a893b608861e1f58934f97aea57d84020592505b6001607c1b84161561473f576f88415abbe9a76bead8d00cf112e4d4a86f783eafef1c0a8f3978c7f81824d62ebf84020592505b5050919050565b60006001607f1b6147578484614885565b8161475e57fe5b059392505050565b60008082121561477e5761477e61095460018461481e565b600061478a8484614885565b90506000811361479e5760009150506111e3565b607f1c9392505050565b60200151151590565b600080856147c35750829050816147f8565b836147d25750849050836147f8565b6147e96147df8587613a7d565b61378a8886613a7d565b91506147f58584613a7d565b90505b94509492505050565b60008061481384846001607f1b614935565b915091509250929050565b606063bd79545f60e01b83600181111561483457fe5b6040805160ff9092166024830152604480830186905281518084039091018152606490920190526020810180516001600160e01b03166001600160e01b031990931692909217909152905092915050565b6000821580614892575081155b1561489f575060006111e3565b50818102818382816148ad57fe5b051415806148c45750828282816148c057fe5b0514155b156111e3576111e361095460018585614991565b6000816148ee576148ee61095460028585614991565b600160ff1b83148015614902575081600019145b156149165761491661095460038585614991565b81838161475e57fe5b606063ed2f26a160e01b83600181111561483457fe5b6000808285118061494557508284115b156149885760008486101561495a578461495c565b855b90506149688185613aae565b90506149748682613aae565b92506149808582613aae565b915050612cd3565b50929391925050565b6060638c12dfe760e01b8460038111156149a757fe5b6040805160ff909216602483015260448201869052606480830186905281518084039091018152608490920190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806000815260200160008152602001600081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604051806040016040528060008152602001600081525090565b803560028110610e0857600080fd5b600082601f830112614ad0578081fd5b81516001600160401b0380821115614ae457fe5b604051601f8301601f191681016020018281118282101715614b0257fe5b604052828152925082848301602001861015614b1d57600080fd5b614b2e83602083016020880161519f565b50505092915050565b600060408284031215612362578081fd5b803563ffffffff81168114610e0857600080fd5b600060208284031215614b6d578081fd5b81356111e081615279565b600060208284031215614b89578081fd5b81516111e081615279565b60008060408385031215614ba6578081fd5b8235614bb181615279565b946020939093013593505050565b60008060408385031215614bd1578182fd5b8235614bdc81615279565b9150614bea60208401614ab1565b90509250929050565b60008060008060008060c08789031215614c0b578182fd5b8651614c1681615279565b60208801519096506001600160401b0380821115614c32578384fd5b614c3e8a838b01614ac0565b96506040890151915080821115614c53578384fd5b50614c6089828a01614ac0565b945050606087015192506080870151614c7881615279565b60a0880151909250614c8981615279565b809150509295509295509295565b60008060408385031215614ba6578182fd5b600060208284031215614cba578081fd5b815180151581146111e0578182fd5b600060208284031215614cda578081fd5b5035919050565b60008060408385031215614cf3578182fd5b823591506020830135614d0581615279565b809150509250929050565b60008060408385031215614d22578182fd5b50508035926020909101359150565b60008060408385031215614d43578182fd5b82359150614bea60208401614b48565b600060208284031215614d64578081fd5b6111e082614ab1565b600080600060a08486031215614d81578283fd5b614d8b8585614b37565b9250614d9a8560408601614b37565b9150608084013590509250925092565b600060208284031215614dbb578081fd5b5051919050565b60008060008060008060c08789031215614dda578384fd5b8651955060208701516001600160401b0380821115614df7578586fd5b614e038a838b01614ac0565b96506040890151915080821115614c53578586fd5b600080600080600060a08688031215614e2f578283fd5b85359450614e3f60208701614b48565b935060408601359250614e5460608701614b48565b9150614e6260808701614b48565b90509295509295909350565b60008151808452614e8681602086016020860161519f565b601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015614f085783516001600160a01b031683529284019291840191600101614ee3565b50909695505050505050565b901515815260200190565b90815260200190565b9283526001600160a01b0391909116602083015263ffffffff16604082015260600190565b6000602082526111e06020830184614e6e565b918252602082015260400190565b6020808252601c908201527f4e4f4e5f524547495354455245445f504f4f4c5f49445f4552524f5200000000604082015260600190565b6020808252601b908201527f504f4f4c5f544f5f4a4f494e5f4e4f545f53454c465f4552524f520000000000604082015260600190565b6020808252601c908201527f4e4f4e5f524547495354455245445f52425f504f4f4c5f4552524f5200000000604082015260600190565b60208082526013908201527210d497d25395115495905317d2539590531251606a1b604082015260600190565b81518152602080830151908201526040918201519181019190915260600190565b81516001600160a01b0390811682526020808401519091169082015260408083015163ffffffff90811691830191909152606092830151169181019190915260800190565b81516001600160401b031681526020808301516001600160601b0390811691830191909152604092830151169181019190915260600190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b948552602085019390935260408401919091526060830152608082015260a00190565b94855263ffffffff938416602086015260408501929092528216606084015216608082015260a00190565b92835260ff918216602084015216604082015260600190565b63ffffffff91909116815260200190565b63ffffffff92831681529116602082015260400190565b60005b838110156151ba5781810151838201526020016151a2565b838111156151c9576000848401525b50505050565b60e01c90565b600060443d10156151e557610c41565b600481823e6308c379a06151f982516151cf565b1461520357610c41565b6040513d600319016004823e80513d6001600160401b0381602484011181841117156152325750505050610c41565b8284019250825191508082111561524c5750505050610c41565b503d8301602082840101111561526457505050610c41565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461119457600080fdfea26469706673582212204ac81f2c9573f75aa8ff37af1084d19894b3c8405e87a47e2a8a6c641012794464736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2E4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x190 JUMPI DUP1 PUSH4 0xD39DE6E9 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xE907F003 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xEF4BA680 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xEF4BA680 EQ PUSH2 0x8A5 JUMPI DUP1 PUSH4 0xF252B7A1 EQ PUSH2 0x8BA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x8DA JUMPI DUP1 PUSH4 0xFF691B11 EQ PUSH2 0x8FA JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0xE907F003 EQ PUSH2 0x85D JUMPI DUP1 PUSH4 0xECC128F2 EQ PUSH2 0x87D JUMPI DUP1 PUSH4 0xEE99205C EQ PUSH2 0x890 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0xD39DE6E9 EQ PUSH2 0x7C7 JUMPI DUP1 PUSH4 0xE0822DB7 EQ PUSH2 0x7E9 JUMPI DUP1 PUSH4 0xE0EE036E EQ PUSH2 0x7FE JUMPI DUP1 PUSH4 0xE1C7392A EQ PUSH2 0x813 JUMPI DUP1 PUSH4 0xE804D0A4 EQ PUSH2 0x828 JUMPI DUP1 PUSH4 0xE8EEB3F8 EQ PUSH2 0x848 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0xB510879F GT PUSH2 0x149 JUMPI DUP1 PUSH4 0xBB7EF7E0 GT PUSH2 0x123 JUMPI DUP1 PUSH4 0xBB7EF7E0 EQ PUSH2 0x752 JUMPI DUP1 PUSH4 0xBE111AF4 EQ PUSH2 0x772 JUMPI DUP1 PUSH4 0xC18C9141 EQ PUSH2 0x792 JUMPI DUP1 PUSH4 0xD14DC231 EQ PUSH2 0x7B2 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0xB510879F EQ PUSH2 0x6FD JUMPI DUP1 PUSH4 0xB652B41F EQ PUSH2 0x71D JUMPI DUP1 PUSH4 0xB9181611 EQ PUSH2 0x732 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0x9AD26744 EQ PUSH2 0x673 JUMPI DUP1 PUSH4 0x9C3CCC82 EQ PUSH2 0x693 JUMPI DUP1 PUSH4 0xA26171E2 EQ PUSH2 0x6B3 JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x6C8 JUMPI DUP1 PUSH4 0xB2BAA33E EQ PUSH2 0x6E8 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0x46B97959 GT PUSH2 0x24F JUMPI DUP1 PUSH4 0x5D91121D GT PUSH2 0x208 JUMPI DUP1 PUSH4 0x70712939 GT PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x70712939 EQ PUSH2 0x5E7 JUMPI DUP1 PUSH4 0x76671808 EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0x7FA140C7 EQ PUSH2 0x61C JUMPI DUP1 PUSH4 0x81666796 EQ PUSH2 0x63C JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0x5D91121D EQ PUSH2 0x58C JUMPI DUP1 PUSH4 0x5E615A6B EQ PUSH2 0x5AC JUMPI DUP1 PUSH4 0x63403801 EQ PUSH2 0x5D2 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0x46B97959 EQ PUSH2 0x4A3 JUMPI DUP1 PUSH4 0x494503D4 EQ PUSH2 0x4D0 JUMPI DUP1 PUSH4 0x4BCC3F67 EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0x540C2D53 EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0x587DA023 EQ PUSH2 0x557 JUMPI DUP1 PUSH4 0x58F6C7E3 EQ PUSH2 0x56C JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0x36D7DD8E GT PUSH2 0x2A1 JUMPI DUP1 PUSH4 0x36D7DD8E EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x38229D93 EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0x3A832382 EQ PUSH2 0x416 JUMPI DUP1 PUSH4 0x3E4AD732 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x42F1181E EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0x44A6958B EQ PUSH2 0x483 JUMPI PUSH2 0x2E4 JUMP JUMPDEST DUP1 PUSH4 0xB9663DB EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x1A67A0A0 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x1E7FF8F6 EQ PUSH2 0x336 JUMPI DUP1 PUSH4 0x1F81EB80 EQ PUSH2 0x356 JUMPI DUP1 PUSH4 0x2A94C279 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x2E17DE78 EQ PUSH2 0x3A5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x91A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x32F CALLDATASIZE PUSH1 0x4 PUSH2 0x4CE1 JUMP JUMPDEST PUSH2 0xC44 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x351 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0xD80 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x371 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0xE0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x396 PUSH2 0x391 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D10 JUMP JUMPDEST PUSH2 0xEA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50DF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x3C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0xECE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x3E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x1045 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x405 PUSH2 0x400 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x10CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5110 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CE1 JUMP JUMPDEST PUSH2 0x10FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x456 PUSH2 0x451 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x1164 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x50A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x47E CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x1183 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x456 PUSH2 0x49E CALLDATASIZE PUSH1 0x4 PUSH2 0x4BBF JUMP JUMPDEST PUSH2 0x1197 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C3 PUSH2 0x4BE CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x11E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x5040 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x4EB CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x1234 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51D PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x125E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x5061 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH2 0x545 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x12C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x4F14 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x12DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x587 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D6D JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x598 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x5A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D31 JUMP JUMPDEST PUSH2 0x14B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5C1 PUSH2 0x154C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5133 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x1575 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x602 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x157B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x1609 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x637 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x160F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x648 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x651 PUSH2 0x1621 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x5177 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x162D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x68E CALLDATASIZE PUSH1 0x4 PUSH2 0x4C97 JUMP JUMPDEST PUSH2 0x163C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x6AE CALLDATASIZE PUSH1 0x4 PUSH2 0x4E18 JUMP JUMPDEST PUSH2 0x164E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x16BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x6E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x16C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x17AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x709 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x718 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x17CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x729 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x17D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH2 0x74D CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x17EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x75E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x76D CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x1804 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x77E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x78D CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x1891 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x79E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x7AD CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x1A60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x1A72 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7DC PUSH2 0x1A78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x4EC7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x1ADA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x651 PUSH2 0x1AF2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x81F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x1AFE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x834 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x456 PUSH2 0x843 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D53 JUMP JUMPDEST PUSH2 0x1B18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x854 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x651 PUSH2 0x1C46 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x869 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x878 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CE1 JUMP JUMPDEST PUSH2 0x1C5A JUMP JUMPDEST PUSH2 0x334 PUSH2 0x88B CALLDATASIZE PUSH1 0x4 PUSH2 0x4C97 JUMP JUMPDEST PUSH2 0x1CF9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x89C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x1E44 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F0 PUSH2 0x1E53 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x456 PUSH2 0x8D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B94 JUMP JUMPDEST PUSH2 0x1E6B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x8F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B5C JUMP JUMPDEST PUSH2 0x1E9F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0x915 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CC9 JUMP JUMPDEST PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0x92C DUP3 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP DUP1 ISZERO PUSH2 0x959 JUMPI PUSH2 0x959 PUSH2 0x954 DUP4 DUP4 PUSH2 0x213E JUMP JUMPDEST PUSH2 0x2183 JUMP JUMPDEST PUSH1 0x1 DUP4 GT ISZERO PUSH2 0xB3F JUMPI PUSH2 0x96A PUSH2 0x1E53 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7546172 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9B6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9DA SWAP2 SWAP1 PUSH2 0x4B78 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC551A2F9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xA44 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA41 SWAP2 DUP2 ADD SWAP1 PUSH2 0x4DAA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB06 JUMPI PUSH2 0xA50 PUSH2 0x51D5 JUMP JUMPDEST DUP1 PUSH2 0xA5B JUMPI POP PUSH2 0xA98 JUMP JUMPDEST PUSH32 0x1FC94326C4F979E0A19555AEF364D7490ACF6840560FC01C723E320D6F2D96C1 DUP2 PUSH1 0x40 MLOAD PUSH2 0xA8A SWAP2 SWAP1 PUSH2 0x4F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH2 0xB01 JUMP JUMPDEST RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xAC2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAC7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH32 0x349211C9E282ED467B636A7FE2CCDD287A3F7C67969D4E5FD2EE539DF22ED613 DUP2 PUSH1 0x40 MLOAD PUSH2 0xAF7 SWAP2 SWAP1 PUSH2 0x4F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMPDEST PUSH2 0xB3F JUMP JUMPDEST PUSH32 0x2781ECBB97CBE2FBF6A9B934F9AA6422ACA2D528AD53FBFB31F70BC47BCFA5B DUP2 PUSH1 0x40 MLOAD PUSH2 0xB35 SWAP2 SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMPDEST PUSH2 0xB47 PUSH2 0x218B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xB5E PUSH2 0x4A00 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x2 DUP4 ADD SLOAD DUP3 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE SWAP5 MLOAD SWAP2 SWAP5 DUP9 SWAP5 PUSH32 0xBB4A26FA0ACE13EE4DA343896C20EAA44A618FB9071FDD8C2E2C960A4583189D SWAP5 PUSH2 0xBE0 SWAP5 SWAP2 SWAP4 SWAP3 SWAP2 PUSH2 0x50F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xBF0 PUSH2 0x2216 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0xC37 JUMPI DUP1 MLOAD PUSH1 0x40 MLOAD DUP6 SWAP2 PUSH32 0xB463D19ECF455BE65365092CF8E1DB6934A0334CF8CD532DDF9964D01F36B5B2 SWAP2 PUSH2 0xC2E SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x4F60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x20 ADD MLOAD SWAP4 POP POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC4F PUSH2 0x17D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x309DFC6B PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xC277F1AC SWAP1 PUSH2 0xC7D SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4F1F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCA9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xCD1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4BF3 JUMP JUMPDEST POP POP SWAP4 POP POP POP SWAP2 POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0xD03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCFA SWAP1 PUSH2 0x4F6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCFA SWAP1 PUSH2 0x4FA5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 SWAP1 SSTORE MLOAD DUP7 SWAP3 DUP7 AND SWAP2 PUSH32 0xE8B9F7EE7A4480D45B60E98F7B2090DD82E2353B8557A6EE2DD2D5EE9196BAC2 SWAP2 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD8A PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDB5 SWAP2 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDE1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE05 SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE15 PUSH2 0x2253 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE44 JUMPI PUSH2 0xE44 PUSH2 0x954 PUSH1 0x0 DUP4 PUSH2 0x2276 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x5738EE3C8E8FE8B0B9C4C21B16FDCA42EC02E271237DFEABBF3B5AF1584D732B SWAP1 PUSH2 0xE97 SWAP1 DUP4 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST CALLER PUSH2 0xED7 PUSH2 0x4A2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xF17 SWAP1 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF3F DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2368 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0xF56 JUMPI PUSH2 0xF56 PUSH2 0x954 DUP6 DUP4 PUSH2 0x237E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xF97 SWAP1 DUP6 PUSH2 0x23C3 JUMP JUMPDEST PUSH2 0xF9F PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9470B0BD DUP5 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFCC SWAP3 SWAP2 SWAP1 PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFFA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x85082129D87B2FE11527CB1B3B7A520AEB5AA6913F88A3D8757FE40D1DB02FDD DUP6 PUSH1 0x40 MLOAD PUSH2 0x1037 SWAP2 SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x104D PUSH2 0x2253 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x107B JUMPI PUSH2 0x107B PUSH2 0x954 PUSH1 0x1 DUP4 PUSH2 0x2276 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0x9BF55462CB5FA187F725D06DE0A70BC01C4E40695570BDC25AD116F9BE46BDA7 SWAP1 PUSH2 0xE97 SWAP1 DUP4 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP6 JUMP JUMPDEST DUP2 PUSH2 0x1104 DUP2 PUSH2 0x2435 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 PUSH2 0x1137 JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x1142 JUMPI POP PUSH2 0x115F JUMP JUMPDEST PUSH1 0x1 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x116C PUSH2 0x4A2F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xE05 SWAP1 PUSH2 0x22E4 JUMP JUMPDEST PUSH2 0x118B PUSH2 0x2461 JUMP JUMPDEST PUSH2 0x1194 DUP2 PUSH2 0x248E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x119F PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x11E0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x11B2 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x11F1 PUSH2 0x4A4F JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0xB SLOAD DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 ADD SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x1266 PUSH2 0x4A70 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x80 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SLOAD SWAP2 DUP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST CALLER DUP2 PUSH2 0x12EE JUMPI POP PUSH2 0x115F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12FD PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1308 JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x132C JUMPI POP PUSH1 0x0 PUSH2 0x131F PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x132A JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x1337 JUMPI POP PUSH2 0x115F JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1346 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1351 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1366 JUMPI PUSH2 0x1366 DUP5 PUSH1 0x20 ADD CALLDATALOAD DUP3 DUP5 PUSH2 0x2562 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1375 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1380 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1395 JUMPI PUSH2 0x1395 DUP4 PUSH1 0x20 ADD CALLDATALOAD DUP3 DUP5 PUSH2 0x25EE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP2 PUSH2 0x13A7 PUSH1 0x20 DUP9 ADD DUP9 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x13B2 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE DUP4 MSTORE SWAP1 DUP2 KECCAK256 SWAP3 POP SWAP1 PUSH1 0x5 SWAP1 DUP3 SWAP1 PUSH2 0x13EF SWAP1 DUP9 ADD DUP9 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x13FA JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 SWAP1 POP PUSH2 0x1430 DUP3 DUP3 DUP7 PUSH2 0x267A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP7 ADD CALLDATALOAD SWAP1 DUP8 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH32 0x7D3AD1DCF03B9027064D1D9A474A69E0CECC31324C541D3EB9B5E6FA2F106C8D SWAP1 DUP9 SWAP1 PUSH2 0x1475 SWAP1 DUP13 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1480 JUMPI INVALID JUMPDEST PUSH2 0x148D PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1498 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x515E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x14C1 DUP2 PUSH2 0x2435 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0x14EB DUP5 DUP3 DUP6 PUSH2 0x274E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH4 0xFFFFFFFF DUP8 AND MUL OR SWAP1 SSTORE MLOAD DUP5 SWAP1 PUSH32 0x8EA2A7A959BD25F226B7B0A4393613F7FDCAA8404E8BAD96AA52DC1C14590167 SWAP1 PUSH2 0x1037 SWAP1 DUP5 SWAP1 DUP8 SWAP1 PUSH2 0x5188 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD SWAP3 SWAP4 PUSH4 0xFFFFFFFF SWAP3 DUP4 AND SWAP4 SWAP2 SWAP3 DUP3 DUP2 AND SWAP3 PUSH5 0x100000000 SWAP1 DIV AND SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1583 PUSH2 0x2461 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x15AF JUMPI PUSH2 0x15AF PUSH2 0x954 DUP3 PUSH2 0x2796 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x1605 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x15D3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x15FD JUMPI PUSH2 0x15F8 DUP3 DUP3 PUSH2 0x27DE JUMP JUMPDEST PUSH2 0x1605 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x15B2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x13 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1644 PUSH2 0x2461 JUMP JUMPDEST PUSH2 0x1605 DUP3 DUP3 PUSH2 0x27DE JUMP JUMPDEST PUSH2 0x1656 PUSH2 0x2253 JUMP JUMPDEST PUSH2 0x1663 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2972 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC6F3A427 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x169C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH2 0x16CA PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x15CC36F2 DUP3 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F7 SWAP3 SWAP2 SWAP1 PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1725 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x176A SWAP1 DUP4 PUSH2 0x2A03 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xEBEDB8B3C678666E7F36970BC8F57ABF6D8FA2E828C0DA91EA5B75BF68ED101A DUP4 PUSH1 0x40 MLOAD PUSH2 0x17A3 SWAP2 SWAP1 PUSH2 0x4F1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17C8 PUSH1 0x10 SLOAD PUSH1 0xC SLOAD PUSH2 0x2A59 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1194 DUP2 CALLER PUSH2 0x2A75 JUMP JUMPDEST PUSH20 0xDE6445484A8DCD9BF35FC95EB4E3990CC358822E SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180E PUSH2 0x4A70 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SLOAD SWAP2 DUP3 AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV AND PUSH1 0x60 DUP3 ADD MSTORE SWAP1 DUP1 PUSH2 0x1874 DUP6 PUSH2 0x2BE3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1887 DUP4 PUSH1 0x40 ADD MLOAD DUP4 DUP4 PUSH2 0x2CA0 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x189E PUSH2 0x17D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB72E717D DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18C9 SWAP2 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x191D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4DC2 JUMP JUMPDEST POP SWAP5 POP POP POP POP SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x1946 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCFA SWAP1 PUSH2 0x4FDC JUMP JUMPDEST DUP1 CALLER PUSH3 0xAAE60 PUSH3 0x186A0 PUSH2 0x1959 DUP7 PUSH2 0x2CDB JUMP JUMPDEST DUP6 PUSH1 0x0 SHL SWAP7 POP PUSH2 0x1967 PUSH2 0x4A70 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP3 MSTORE DUP6 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP9 AND DUP6 DUP8 ADD SWAP1 DUP2 MSTORE DUP8 DUP3 AND PUSH1 0x60 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x9 SWAP1 SWAP5 MSTORE SWAP3 DUP8 SWAP1 KECCAK256 DUP7 MLOAD DUP2 SLOAD SWAP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR DUP3 SSTORE SWAP5 MLOAD PUSH1 0x1 SWAP1 SWAP2 ADD DUP1 SLOAD SWAP3 MLOAD SWAP5 MLOAD DUP5 AND PUSH1 0x1 PUSH1 0xC0 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0xC0 SHL NOT SWAP6 SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT SWAP3 SWAP1 SWAP8 AND SWAP3 SWAP1 SWAP6 AND SWAP2 SWAP1 SWAP2 OR AND SWAP4 SWAP1 SWAP4 OR AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 MLOAD PUSH32 0xCEC6FC86EA644053F6EDFF1160DFE3FA5C61E7A5EF9F873F145BB03A0BD319E7 SWAP1 PUSH2 0x1A42 SWAP1 DUP11 SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH2 0x4F28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1A54 DUP9 DUP11 PUSH2 0xC44 JUMP JUMPDEST POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x16 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1AD0 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1AB2 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH20 0xA33744EE5D57D6D69944213D8E6AD80D64FDC58 SWAP1 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1B06 PUSH2 0x2253 JUMP JUMPDEST PUSH2 0x1B0E PUSH2 0x2D06 JUMP JUMPDEST PUSH2 0x1B16 PUSH2 0x2D19 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B20 PUSH2 0x4A2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x1B53 PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1B63 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xE08 JUMPI PUSH1 0x0 PUSH2 0x1B73 PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6B6DF5AA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BBF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BE3 SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST SWAP1 POP PUSH2 0x1C0D PUSH2 0x1C08 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 PUSH2 0x211F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2D44 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1C32 SWAP2 PUSH2 0x1C08 SWAP2 DUP5 SWAP2 AND PUSH2 0x211F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x13 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C64 PUSH2 0x4A70 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SLOAD SWAP2 DUP3 AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV AND PUSH1 0x60 DUP3 ADD MSTORE SWAP1 DUP1 PUSH2 0x1CCA DUP7 PUSH2 0x2BE3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1CDF DUP5 PUSH1 0x40 ADD MLOAD DUP5 DUP5 PUSH2 0x2CA0 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1CEE DUP8 DUP8 DUP4 DUP6 PUSH2 0x2D63 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1D1C JUMPI PUSH2 0x1D1C PUSH2 0x954 CALLER PUSH2 0x2E6F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x1D40 JUMPI POP PUSH2 0x1605 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D4B DUP3 PUSH2 0x1164 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH1 0x12 SLOAD DUP2 LT ISZERO PUSH2 0x1D6B JUMPI POP POP PUSH2 0x1605 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x15 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP2 SLOAD DUP1 PUSH2 0x1E0E JUMPI PUSH1 0x0 DUP1 PUSH2 0x1DA3 DUP9 DUP9 PUSH2 0x2EB7 JUMP JUMPDEST PUSH1 0x2 DUP8 ADD DUP3 SWAP1 SSTORE PUSH1 0x1 DUP8 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP7 ADD SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x1DC5 SWAP1 DUP3 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE PUSH1 0x1 DUP1 DUP6 ADD SLOAD PUSH2 0x1DD9 SWAP2 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SSTORE PUSH1 0x40 MLOAD DUP9 SWAP1 DUP8 SWAP1 PUSH32 0x14B098103235344975B17508C2391721CC9AC3F3FA2B56C7FF46F8480DFD074F SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMPDEST DUP1 DUP8 GT ISZERO PUSH2 0x1E3A JUMPI DUP7 DUP4 SSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0x1E34 SWAP1 DUP3 SWAP1 PUSH2 0x1E2E SWAP1 DUP11 PUSH2 0x2A59 JUMP JUMPDEST SWAP1 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH20 0x4FBB350052BCA5417566F188EB2EBCE5B19BC964 SWAP1 JUMP JUMPDEST PUSH2 0x1E73 PUSH2 0x4A2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x11E0 SWAP1 PUSH2 0x22E4 JUMP JUMPDEST PUSH2 0x1EA7 PUSH2 0x2461 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1EC5 JUMPI PUSH2 0x1EC0 PUSH2 0x954 PUSH2 0x2F25 JUMP JUMPDEST PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 CALLER SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 PUSH2 0x1F20 DUP3 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST SWAP1 POP PUSH2 0x1F2A PUSH2 0x4A00 JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x1F7F JUMPI POP POP POP PUSH2 0x1194 JUMP JUMPDEST PUSH2 0x1F87 PUSH2 0x4A4F JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x1FD5 JUMPI POP POP POP POP PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 ADD DUP2 SWAP1 SSTORE PUSH2 0x2008 DUP3 DUP5 PUSH2 0x2F43 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x201C DUP9 DUP5 DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x2FB2 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP8 DUP8 PUSH32 0xF1116B309178AA62DCB6BF8C3B8BC2321724907C7EBF52192D14C8CE3AA9194C DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x2053 SWAP3 SWAP2 SWAP1 PUSH2 0x4F60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 PUSH2 0x2067 DUP4 DUP4 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x2079 SWAP1 DUP3 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x80 DUP8 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP7 ADD MLOAD PUSH2 0x20A6 SWAP1 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP9 ADD DUP3 DUP2 MSTORE PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x15 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH2 0x16B0 JUMPI PUSH1 0x80 DUP7 ADD MLOAD DUP7 MLOAD DUP9 SWAP2 PUSH32 0xB463D19ECF455BE65365092CF8E1DB6934A0334CF8CD532DDF9964D01F36B5B2 SWAP2 PUSH2 0x20FE SWAP1 DUP3 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x210C SWAP3 SWAP2 SWAP1 PUSH2 0x4F60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2138 JUMPI PUSH2 0x2138 PUSH2 0x954 PUSH1 0x2 DUP6 DUP6 PUSH2 0x3266 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x30A5C005 PUSH1 0xE1 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH2 0x17C8 PUSH1 0x16 SLOAD PUSH2 0x219B PUSH2 0x1E53 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21C6 SWAP2 SWAP1 PUSH2 0x4E9A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E2E SWAP2 SWAP1 PUSH2 0x4DAA JUMP JUMPDEST TIMESTAMP PUSH1 0x0 PUSH2 0x2221 PUSH2 0x17AF JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2238 JUMPI PUSH2 0x2238 PUSH2 0x954 DUP3 DUP5 PUSH2 0x32D8 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2249 SWAP1 PUSH1 0x1 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0xB SSTORE POP POP PUSH1 0xC SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1B16 JUMPI PUSH2 0x1B16 PUSH2 0x954 CALLER PUSH2 0x331D JUMP JUMPDEST PUSH1 0x60 PUSH4 0xB9588E43 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2295 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 SUB DUP4 ADD DUP2 MSTORE SWAP4 DUP2 ADD SWAP1 MSTORE DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x22EC PUSH2 0x4A2F JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x1 PUSH1 0x40 SHL DUP4 DIV DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xB SLOAD SWAP1 SWAP2 DUP2 GT ISZERO PUSH2 0x2362 JUMPI PUSH2 0x2343 DUP2 PUSH2 0x3365 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2377 JUMPI DUP2 PUSH2 0x11E0 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x84C8B7C9 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x23CB PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x23D4 DUP4 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x23F9 PUSH2 0x1C08 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x211F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x241D SWAP2 PUSH2 0x1C08 SWAP2 AND DUP5 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x115F DUP4 DUP3 PUSH2 0x3384 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ PUSH2 0x1605 JUMPI PUSH2 0x1605 PUSH2 0x954 CALLER DUP5 PUSH2 0x33EE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1B16 JUMPI PUSH1 0x0 SLOAD PUSH2 0x1B16 SWAP1 PUSH2 0x954 SWAP1 CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x343B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x24A7 JUMPI PUSH2 0x24A7 PUSH2 0x954 PUSH2 0x348C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x24D4 JUMPI PUSH2 0x24D4 PUSH2 0x954 DUP3 PUSH2 0x34AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 DUP4 ADD DUP2 SSTORE DUP4 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD CALLER SWAP3 SWAP2 PUSH32 0x3147867C59D17E8FA9D522465651D44AAE0A9E38F902F3475B97E58072F0ED4C SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x256B DUP4 PUSH2 0x34F2 JUMP JUMPDEST PUSH2 0x2575 DUP4 DUP4 PUSH2 0x2A75 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x25A2 SWAP1 DUP3 PUSH2 0x351C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x25BA SWAP1 DUP3 PUSH2 0x351C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x115F PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 DUP3 PUSH2 0x351C JUMP JUMPDEST PUSH2 0x25F7 DUP4 PUSH2 0x34F2 JUMP JUMPDEST PUSH2 0x2601 DUP4 DUP4 PUSH2 0x2A75 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x262E SWAP1 DUP3 PUSH2 0x356A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2646 SWAP1 DUP3 PUSH2 0x356A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x115F PUSH32 0xABD6E7CB50984FF9C2F3E18A2660C3353DADF4E3291DEEB275DAE2CD1E44FE05 DUP3 PUSH2 0x356A JUMP JUMPDEST PUSH2 0x2684 DUP4 DUP4 PUSH2 0x35A0 JUMP JUMPDEST ISZERO PUSH2 0x268E JUMPI PUSH2 0x115F JUMP JUMPDEST PUSH2 0x2696 PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x269F DUP5 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x26A9 PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x26B2 DUP5 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP4 GT ISZERO PUSH2 0x26E3 JUMPI PUSH2 0x26E3 PUSH2 0x954 DUP5 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x237E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x26FF SWAP1 PUSH2 0x1C08 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 ADD MLOAD PUSH2 0x2725 SWAP2 PUSH2 0x1C08 SWAP2 AND DUP6 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x273D DUP6 DUP4 PUSH2 0x3384 JUMP JUMPDEST PUSH2 0x2747 DUP5 DUP3 PUSH2 0x3384 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH3 0xF4240 PUSH4 0xFFFFFFFF DUP3 AND GT ISZERO PUSH2 0x2773 JUMPI PUSH2 0x276E PUSH2 0x954 PUSH1 0x0 DUP6 DUP5 PUSH2 0x35A7 JUMP JUMPDEST PUSH2 0x115F JUMP JUMPDEST DUP2 PUSH4 0xFFFFFFFF AND DUP2 PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x115F JUMPI PUSH2 0x115F PUSH2 0x954 PUSH1 0x1 DUP6 DUP5 PUSH2 0x35A7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x75A88451 PUSH1 0xE1 SHL OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x280A JUMPI PUSH2 0x280A PUSH2 0x954 DUP4 PUSH2 0x2796 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 LT PUSH2 0x2825 JUMPI PUSH2 0x2825 PUSH2 0x954 DUP3 PUSH1 0x2 DUP1 SLOAD SWAP1 POP PUSH2 0x361F JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x283C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2884 JUMPI PUSH2 0x2884 PUSH2 0x954 PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x2869 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH2 0x3664 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x28B6 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x28DC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 DUP1 SLOAD DUP1 PUSH2 0x2915 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 DUP3 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE SWAP1 SWAP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x10 DUP6 SWAP1 SSTORE PUSH1 0x11 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP8 AND PUSH4 0xFFFFFFFF NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x12 DUP6 SWAP1 SSTORE PUSH1 0x13 DUP1 SLOAD DUP5 DUP5 AND PUSH5 0x100000000 MUL PUSH8 0xFFFFFFFF00000000 NOT SWAP5 DUP8 AND SWAP2 SWAP1 SWAP4 AND OR SWAP3 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x613157DBB0E920DEAB8AD6DDD3805E87CBF57344B9FE780F1764790EC7897542 SWAP1 PUSH2 0x29F4 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x5133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2A0B PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x2A14 DUP4 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A39 PUSH2 0x1C08 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2A59 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x241D SWAP2 PUSH2 0x1C08 SWAP2 AND DUP5 JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x11E0 JUMPI PUSH2 0x11E0 PUSH2 0x954 PUSH1 0x0 DUP7 DUP7 PUSH2 0x3266 JUMP JUMPDEST PUSH2 0x2A7E DUP3 PUSH2 0x36B5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A8D DUP4 DUP4 PUSH1 0x0 DUP1 PUSH2 0x2D63 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x2ABC SWAP1 PUSH2 0x22E4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD SWAP6 SWAP1 SWAP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP6 DUP7 AND MUL OR SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xA0 SHL SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 MUL OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x2BDA JUMPI PUSH2 0x2B51 DUP4 DUP3 PUSH2 0x3723 JUMP JUMPDEST PUSH2 0x2B59 PUSH2 0x1E53 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B86 SWAP3 SWAP2 SWAP1 PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2BB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BD8 SWAP2 SWAP1 PUSH2 0x4CA9 JUMP JUMPDEST POP JUMPDEST PUSH2 0x115F DUP4 PUSH2 0x375F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2BFE PUSH1 0x1 PUSH1 0xB SLOAD PUSH2 0x211F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2C08 PUSH2 0x4A4F JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP5 MSTORE DUP3 SLOAD DUP3 MSTORE PUSH1 0x1 DUP1 DUP5 ADD SLOAD DUP4 DUP8 ADD MSTORE PUSH1 0x2 SWAP4 DUP5 ADD SLOAD DUP4 DUP7 ADD MSTORE DUP8 DUP8 MSTORE PUSH1 0x15 DUP7 MSTORE SWAP6 DUP5 SWAP1 KECCAK256 DUP5 MLOAD PUSH1 0xA0 DUP2 ADD DUP7 MSTORE DUP2 SLOAD DUP2 MSTORE SWAP7 DUP2 ADD SLOAD SWAP6 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP2 DUP5 ADD SLOAD SWAP3 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP4 ADD SLOAD SWAP1 DUP5 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP1 PUSH2 0x2C90 SWAP1 DUP3 SWAP1 PUSH2 0x2F43 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH2 0x2CB0 JUMPI DUP4 SWAP2 POP PUSH2 0x2CD3 JUMP JUMPDEST PUSH2 0x2CC4 PUSH4 0xFFFFFFFF DUP7 AND PUSH3 0xF4240 DUP7 PUSH2 0x376C JUMP JUMPDEST SWAP2 POP PUSH2 0x2CD0 DUP5 DUP4 PUSH2 0x211F JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1194 JUMPI PUSH2 0x1194 PUSH2 0x954 DUP3 PUSH1 0x0 PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x2D0E PUSH2 0x37D6 JUMP JUMPDEST TIMESTAMP PUSH1 0xC SSTORE PUSH1 0x1 PUSH1 0xB SSTORE JUMP JUMPDEST PUSH2 0x2D21 PUSH2 0x37EB JUMP JUMPDEST PUSH3 0x127500 PUSH3 0xDBBA0 PUSH9 0x56BC75E2D63100000 PUSH1 0x2 PUSH1 0x3 PUSH2 0x2747 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2972 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH2 0xE08 PUSH2 0x954 PUSH1 0x2 DUP5 PUSH2 0x3850 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2D71 PUSH2 0x4A2F JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x1 PUSH1 0x40 SHL DUP4 DIV DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV SWAP1 SWAP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 EQ ISZERO PUSH2 0x2DE9 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x2E67 JUMP JUMPDEST PUSH2 0x2DF5 DUP2 DUP4 DUP8 DUP8 PUSH2 0x38B5 JUMP JUMPDEST DUP2 MLOAD SWAP1 SWAP4 POP PUSH1 0x0 SWAP1 PUSH2 0x2E11 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH2 0x2A59 JUMP JUMPDEST SWAP1 POP PUSH2 0x2E43 PUSH2 0x2E3C DUP10 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP6 PUSH2 0x392C JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x2A59 JUMP JUMPDEST SWAP4 POP PUSH2 0x2E61 PUSH2 0x2E3C DUP10 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP5 DUP8 PUSH2 0x392C JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x30F65C01 PUSH1 0xE1 SHL OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x2EDD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH2 0x1E6B JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH2 0x2EF6 DUP5 DUP3 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x11 SLOAD SWAP1 SWAP4 POP PUSH2 0x2F1B SWAP1 PUSH2 0x2F14 SWAP1 PUSH4 0xFFFFFFFF AND PUSH3 0xF4240 DUP7 PUSH2 0x39AB JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2A59 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x734F6E1F PUSH1 0xE1 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2F51 JUMPI PUSH2 0x11E3 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x13 SLOAD PUSH2 0x2F87 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH5 0x100000000 SWAP1 DIV AND PUSH2 0x39BB JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD DUP4 MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x2F9D SWAP2 PUSH2 0x211F JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x2FAB JUMPI DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2FBD PUSH2 0x4A70 JUMP JUMPDEST POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x80 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SLOAD SWAP2 DUP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP4 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP2 DIV AND PUSH1 0x60 DUP3 ADD MSTORE SWAP1 PUSH2 0x3025 SWAP1 DUP7 DUP7 PUSH2 0x2CA0 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP DUP3 ISZERO PUSH2 0x3242 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x30E2 JUMPI PUSH2 0x305A PUSH2 0x1E53 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x308A SWAP2 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30DC SWAP2 SWAP1 PUSH2 0x4CA9 JUMP JUMPDEST POP PUSH2 0x3242 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3114 PUSH3 0xF4240 PUSH4 0xFFFFFFFF AND PUSH2 0x310E DUP5 PUSH1 0x60 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP8 PUSH2 0x3A7D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x3AAE JUMP JUMPDEST SWAP1 POP PUSH2 0x311E PUSH2 0x1E53 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP4 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x314F SWAP3 SWAP2 SWAP1 PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x317D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31A1 SWAP2 SWAP1 PUSH2 0x4CA9 JUMP JUMPDEST POP PUSH2 0x31AA PUSH2 0x1E53 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x31D0 DUP5 DUP9 PUSH2 0x211F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x31ED SWAP3 SWAP2 SWAP1 PUSH2 0x4EAE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x321B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x323F SWAP2 SWAP1 PUSH2 0x4CA9 JUMP JUMPDEST POP POP JUMPDEST DUP2 ISZERO PUSH2 0x325D JUMPI PUSH2 0x3252 DUP7 DUP4 PUSH2 0x3AD8 JUMP JUMPDEST PUSH2 0x325D DUP7 DUP4 DUP7 PUSH2 0x3B0D JUMP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3286 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA6BCDE47 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xB65A25B9 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH2 0xE08 PUSH2 0x954 PUSH1 0x1 DUP5 PUSH2 0x3850 JUMP JUMPDEST DUP1 MLOAD DUP3 SLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x20 SWAP1 SWAP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 SHL NOT SWAP2 SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP5 AND PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP3 SWAP1 SWAP3 AND OR AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x82DED785 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x1DE45AD1 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x15D953F9 PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x6F0B78D PUSH1 0xE5 SHL OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1194 JUMPI PUSH2 0x1194 PUSH2 0x954 DUP3 PUSH1 0x0 PUSH2 0x3790 JUMP JUMPDEST PUSH2 0x3524 PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x352D DUP4 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x3552 PUSH2 0x1C08 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x211F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x115F DUP4 DUP3 PUSH2 0x3384 JUMP JUMPDEST PUSH2 0x3572 PUSH2 0x4A2F JUMP JUMPDEST PUSH2 0x357B DUP4 PUSH2 0x22E4 JUMP JUMPDEST SWAP1 POP PUSH2 0x3552 PUSH2 0x1C08 DUP4 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x2A59 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST EQ PUSH1 0x1 AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x22DF9597 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x35C7 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xE9F83771 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x140A84DB PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 SWAP1 PUSH2 0x36C6 SWAP1 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST SWAP1 POP PUSH2 0x36D0 PUSH2 0x4A4F JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x115F JUMPI PUSH2 0x115F PUSH2 0x954 DUP5 DUP5 PUSH2 0x3BF6 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x373C SWAP1 DUP3 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x16 SLOAD PUSH2 0x3758 SWAP1 DUP3 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x16 SSTORE POP POP JUMP JUMPDEST PUSH2 0x1194 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH2 0x3B0D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E67 DUP4 PUSH2 0x310E PUSH2 0x3780 DUP3 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST PUSH2 0x378A DUP9 DUP8 PUSH2 0x3A7D JUMP JUMPDEST SWAP1 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x44 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x9AE94F01 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xC SLOAD ISZERO PUSH2 0x1B16 JUMPI PUSH2 0x1B16 PUSH2 0x954 PUSH1 0x0 PUSH2 0x3C3B JUMP JUMPDEST PUSH1 0x10 SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3803 JUMPI POP PUSH1 0x11 SLOAD PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3810 JUMPI POP PUSH1 0x12 SLOAD ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3823 JUMPI POP PUSH1 0x13 SLOAD PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x383E JUMPI POP PUSH1 0x13 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1B16 JUMPI PUSH2 0x1B16 PUSH2 0x954 PUSH1 0x1 PUSH2 0x3C3B JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x386F JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP6 ADD DUP2 MSTORE SWAP2 DUP2 ADD SWAP1 MSTORE SWAP2 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 MSTORE SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x38C2 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x38CF JUMPI POP PUSH1 0x0 PUSH2 0x2E67 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38DC DUP6 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT ISZERO PUSH2 0x38F7 JUMPI DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x38FD JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP DUP1 PUSH2 0x3917 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x2E67 JUMP JUMPDEST PUSH2 0x3922 DUP5 DUP5 DUP4 PUSH2 0x39AB JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x393A JUMPI POP DUP2 DUP4 EQ JUMPDEST ISZERO PUSH2 0x3947 JUMPI POP PUSH1 0x0 PUSH2 0x2E67 JUMP JUMPDEST DUP2 DUP4 LT PUSH2 0x3966 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCFA SWAP1 PUSH2 0x5013 JUMP JUMPDEST PUSH2 0x396E PUSH2 0x4A97 JUMP JUMPDEST PUSH2 0x3978 DUP7 DUP6 PUSH2 0x3C9E JUMP JUMPDEST SWAP1 POP PUSH2 0x3982 PUSH2 0x4A97 JUMP JUMPDEST PUSH2 0x398C DUP8 DUP6 PUSH2 0x3C9E JUMP JUMPDEST SWAP1 POP PUSH2 0x1CEE DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP11 PUSH2 0x3DB5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E67 DUP4 PUSH2 0x310E DUP7 DUP6 PUSH2 0x3A7D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x39C8 DUP9 DUP9 PUSH2 0x3E23 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x39D6 DUP8 DUP8 PUSH2 0x3E23 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x39E3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x39F3 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x1CEE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT ISZERO PUSH2 0x3A0C JUMPI PUSH2 0x3A07 DUP3 DUP5 PUSH2 0x3E69 JUMP JUMPDEST PUSH2 0x3A16 JUMP JUMPDEST PUSH2 0x3A16 DUP4 DUP4 PUSH2 0x3E69 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A3F PUSH2 0x3A3A PUSH2 0x3A27 DUP4 PUSH2 0x3E7C JUMP JUMPDEST DUP9 PUSH4 0xFFFFFFFF AND DUP9 PUSH4 0xFFFFFFFF AND PUSH2 0x42D1 JUMP JUMPDEST PUSH2 0x42E0 JUMP JUMPDEST SWAP1 POP DUP2 DUP4 SGT ISZERO PUSH2 0x3A58 JUMPI PUSH2 0x3A53 DUP3 DUP3 PUSH2 0x3E69 JUMP JUMPDEST PUSH2 0x3A62 JUMP JUMPDEST PUSH2 0x3A62 DUP3 DUP3 PUSH2 0x4746 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A6E DUP2 DUP13 PUSH2 0x4766 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3A8C JUMPI POP PUSH1 0x0 PUSH2 0x11E3 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x3A99 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x11E0 JUMPI PUSH2 0x11E0 PUSH2 0x954 PUSH1 0x1 DUP7 DUP7 PUSH2 0x3266 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3AC4 JUMPI PUSH2 0x3AC4 PUSH2 0x954 PUSH1 0x3 DUP6 DUP6 PUSH2 0x3266 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x3ACF JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3AF1 SWAP1 DUP3 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x16 SLOAD PUSH2 0x3758 SWAP1 DUP3 PUSH2 0x2A59 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xB SLOAD DUP1 DUP3 EQ ISZERO PUSH2 0x3B2E JUMPI POP POP PUSH2 0x115F JUMP JUMPDEST PUSH2 0x3B36 PUSH2 0x4A97 JUMP JUMPDEST POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x3B6D PUSH2 0x4A97 JUMP JUMPDEST PUSH2 0x3B76 DUP3 PUSH2 0x47A8 JUMP JUMPDEST ISZERO PUSH2 0x3BAF JUMPI PUSH2 0x3B8F DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP9 DUP9 PUSH2 0x47B1 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP2 DUP4 MSTORE PUSH2 0x3BA3 SWAP2 SWAP1 PUSH2 0x4801 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE PUSH2 0x3BBA JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP6 DUP2 MSTORE JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP4 DUP3 ADD MLOAD PUSH1 0x1 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP8 DUP2 MSTORE PUSH1 0xE SWAP1 SWAP8 MSTORE SWAP1 SWAP6 KECCAK256 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x5CAA0B05 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xB02D773 PUSH1 0xE0 SHL DUP3 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3C51 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3CA6 PUSH2 0x4A97 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x3CDE DUP2 PUSH2 0x47A8 JUMP JUMPDEST ISZERO PUSH2 0x3CE8 JUMPI PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CF5 DUP4 PUSH1 0x1 PUSH2 0x211F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP3 POP SWAP1 POP PUSH2 0x3D30 DUP3 PUSH2 0x47A8 JUMP JUMPDEST ISZERO PUSH2 0x3D3B JUMPI POP PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 DUP2 LT ISZERO PUSH2 0x3D97 JUMPI PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP3 POP PUSH2 0x3D8B DUP4 PUSH2 0x47A8 JUMP JUMPDEST ISZERO PUSH2 0x3D97 JUMPI POP POP PUSH2 0x11E3 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3DC4 JUMPI POP PUSH1 0x0 PUSH2 0x3E1A JUMP JUMPDEST DUP4 PUSH2 0x3DDE JUMPI PUSH2 0x3DD7 DUP6 PUSH2 0x310E DUP5 DUP10 PUSH2 0x3A7D JUMP JUMPDEST SWAP1 POP PUSH2 0x3E1A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DF7 PUSH2 0x3DED DUP7 DUP9 PUSH2 0x3A7D JUMP JUMPDEST PUSH2 0x1E2E DUP10 DUP8 PUSH2 0x3A7D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E05 DUP3 DUP7 PUSH2 0x3AAE JUMP JUMPDEST SWAP1 POP PUSH2 0x3E15 DUP8 PUSH2 0x310E DUP7 DUP5 PUSH2 0x3A7D JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x3E3B JUMPI PUSH2 0x3E3B PUSH2 0x954 PUSH1 0x1 DUP6 PUSH2 0x481E JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x3E52 JUMPI PUSH2 0x3E52 PUSH2 0x954 PUSH1 0x1 DUP5 PUSH2 0x481E JUMP JUMPDEST PUSH2 0x11E0 PUSH2 0x3E63 DUP5 PUSH1 0x1 PUSH1 0x7F SHL PUSH2 0x4885 JUMP JUMPDEST DUP4 PUSH2 0x48D8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11E0 PUSH2 0x3E63 DUP5 PUSH1 0x1 PUSH1 0x7F SHL PUSH2 0x4885 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x7F SHL DUP3 SGT ISZERO PUSH2 0x3E98 JUMPI PUSH2 0x3E98 PUSH2 0x954 PUSH1 0x1 DUP5 PUSH2 0x491F JUMP JUMPDEST PUSH1 0x0 DUP3 SGT PUSH2 0x3EAE JUMPI PUSH2 0x3EAE PUSH2 0x954 PUSH1 0x0 DUP5 PUSH2 0x491F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL DUP3 EQ ISZERO PUSH2 0x3EC2 JUMPI POP PUSH1 0x0 PUSH2 0xE08 JUMP JUMPDEST PUSH5 0x733048C5A DUP3 SGT PUSH2 0x3EDE JUMPI POP PUSH1 0x1 PUSH2 0x1FF PUSH1 0x7C SHL SUB NOT PUSH2 0xE08 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH11 0x1C8464F76164760000000 DUP6 SGT PUSH2 0x3F23 JUMPI PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH11 0x1C8464F76164760000000 PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH13 0xF1AADDD7742E90000000000000 DUP6 SGT PUSH2 0x3F67 JUMPI PUSH17 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH13 0xF1AADDD7742E90000000000000 PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x15FC21041027AF PUSH1 0x3F SHL DUP6 SGT PUSH2 0x3FA5 JUMPI PUSH17 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x15FC21041027AF PUSH1 0x3F SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x960AADC109E7B PUSH1 0x46 SHL DUP6 SGT PUSH2 0x3FE3 JUMPI PUSH17 0x1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x960AADC109E7B PUSH1 0x46 SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x454AAA8EFE073 PUSH1 0x4A SHL DUP6 SGT PUSH2 0x4020 JUMPI PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x454AAA8EFE073 PUSH1 0x4A SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x2F16AC6C59DE7 PUSH1 0x4C SHL DUP6 SGT PUSH2 0x4054 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x2F16AC6C59DE7 PUSH1 0x4C SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x9B4597E37CB05 PUSH1 0x4B SHL DUP6 SGT PUSH2 0x4091 JUMPI PUSH16 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x9B4597E37CB05 PUSH1 0x4B SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH7 0x18EBEF9EAC820B PUSH1 0x4A SHL DUP6 SGT PUSH2 0x40CE JUMPI PUSH16 0x1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH7 0x18EBEF9EAC820B PUSH1 0x4A SHL PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP6 SGT PUSH2 0x4117 JUMPI PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 ADD SWAP3 PUSH16 0x70F5A893B608861E1F58934F97AEA57D PUSH1 0x1 PUSH1 0x7F SHL DUP7 MUL SDIV SWAP5 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP6 ADD SWAP3 POP DUP3 SWAP2 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP1 MUL SDIV SWAP1 POP PUSH1 0x1 PUSH1 0x80 SHL DUP4 DUP2 SUB DUP4 MUL SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x4150 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x1 PUSH1 0x81 SHL DUP4 PUSH16 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA SUB DUP4 MUL DUP2 PUSH2 0x4174 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x4188 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x3 PUSH1 0x80 SHL DUP4 PUSH16 0x99999999999999999999999999999999 SUB DUP4 MUL DUP2 PUSH2 0x41AC JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x41C0 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x1 PUSH1 0x82 SHL DUP4 PUSH16 0x92492492492492492492492492492492 SUB DUP4 MUL DUP2 PUSH2 0x41E4 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x41F8 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x5 PUSH1 0x80 SHL DUP4 PUSH16 0x8E38E38E38E38E38E38E38E38E38E38E SUB DUP4 MUL DUP2 PUSH2 0x421C JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x4230 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x3 PUSH1 0x81 SHL DUP4 PUSH16 0x8BA2E8BA2E8BA2E8BA2E8BA2E8BA2E8B SUB DUP4 MUL DUP2 PUSH2 0x4254 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x4268 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x7 PUSH1 0x80 SHL DUP4 PUSH16 0x89D89D89D89D89D89D89D89D89D89D89 SUB DUP4 MUL DUP2 PUSH2 0x428C JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP PUSH1 0x1 PUSH1 0x7F SHL DUP2 DUP4 MUL DUP2 PUSH2 0x42A0 JUMPI INVALID JUMPDEST SDIV SWAP2 POP PUSH1 0x1 PUSH1 0x83 SHL DUP4 PUSH16 0x88888888888888888888888888888888 SUB DUP4 MUL DUP2 PUSH2 0x42C4 JUMPI INVALID JUMPDEST SDIV DUP5 ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E67 PUSH2 0x3E63 DUP6 DUP6 PUSH2 0x4885 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1FF PUSH1 0x7C SHL SUB NOT DUP3 SLT ISZERO PUSH2 0x42FB JUMPI POP PUSH1 0x0 PUSH2 0xE08 JUMP JUMPDEST DUP2 PUSH2 0x430B JUMPI POP PUSH1 0x1 PUSH1 0x7F SHL PUSH2 0xE08 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x4322 JUMPI PUSH2 0x4322 PUSH2 0x954 PUSH1 0x1 DUP5 PUSH2 0x491F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL PUSH1 0x1 PUSH1 0x7C SHL DUP4 SMOD DUP1 DUP1 MUL DUP3 SWAP1 SDIV PUSH8 0x10E1B3BE415A0000 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP2 DUP4 MUL SDIV SWAP1 POP DUP1 PUSH8 0x5A0913F6B1E0000 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x436A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH8 0x168244FDAC78000 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x438B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x4807432BC18000 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x43AB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0xC0135DCA04000 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x43CB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH7 0x1B707B1CDC000 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x43EB JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x36E0F639B800 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x440A JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH6 0x618FEE9F800 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4429 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x9C197DCC00 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4447 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0xE30DCE400 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4465 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH5 0x12EBD1300 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4483 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x17499F00 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x44A0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH4 0x1A9D480 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x44BD JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C6380 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x44D9 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH3 0x1C638 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x44F5 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x1AB8 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4510 JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH2 0x17C MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x452B JUMPI INVALID JUMPDEST SDIV SWAP1 POP DUP1 PUSH1 0x14 MUL DUP4 ADD SWAP3 POP PUSH1 0x1 PUSH1 0x7F SHL DUP3 DUP3 MUL DUP2 PUSH2 0x4545 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP6 SWAP1 SWAP6 SUB SWAP5 PUSH8 0x21C3677C82B40000 SWAP2 SWAP1 SDIV SWAP4 DUP5 ADD SDIV DUP3 ADD PUSH1 0x1 PUSH1 0x7F SHL ADD SWAP3 SWAP1 POP PUSH1 0x1 PUSH1 0x84 SHL DUP5 AND ISZERO PUSH2 0x459B JUMPI PUSH19 0x43CBAF42A000812488FC5C220AD7B97BF6E99E PUSH13 0xF1AADDD7742E56D32FB9F99744 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x83 SHL DUP5 AND ISZERO PUSH2 0x45D0 JUMPI PUSH18 0x5D27A9F51C31B7C2F8038212A0574779991 PUSH15 0xAFE10820813D65DFE6A33C07F738F DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x82 SHL DUP5 AND ISZERO PUSH2 0x4605 JUMPI PUSH17 0x1B4C902E273A58678D6D3BFDB93DB96D02 PUSH16 0x2582AB704279E8EFD15E0265855C47A DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x81 SHL DUP5 AND ISZERO PUSH2 0x463A JUMPI PUSH17 0x3B1CC971A9BB5B9867477440D6D157750 PUSH16 0x1152AAA3BF81CB9FDB76EAE12D029571 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP5 AND ISZERO PUSH2 0x466F JUMPI PUSH17 0x15BF0A8B1457695355FB8AC404E7A79E3 PUSH16 0x2F16AC6C59DE6F8D5D6F63C1482A7C86 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL DUP5 AND ISZERO PUSH2 0x46A3 JUMPI PUSH16 0xD3094C70F034DE4B96FF7D5B6F99FCD8 PUSH16 0x4DA2CBF1BE5827F9EB3AD1AA9866EBB3 DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x7E SHL DUP5 AND ISZERO PUSH2 0x46D7 JUMPI PUSH16 0xA45AF1E1F40C333B3DE1DB4DD55F29A7 PUSH16 0x63AFBE7AB2082BA1A0AE5E4EB1B479DC DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x7D SHL DUP5 AND ISZERO PUSH2 0x470B JUMPI PUSH16 0x910B022DB7AE67CE76B441C27035C6A1 PUSH16 0x70F5A893B608861E1F58934F97AEA57D DUP5 MUL SDIV SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x7C SHL DUP5 AND ISZERO PUSH2 0x473F JUMPI PUSH16 0x88415ABBE9A76BEAD8D00CF112E4D4A8 PUSH16 0x783EAFEF1C0A8F3978C7F81824D62EBF DUP5 MUL SDIV SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x7F SHL PUSH2 0x4757 DUP5 DUP5 PUSH2 0x4885 JUMP JUMPDEST DUP2 PUSH2 0x475E JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x477E JUMPI PUSH2 0x477E PUSH2 0x954 PUSH1 0x1 DUP5 PUSH2 0x481E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x478A DUP5 DUP5 PUSH2 0x4885 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x479E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x7F SHR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 ADD MLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH2 0x47C3 JUMPI POP DUP3 SWAP1 POP DUP2 PUSH2 0x47F8 JUMP JUMPDEST DUP4 PUSH2 0x47D2 JUMPI POP DUP5 SWAP1 POP DUP4 PUSH2 0x47F8 JUMP JUMPDEST PUSH2 0x47E9 PUSH2 0x47DF DUP6 DUP8 PUSH2 0x3A7D JUMP JUMPDEST PUSH2 0x378A DUP9 DUP7 PUSH2 0x3A7D JUMP JUMPDEST SWAP2 POP PUSH2 0x47F5 DUP6 DUP5 PUSH2 0x3A7D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4813 DUP5 DUP5 PUSH1 0x1 PUSH1 0x7F SHL PUSH2 0x4935 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xBD79545F PUSH1 0xE0 SHL DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4834 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x4892 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x489F JUMPI POP PUSH1 0x0 PUSH2 0x11E3 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x48AD JUMPI INVALID JUMPDEST SDIV EQ ISZERO DUP1 PUSH2 0x48C4 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x48C0 JUMPI INVALID JUMPDEST SDIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x11E3 JUMPI PUSH2 0x11E3 PUSH2 0x954 PUSH1 0x1 DUP6 DUP6 PUSH2 0x4991 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x48EE JUMPI PUSH2 0x48EE PUSH2 0x954 PUSH1 0x2 DUP6 DUP6 PUSH2 0x4991 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF SHL DUP4 EQ DUP1 ISZERO PUSH2 0x4902 JUMPI POP DUP2 PUSH1 0x0 NOT EQ JUMPDEST ISZERO PUSH2 0x4916 JUMPI PUSH2 0x4916 PUSH2 0x954 PUSH1 0x3 DUP6 DUP6 PUSH2 0x4991 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x475E JUMPI INVALID JUMPDEST PUSH1 0x60 PUSH4 0xED2F26A1 PUSH1 0xE0 SHL DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4834 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP6 GT DUP1 PUSH2 0x4945 JUMPI POP DUP3 DUP5 GT JUMPDEST ISZERO PUSH2 0x4988 JUMPI PUSH1 0x0 DUP5 DUP7 LT ISZERO PUSH2 0x495A JUMPI DUP5 PUSH2 0x495C JUMP JUMPDEST DUP6 JUMPDEST SWAP1 POP PUSH2 0x4968 DUP2 DUP6 PUSH2 0x3AAE JUMP JUMPDEST SWAP1 POP PUSH2 0x4974 DUP7 DUP3 PUSH2 0x3AAE JUMP JUMPDEST SWAP3 POP PUSH2 0x4980 DUP6 DUP3 PUSH2 0x3AAE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2CD3 JUMP JUMPDEST POP SWAP3 SWAP4 SWAP2 SWAP3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x8C12DFE7 PUSH1 0xE0 SHL DUP5 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x49A7 JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4AD0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4AE4 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x20 ADD DUP3 DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4B02 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE SWAP3 POP DUP3 DUP5 DUP4 ADD PUSH1 0x20 ADD DUP7 LT ISZERO PUSH2 0x4B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B2E DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x519F JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2362 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B6D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11E0 DUP2 PUSH2 0x5279 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B89 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11E0 DUP2 PUSH2 0x5279 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BA6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4BB1 DUP2 PUSH2 0x5279 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BD1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4BDC DUP2 PUSH2 0x5279 JUMP JUMPDEST SWAP2 POP PUSH2 0x4BEA PUSH1 0x20 DUP5 ADD PUSH2 0x4AB1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4C0B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 MLOAD PUSH2 0x4C16 DUP2 PUSH2 0x5279 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MLOAD SWAP1 SWAP7 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4C32 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4C3E DUP11 DUP4 DUP12 ADD PUSH2 0x4AC0 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4C53 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x4C60 DUP10 DUP3 DUP11 ADD PUSH2 0x4AC0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD MLOAD SWAP3 POP PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x4C78 DUP2 PUSH2 0x5279 JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x4C89 DUP2 PUSH2 0x5279 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BA6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CBA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x11E0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CDA JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4CF3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4D05 DUP2 PUSH2 0x5279 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4D22 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4D43 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x4BEA PUSH1 0x20 DUP5 ADD PUSH2 0x4B48 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D64 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11E0 DUP3 PUSH2 0x4AB1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4D81 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4D8B DUP6 DUP6 PUSH2 0x4B37 JUMP JUMPDEST SWAP3 POP PUSH2 0x4D9A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x4B37 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4DBB JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4DDA JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 MLOAD SWAP6 POP PUSH1 0x20 DUP8 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4DF7 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x4E03 DUP11 DUP4 DUP12 ADD PUSH2 0x4AC0 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4C53 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4E2F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x4E3F PUSH1 0x20 DUP8 ADD PUSH2 0x4B48 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH2 0x4E54 PUSH1 0x60 DUP8 ADD PUSH2 0x4B48 JUMP JUMPDEST SWAP2 POP PUSH2 0x4E62 PUSH1 0x80 DUP8 ADD PUSH2 0x4B48 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4E86 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x519F JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4F08 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4EE3 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x11E0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4E6E JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F4E5F524547495354455245445F504F4F4C5F49445F4552524F5200000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x504F4F4C5F544F5F4A4F494E5F4E4F545F53454C465F4552524F520000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F4E5F524547495354455245445F52425F504F4F4C5F4552524F5200000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x10D497D25395115495905317D2539590531251 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH4 0xFFFFFFFF SWAP4 DUP5 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 AND PUSH1 0x60 DUP5 ADD MSTORE AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0xFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x51BA JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x51A2 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x51C9 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x51E5 JUMPI PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x4 DUP2 DUP3 RETURNDATACOPY PUSH4 0x8C379A0 PUSH2 0x51F9 DUP3 MLOAD PUSH2 0x51CF JUMP JUMPDEST EQ PUSH2 0x5203 JUMPI PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x3 NOT ADD PUSH1 0x4 DUP3 RETURNDATACOPY DUP1 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x5232 JUMPI POP POP POP POP PUSH2 0xC41 JUMP JUMPDEST DUP3 DUP5 ADD SWAP3 POP DUP3 MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x524C JUMPI POP POP POP POP PUSH2 0xC41 JUMP JUMPDEST POP RETURNDATASIZE DUP4 ADD PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x5264 JUMPI POP POP POP PUSH2 0xC41 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x20 ADD PUSH1 0x40 MSTORE SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1194 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0xC8 0x1F 0x2C SWAP6 PUSH20 0xF75AA8FF37AF1084D19894B3C8405E87A47E2A8A PUSH13 0x641012794464736F6C63430007 DIV STOP CALLER ",
				"sourceMap": "906:565:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1348:2364:32;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4901:809:29;;;;;;;;;;-1:-1:-1;4901:809:29;;;;;:::i;:::-;;:::i;:::-;;2877:169:26;;;;;;;;;;-1:-1:-1;2877:169:26;;;;;:::i;:::-;;:::i;1375:396:23:-;;;;;;;;;;-1:-1:-1;1375:396:23;;;;;:::i;:::-;;:::i;3863:84:11:-;;;;;;;;;;-1:-1:-1;3863:84:11;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;1886:1193:25:-;;;;;;;;;;-1:-1:-1;1886:1193:25;;;;;:::i;:::-;;:::i;1912:399:23:-;;;;;;;;;;-1:-1:-1;1912:399:23;;;;;:::i;:::-;;:::i;4186:75:11:-;;;;;;;;;;-1:-1:-1;4186:75:11;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;3400:390:29:-;;;;;;;;;;-1:-1:-1;3400:390:29;;;;;:::i;:::-;;:::i;3775:262:26:-;;;;;;;;;;-1:-1:-1;3775:262:26;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1588:148:35:-;;;;;;;;;;-1:-1:-1;1588:148:35;;;;;:::i;:::-;;:::i;2385:351:26:-;;;;;;;;;;-1:-1:-1;2385:351:26;;;;;:::i;:::-;;:::i;3959:211:24:-;;;;;;;;;;-1:-1:-1;3959:211:24;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1383:28:35:-;;;;;;;;;;-1:-1:-1;1383:28:35;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5793:169:29:-;;;;;;;;;;-1:-1:-1;5793:169:29;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3013:42:11:-;;;;;;;;;;-1:-1:-1;3013:42:11;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2480:45::-;;;;;;;;;;;;;:::i;3416:1484:25:-;;;;;;;;;;-1:-1:-1;3416:1484:25;;;;;:::i;:::-;;:::i;4042:646:29:-;;;;;;;;;;-1:-1:-1;4042:646:29;;;;;:::i;:::-;;:::i;2813:636:33:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;3133:37:11:-;;;;;;;;;;;;;:::i;1850:462:35:-;;;;;;;;;;-1:-1:-1;1850:462:35;;;;;:::i;:::-;;:::i;2409:27:11:-;;;;;;;;;;;;;:::i;2010:57::-;;;;;;;;;;-1:-1:-1;2010:57:11;;;;;:::i;:::-;;:::i;3451:39::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;830:20:46:-;;;;;;;;;;;;;:::i;2485:212:35:-;;;;;;;;;;-1:-1:-1;2485:212:35;;;;;:::i;:::-;;:::i;1608:692:33:-;;;;;;;;;;-1:-1:-1;1608:692:33;;;;;:::i;:::-;;:::i;3365:31:11:-;;;;;;;;;;;;;:::i;1130:484:25:-;;;;;;;;;;-1:-1:-1;1130:484:25;;;;;:::i;:::-;;:::i;1325:212:34:-;;;;;;;;;;;;;:::i;1198:157:30:-;;;;;;;;;;-1:-1:-1;1198:157:30;;;;;:::i;:::-;;:::i;2462:241:10:-;;;;;;;;;;;;;:::i;1176:43:35:-;;;;;;;;;;-1:-1:-1;1176:43:35;;;;;:::i;:::-;;:::i;1528:759:30:-;;;;;;;;;;-1:-1:-1;1528:759:30;;;;;:::i;:::-;;:::i;1683:1534:29:-;;;;;;;;;;-1:-1:-1;1683:1534:29;;;;;:::i;:::-;;:::i;2325:51:11:-;;;;;;;;;;-1:-1:-1;2325:51:11;;;;;:::i;:::-;;:::i;4356:40::-;;;;;;;;;;;;;:::i;2794:155:35:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;2056:206:10:-;;;;;;;;;;;;;:::i;3248:40:11:-;;;;;;;;;;;;;:::i;1195:274:7:-;;;;;;;;;;;;;:::i;1297:872:26:-;;;;;;;;;;-1:-1:-1;1297:872:26;;;;;:::i;:::-;;:::i;3547:41:11:-;;;;;;;;;;;;;:::i;2511:776:30:-;;;;;;;;;;-1:-1:-1;2511:776:30;;;;;:::i;:::-;;:::i;1442:2369:24:-;;;;;;:::i;:::-;;:::i;1094:30:11:-;;;;;;;;;;;;;:::i;2899:220:10:-;;;;;;;;;;;;;:::i;3272:293:26:-;;;;;;;;;;-1:-1:-1;3272:293:26;;;;;:::i;:::-;;:::i;1085:346:46:-;;;;;;;;;;-1:-1:-1;1085:346:46;;;;;:::i;:::-;;:::i;4160:2437:32:-;;;;;;;;;;-1:-1:-1;4160:2437:32;;;;;:::i;:::-;;:::i;1348:2364::-;1466:12;;1419:7;;;1508:24;1466:12;1530:1;1508:21;:24::i;:::-;1609:39;1651:33;;;:22;:33;;;;;:52;;;1488:44;;-1:-1:-1;1717:36:32;;1713:273;;1769:206;1808:153;1881:9;1912:31;1808:51;:153::i;:::-;1769:21;:206::i;:::-;2397:1;2373:13;:26;2369:425;;;2433:16;:14;:16::i;:::-;-1:-1:-1;;;;;2433:23:32;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2419:54:32;;:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2419:56:32;;;;;;;;-1:-1:-1;;2419:56:32;;;;;;;;;;;;:::i;:::-;;;2415:369;;;;:::i;:::-;;;;;;;;2641:30;2658:12;2641:30;;;;;;:::i;:::-;;;;;;;;2578:108;2415:369;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2742:27;2758:10;2742:27;;;;;;:::i;:::-;;;;;;;;2687:97;2415:369;;;;2533:29;2546:15;2533:29;;;;;;:::i;:::-;;;;;;;;2476:101;2415:369;2922:25;:23;:25::i;:::-;2865:37;;;;:22;:37;;;;;:82;2957:47;;:::i;:::-;-1:-1:-1;3007:37:32;;;;:22;:37;;;;;;;;;2957:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3086:237;;2957:87;;3030:13;;3086:237;;;;2957:87;;;;3086:237;:::i;:::-;;;;;;;;3412:16;:14;:16::i;:::-;3517:34;;;;3513:141;;3610:32;;3577:66;;3592:13;;3577:66;;;;3607:1;;3577:66;:::i;:::-;;;;;;;;3513:141;3671:34;;;;-1:-1:-1;;;;1348:2364:32;;:::o;4901:809:29:-;5051:19;5076:16;5100:18;:16;:18::i;:::-;:42;;-1:-1:-1;;;5100:42:29;;-1:-1:-1;;;;;5100:25:29;;;;;;;:42;;5134:6;;5100:42;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5100:42:29;;;;;;;;;;;;:::i;:::-;5050:92;;;;;;;;5284:1;5264:8;:22;5260:91;;;5302:38;;-1:-1:-1;;;5302:38:29;;;;;;;:::i;:::-;;;;;;;;5260:91;5439:20;-1:-1:-1;;;;;5424:35:29;:11;-1:-1:-1;;;;;5424:35:29;;5420:103;;5475:37;;-1:-1:-1;;;5475:37:29;;;;;;;:::i;5420:103::-;-1:-1:-1;;;;;5561:34:29;;;;;;;:21;:34;;;;;;:43;;;5619:84;5598:6;;5619:84;;;;;;4901:809;;;;:::o;2877:169:26:-;2978:7;3008:13;:11;:13::i;:::-;-1:-1:-1;;;;;3008:23:26;;3032:6;3008:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3001:38;;2877:169;;;;:::o;1375:396:23:-;963:27:35;:25;:27::i;:::-;-1:-1:-1;;;;;1487:15:23;::::1;;::::0;;;:9:::1;:15;::::0;;;;;::::1;;1483:221;;;1518:175;1540:152;1594:62;1674:4;1540:36;:152::i;1518:175::-;-1:-1:-1::0;;;;;1713:15:23;::::1;;::::0;;;:9:::1;:15;::::0;;;;;;:22;;-1:-1:-1;;1713:22:23::1;1731:4;1713:22;::::0;;1750:14;::::1;::::0;::::1;::::0;1723:4;;1750:14:::1;:::i;:::-;;;;;;;;1375:396:::0;:::o;3863:84:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1886:1193:25:-;1984:10;2005:48;;:::i;:::-;-1:-1:-1;;;;;2088:68:25;;:60;:68;;;:60;;:68;:60;:68;;2068:89;;:19;:89::i;:::-;2005:152;;2247:32;2282:129;2314:18;:38;;;-1:-1:-1;;;;;2282:129:25;2366:18;:35;;;-1:-1:-1;;;;;2282:129:25;:18;:129::i;:::-;2247:164;;2435:24;2426:6;:33;2422:254;;;2475:190;2514:137;2581:6;2609:24;2514:45;:137::i;2475:190::-;-1:-1:-1;;;;;2764:68:25;;:60;:68;;;:60;;:68;:60;:68;;2720:142;;2846:6;2720:30;:142::i;:::-;2929:13;:11;:13::i;:::-;-1:-1:-1;;;;;2929:26:25;;2956:6;2964;2929:42;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3036:6;-1:-1:-1;;;;;3015:57:25;;3056:6;3015:57;;;;;;:::i;:::-;;;;;;;;1886:1193;;;;:::o;1912:399:23:-;963:27:35;:25;:27::i;:::-;-1:-1:-1;;;;;2028:15:23;::::1;;::::0;;;:9:::1;:15;::::0;;;;;::::1;;2023:218;;2059:171;2081:148;2135:58;2211:4;2081:36;:148::i;2059:171::-;-1:-1:-1::0;;;;;2250:15:23;::::1;2268:5;2250:15:::0;;;:9:::1;:15;::::0;;;;;;:23;;-1:-1:-1;;2250:23:23::1;::::0;;2288:16;::::1;::::0;::::1;::::0;2260:4;;2288:16:::1;:::i;4186:75:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3400:390:29:-;3542:6;1306:35;1334:6;1306:27;:35::i;:::-;3564:26:::1;3593:17:::0;;;:9:::1;:17;::::0;;;;-1:-1:-1;;;;;3625:34:29;::::1;::::0;;:77:::1;;-1:-1:-1::0;3663:15:29::1;::::0;::::1;::::0;-1:-1:-1;;;;;3663:39:29;;::::1;:15:::0;::::1;:39;3625:77;3621:114;;;3718:7;;;3621:114;3745:15;;:38:::0;;-1:-1:-1;;;;;;3745:38:29::1;-1:-1:-1::0;;;;;3745:38:29;::::1;;::::0;;1351:1:::1;3400:390:::0;;;:::o;3775:262:26:-;3891:37;;:::i;:::-;3974:31;;;;:23;:31;;;;;3954:52;;:19;:52::i;1588:148:35:-;948:22:46;:20;:22::i;:::-;1700:29:35::1;1722:6;1700:21;:29::i;:::-;1588:148:::0;:::o;2385:351:26:-;2552:37;;:::i;:::-;2615:90;2648:19;:39;2674:11;2668:18;;;;;;;;2648:39;;;;;;;;;;;;;;;;-1:-1:-1;2648:39:26;;;-1:-1:-1;;;;;2648:47:26;;;;;;;;;2615:19;:90::i;:::-;2605:100;;2385:351;;;;;:::o;3959:211:24:-;4077:25;;:::i;:::-;-1:-1:-1;4125:24:24;;;;:16;:24;;;;;;;;4150:12;;4125:38;;;;;;;;4118:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3959:211::o;1383:28:35:-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1383:28:35;;-1:-1:-1;1383:28:35;:::o;5793:169:29:-;5895:20;;:::i;:::-;-1:-1:-1;5938:17:29;;;;:9;:17;;;;;;;;;5931:24;;;;;;;;;-1:-1:-1;;;;;5931:24:29;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5931:24:29;;;;;;;;;;;-1:-1:-1;;;5931:24:29;;;;;;;;;;5793:169::o;3013:42:11:-;;;;;;;;;;;;;;;:::o;2480:45::-;;;;:::o;3416:1484:25:-;3612:10;3696:11;3692:48;;3723:7;;;3692:48;3849:32;3834:11;;;;:4;:11;:::i;:::-;:47;;;;;;;;;:108;;;;-1:-1:-1;3910:32:25;3897:9;;;;:2;:9;:::i;:::-;:45;;;;;;;;;3834:108;3830:145;;;3958:7;;;3830:145;4033:30;4018:11;;;;:4;:11;:::i;:::-;:45;;;;;;;;;4014:183;;;4079:107;4113:4;:11;;;4142:6;4166;4079:16;:107::i;:::-;4224:30;4211:9;;;;:2;:9;:::i;:::-;:43;;;;;;;;;4207:177;;;4270:103;4302:2;:9;;;4329:6;4353;4270:14;:103::i;:::-;4418:38;4459:19;4418:38;4485:11;;;;:4;:11;:::i;:::-;4479:18;;;;;;;;4459:39;;;;;;;;;;;;;;;;-1:-1:-1;4459:39:25;;;-1:-1:-1;;;;;4459:47:25;;;;;;;;;;-1:-1:-1;;4555:19:25;;-1:-1:-1;;4581:9:25;;;;:2;:9;:::i;:::-;4575:16;;;;;;;;4555:37;;;;;;;;;;;;;;;;-1:-1:-1;4555:37:25;;;-1:-1:-1;;;;;4555:45:25;;;;;;;;;;-1:-1:-1;4610:80:25;4634:7;4555:45;4674:6;4610:10;:80::i;:::-;4874:9;;;;;;4819:11;;;;;-1:-1:-1;;;;;4724:169:25;;;;;4767:6;;4793:11;;4819:4;4793:11;:::i;:::-;4787:18;;;;;;;;4850:9;;;;:2;:9;:::i;:::-;4844:16;;;;;;;;4724:169;;;;;;;;:::i;:::-;;;;;;;;3416:1484;;;;;;:::o;4042:646:29:-;4191:6;1306:35;1334:6;1306:27;:35::i;:::-;4266:27:::1;4296:17:::0;;;:9:::1;:17;::::0;;;;:31:::1;;::::0;-1:-1:-1;;;4296:31:29;::::1;;;4337:117;4296:17:::0;:31;4428:16;4337:23:::1;:117::i;:::-;4500:17;::::0;;;:9:::1;:17;::::0;;;;;;:31:::1;;:50:::0;;-1:-1:-1;;;;4500:50:29::1;-1:-1:-1::0;;;4500:50:29::1;::::0;::::1;;;::::0;;4565:116;4500:17;;4565:116:::1;::::0;::::1;::::0;4621:20;;4500:50;;4565:116:::1;:::i;2813:636:33:-:0;3176:22;;3238:26;;3294:16;;3349:25;;3176:22;;3238:26;;;;;3294:16;;3349:25;;;;3415:27;;;;;2813:636::o;3133:37:11:-;;;;:::o;1850:462:35:-;948:22:46;:20;:22::i;:::-;-1:-1:-1;;;;;1970:18:35;::::1;;::::0;;;:10:::1;:18;::::0;;;;;::::1;;1965:131;;2004:81;2026:58;2077:6;2026:50;:58::i;2004:81::-;2110:9;2105:201;2129:11;:18:::0;2125:22;::::1;2105:201;;;2190:6;-1:-1:-1::0;;;;;2172:24:35::1;:11;2184:1;2172:14;;;;;;;;;::::0;;;::::1;::::0;;;::::1;::::0;-1:-1:-1;;;;;2172:14:35::1;:24;2168:128;;;2216:42;2248:6;2256:1;2216:31;:42::i;:::-;2276:5;;2168:128;2149:3;;2105:201;;;;1850:462:::0;:::o;2409:27:11:-;;;;:::o;2010:57::-;;;;;;;;;;;;;:::o;3451:39::-;;;;;;:::o;830:20:46:-;;;-1:-1:-1;;;;;830:20:46;;:::o;2485:212:35:-;948:22:46;:20;:22::i;:::-;2644:46:35::1;2676:6;2684:5;2644:31;:46::i;1608:692:33:-:0;963:27:35;:25;:27::i;:::-;1912:211:33::1;1936:23;1973:27;2014:17;2045:26;2085:28;1912:10;:211::i;:::-;2260:4;-1:-1:-1::0;;;;;2238:53:33::1;;:55;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;1608:692:::0;;;;;:::o;3365:31:11:-;;;;:::o;1130:484:25:-;1226:10;1302:13;:11;:13::i;:::-;-1:-1:-1;;;;;1302:25:25;;1328:6;1336;1302:41;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;1420:68:25;;:60;:68;;;:60;;:68;:60;:68;;1376:142;;1502:6;1376:30;:142::i;:::-;1571:6;-1:-1:-1;;;;;1552:55:25;;1591:6;1552:55;;;;;;:::i;:::-;;;;;;;;1130:484;;:::o;1325:212:34:-;1438:7;1468:62;1507:22;;1468:30;;:38;;:62;;;;:::i;:::-;1461:69;;1325:212;:::o;1198:157:30:-;1296:52;1329:6;1337:10;1296:32;:52::i;2462:241:10:-;1424:42;2462:241;:::o;1176:43:35:-;;;;;;;;;;;;;;;:::o;1528:759:30:-;1648:14;1845:25;;:::i;:::-;-1:-1:-1;1873:17:30;;;;:9;:17;;;;;;;;1845:45;;;;;;;;;-1:-1:-1;;;;;1845:45:30;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1845:45:30;;;;;;;;;;;-1:-1:-1;;;1845:45:30;;;;;;;;1873:17;2021:34;1883:6;2021:26;:34::i;:::-;1940:115;;;;2117:140;2155:4;:18;;;2187:23;2224;2117:24;:140::i;:::-;-1:-1:-1;2105:152:30;1528:759;-1:-1:-1;;;;;1528:759:30:o;1683:1534:29:-;1791:14;1822:16;1846:19;1871:18;:16;:18::i;:::-;-1:-1:-1;;;;;1871:30:29;;1902:20;1871:52;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1871:52:29;;;;;;;;;;;;:::i;:::-;1821:102;;;;;;;;1974:1;1954:8;:22;;1933:97;;;;-1:-1:-1;;;1933:97:29;;;;;;;:::i;:::-;2108:11;2217:10;2322:6;2428;2528:49;2567:8;2528:30;:49::i;:::-;2604:8;2596:17;;2587:26;;2763:25;;:::i;:::-;-1:-1:-1;2791:182:29;;;;;;;;-1:-1:-1;;;;;2791:182:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2983:17:29;;;:9;:17;;;;;;;:24;;;;;;;-1:-1:-1;;;;;;2983:24:29;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2983:24:29;-1:-1:-1;;;;2983:24:29;;;;-1:-1:-1;;;2983:24:29;-1:-1:-1;;;;2983:24:29;;;;;;;;;;;;;;;;;;;;;;;;3064:51;;;;;;2993:6;;2829:8;;2902:13;;3064:51;:::i;:::-;;;;;;;;3126:60;3157:6;3165:20;3126:30;:60::i;:::-;3197:13;;;;;;;1683:1534;;;:::o;2325:51:11:-;;;;;;;;;;;;;:::o;4356:40::-;;;;:::o;2794:155:35:-;2892:16;2931:11;2924:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2924:18:35;;;;;;;;;;;;;;;;;;;;;;;2794:155;:::o;2056:206:10:-;1137:42;2056:206;:::o;3248:40:11:-;;;;;;:::o;1195:274:7:-;963:27:35;:25;:27::i;:::-;1413:21:7::1;:19;:21::i;:::-;1444:18;:16;:18::i;:::-;1195:274::o:0;1297:872:26:-;1427:37;;:::i;:::-;1550:30;1523:59;;:20;:59;;1490:102;1523:59;1490:19;:102::i;:::-;1480:112;-1:-1:-1;1621:32:26;1606:11;:47;;;;;;;;;1602:537;;;1860:18;1881:13;:11;:13::i;:::-;-1:-1:-1;;;;;1881:31:26;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1860:54;;1958:66;:47;1977:7;:27;;;-1:-1:-1;;;;;1958:47:26;:10;:18;;:47;;;;:::i;:::-;:64;:66::i;:::-;-1:-1:-1;;;;;1928:96:26;;;:27;;;:96;2084:24;;;;2065:63;;:44;;:10;;:44;:18;:44::i;:63::-;-1:-1:-1;;;;;2038:90:26;:24;;;:90;-1:-1:-1;1297:872:26;;;:::o;3547:41:11:-;;;;;;;;;:::o;2511:776:30:-;2648:14;2678:25;;:::i;:::-;-1:-1:-1;2706:17:30;;;;:9;:17;;;;;;;;2678:45;;;;;;;;;-1:-1:-1;;;;;2678:45:30;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2678:45:30;;;;;;;;;;;-1:-1:-1;;;2678:45:30;;;;;;;;2706:17;2854:34;2716:6;2854:26;:34::i;:::-;2773:115;;;;2939:32;2975:140;3013:4;:18;;;3045:23;3082;2975:24;:140::i;:::-;2936:179;;;3132:148;3169:6;3189;3209:24;3247:23;3132;:148::i;:::-;3125:155;2511:776;-1:-1:-1;;;;;;;2511:776:30:o;1442:2369:24:-;1117:10:23;1107:21;;;;:9;:21;;;;;;;;1102:161;;1144:108;1166:85;1227:10;1166:43;:85::i;1144:108::-;-1:-1:-1;;;;;1675:34:24;::::1;1658:14;1675:34:::0;;;:21:::1;:34;::::0;;;;;1831:21;1827:58:::1;;1868:7;;;1827:58;1895:17;1915:36;1944:6;1915:28;:36::i;:::-;:56;;;-1:-1:-1::0;;;;;1895:76:24::1;;;2038:16;;2026:9;:28;2022:65;;;2070:7;;;;2022:65;2192:12;::::0;2168:21:::1;2256:24:::0;;;:16:::1;:24;::::0;;;;;;;:39;;;;;;;;2359:22:::1;:37:::0;;;;;;2532:26;;2572:24;2568:831:::1;;2669:26;2697:27:::0;2728:50:::1;2760:6;2768:9;2728:31;:50::i;:::-;2792:25;::::0;::::1;:46:::0;;;2852:26:::1;::::0;::::1;:48:::0;;;3005:37:::1;::::0;::::1;::::0;2668:110;;-1:-1:-1;2668:110:24;-1:-1:-1;3005:66:24::1;::::0;2668:110;3005:45:::1;:66::i;:::-;2965:37;::::0;::::1;:106:::0;3229:1:::1;3183:37:::0;;::::1;::::0;:48:::1;::::0;:45:::1;:48::i;:::-;3143:37;::::0;::::1;:88:::0;3334:54:::1;::::0;3381:6;;3366:13;;3334:54:::1;::::0;;;::::1;2568:831;;;3425:19;3413:9;:31;3409:396;;;3504:38:::0;;;3658:54:::1;::::0;::::1;::::0;:136:::1;::::0;3774:19;;3658:90:::1;::::0;3533:9;3658:79:::1;:90::i;:::-;:115:::0;::::1;:136::i;:::-;3618:37;::::0;::::1;:176:::0;3409:396:::1;1272:1:23;;;;;;1442:2369:24::0;;:::o;1094:30:11:-;;;-1:-1:-1;;;;;1094:30:11;;:::o;2899:220:10:-;1704:42;2899:220;:::o;3272:293:26:-;3406:37;;:::i;:::-;-1:-1:-1;;;;;3489:36:26;;;;;;:28;:36;;;;;;;;:44;;;;;;;;3469:65;;:19;:65::i;1085:346:46:-;948:22;:20;:22::i;:::-;-1:-1:-1;;;;;1198:22:46;::::1;1194:231;;1236:70;1258:47;:45;:47::i;1236:70::-;1194:231;;;1337:5;:16:::0;;-1:-1:-1;;;;;;1337:16:46::1;-1:-1:-1::0;;;;;1337:16:46;::::1;::::0;;::::1;::::0;;1372:42:::1;::::0;1337:16;;1393:10:::1;::::0;1372:42:::1;::::0;1337:5;1372:42:::1;1085:346:::0;:::o;4160:2437:32:-;4305:12;;4281:21;4347:24;4305:12;4369:1;4347:21;:24::i;:::-;4327:44;;4462:47;;:::i;:::-;-1:-1:-1;4512:33:32;;;;:22;:33;;;;;;;;;4462:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4555:76;;4614:7;;;;;4555:76;4726:35;;:::i;:::-;-1:-1:-1;4764:24:32;;;;:16;:24;;;;;;;;:35;;;;;;;;;4726:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4809:65;;4857:7;;;;;;4809:65;4989:24;;;;:16;:24;;;;;;;;:35;;;;;;;;4982:42;;;;;;;;;;;;;;5085:67;5125:9;5136:15;5085:39;:67::i;:::-;5067:85;;5349:22;5373:21;5398:103;5428:6;5448:7;5469:9;:22;;;5398:16;:103::i;:::-;5348:153;;;;5595:6;5568:13;5543:123;5615:14;5643:13;5543:123;;;;;;;:::i;:::-;;;;;;;;5677:19;5699:37;:14;5722:13;5699:22;:37::i;:::-;5914;;;;5677:59;;-1:-1:-1;5914:58:32;;5677:59;5914:45;:58::i;:::-;5862:37;;;:110;;;5792:33;;;;:22;:33;;;;;;;;:55;;:180;;;;6157:34;;;:45;;6200:1;6157:42;:45::i;:::-;6108:34;;;;:94;;;6041:33;;;;:22;:33;;;;;;;:52;;:161;;;;6313:34;6309:282;;6432:37;;;;6487:32;;6405:9;;6373:207;;6487:79;;6432:37;6487:40;:79::i;:::-;6373:207;;;;;;;:::i;:::-;;;;;;;;4160:2437;;;;;;;;;:::o;973:364:44:-;1059:7;1090:1;1086;:5;1082:227;;;1107:191;1129:168;1186:59;1263:1;1282;1129:39;:168::i;1107:191::-;-1:-1:-1;1325:5:44;;;973:364::o;7938:370:22:-;8143:158;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8143:158:22;-1:-1:-1;;;8143:158:22;;;7938:370;;;;:::o;1519:170:43:-;1662:9;1656:16;1649:4;1638:9;1634:20;1627:46;7563:253:32;7645:18;7692:89;7755:25;;7692:16;:14;:16::i;:::-;-1:-1:-1;;;;;7692:26:32;;7727:4;7692:41;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2159:741:34:-;2335:15;2303:29;2444:41;:39;:41::i;:::-;2421:64;;2514:21;2499:12;:36;2495:219;;;2551:152;2573:129;2637:12;2667:21;2573:46;:129::i;2551:152::-;2772:12;;2752:17;;2772:23;;2793:1;2772:20;:23::i;:::-;2805:12;:24;-1:-1:-1;;2839:30:34;:54;2159:741::o;3009:226:35:-;3106:10;3095:22;;;;:10;:22;;;;;;;;3090:139;;3133:85;3155:62;3206:10;3155:50;:62::i;4187:309:22:-;4334:12;1608:10;4405:26;;4445:10;4469;4369:120;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4369:120:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4369:120:22;-1:-1:-1;;;;;;4369:120:22;;;;;;;;;;;4187:309;-1:-1:-1;;;;;4187:309:22:o;2671:468:27:-;2790:37;;:::i;:::-;-1:-1:-1;2843:20:27;;;;;;;;;;-1:-1:-1;;;;;2843:20:27;;;;;-1:-1:-1;;;;;;;;2843:20:27;;;;;;;;-1:-1:-1;;;2843:20:27;;;;;;;;;;;;;2897:12;;2843:20;;2923:36;;2919:190;;;2998:32;:13;:30;:32::i;:::-;-1:-1:-1;;;;;2975:55:27;;;3074:24;;;;-1:-1:-1;;;;;3044:54:27;:27;;;:54;2919:190;3118:14;2671:468;;;:::o;1874:135:44:-;1959:7;1993:1;1989;:5;:13;;2001:1;1989:13;;;-1:-1:-1;1997:1:44;;1874:135;-1:-1:-1;1874:135:44:o;4502:300:22:-;4673:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4673:122:22;-1:-1:-1;;;4673:122:22;;;4502:300;;;;:::o;3975:530:27:-;4142:37;;:::i;:::-;4182:31;4202:10;4182:19;:31::i;:::-;4142:71;;4250:68;:49;4292:6;4258:7;:24;;;-1:-1:-1;;;;;4250:33:27;:41;;:49;;;;:::i;:68::-;-1:-1:-1;;;;;4223:95:27;;;:24;;;:95;4366:27;;;;4358:71;;:52;;:36;4403:6;4358:44;:52::i;:71::-;-1:-1:-1;;;;;4328:101:27;:27;;;:101;4464:34;4478:10;4328:7;4464:13;:34::i;8257:393:29:-;8353:16;8372:17;;;:9;:17;;;;;:26;-1:-1:-1;;;;;8372:26:29;8412:10;:22;;8408:236;;8450:183;8489:130;8563:10;8595:6;8489:52;:130::i;1437:255:46:-;1531:5;;-1:-1:-1;;;;;1531:5:46;1517:10;:19;1513:173;;1655:5;;1552:123;;1574:100;;1627:10;;-1:-1:-1;;;;;1655:5:46;1574:35;:100::i;3321:602:35:-;-1:-1:-1;;;;;3462:20:35;;3458:127;;3498:76;3520:53;:51;:53::i;3498:76::-;-1:-1:-1;;;;;3660:18:35;;;;;;:10;:18;;;;;;;;3656:134;;;3694:85;3716:62;3771:6;3716:54;:62::i;3694:85::-;-1:-1:-1;;;;;3800:18:35;;;;;;3821:4;3800:18;;;;;;;;:25;;-1:-1:-1;;3800:25:35;;;;;3835:11;:24;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3835:24:35;;;;;3874:42;3905:10;;3800:18;3874:42;;;3321:602;:::o;6230:923:25:-;6428:32;6453:6;6428:24;:32::i;:::-;6471:82;6517:6;6537;6471:32;:82::i;:::-;-1:-1:-1;;;;;6677:36:25;;;;;;:28;:36;;;;;;;;:44;;;;;;;;6643:108;;6735:6;6643:20;:108::i;:::-;6859:31;;;;:23;:31;;;;;6825:95;;6904:6;6825:20;:95::i;:::-;7084:30;7057:59;;:20;:59;;7023:123;7057:59;7130:6;7023:20;:123::i;5114:886::-;5307:32;5332:6;5307:24;:32::i;:::-;5350:82;5396:6;5416;5350:32;:82::i;:::-;-1:-1:-1;;;;;5556:36:25;;;;;;:28;:36;;;;;;;;:44;;;;;;;;5522:108;;5614:6;5522:20;:108::i;:::-;5738:31;;;;:23;:31;;;;;5704:95;;5783:6;5704:20;:95::i;:::-;5931:30;5904:59;;:20;:59;;5870:123;5904:59;5977:6;5870:20;:123::i;1362:1121:27:-;1585:33;1603:7;1612:5;1585:17;:33::i;:::-;1581:70;;;1634:7;;1581:70;1707:34;;:::i;:::-;1744:28;1764:7;1744:19;:28::i;:::-;1707:65;;1782:32;;:::i;:::-;1817:26;1837:5;1817:19;:26::i;:::-;1782:61;;1902:4;:21;;;-1:-1:-1;;;;;1893:30:27;:6;:30;1889:248;;;1939:187;1978:134;2045:6;2073:4;:21;;;-1:-1:-1;;;;;1978:134:27;:45;:134::i;1939:187::-;2216:21;;;;2208:65;;:46;;-1:-1:-1;;;;;2208:30:27;2247:6;2208:38;:46::i;:65::-;-1:-1:-1;;;;;2184:89:27;;;:21;;;;:89;;;;2313:19;;;2305:63;;:44;;:28;2342:6;2305:36;:44::i;:63::-;-1:-1:-1;;;;;2283:85:27;:19;;;:85;2414:28;2428:7;2437:4;2414:13;:28::i;:::-;2452:24;2466:5;2473:2;2452:13;:24::i;:::-;1362:1121;;;;;:::o;7205:919:29:-;787:5:9;7410:34:29;;;;7406:712;;;7515:218;7537:195;7594:66;7678:6;7702:16;7537:39;:195::i;7515:218::-;7406:712;;;7773:20;7754:39;;:16;:39;;;7750:368;;;7882:225;7904:202;7961:73;8052:6;8076:16;7904:39;:202::i;2750:241:38:-;2882:102;;;-1:-1:-1;;;;;2882:102:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2882:102:38;-1:-1:-1;;;2882:102:38;;;2750:241;;;:::o;4098:881:35:-;-1:-1:-1;;;;;4228:18:35;;;;;;:10;:18;;;;;;;;4223:131;;4262:81;4284:58;4335:6;4284:50;:58::i;4262:81::-;4376:11;:18;4367:27;;4363:201;;4410:143;4432:120;4497:5;4520:11;:18;;;;4432:47;:120::i;4410:143::-;4599:6;-1:-1:-1;;;;;4577:28:35;:11;4589:5;4577:18;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4577:18:35;:28;4573:212;;4621:153;4643:130;4717:11;4729:5;4717:18;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4717:18:35;4753:6;4643:56;:130::i;4621:153::-;-1:-1:-1;;;;;4802:18:35;;;;;;:10;:18;;;;;4795:25;;-1:-1:-1;;4795:25:35;;;4851:11;4863:18;;-1:-1:-1;;4863:22:35;;;4851:35;;;;;;;;;;;;;;;;4830:11;:18;;-1:-1:-1;;;;;4851:35:35;;;;4842:5;;4830:18;;;;;;;;;;;;;;:56;;;;;-1:-1:-1;;;;;4830:56:35;;;;;-1:-1:-1;;;;;4830:56:35;;;;;;4896:11;:17;;;;;;;;;;;;;;;;-1:-1:-1;;4896:17:35;;;;;-1:-1:-1;;;;;;4896:17:35;;;;;;;;;4928:44;;4961:10;;-1:-1:-1;;;;;4928:44:35;;;;;4896:17;4928:44;4098:881;;:::o;5308:789:33:-;5572:22;:48;;;5630:26;:56;;;;;;-1:-1:-1;;5630:56:33;;;;;;;5696:16;:36;;;5742:25;:54;;5806:58;;;;;-1:-1:-1;;5742:54:33;;;;;;;;5806:58;;;;;;;5880:210;;;;;;5597:23;;5659:27;;5715:17;;5770:26;;5836:28;;5880:210;:::i;:::-;;;;;;;;5308:789;;;;;:::o;3292:530:27:-;3459:37;;:::i;:::-;3499:31;3519:10;3499:19;:31::i;:::-;3459:71;;3567:68;:49;3609:6;3575:7;:24;;;-1:-1:-1;;;;;3567:33:27;:41;;:49;;;;:::i;:68::-;-1:-1:-1;;;;;3540:95:27;;;:24;;;:95;3683:27;;;;3675:71;;:52;;:36;3720:6;1343:383:44;1429:7;1464:5;;;1483;;;1479:223;;;1504:187;1526:164;1583:55;1656:1;1675;1526:39;:164::i;3524:1310:30:-;3692:37;3722:6;3692:29;:37::i;:::-;3785:15;3803:205;3840:6;3860;3982:1;3997;3803:23;:205::i;:::-;-1:-1:-1;;;;;4322:36:30;;;;;;:28;:36;;;;;;;;:44;;;;;;;;3785:223;;-1:-1:-1;4302:65:30;;:19;:65::i;:::-;-1:-1:-1;;;;;4243:36:30;;;;;;;:28;:36;;;;;;;;:44;;;;;;;;;:124;;;;;;;;;;;;;-1:-1:-1;;4243:124:30;;;-1:-1:-1;;;;;4243:124:30;;;;;;;-1:-1:-1;;;;4243:124:30;-1:-1:-1;;;;;;;;4243:124:30;;;;;;;;-1:-1:-1;;;4243:124:30;;;;;;;;;;;4416:12;;4412:234;;4492:37;4513:6;4521:7;4492:20;:37::i;:::-;4593:16;:14;:16::i;:::-;-1:-1:-1;;;;;4593:25:30;;4619:6;4627:7;4593:42;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4412:234;4796:31;4820:6;4796:23;:31::i;6929:502:32:-;7074:14;7102:20;7147:17;7167:23;7188:1;7167:12;;:20;;:23;;;;:::i;:::-;7147:43;;7200:35;;:::i;:::-;-1:-1:-1;7238:24:32;;;;:16;:24;;;;;;;;:35;;;;;;;;7200:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7343:33;;;:22;:33;;;;;;7292:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7200:73;7292:85;;7200:73;;7292:39;:85::i;:::-;7283:94;;7402:9;:22;;;7387:37;;6929:502;;;;;:::o;7644:624:30:-;7820:22;;7885:17;7881:333;;7935:11;7918:28;;7881:333;;;7994:144;8040:22;;;787:5:9;8113:11:30;7994:28;:144::i;:::-;7977:161;-1:-1:-1;8168:35:30;:11;7977:161;8168:19;:35::i;:::-;8152:51;;7881:333;7644:624;;;;;;:::o;6572:414:29:-;952:42:9;6676:17:29;;;:9;:17;;;;;:26;-1:-1:-1;;;;;6676:26:29;:41;6672:308;;6804:165;6843:112;6904:6;6932:5;6843:39;:112::i;1648:285:34:-;1772:32;:30;:32::i;:::-;1885:15;1852:30;:48;1925:1;1910:12;:16;1648:285::o;3512:669:33:-;3613:29;:27;:29::i;:::-;3715:7;3769:28;3835:21;3902:1;3951;3963:211;3715:7;3769:28;3835:21;3902:1;3951;3963:10;:211::i;912:395:21:-;1031:1;-1:-1:-1;;;;;1047:10:21;;:15;;1043:240;;1078:194;1100:171;1160:78;1256:1;1100:42;:171::i;8634:1833:30:-;8904:12;;8850:14;;8926:44;;:::i;:::-;-1:-1:-1;;;;;;8973:36:30;;;;;;:28;:36;;;;;;;;:44;;;;;;;;;8926:91;;;;;;;;;-1:-1:-1;;;;;8926:91:30;;;;;-1:-1:-1;;;;;;;;8926:91:30;;;;;;;;;;;-1:-1:-1;;;8926:91:30;;;;;;;;;;;;;9245:44;;9241:83;;;9312:1;9305:8;;;;;;9241:83;9468:174;9516:14;9544:13;9571:24;9609:23;9468:34;:174::i;:::-;9803:27;;9459:183;;-1:-1:-1;9761:31:30;;9795:47;;-1:-1:-1;;;;;9795:36:30;9840:1;9795:44;:47::i;:::-;9761:81;;9861:246;9889:208;9939:6;9963:14;:34;;;-1:-1:-1;;;;;9889:208:30;10015:14;:27;;;-1:-1:-1;;;;;9889:208:30;10060:23;9889:32;:208::i;:::-;9861:6;;:14;:246::i;:::-;9852:255;;10207:229;10235:191;10285:6;10309:14;:31;;;-1:-1:-1;;;;;10235:191:30;10358:23;10399:13;10235:32;:191::i;10207:229::-;10198:238;;10447:13;;;8634:1833;;;;;;;:::o;3915:266:22:-;4066:108;;;-1:-1:-1;;;;;4066:108:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4066:108:22;-1:-1:-1;;;4066:108:22;;;3915:266;;;:::o;4496:681:24:-;4641:20;4768:17;;;:9;:17;;;;;:26;4641:20;;;;4724:100;;-1:-1:-1;;;;;4768:26:24;4778:6;4724:30;:100::i;:::-;:120;;;-1:-1:-1;;;;;4700:144:24;;-1:-1:-1;4870:33:24;:10;4700:144;4870:18;:33::i;:::-;5011:26;;4855:48;;-1:-1:-1;4929:195:24;;4964:150;;5011:26;;787:5:9;4855:48:24;4964:29;:150::i;:::-;4929:13;;:21;:195::i;:::-;4913:211;;5134:36;4496:681;;;;;:::o;677:159:42:-;795:34;;;;;;;;;;;;-1:-1:-1;;;795:34:42;;;;677:159;:::o;8792:1186:32:-;9106:23;;8995:15;;9102:73;;9150:14;;9102:73;9305:32;;9351:23;;9388:34;;;;9436:23;;;;9473:34;;;;9521:25;;9265:332;;9305:32;9351:23;9388:34;9436:23;9473:34;9521:25;;;;;9560:27;;;;9265:26;:332::i;:::-;9841:37;;;;9800:32;;9255:342;;-1:-1:-1;9773:24:32;;9800:79;;:40;:79::i;:::-;9773:106;;9912:7;9893:16;:26;9889:83;;;9945:16;9935:26;;9889:83;8792:1186;;;;;:::o;5502:1540:30:-;5646:22;5670:21;5707:25;;:::i;:::-;-1:-1:-1;5735:17:30;;;;:9;:17;;;;;;;;;5707:45;;;;;;;;;-1:-1:-1;;;;;5707:45:30;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5707:45:30;;;;;;;;;;-1:-1:-1;;;5707:45:30;;;;;;;;;5854:112;;5924:6;5944:12;5854:24;:112::i;:::-;5820:146;;-1:-1:-1;5820:146:30;-1:-1:-1;5981:18:30;;5977:720;;6036:4;:15;;;-1:-1:-1;;;;;6019:32:30;:4;:13;;;-1:-1:-1;;;;;6019:32:30;;6015:672;;;6141:16;:14;:16::i;:::-;6167:13;;6141:56;;-1:-1:-1;;;6141:56:30;;-1:-1:-1;;;;;6141:25:30;;;;;;;:56;;6182:14;;6141:56;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6015:672;;;6398:24;6425:69;787:5:9;6425:69:30;;:44;6448:4;:20;;;6425:44;;:14;:22;;:44;;;;:::i;:::-;:52;;:69::i;:::-;6398:96;;6512:16;:14;:16::i;:::-;-1:-1:-1;;;;;6512:25:30;;6538:4;:15;;;6555:16;6512:60;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6590:16;:14;:16::i;:::-;-1:-1:-1;;;;;6590:25:30;;6616:4;:13;;;6631:40;6654:16;6631:14;:22;;:40;;;;:::i;:::-;6590:82;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6015:672;;6711:17;;6707:280;;6792:43;6813:6;6821:13;6792:20;:43::i;:::-;6919:57;6940:6;6948:13;6963:12;6919:20;:57::i;:::-;6997:38;5502:1540;;;;;;:::o;739:322:45:-;892:12;204:10;963:28;;1005:9;1028:1;1043;927:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;927:127:45;;;;;;;-1:-1:-1;;;;;927:127:45;;;;;;;;;;;920:134;;739:322;;;;;:::o;5143:344:22:-;5335:145;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5335:145:22;-1:-1:-1;;;5335:145:22;;;5143:344;;;;:::o;2248:241:38:-;2380:102;;;-1:-1:-1;;;;;2380:102:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2380:102:38;-1:-1:-1;;;2380:102:38;;;2248:241;;;:::o;1419:395:21:-;1538:1;-1:-1:-1;;;;;1554:10:21;;:15;;1550:240;;1585:194;1607:171;1667:78;1763:1;1607:42;:171::i;5819:510:27:-;6168:20;;6142:46;;6228:24;;;;6295:27;;;;;-1:-1:-1;;;;;6262:60:27;;;-1:-1:-1;;;6262:60:27;-1:-1:-1;;;;6198:54:27;;;;-1:-1:-1;;;6198:54:27;-1:-1:-1;;;;;;;;;;6142:46:27;;;-1:-1:-1;;6142:46:27;;;;;;;6198:54;;;;;6262:60;;;;5819:510::o;4808:329:22:-;4992:138;;;-1:-1:-1;;;;;4992:138:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4992:138:22;-1:-1:-1;;;4992:138:22;;;4808:329;;;;:::o;395:276:42:-;554:110;;;-1:-1:-1;;;;;554:110:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;554:110:42;-1:-1:-1;;;554:110:42;;;395:276;;;;:::o;2997:161:38:-;3116:35;;;;;;;;;;;;-1:-1:-1;;;3116:35:38;;;;2997:161;:::o;2495:249::-;2631:106;;;-1:-1:-1;;;;;2631:106:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2631:106:38;-1:-1:-1;;;2631:106:38;;;2495:249;;;:::o;6065:408:29:-;952:42:9;6163:17:29;;;:9;:17;;;;;:26;-1:-1:-1;;;;;6163:26:29;6159:308;;6291:165;6330:112;6391:6;6419:5;6330:39;:112::i;5251:409:27:-;5408:37;;:::i;:::-;5448:31;5468:10;5448:19;:31::i;:::-;5408:71;;5516:68;:49;5558:6;5524:7;:24;;;-1:-1:-1;;;;;5516:33:27;:41;;:49;;;;:::i;:68::-;-1:-1:-1;;;;;5489:95:27;:24;;;:95;5619:34;5633:10;5489:7;5619:13;:34::i;4676:404::-;4828:37;;:::i;:::-;4868:31;4888:10;4868:19;:31::i;:::-;4828:71;;4936:68;:49;4978:6;4944:7;:24;;;-1:-1:-1;;;;;4936:33:27;:41;;:49;;;;:::i;6571:525::-;6943:38;6999:42;6922:133;;6571:525::o;6183:367:22:-;6362:12;2778:10;6433:29;;6476:10;6500:6;6520:13;6397:146;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6397:146:22;;;;;;;-1:-1:-1;;;;;6397:146:22;;;;;;;;;;;6390:153;;6183:367;;;;;:::o;1950:292:38:-;2116:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2116:119:38;-1:-1:-1;;;2116:119:38;;;1950:292;;;;:::o;1625:319::-;1805:132;;;-1:-1:-1;;;;;1805:132:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1805:132:38;-1:-1:-1;;;1805:132:38;;;1625:319;;;;:::o;7960:575:32:-;8112:12;;8092:17;;8112:23;;8133:1;8112:20;:23::i;:::-;8092:43;;8145:35;;:::i;:::-;-1:-1:-1;8183:24:32;;;;:16;:24;;;;;;;;:35;;;;;;;;;8145:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8302:28;8298:231;;8346:172;8385:119;8449:6;8477:9;8385:42;:119::i;12602:243:30:-;12720:23;;;;:15;:23;;;;;;:39;;12752:6;12720:31;:39::i;:::-;12694:23;;;;:15;:23;;;;;:65;12797:25;;:41;;12831:6;12797:33;:41::i;:::-;12769:25;:69;-1:-1:-1;;12602:243:30:o;4000:293:28:-;4252:34;4273:6;4281:1;4284;4252:20;:34::i;3762:545:40:-;3925:21;4165:104;4257:11;4165:70;4212:22;4257:11;4232:1;4212:19;:22::i;:::-;4165:25;:9;4183:6;4165:17;:25::i;:::-;:46;;:70::i;6556:297:22:-;6724:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6724:122:22;-1:-1:-1;;;6724:122:22;;;;6556:297::o;3015:369:34:-;3105:30;;:35;3101:277;;3156:211;3195:158;3257:78;3195:40;:158::i;4262:542:33:-;4349:22;;:27;;;;:74;;-1:-1:-1;4392:26:33;;;;:31;;4349:74;:111;;;;-1:-1:-1;4439:16:33;;:21;;4349:111;:157;;;;-1:-1:-1;4476:25:33;;;;:30;;4349:157;:205;;;;-1:-1:-1;4522:27:33;;;;;;;:32;;4349:205;4345:453;;;4579:208;4618:155;4680:75;4618:40;:155::i;1067:297:45:-;1207:12;352:10;1278:31;;1323:9;1346:1;1242:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1242:115:45;-1:-1:-1;;;;;;1242:115:45;;;;;;;;;;;-1:-1:-1;;;1067:297:45;;;;:::o;10920:1151:30:-;11184:7;11306:29;;;:61;;-1:-1:-1;11339:28:30;;11306:61;11302:100;;;-1:-1:-1;11390:1:30;11383:8;;11302:100;11545:31;11610:24;:13;11632:1;11610:21;:24::i;:::-;11579:27;;-1:-1:-1;;;;;11579:55:30;;;:150;;11698:14;:31;;;11579:150;;;11649:14;:34;;;11579:150;-1:-1:-1;;;;;11545:184:30;;-1:-1:-1;11795:28:30;11791:67;;11846:1;11839:8;;;;;11791:67;11913:151;11956:24;11994:23;12031;11913:29;:151::i;:::-;11906:158;10920:1151;-1:-1:-1;;;;;;10920:1151:30:o;4685:1006:28:-;4899:14;5012:28;;;:54;;;5058:8;5044:10;:22;5012:54;5008:93;;;-1:-1:-1;5089:1:28;5082:8;;5008:93;5165:8;5152:10;:21;5144:53;;;;-1:-1:-1;;;5144:53:28;;;;;;;:::i;:::-;5245:36;;:::i;:::-;5284:47;5312:6;5320:10;5284:27;:47::i;:::-;5245:86;;5341:34;;:::i;:::-;5378:45;5406:6;5414:8;5378:27;:45::i;:::-;5341:82;;5469:215;5511:9;:19;;;5544:9;:21;;;5579:11;:21;;;5614:11;:23;;;5651;5469:28;:215::i;3175:300:40:-;3339:21;3392:46;3426:11;3392:25;:9;3410:6;3392:17;:25::i;1740:2058:18:-;2008:15;2039;2057:37;2078:4;2084:9;2057:20;:37::i;:::-;2039:55;;2104:17;2124:39;2145:5;2152:10;2124:20;:39::i;:::-;2104:59;-1:-1:-1;2177:13:18;;;:32;;-1:-1:-1;2194:15:18;;2177:32;2173:81;;;2242:1;2232:11;;2225:18;;;;2173:81;3017:8;3040:10;3028:8;:22;;:128;;3118:38;3135:10;3147:8;3118:16;:38::i;:::-;3028:128;;;3065:38;3082:8;3092:10;3065:16;:38::i;:::-;3017:139;;3170:191;3200:151;3237:18;3253:1;3237:15;:18::i;:::-;3280:14;3273:22;;3320:16;3313:24;;3200:19;:151::i;:::-;3170:16;:191::i;:::-;3166:195;;3583:10;3571:8;:22;;:114;;3654:31;3671:10;3683:1;3654:16;:31::i;:::-;3571:114;;;3608:31;3625:10;3637:1;3608:16;:31::i;:::-;3567:118;;3754:37;3775:1;3778:12;3754:20;:37::i;:::-;3744:47;1740:2058;-1:-1:-1;;;;;;;;;;;1740:2058:18:o;130:448:44:-;216:7;243:6;239:45;;-1:-1:-1;272:1:44;265:8;;239:45;305:5;;;309:1;305;:5;:1;324:5;;;;;:10;320:234;;350:193;372:170;429:61;508:1;527;372:39;:170::i;584:383::-;670:7;697:6;693:223;;719:186;741:163;798:54;870:1;889;741:39;:163::i;719:186::-;925:9;941:1;937;:5;;;;;;;584:383;-1:-1:-1;;;;584:383:44:o;12215:243:30:-;12333:23;;;;:15;:23;;;;;;:39;;12365:6;12333:31;:39::i;:::-;12307:23;;;;:15;:23;;;;;:65;12410:25;;:41;;12444:6;12410:33;:41::i;1977:1776:28:-;2263:23;2289:42;;;:34;:42;;;;;;2365:12;;2467:32;;;2463:69;;;2515:7;;;;2463:69;2542:51;;:::i;:::-;-1:-1:-1;2608:32:28;;;;:24;:32;;;;;;;;:49;;;;;;;;;2542:115;;;;;;;;;;;;;;;;;;;2709:41;;:::i;:::-;2764:50;2787:26;2764:22;:50::i;:::-;2760:790;;;2976:187;3010:26;:36;;;3064:26;:38;;;3120:6;3144:5;2976:16;:187::i;:::-;2944:28;;;2915:248;;;;;;3306:126;;2915:248;3306:22;:126::i;:::-;3274:28;;;3245:187;;;2760:790;;;3492:28;;;3463:76;;;;;;2760:790;3612:32;;;;:24;:32;;;;;;;;:47;;;;;;;;:66;;;;;;;;;;;;;;;;3688:42;;;:34;:42;;;;;;:58;-1:-1:-1;;;;1977:1776:28:o;8314:291:22:-;8480:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8480:118:22;-1:-1:-1;;;8480:118:22;;;8314:291;;;;:::o;7241:249::-;7348:12;-1:-1:-1;;;7468:4:22;7462:11;;;;;;;;7383:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7383:100:22;;;;;;;-1:-1:-1;;;;;7383:100:22;;;;;;;;;;;7376:107;;7241:249;;;:::o;6574:1136:28:-;6688:41;;:::i;:::-;-1:-1:-1;6813:32:28;;;;:24;:32;;;;;;;;:39;;;;;;;;;6794:58;;;;;;;;;;;;;;;;;;;6866:40;6794:58;6866:22;:40::i;:::-;6862:94;;;6922:23;;6862:94;7017:17;7037:16;:5;7051:1;7037:13;:16::i;:::-;7082:32;;;;:24;:32;;;;;;;;:43;;;;;;;;;7063:62;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7017:36:28;-1:-1:-1;7139:40:28;7063:62;7139:22;:40::i;:::-;7135:94;;;7195:23;;;7135:94;7307:23;7333:42;;;:34;:42;;;;;;7389:23;;;7385:237;;;7447:32;;;;:24;:32;;;;;;;;:49;;;;;;;;;7428:68;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7514:40:28;7428:68;7514:22;:40::i;:::-;7510:102;;;7574:23;;;;7510:102;-1:-1:-1;;7680:23:28;;;;;;;;;-1:-1:-1;7680:23:28;;7701:1;7680:23;;;;;6574:1136;-1:-1:-1;;;6574:1136:28:o;3292:588:39:-;3469:14;3503:6;3499:45;;-1:-1:-1;3532:1:39;3525:8;;3499:45;3557:7;3553:113;;3596:59;3652:2;3596:30;:1;3623:2;3596:26;:30::i;:59::-;3587:68;;3580:75;;3553:113;3675:17;3695:64;3744:14;:2;3755;3744:10;:14::i;:::-;3695:27;:2;3719;3695:23;:27::i;:64::-;3675:84;-1:-1:-1;3769:11:39;3783:21;3675:84;3801:2;3783:17;:21::i;:::-;3769:35;-1:-1:-1;3821:52:39;3870:2;3821:27;:1;3769:35;3821:22;:27::i;:52::-;3814:59;;;;3292:588;;;;;;;;:::o;5120:582:19:-;5182:8;5225:1;5213;5206:21;5202:215;;;5243:163;5265:140;5324:48;5390:1;5265:41;:140::i;5243:163::-;5449:1;5437;5430:21;5426:215;;;5467:163;5489:140;5548:48;5614:1;5489:41;:140::i;5467:163::-;5654:41;5659:24;5671:1;-1:-1:-1;;;5659:4:19;:24::i;:::-;5692:1;5654:4;:41::i;2578:112::-;2634:8;2658:25;2663:16;2668:1;-1:-1:-1;;;2663:4:19;:16::i;5953:5424::-;5998:8;-1:-1:-1;;;6022:1:19;:14;6018:206;;;6052:161;6074:138;6131:48;6197:1;6074:39;:138::i;6052:161::-;6242:1;6237;:6;6233:198;;6259:161;6281:138;6338:48;6404:1;6281:39;:138::i;6259:161::-;-1:-1:-1;;;6444:1:19;:12;6440:51;;;-1:-1:-1;6479:1:19;6472:8;;6440:51;1326:66;6504:1;:15;6500:64;;-1:-1:-1;;;;;;;6535:18:19;;6500:64;6574:8;6592;6610;6923:66;6911:1;:79;6907:316;;-1:-1:-1;;7006:79:19;;;;7132:66;-1:-1:-1;;;7111:11:19;;:88;7107:92;;6907:316;7267:66;7255:1;:79;7251:316;;-1:-1:-1;;7350:79:19;;;;7476:66;-1:-1:-1;;;7455:11:19;;:88;7451:92;;7251:316;-1:-1:-1;;;7598:1:19;:79;7594:314;;-1:-1:-1;;7693:79:19;;;;-1:-1:-1;;;;;;7797:11:19;;:88;7793:92;;7594:314;-1:-1:-1;;;7939:1:19;:79;7935:314;;-1:-1:-1;;8034:79:19;;;;-1:-1:-1;;;;;;8138:11:19;;:88;8134:92;;7935:314;-1:-1:-1;;;8280:1:19;:79;8276:314;;-1:-1:-1;;8375:79:19;;;;-1:-1:-1;;;;;;8479:11:19;;:88;8475:92;;8276:314;-1:-1:-1;;;8621:1:19;:79;8617:314;;-1:-1:-1;;;;;;8716:79:19;;;;-1:-1:-1;;;;;;8820:11:19;;:88;8816:92;;8617:314;-1:-1:-1;;;8964:1:19;:79;8960:318;;-1:-1:-1;;9059:79:19;;;;-1:-1:-1;;;;;;9165:11:19;;:88;9161:92;;8960:318;-1:-1:-1;;;9312:1:19;:79;9308:320;;-1:-1:-1;;9407:79:19;;;;-1:-1:-1;;;;;;9514:11:19;;:88;9510:92;;9308:320;9675:66;9663:1;:79;9659:322;;-1:-1:-1;;9758:79:19;;;;9887:66;-1:-1:-1;;;9866:11:19;;:88;9862:92;;9659:322;-1:-1:-1;;;;;;10146:11:19;;;-1:-1:-1;10146:11:19;;-1:-1:-1;;;;10171:5:19;;;:15;;-1:-1:-1;;;;10206:39:19;;;10201:45;;:83;10196:88;;;;-1:-1:-1;;;10294:1:19;10290;:5;:15;;;;;;10286:19;;-1:-1:-1;;;10392:1:19;10354:35;:39;10349:1;:45;:83;;;;;;10344:88;;;;-1:-1:-1;;;10442:1:19;10438;:5;:15;;;;;;10434:19;;-1:-1:-1;;;10540:1:19;10502:35;:39;10497:1;:45;:83;;;;;;10492:88;;;;-1:-1:-1;;;10590:1:19;10586;:5;:15;;;;;;10582:19;;-1:-1:-1;;;10688:1:19;10650:35;:39;10645:1;:45;:83;;;;;;10640:88;;;;-1:-1:-1;;;10738:1:19;10734;:5;:15;;;;;;10730:19;;-1:-1:-1;;;10836:1:19;10798:35;:39;10793:1;:45;:83;;;;;;10788:88;;;;-1:-1:-1;;;10886:1:19;10882;:5;:15;;;;;;10878:19;;-1:-1:-1;;;10984:1:19;10946:35;:39;10941:1;:45;:83;;;;;;10936:88;;;;-1:-1:-1;;;11034:1:19;11030;:5;:15;;;;;;11026:19;;-1:-1:-1;;;11132:1:19;11094:35;:39;11089:1;:45;:83;;;;;;11084:88;;;;-1:-1:-1;;;11182:1:19;11178;:5;:15;;;;;;11174:19;;-1:-1:-1;;;11280:1:19;11242:35;:39;11237:1;:45;:83;;;;;;11232:88;;;;5953:5424;;;;;;:::o;2762:119::-;2831:8;2855:19;2860:10;2865:1;2868;2860:4;:10::i;11474:5743::-;11520:8;-1:-1:-1;;;;;;11544:15:19;;11540:105;;;-1:-1:-1;11633:1:19;11626:8;;11540:105;11658:6;11654:51;;-1:-1:-1;;;;11680:14:19;;11654:51;1446:1;11718;:15;11714:207;;;11749:161;11771:138;11828:48;11894:1;11771:39;:138::i;11749:161::-;-1:-1:-1;;;;;;12386:70:19;;12470:5;;;:15;;;12496:18;12492:22;;12487:27;;;;;12386:70;;12554:5;;;:15;12550:19;;12576:1;12580:18;12576:22;12571:27;;;;-1:-1:-1;;;12642:1:19;12638;:5;:15;;;;;;12634:19;;12660:1;12664:18;12660:22;12655:27;;;;-1:-1:-1;;;12726:1:19;12722;:5;:15;;;;;;12718:19;;12744:1;12748:18;12744:22;12739:27;;;;-1:-1:-1;;;12810:1:19;12806;:5;:15;;;;;;12802:19;;12828:1;12832:18;12828:22;12823:27;;;;-1:-1:-1;;;12894:1:19;12890;:5;:15;;;;;;12886:19;;12912:1;12916:18;12912:22;12907:27;;;;-1:-1:-1;;;12978:1:19;12974;:5;:15;;;;;;12970:19;;12996:1;13000:18;12996:22;12991:27;;;;-1:-1:-1;;;13062:1:19;13058;:5;:15;;;;;;13054:19;;13080:1;13084:18;13080:22;13075:27;;;;-1:-1:-1;;;13146:1:19;13142;:5;:15;;;;;;13138:19;;13164:1;13168:18;13164:22;13159:27;;;;-1:-1:-1;;;13230:1:19;13226;:5;:15;;;;;;13222:19;;13248:1;13252:18;13248:22;13243:27;;;;-1:-1:-1;;;13314:1:19;13310;:5;:15;;;;;;13306:19;;13332:1;13336:18;13332:22;13327:27;;;;-1:-1:-1;;;13398:1:19;13394;:5;:15;;;;;;13390:19;;13416:1;13420:18;13416:22;13411:27;;;;-1:-1:-1;;;13482:1:19;13478;:5;:15;;;;;;13474:19;;13500:1;13504:18;13500:22;13495:27;;;;-1:-1:-1;;;13566:1:19;13562;:5;:15;;;;;;13558:19;;13584:1;13588:18;13584:22;13579:27;;;;-1:-1:-1;;;13650:1:19;13646;:5;:15;;;;;;13642:19;;13668:1;13672:18;13668:22;13663:27;;;;-1:-1:-1;;;13734:1:19;13730;:5;:15;;;;;;13726:19;;13752:1;13756:18;13752:22;13747:27;;;;-1:-1:-1;;;13818:1:19;13814;:5;:15;;;;;;13810:19;;13836:1;13840:18;13836:22;13831:27;;;;-1:-1:-1;;;13902:1:19;13898;:5;:15;;;;;;13894:19;;13920:1;13924:18;13920:22;13915:27;;;;-1:-1:-1;;;13986:1:19;13982;:5;:15;;;;;14216:2;;;;;;14070:18;13982:15;;;13999:27;;;14066:22;:26;;-1:-1:-1;;;14066:36:19;;13982:15;-1:-1:-1;;;;14252:78:19;;14251:85;14247:304;;14460:66;14367;14356:78;;:171;14352:175;;14247:304;-1:-1:-1;;;14584:78:19;;14583:85;14579:304;;14792:66;14699;14688:78;;:171;14684:175;;14579:304;-1:-1:-1;;;14915:78:19;;14914:85;14910:303;;15123:66;15030;15019:78;;:171;15015:175;;14910:303;-1:-1:-1;;;15245:78:19;;15244:85;15240:303;;15453:66;15360;15349:78;;:171;15345:175;;15240:303;-1:-1:-1;;;15575:78:19;;15574:85;15570:303;;15783:66;15690;15679:78;;:171;15675:175;;15570:303;-1:-1:-1;;;15905:78:19;;15904:85;15900:303;;16113:66;16020;16009:78;;:171;16005:175;;15900:303;-1:-1:-1;;;16237:78:19;;16236:85;16232:305;;16445:66;16352;16341:78;;:171;16337:175;;16232:305;-1:-1:-1;;;16572:78:19;;16571:85;16567:306;;16780:66;16687;16676:78;;:171;16672:175;;16567:306;-1:-1:-1;;;16909:78:19;;16908:85;16904:307;;17117:66;17024;17013:78;;:171;17009:175;;16904:307;11474:5743;;;;;:::o;2403:107::-;2459:8;-1:-1:-1;;;2483:10:19;2488:1;2491;2483:4;:10::i;:::-;:20;;;;;;;2403:107;-1:-1:-1;;;2403:107:19:o;3096:437::-;3157:7;3199:1;3187;3180:21;3176:215;;;3217:163;3239:140;3298:48;3364:1;3239:41;:140::i;3217:163::-;3400:8;3411:18;3416:1;3426;3411:4;:18::i;:::-;3400:29;;3448:1;3443;:6;3439:45;;3472:1;3465:8;;;;;3439:45;3522:3;3508:17;;3096:437;-1:-1:-1;;;3096:437:19:o;1068:369:28:-;1397:28;;;:33;;;1068:369::o;416:572:39:-;575:17;;654:7;650:79;;-1:-1:-1;697:2:39;;-1:-1:-1;715:2:39;677:41;;650:79;742:7;738:79;;-1:-1:-1;785:2:39;;-1:-1:-1;803:2:39;765:41;;738:79;838:64;887:14;:2;898;887:10;:14::i;:::-;838:27;:2;862;838:23;:27::i;:64::-;826:76;-1:-1:-1;926:14:39;:2;937;926:10;:14::i;:::-;912:28;;416:572;;;;;;;;:::o;2695:285::-;2836:23;2873:25;2930:43;2940:9;2951:11;-1:-1:-1;;;2930:9:39;:43::i;:::-;2923:50;;;;2695:285;;;;;:::o;1724:289:20:-;1855:12;-1:-1:-1;;;1975:5:20;1969:12;;;;;;;;1890:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1890:116:20;-1:-1:-1;;;;;;1890:116:20;;;;;;;;;;;-1:-1:-1;1724:289:20;;;;:::o;17299:408:19:-;17355:8;17379:6;;;:16;;-1:-1:-1;17389:6:19;;17379:16;17375:55;;;-1:-1:-1;17418:1:19;17411:8;;17375:55;-1:-1:-1;17443:5:19;;;17447:1;17443;:5;:1;17462:5;;;;;:10;;:24;;;;17485:1;17480;17476;:5;;;;;;:10;;17462:24;17458:243;;;17502:188;17524:165;17575:62;17655:1;17674;17524:33;:165::i;17794:570::-;17850:8;17874:6;17870:218;;17896:181;17918:158;17969:55;18042:1;18061;17918:33;:158::i;17896:181::-;-1:-1:-1;;;18101:1:19;:18;:29;;;;;18123:1;-1:-1:-1;;18123:7:19;18101:29;18097:242;;;18146:182;18168:159;18219:56;18293:1;18312;18168:33;:159::i;18146:182::-;18356:1;18352;:5;;;;1434:284:20;1562:12;-1:-1:-1;;;1680:5:20;1674:12;;;;;;;1443:904:39;1610:23;1647:25;1867:8;1855:9;:20;:46;;;;1893:8;1879:11;:22;1855:46;1851:437;;;1917:19;1952:11;1939:9;:24;;:50;;1978:11;1939:50;;;1966:9;1939:50;1917:72;-1:-1:-1;2017:29:39;1917:72;2037:8;2017:19;:29::i;:::-;2003:43;-1:-1:-1;2078:30:39;:9;2003:43;2078:17;:30::i;:::-;2060:48;-1:-1:-1;2142:32:39;:11;2162;2142:19;:32::i;:::-;2122:52;;1851:437;;;;-1:-1:-1;2223:9:39;;2266:11;;-1:-1:-1;;1443:904:39:o;2019:305:20:-;2159:12;-1:-1:-1;;;2271:5:20;2265:12;;;;;;;;2194:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2194:123:20;-1:-1:-1;;;;;;2194:123:20;;;;;;;;;;;-1:-1:-1;2019:305:20;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;14:155:51:-;94:20;;143:1;133:12;;123:2;;159:1;156;149:12;174:674;;283:3;276:4;268:6;264:17;260:27;250:2;;305:5;298;291:20;250:2;342:6;336:13;-1:-1:-1;;;;;409:2:51;401:6;398:14;395:2;;;415:9;395:2;455;449:9;528:2;505:17;;-1:-1:-1;;501:31:51;489:44;;535:4;485:55;555:18;;;575:22;;;552:46;549:2;;;601:9;549:2;628;621:22;676;;;661:6;-1:-1:-1;661:6:51;717:19;;;738:4;713:30;710:39;-1:-1:-1;707:2:51;;;762:1;759;752:12;707:2;775:67;835:6;828:4;820:6;816:17;809:4;801:6;797:17;775:67;:::i;:::-;;;;240:608;;;;:::o;853:168::-;;963:2;954:6;949:3;945:16;941:25;938:2;;;983:5;976;969:20;1026:165;1095:20;;1155:10;1144:22;;1134:33;;1124:2;;1181:1;1178;1171:12;1196:259;;1308:2;1296:9;1287:7;1283:23;1279:32;1276:2;;;1329:6;1321;1314:22;1276:2;1373:9;1360:23;1392:33;1419:5;1392:33;:::i;1460:263::-;;1583:2;1571:9;1562:7;1558:23;1554:32;1551:2;;;1604:6;1596;1589:22;1551:2;1641:9;1635:16;1660:33;1687:5;1660:33;:::i;1728:327::-;;;1857:2;1845:9;1836:7;1832:23;1828:32;1825:2;;;1878:6;1870;1863:22;1825:2;1922:9;1909:23;1941:33;1968:5;1941:33;:::i;:::-;1993:5;2045:2;2030:18;;;;2017:32;;-1:-1:-1;;;1815:240:51:o;2060:361::-;;;2205:2;2193:9;2184:7;2180:23;2176:32;2173:2;;;2226:6;2218;2211:22;2173:2;2270:9;2257:23;2289:33;2316:5;2289:33;:::i;:::-;2341:5;-1:-1:-1;2365:50:51;2411:2;2396:18;;2365:50;:::i;:::-;2355:60;;2163:258;;;;;:::o;2426:1062::-;;;;;;;2654:3;2642:9;2633:7;2629:23;2625:33;2622:2;;;2676:6;2668;2661:22;2622:2;2713:9;2707:16;2732:33;2759:5;2732:33;:::i;:::-;2833:2;2818:18;;2812:25;2784:5;;-1:-1:-1;;;;;;2886:14:51;;;2883:2;;;2918:6;2910;2903:22;2883:2;2946:63;3001:7;2992:6;2981:9;2977:22;2946:63;:::i;:::-;2936:73;;3055:2;3044:9;3040:18;3034:25;3018:41;;3084:2;3074:8;3071:16;3068:2;;;3105:6;3097;3090:22;3068:2;;3133:65;3190:7;3179:8;3168:9;3164:24;3133:65;:::i;:::-;3123:75;;;3238:2;3227:9;3223:18;3217:25;3207:35;;3287:3;3276:9;3272:19;3266:26;3301:35;3328:7;3301:35;:::i;:::-;3407:3;3392:19;;3386:26;3355:7;;-1:-1:-1;3421:35:51;3386:26;3421:35;:::i;:::-;3475:7;3465:17;;;2612:876;;;;;;;;:::o;3493:327::-;;;3622:2;3610:9;3601:7;3597:23;3593:32;3590:2;;;3643:6;3635;3628:22;3825:297;;3945:2;3933:9;3924:7;3920:23;3916:32;3913:2;;;3966:6;3958;3951:22;3913:2;4003:9;3997:16;4056:5;4049:13;4042:21;4035:5;4032:32;4022:2;;4083:6;4075;4068:22;4127:190;;4239:2;4227:9;4218:7;4214:23;4210:32;4207:2;;;4260:6;4252;4245:22;4207:2;-1:-1:-1;4288:23:51;;4197:120;-1:-1:-1;4197:120:51:o;4322:327::-;;;4451:2;4439:9;4430:7;4426:23;4422:32;4419:2;;;4472:6;4464;4457:22;4419:2;4513:9;4500:23;4490:33;;4573:2;4562:9;4558:18;4545:32;4586:33;4613:5;4586:33;:::i;:::-;4638:5;4628:15;;;4409:240;;;;;:::o;4654:258::-;;;4783:2;4771:9;4762:7;4758:23;4754:32;4751:2;;;4804:6;4796;4789:22;4751:2;-1:-1:-1;;4832:23:51;;;4902:2;4887:18;;;4874:32;;-1:-1:-1;4741:171:51:o;4917:264::-;;;5045:2;5033:9;5024:7;5020:23;5016:32;5013:2;;;5066:6;5058;5051:22;5013:2;5107:9;5094:23;5084:33;;5136:39;5171:2;5160:9;5156:18;5136:39;:::i;5186:224::-;;5314:2;5302:9;5293:7;5289:23;5285:32;5282:2;;;5335:6;5327;5320:22;5282:2;5363:41;5394:9;5363:41;:::i;5415:458::-;;;;5619:3;5607:9;5598:7;5594:23;5590:33;5587:2;;;5641:6;5633;5626:22;5587:2;5669:59;5720:7;5709:9;5669:59;:::i;:::-;5659:69;;5747:68;5807:7;5802:2;5791:9;5787:18;5747:68;:::i;:::-;5737:78;;5862:3;5851:9;5847:19;5834:33;5824:43;;5577:296;;;;;:::o;6073:194::-;;6196:2;6184:9;6175:7;6171:23;6167:32;6164:2;;;6217:6;6209;6202:22;6164:2;-1:-1:-1;6245:16:51;;6154:113;-1:-1:-1;6154:113:51:o;6272:987::-;;;;;;;6500:3;6488:9;6479:7;6475:23;6471:33;6468:2;;;6522:6;6514;6507:22;6468:2;6556:9;6550:16;6540:26;;6610:2;6599:9;6595:18;6589:25;-1:-1:-1;;;;;6674:2:51;6666:6;6663:14;6660:2;;;6695:6;6687;6680:22;6660:2;6723:63;6778:7;6769:6;6758:9;6754:22;6723:63;:::i;:::-;6713:73;;6832:2;6821:9;6817:18;6811:25;6795:41;;6861:2;6851:8;6848:16;6845:2;;;6882:6;6874;6867:22;7264:482;;;;;;7441:3;7429:9;7420:7;7416:23;7412:33;7409:2;;;7463:6;7455;7448:22;7409:2;7504:9;7491:23;7481:33;;7533:39;7568:2;7557:9;7553:18;7533:39;:::i;:::-;7523:49;;7619:2;7608:9;7604:18;7591:32;7581:42;;7642:39;7677:2;7666:9;7662:18;7642:39;:::i;:::-;7632:49;;7700:40;7735:3;7724:9;7720:19;7700:40;:::i;:::-;7690:50;;7399:347;;;;;;;;:::o;7751:259::-;;7832:5;7826:12;7859:6;7854:3;7847:19;7875:63;7931:6;7924:4;7919:3;7915:14;7908:4;7901:5;7897:16;7875:63;:::i;:::-;7992:2;7971:15;-1:-1:-1;;7967:29:51;7958:39;;;;7999:4;7954:50;;7802:208;-1:-1:-1;;7802:208:51:o;8015:203::-;-1:-1:-1;;;;;8179:32:51;;;;8161:51;;8149:2;8134:18;;8116:102::o;8223:274::-;-1:-1:-1;;;;;8415:32:51;;;;8397:51;;8479:2;8464:18;;8457:34;8385:2;8370:18;;8352:145::o;8502:661::-;8673:2;8725:21;;;8795:13;;8698:18;;;8817:22;;;8502:661;;8673:2;8896:15;;;;8870:2;8855:18;;;8502:661;8942:195;8956:6;8953:1;8950:13;8942:195;;;9021:13;;-1:-1:-1;;;;;9017:39:51;9005:52;;9112:15;;;;9077:12;;;;9053:1;8971:9;8942:195;;;-1:-1:-1;9154:3:51;;8653:510;-1:-1:-1;;;;;;8653:510:51:o;9168:187::-;9333:14;;9326:22;9308:41;;9296:2;9281:18;;9263:92::o;9360:177::-;9506:25;;;9494:2;9479:18;;9461:76::o;9542:360::-;9742:25;;;-1:-1:-1;;;;;9803:32:51;;;;9798:2;9783:18;;9776:60;9884:10;9872:23;9867:2;9852:18;;9845:51;9730:2;9715:18;;9697:205::o;9907:219::-;;10054:2;10043:9;10036:21;10074:46;10116:2;10105:9;10101:18;10093:6;10074:46;:::i;10817:256::-;10999:25;;;11055:2;11040:18;;11033:34;10987:2;10972:18;;10954:119::o;11304:352::-;11506:2;11488:21;;;11545:2;11525:18;;;11518:30;11584;11579:2;11564:18;;11557:58;11647:2;11632:18;;11478:178::o;11661:351::-;11863:2;11845:21;;;11902:2;11882:18;;;11875:30;11941:29;11936:2;11921:18;;11914:57;12003:2;11988:18;;11835:177::o;12017:352::-;12219:2;12201:21;;;12258:2;12238:18;;;12231:30;12297;12292:2;12277:18;;12270:58;12360:2;12345:18;;12191:178::o;12374:343::-;12576:2;12558:21;;;12615:2;12595:18;;;12588:30;-1:-1:-1;;;12649:2:51;12634:18;;12627:49;12708:2;12693:18;;12548:169::o;12722:364::-;12940:13;;12922:32;;13010:4;12998:17;;;12992:24;12970:20;;;12963:54;13073:4;13061:17;;;13055:24;13033:20;;;13026:54;;;;12910:2;12895:18;;12877:209::o;13091:562::-;13342:13;;-1:-1:-1;;;;;13338:22:51;;;13320:41;;13421:4;13409:17;;;13403:24;13399:33;;;13377:20;;;13370:63;13480:4;13468:17;;;13462:24;13505:10;13553:21;;;13531:20;;;13524:51;;;;13635:4;13623:17;;;13617:24;13613:33;13591:20;;;13584:63;;;;13269:3;13254:19;;13236:417::o;13658:501::-;13888:13;;-1:-1:-1;;;;;13884:38:51;13866:57;;13970:4;13958:17;;;13952:24;-1:-1:-1;;;;;14059:21:51;;;14037:20;;;14030:51;;;;14141:4;14129:17;;;14123:24;14119:33;14097:20;;;14090:63;;;;13854:2;13839:18;;13821:338::o;14599:319::-;14801:25;;;14857:2;14842:18;;14835:34;;;;14900:2;14885:18;;14878:34;14789:2;14774:18;;14756:162::o;14923:391::-;15154:25;;;15210:2;15195:18;;15188:34;;;;15253:2;15238:18;;15231:34;15296:2;15281:18;;15274:34;15141:3;15126:19;;15108:206::o;15319:463::-;15578:25;;;15634:2;15619:18;;15612:34;;;;15677:2;15662:18;;15655:34;;;;15720:2;15705:18;;15698:34;15763:3;15748:19;;15741:35;15565:3;15550:19;;15532:250::o;15787:515::-;16042:25;;;16086:10;16132:15;;;16127:2;16112:18;;16105:43;16179:2;16164:18;;16157:34;;;;16227:15;;16222:2;16207:18;;16200:43;16280:15;16274:3;16259:19;;16252:44;16029:3;16014:19;;15996:306::o;16825:333::-;17019:25;;;17092:4;17080:17;;;17075:2;17060:18;;17053:45;17134:17;17129:2;17114:18;;17107:45;17007:2;16992:18;;16974:184::o;17163:192::-;17337:10;17325:23;;;;17307:42;;17295:2;17280:18;;17262:93::o;17360:291::-;17540:10;17577:15;;;17559:34;;17629:15;;17624:2;17609:18;;17602:43;17518:2;17503:18;;17485:166::o;17656:258::-;17728:1;17738:113;17752:6;17749:1;17746:13;17738:113;;;17828:11;;;17822:18;17809:11;;;17802:39;17774:2;17767:10;17738:113;;;17869:6;17866:1;17863:13;17860:2;;;17904:1;17895:6;17890:3;17886:16;17879:27;17860:2;;17709:205;;;:::o;17919:88::-;17994:3;17990:15;;17976:31::o;18012:764::-;;18093:4;18075:16;18072:26;18069:2;;;18101:5;;18069:2;18142:1;18137:3;18132;18117:27;18204:10;18166:36;18197:3;18191:10;18166:36;:::i;:::-;18163:52;18153:2;;18219:5;;18153:2;18253;18247:9;18293:16;-1:-1:-1;;18289:29:51;18286:1;18247:9;18265:54;18348:4;18342:11;18372:16;-1:-1:-1;;;;;18478:2:51;18471:4;18463:6;18459:17;18456:25;18451:2;18443:6;18440:14;18437:45;18434:2;;;18485:5;;;;;;18434:2;18522:6;18516:4;18512:17;18501:28;;18558:3;18552:10;18538:24;;18585:2;18577:6;18574:14;18571:2;;;18591:5;;;;;;18571:2;;18652:16;18646:4;18642:27;18635:4;18626:6;18621:3;18617:16;18613:27;18610:60;18607:2;;;18673:5;;;;;18607:2;18738;18717:15;-1:-1:-1;;18713:29:51;18704:39;;18745:4;18700:50;18696:2;18689:62;18708:3;-1:-1:-1;;18059:717:51;:::o;18781:133::-;-1:-1:-1;;;;;18858:31:51;;18848:42;;18838:2;;18904:1;18901;18894:12"
			}
		}
	},
	"sourceTreeHashHex": "0x81cfb19f0e9661f9aec199b62a13ae7de4d4e161dd08713dc8b2b59212cce840",
	"sources": {
		"./Staking.sol": {
			"id": 7
		},
		"./interfaces/IStaking.sol": {
			"id": 13
		},
		"../rigoToken/RigoToken/RigoTokenFace.sol": {
			"id": 6
		},
		"../protocol/DragoRegistry/IDragoRegistry.sol": {
			"id": 0
		},
		"./interfaces/IStructs.sol": {
			"id": 17
		},
		"./interfaces/IGrgVault.sol": {
			"id": 12
		},
		"./sys/MixinParams.sol": {
			"id": 33
		},
		"../utils/0xUtils/LibRichErrors.sol": {
			"id": 43
		},
		"./immutable/MixinStorage.sol": {
			"id": 11
		},
		"./immutable/MixinConstants.sol": {
			"id": 9
		},
		"../utils/0xUtils/Authorizable.sol": {
			"id": 35
		},
		"../utils/0xUtils/interfaces/IAuthorizable.sol": {
			"id": 47
		},
		"../utils/0xUtils/LibAuthorizableRichErrors.sol": {
			"id": 38
		},
		"../utils/0xUtils/Ownable.sol": {
			"id": 46
		},
		"../utils/0xUtils/interfaces/IOwnable.sol": {
			"id": 48
		},
		"../utils/0xUtils/LibOwnableRichErrors.sol": {
			"id": 42
		},
		"./libs/LibStakingRichErrors.sol": {
			"id": 22
		},
		"./interfaces/IStakingEvents.sol": {
			"id": 14
		},
		"./interfaces/IStakingProxy.sol": {
			"id": 15
		},
		"./stake/MixinStake.sol": {
			"id": 25
		},
		"../utils/0xUtils/LibSafeMath.sol": {
			"id": 44
		},
		"../utils/0xUtils/LibSafeMathRichErrors.sol": {
			"id": 45
		},
		"./staking_pools/MixinStakingPool.sol": {
			"id": 29
		},
		"./sys/MixinAbstract.sol": {
			"id": 31
		},
		"./staking_pools/MixinStakingPoolRewards.sol": {
			"id": 30
		},
		"../utils/0xUtils/LibMath.sol": {
			"id": 40
		},
		"../utils/0xUtils/LibMathRichErrors.sol": {
			"id": 41
		},
		"./staking_pools/MixinCumulativeRewards.sol": {
			"id": 28
		},
		"../utils/0xUtils/LibFractions.sol": {
			"id": 39
		},
		"./stake/MixinStakeBalances.sol": {
			"id": 26
		},
		"./libs/LibSafeDowncast.sol": {
			"id": 21
		},
		"./immutable/MixinDeploymentConstants.sol": {
			"id": 10
		},
		"../utils/0xUtils/IEtherToken.sol": {
			"id": 37
		},
		"../utils/0xUtils/IERC20Token.sol": {
			"id": 36
		},
		"./stake/MixinStakeStorage.sol": {
			"id": 27
		},
		"./sys/MixinScheduler.sol": {
			"id": 34
		},
		"../rigoToken/Inflation/InflationFace.sol": {
			"id": 3
		},
		"./rewards/MixinPopRewards.sol": {
			"id": 24
		},
		"./sys/MixinFinalizer.sol": {
			"id": 32
		},
		"./libs/LibCobbDouglas.sol": {
			"id": 18
		},
		"./libs/LibFixedMath.sol": {
			"id": 19
		},
		"./libs/LibFixedMathRichErrors.sol": {
			"id": 20
		},
		"./rewards/MixinPopManager.sol": {
			"id": 23
		}
	},
	"sourceCodes": {
		"./Staking.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n// solhint-disable-next-line\npragma solidity 0.7.4;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IStaking.sol\";\nimport \"./sys/MixinParams.sol\";\nimport \"./stake/MixinStake.sol\";\nimport \"./rewards/MixinPopRewards.sol\";\n\n\ncontract Staking is\n    IStaking,\n    MixinParams,\n    MixinStake,\n    MixinPopRewards\n{\n    /// @dev Initialize storage owned by this contract.\n    ///      This function should not be called directly.\n    ///      The StakingProxy contract will call it in `attachStakingContract()`.\n    function init()\n        public\n        override\n        onlyAuthorized\n    {\n        // DANGER! When performing upgrades, take care to modify this logic\n        // to prevent accidentally clearing prior state.\n        _initMixinScheduler();\n        _initMixinParams();\n    }\n}\n",
		"./interfaces/IStaking.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../rigoToken/RigoToken/RigoTokenFace.sol\";\nimport \"../../protocol/DragoRegistry/IDragoRegistry.sol\";\nimport \"./IStructs.sol\";\nimport \"./IGrgVault.sol\";\n\n\ninterface IStaking {\n\n    /// @dev Adds a new proof_of_performance address.\n    /// @param addr Address of proof_of_performance contract to add.\n    function addPopAddress(address addr)\n        external;\n        \n    /// @dev Create a new staking pool. The sender will be the staking pal of this pool.\n    /// Note that a staking pal must be payable.\n    /// @param rigoblockPoolAddress Adds rigoblock pool to the created staking pool for convenience if non-null.\n    /// @return poolId The unique pool id generated for this pool.\n    function createStakingPool(address rigoblockPoolAddress)\n        external\n        returns (bytes32 poolId);\n    \n    /// @dev Allows the operator to update the staking pal address.\n    /// @param poolId Unique id of pool.\n    /// @param newStakingPalAddress Address of the new staking pal.\n    function setStakingPalAddress(bytes32 poolId, address newStakingPalAddress)\n        external;\n\n    /// @dev Decreases the operator share for the given pool (i.e. increases pool rewards for members).\n    /// @param poolId Unique Id of pool.\n    /// @param newOperatorShare The newly decreased percentage of any rewards owned by the operator.\n    function decreaseStakingPoolOperatorShare(bytes32 poolId, uint32 newOperatorShare)\n        external;\n\n    /// @dev Begins a new epoch, preparing the prior one for finalization.\n    ///      Throws if not enough time has passed between epochs or if the\n    ///      previous epoch was not fully finalized.\n    /// @return numPoolsToFinalize The number of unfinalized pools.\n    function endEpoch()\n        external\n        returns (uint256);\n\n    /// @dev Instantly finalizes a single pool that earned rewards in the previous\n    ///      epoch, crediting it rewards for members and withdrawing operator's\n    ///      rewards as WETH. This can be called by internal functions that need\n    ///      to finalize a pool immediately. Does nothing if the pool is already\n    ///      finalized or did not earn rewards in the previous epoch.\n    /// @param poolId The pool ID to finalize.\n    function finalizePool(bytes32 poolId)\n        external;\n\n    /// @dev Initialize storage owned by this contract.\n    ///      This function should not be called directly.\n    ///      The StakingProxy contract will call it in `attachStakingContract()`.\n    function init()\n        external;\n\n    /// @dev Allows caller to join a staking pool as a rigoblock pool id subaccount.\n    /// @param stakingPoolId Unique id of staking pool.\n    /// @param rigoblockPoolAccount Address of subaccount to be added to staking pool.\n    function joinStakingPoolAsRbPoolAccount(\n        bytes32 stakingPoolId,\n        address rigoblockPoolAccount)\n        external;\n\n    /// @dev Moves stake between statuses: 'undelegated' or 'delegated'.\n    ///      Delegated stake can also be moved between pools.\n    ///      This change comes into effect next epoch.\n    /// @param from status to move stake out of.\n    /// @param to status to move stake into.\n    /// @param amount of stake to move.\n    function moveStake(\n        IStructs.StakeInfo calldata from,\n        IStructs.StakeInfo calldata to,\n        uint256 amount\n    )\n        external;\n        \n    /// @dev Credits the value of a pool's pop reward.\n    ///      Only a known RigoBlock pop can call this method. See\n    ///      (MixinPopManager).\n    /// @param poolAccount The address of the rigoblock pool account.\n    /// @param popReward The pop reward.\n    function creditPopReward(\n        address poolAccount,\n        uint256 popReward\n    )\n        external\n        payable;\n\n    /// @dev Removes an existing proof_of_performance address.\n    /// @param addr Address of proof_of_performance contract to remove.\n    function removePopAddress(address addr)\n        external;\n\n    /// @dev Set all configurable parameters at once.\n    /// @param _epochDurationInSeconds Minimum seconds between epochs.\n    /// @param _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @param _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @param _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @param _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function setParams(\n        uint256 _epochDurationInSeconds,\n        uint32 _rewardDelegatedStakeWeight,\n        uint256 _minimumPoolStake,\n        uint32 _cobbDouglasAlphaNumerator,\n        uint32 _cobbDouglasAlphaDenominator\n    )\n        external;\n\n    /// @dev Stake GRG tokens. Tokens are deposited into the GRG Vault.\n    ///      Unstake to retrieve the GRG. Stake is in the 'Active' status.\n    /// @param amount of GRG to stake.\n    function stake(uint256 amount)\n        external;\n\n    /// @dev Unstake. Tokens are withdrawn from the GRG Vault and returned to\n    ///      the staker. Stake must be in the 'undelegated' status in both the\n    ///      current and next epoch in order to be unstaked.\n    /// @param amount of GRG to unstake.\n    function unstake(uint256 amount)\n        external;\n\n    /// @dev Withdraws the caller's WETH rewards that have accumulated\n    ///      until the last epoch.\n    /// @param poolId Unique id of pool.\n    function withdrawDelegatorRewards(bytes32 poolId)\n        external;\n\n    /// @dev Computes the reward balance in ETH of a specific member of a pool.\n    /// @param poolId Unique id of pool.\n    /// @param member The member of the pool.\n    /// @return reward Balance in ETH.\n    function computeRewardBalanceOfDelegator(bytes32 poolId, address member)\n        external\n        view\n        returns (uint256 reward);\n\n    /// @dev Computes the reward balance in ETH of the operator of a pool.\n    /// @param poolId Unique id of pool.\n    /// @return reward Balance in ETH.\n    function computeRewardBalanceOfOperator(bytes32 poolId)\n        external\n        view\n        returns (uint256 reward);\n\n    /// @dev Returns the earliest end time in seconds of this epoch.\n    ///      The next epoch can begin once this time is reached.\n    ///      Epoch period = [startTimeInSeconds..endTimeInSeconds)\n    /// @return Time in seconds.\n    function getCurrentEpochEarliestEndTimeInSeconds()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Gets global stake for a given status.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Global stake for given status.\n    function getGlobalStakeByStatus(IStructs.StakeStatus stakeStatus)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Gets an owner's stake balances by status.\n    /// @param staker Owner of stake.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Owner's stake balances for given status.\n    function getOwnerStakeByStatus(\n        address staker,\n        IStructs.StakeStatus stakeStatus\n    )\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Returns the total stake for a given staker.\n    /// @param staker of stake.\n    /// @return Total GRG staked by `staker`.\n    function getTotalStake(address staker)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Retrieves all configurable parameter values.\n    /// @return _epochDurationInSeconds Minimum seconds between epochs.\n    /// @return _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @return _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @return _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @return _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function getParams()\n        external\n        view\n        returns (\n            uint256 _epochDurationInSeconds,\n            uint32 _rewardDelegatedStakeWeight,\n            uint256 _minimumPoolStake,\n            uint32 _cobbDouglasAlphaNumerator,\n            uint32 _cobbDouglasAlphaDenominator\n        );\n\n    /// @param staker of stake.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Stake delegated to pool by staker.\n    function getStakeDelegatedToPoolByOwner(address staker, bytes32 poolId)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Returns a staking pool\n    /// @param poolId Unique id of pool.\n    function getStakingPool(bytes32 poolId)\n        external\n        view\n        returns (IStructs.Pool memory);\n\n    /// @dev Get stats on a staking pool in this epoch.\n    /// @param poolId Pool Id to query.\n    /// @return PoolStats struct for pool id.\n    function getStakingPoolStatsThisEpoch(bytes32 poolId)\n        external\n        view\n        returns (IStructs.PoolStats memory);\n\n    /// @dev Returns the total stake delegated to a specific staking pool,\n    ///      across all members.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Total stake delegated to pool.\n    function getTotalStakeDelegatedToPool(bytes32 poolId)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev An overridable way to access the deployed GRG contract.\n    ///      Must be view to allow overrides to access state.\n    /// @return grgContract The GRG contract instance.\n    function getGrgContract()\n        external\n        view\n        returns (RigoTokenFace grgContract);\n\n    /// @dev An overridable way to access the deployed dragoRegistry.\n    ///      Must be view to allow overrides to access state.\n    /// @return dragoRegistry The dragoRegistry contract.\n    function getDragoRegistry()\n        external\n        view\n        returns (IDragoRegistry dragoRegistry);\n\n    /// @dev An overridable way to access the deployed grgVault.\n    ///      Must be view to allow overrides to access state.\n    /// @return grgVault The grgVault contract.\n    function getGrgVault()\n        external\n        view\n        returns (IGrgVault grgVault);\n}\n",
		"../rigoToken/RigoToken/RigoTokenFace.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.5.0;\n\n/// @title Rigo Token Interface - Allows interaction with the Rigo token.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface RigoTokenFace {\n\n    function minter() external view returns (address);\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n\n    function mintToken(address _recipient, uint256 _amount) external;\n    function changeMintingAddress(address _newAddress) external;\n    function changeRigoblockAddress(address _newAddress) external;\n}\n",
		"../protocol/DragoRegistry/IDragoRegistry.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Drago Registry Interface - Allows external interaction with Drago Registry.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface IDragoRegistry {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function register(address _drago, string calldata _name, string calldata _symbol, uint256 _dragoId, address _owner) external payable returns (bool);\n    function unregister(uint256 _id) external;\n    function setMeta(uint256 _id, bytes32 _key, bytes32 _value) external;\n    function addGroup(address _group) external;\n    function setFee(uint256 _fee) external;\n    function updateOwner(uint256 _id) external;\n    function updateOwners(uint256[] calldata _id) external;\n    function upgrade(address _newAddress) external payable; //payable as there is a transfer of value, otherwise opcode might throw an error\n    function setUpgraded(uint256 _version) external;\n    function drain() external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function dragoCount() external view returns (uint256);\n    function fromId(uint256 _id) external view returns (address drago, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromAddress(address _drago) external view returns (uint256 id, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromName(string calldata _name) external view returns (uint256 id, address drago, string memory symbol, uint256 dragoId, address owner, address group);\n    function getNameFromAddress(address _pool) external view returns (string memory);\n    function getSymbolFromAddress(address _pool) external view returns (string memory);\n    function meta(uint256 _id, bytes32 _key) external view returns (bytes32);\n    function getGroups() external view returns (address[] memory);\n    function getFee() external view returns (uint256);\n}\n",
		"./interfaces/IStructs.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IStructs {\n\n    /// @dev Stats for a pool that earned rewards.\n    /// @param feesCollected Fees collected in ETH by this pool.\n    /// @param weightedStake Amount of weighted stake in the pool.\n    /// @param membersStake Amount of non-operator stake in the pool.\n    struct PoolStats {\n        uint256 feesCollected;\n        uint256 weightedStake;\n        uint256 membersStake;\n    }\n\n    /// @dev Holds stats aggregated across a set of pools.\n    /// @param rewardsAvailable Rewards (ETH) available to the epoch\n    ///        being finalized (the previous epoch). This is simply the balance\n    ///        of the contract at the end of the epoch.\n    /// @param numPoolsToFinalize The number of pools that have yet to be finalized through `finalizePools()`.\n    /// @param totalFeesCollected The total fees collected for the epoch being finalized.\n    /// @param totalWeightedStake The total fees collected for the epoch being finalized.\n    /// @param totalRewardsFinalized Amount of rewards that have been paid during finalization.\n    struct AggregatedStats {\n        uint256 rewardsAvailable;\n        uint256 numPoolsToFinalize;\n        uint256 totalFeesCollected;\n        uint256 totalWeightedStake;\n        uint256 totalRewardsFinalized;\n    }\n\n    /// @dev Encapsulates a balance for the current and next epochs.\n    /// Note that these balances may be stale if the current epoch\n    /// is greater than `currentEpoch`.\n    /// @param currentEpoch The current epoch\n    /// @param currentEpochBalance Balance in the current epoch.\n    /// @param nextEpochBalance Balance in `currentEpoch+1`.\n    struct StoredBalance {\n        uint64 currentEpoch;\n        uint96 currentEpochBalance;\n        uint96 nextEpochBalance;\n    }\n\n    /// @dev Statuses that stake can exist in.\n    ///      Any stake can be (re)delegated effective at the next epoch\n    ///      Undelegated stake can be withdrawn if it is available in both the current and next epoch\n    enum StakeStatus {\n        UNDELEGATED,\n        DELEGATED\n    }\n\n    /// @dev Info used to describe a status.\n    /// @param status Status of the stake.\n    /// @param poolId Unique Id of pool. This is set when status=DELEGATED.\n    struct StakeInfo {\n        StakeStatus status;\n        bytes32 poolId;\n    }\n\n    /// @dev Struct to represent a fraction.\n    /// @param numerator Numerator of fraction.\n    /// @param denominator Denominator of fraction.\n    struct Fraction {\n        uint256 numerator;\n        uint256 denominator;\n    }\n\n    /// @dev Holds the metadata for a staking pool.\n    /// @param operator Operator of the pool.\n    /// @param stakingPal Staking pal of the pool.\n    /// @param operatorShare Fraction of the total balance owned by the operator, in ppm.\n    /// @param stakingPalShare Fraction of the operator reward owned by the staking pal, in ppm.\n    struct Pool {\n        address operator;\n        address stakingPal;\n        uint32 operatorShare;\n        uint32 stakingPalShare;\n    }\n}\n",
		"./interfaces/IGrgVault.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IGrgVault {\n\n    /// @dev Emmitted whenever a StakingProxy is set in a vault.\n    event StakingProxySet(address stakingProxyAddress);\n\n    /// @dev Emitted when the Staking contract is put into Catastrophic Failure Mode\n    /// @param sender Address of sender (`msg.sender`)\n    event InCatastrophicFailureMode(address sender);\n\n    /// @dev Emitted when Grg Tokens are deposited into the vault.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens deposited.\n    event Deposit(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted when Grg Tokens are withdrawn from the vault.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens withdrawn.\n    event Withdraw(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted whenever the GRG AssetProxy is set.\n    event GrgProxySet(address grgProxyAddress);\n\n    /// @dev Sets the address of the StakingProxy contract.\n    /// Note that only the contract staker can call this function.\n    /// @param _stakingProxyAddress Address of Staking proxy contract.\n    function setStakingProxy(address _stakingProxyAddress)\n        external;\n\n    /// @dev Vault enters into Catastrophic Failure Mode.\n    /// *** WARNING - ONCE IN CATOSTROPHIC FAILURE MODE, YOU CAN NEVER GO BACK! ***\n    /// Note that only the contract staker can call this function.\n    function enterCatastrophicFailure()\n        external;\n\n    /// @dev Sets the Grg proxy.\n    /// Note that only the contract staker can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param grgProxyAddress Address of the RigoBlock Grg Proxy.\n    function setGrgProxy(address grgProxyAddress)\n        external;\n\n    /// @dev Deposit an `amount` of Grg Tokens from `staker` into the vault.\n    /// Note that only the Staking contract can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens to deposit.\n    function depositFrom(address staker, uint256 amount)\n        external;\n\n    /// @dev Withdraw an `amount` of Grg Tokens to `staker` from the vault.\n    /// Note that only the Staking contract can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens to withdraw.\n    function withdrawFrom(address staker, uint256 amount)\n        external;\n\n    /// @dev Withdraw ALL Grg Tokens to `staker` from the vault.\n    /// Note that this can only be called when *in* Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    function withdrawAllFrom(address staker)\n        external\n        returns (uint256);\n\n    /// @dev Returns the balance in Grg Tokens of the `staker`\n    /// @return Balance in Grg.\n    function balanceOf(address staker)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the entire balance of Grg tokens in the vault.\n    function balanceOfGrgVault()\n        external\n        view\n        returns (uint256);\n}\n",
		"./sys/MixinParams.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../immutable/MixinStorage.sol\";\nimport \"../immutable/MixinConstants.sol\";\nimport \"../interfaces/IStakingEvents.sol\";\nimport \"../interfaces/IStakingProxy.sol\";\nimport \"../interfaces/IStaking.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\n\n\nabstract contract MixinParams is\n    IStaking,\n    IStakingEvents,\n    MixinStorage,\n    MixinConstants\n{\n    /// @dev Set all configurable parameters at once.\n    /// @param _epochDurationInSeconds Minimum seconds between epochs.\n    /// @param _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @param _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @param _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @param _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function setParams(\n        uint256 _epochDurationInSeconds,\n        uint32 _rewardDelegatedStakeWeight,\n        uint256 _minimumPoolStake,\n        uint32 _cobbDouglasAlphaNumerator,\n        uint32 _cobbDouglasAlphaDenominator\n    )\n        external\n        override\n        onlyAuthorized\n    {\n        _setParams(\n            _epochDurationInSeconds,\n            _rewardDelegatedStakeWeight,\n            _minimumPoolStake,\n            _cobbDouglasAlphaNumerator,\n            _cobbDouglasAlphaDenominator\n        );\n\n        // Let the staking proxy enforce that these parameters are within\n        // acceptable ranges.\n        IStakingProxy(address(this)).assertValidStorageParams();\n    }\n\n    /// @dev Retrieves all configurable parameter values.\n    /// @return _epochDurationInSeconds Minimum seconds between epochs.\n    /// @return _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @return _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @return _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @return _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function getParams()\n        external\n        view\n        override\n        returns (\n            uint256 _epochDurationInSeconds,\n            uint32 _rewardDelegatedStakeWeight,\n            uint256 _minimumPoolStake,\n            uint32 _cobbDouglasAlphaNumerator,\n            uint32 _cobbDouglasAlphaDenominator\n        )\n    {\n        _epochDurationInSeconds = epochDurationInSeconds;\n        _rewardDelegatedStakeWeight = rewardDelegatedStakeWeight;\n        _minimumPoolStake = minimumPoolStake;\n        _cobbDouglasAlphaNumerator = cobbDouglasAlphaNumerator;\n        _cobbDouglasAlphaDenominator = cobbDouglasAlphaDenominator;\n    }\n\n    /// @dev Initialize storage belonging to this mixin.\n    function _initMixinParams()\n        internal\n    {\n        // Ensure state is uninitialized.\n        _assertParamsNotInitialized();\n\n        // Set up defaults.\n        uint256 _epochDurationInSeconds = 14 days;\n        uint32 _rewardDelegatedStakeWeight = (90 * PPM_DENOMINATOR) / 100;\n        uint256 _minimumPoolStake = 100 * MIN_TOKEN_VALUE;\n        uint32 _cobbDouglasAlphaNumerator = 2;\n        uint32 _cobbDouglasAlphaDenominator = 3;\n\n        _setParams(\n            _epochDurationInSeconds,\n            _rewardDelegatedStakeWeight,\n            _minimumPoolStake,\n            _cobbDouglasAlphaNumerator,\n            _cobbDouglasAlphaDenominator\n        );\n    }\n\n    /// @dev Asserts that upgradable storage has not yet been initialized.\n    function _assertParamsNotInitialized()\n        internal\n        view\n    {\n        if (epochDurationInSeconds != 0 &&\n            rewardDelegatedStakeWeight != 0 &&\n            minimumPoolStake != 0 &&\n            cobbDouglasAlphaNumerator != 0 &&\n            cobbDouglasAlphaDenominator != 0\n        ) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InitializationError(\n                    LibStakingRichErrors.InitializationErrorCodes.MixinParamsAlreadyInitialized\n                )\n            );\n        }\n    }\n\n    /// @dev Set all configurable parameters at once.\n    /// @param _epochDurationInSeconds Minimum seconds between epochs.\n    /// @param _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @param _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @param _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @param _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function _setParams(\n        uint256 _epochDurationInSeconds,\n        uint32 _rewardDelegatedStakeWeight,\n        uint256 _minimumPoolStake,\n        uint32 _cobbDouglasAlphaNumerator,\n        uint32 _cobbDouglasAlphaDenominator\n    )\n        private\n    {\n        epochDurationInSeconds = _epochDurationInSeconds;\n        rewardDelegatedStakeWeight = _rewardDelegatedStakeWeight;\n        minimumPoolStake = _minimumPoolStake;\n        cobbDouglasAlphaNumerator = _cobbDouglasAlphaNumerator;\n        cobbDouglasAlphaDenominator = _cobbDouglasAlphaDenominator;\n\n        emit ParamsSet(\n            _epochDurationInSeconds,\n            _rewardDelegatedStakeWeight,\n            _minimumPoolStake,\n            _cobbDouglasAlphaNumerator,\n            _cobbDouglasAlphaDenominator\n        );\n    }\n}\n",
		"../utils/0xUtils/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
		"./immutable/MixinStorage.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinConstants.sol\";\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/Authorizable.sol\";\nimport \"../interfaces/IGrgVault.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\n\n\n// solhint-disable max-states-count, no-empty-blocks\nabstract contract MixinStorage is\n    Authorizable\n{\n    // address of staking contract\n    address public stakingContract;\n\n    // mapping from StakeStatus to global stored balance\n    // NOTE: only Status.DELEGATED is used to access this mapping, but this format\n    // is used for extensibility\n    mapping (uint8 => IStructs.StoredBalance) internal _globalStakeByStatus;\n\n    // mapping from StakeStatus to address of staker to stored balance\n    mapping (uint8 => mapping (address => IStructs.StoredBalance)) internal _ownerStakeByStatus;\n\n    // Mapping from Owner to Pool Id to Amount Delegated\n    mapping (address => mapping (bytes32 => IStructs.StoredBalance)) internal _delegatedStakeToPoolByOwner;\n\n    // Mapping from Pool Id to Amount Delegated\n    mapping (bytes32 => IStructs.StoredBalance) internal _delegatedStakeByPoolId;\n\n    /// @dev Mapping from RigoBlock pool subaccount to pool Id of rigoblock pool\n    /// @dev 0 RigoBlock pool subaccount address.\n    /// @return 0 The pool ID.\n    mapping (address => bytes32) public poolIdByRbPoolAccount;\n\n    // mapping from Pool Id to Pool\n    mapping (bytes32 => IStructs.Pool) internal _poolById;\n\n    /// @dev mapping from pool ID to reward balance of members\n    /// @dev 0 Pool ID.\n    /// @return 0 The total reward balance of members in this pool.\n    mapping (bytes32 => uint256) public rewardsByPoolId;\n\n    // The current epoch.\n    uint256 public currentEpoch;\n\n    // The current epoch start time.\n    uint256 public currentEpochStartTimeInSeconds;\n\n    // mapping from Pool Id to Epoch to Reward Ratio\n    mapping (bytes32 => mapping (uint256 => IStructs.Fraction)) internal _cumulativeRewardsByPool;\n\n    // mapping from Pool Id to Epoch\n    mapping (bytes32 => uint256) internal _cumulativeRewardsByPoolLastStored;\n\n    /// @dev Registered RigoBlock Proof_of_Performance contracts, capable of paying protocol fees.\n    /// @dev 0 The address to check.\n    /// @return 0 Whether the address is a registered proof_of_performance.\n    mapping (address => bool) public validPops;\n\n    /* Tweakable parameters */\n\n    // Minimum seconds between epochs.\n    uint256 public epochDurationInSeconds;\n\n    // How much delegated stake is weighted vs operator stake, in ppm.\n    uint32 public rewardDelegatedStakeWeight;\n\n    // Minimum amount of stake required in a pool to collect rewards.\n    uint256 public minimumPoolStake;\n\n    // Numerator for cobb douglas alpha factor.\n    uint32 public cobbDouglasAlphaNumerator;\n\n    // Denominator for cobb douglas alpha factor.\n    uint32 public cobbDouglasAlphaDenominator;\n\n    /* State for finalization */\n\n    /// @dev Stats for each pool that generated fees with sufficient stake to earn rewards.\n    ///      See `_minimumPoolStake` in `MixinParams`.\n    /// @dev 0 Pool ID.\n    /// @dev 1 Epoch number.\n    /// @return 0 Pool fee stats.\n    mapping (bytes32 => mapping (uint256 => IStructs.PoolStats)) public poolStatsByEpoch;\n\n    /// @dev Aggregated stats across all pools that generated fees with sufficient stake to earn rewards.\n    ///      See `_minimumPoolStake` in MixinParams.\n    /// @dev 0 Epoch number.\n    /// @return 0 Reward computation stats.\n    mapping (uint256 => IStructs.AggregatedStats) public aggregatedStatsByEpoch;\n\n    /// @dev The GRG balance of this contract that is reserved for pool reward payouts.\n    uint256 public grgReservedForPoolRewards;\n}\n",
		"./immutable/MixinConstants.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nabstract contract MixinConstants {\n\n    // 100% in parts-per-million.\n    uint32 constant internal PPM_DENOMINATOR = 10**6;\n\n    bytes32 constant internal NIL_POOL_ID = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    address constant internal NIL_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n    uint256 constant internal MIN_TOKEN_VALUE = 10**18;\n}\n",
		"../utils/0xUtils/Authorizable.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./interfaces/IAuthorizable.sol\";\nimport \"./LibAuthorizableRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\nimport \"./Ownable.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract Authorizable is\n    Ownable,\n    IAuthorizable\n{\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        _assertSenderIsAuthorized();\n        _;\n    }\n\n    /// @dev Whether an address is authorized to call privileged functions.\n    /// @dev 0 Address to query.\n    /// @return 0 Whether the address is authorized.\n    mapping (address => bool) public authorized;\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @dev 0 Index of authorized address.\n    /// @return 0 Authorized address.\n    address[] public authorities;\n\n    /// @dev Initializes the `owner` address.\n    constructor()\n        Ownable()\n    {}\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        _addAuthorizedAddress(target);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        if (!authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetNotAuthorizedError(target));\n        }\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                _removeAuthorizedAddressAtIndex(target, i);\n                break;\n            }\n        }\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        override\n        onlyOwner\n    {\n        _removeAuthorizedAddressAtIndex(target, index);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        override\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n\n    /// @dev Reverts if msg.sender is not authorized.\n    function _assertSenderIsAuthorized()\n        internal\n        view\n    {\n        if (!authorized[msg.sender]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.SenderNotAuthorizedError(msg.sender));\n        }\n    }\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function _addAuthorizedAddress(address target)\n        internal\n    {\n        // Ensure that the target is not the zero address.\n        if (target == address(0)) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.ZeroCantBeAuthorizedError());\n        }\n\n        // Ensure that the target is not already authorized.\n        if (authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetAlreadyAuthorizedError(target));\n        }\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorization of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function _removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        internal\n    {\n        if (!authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetNotAuthorizedError(target));\n        }\n        if (index >= authorities.length) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.IndexOutOfBoundsError(\n                index,\n                authorities.length\n            ));\n        }\n        if (authorities[index] != target) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.AuthorizedAddressMismatchError(\n                authorities[index],\n                target\n            ));\n        }\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.pop();\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n}\n",
		"../utils/0xUtils/interfaces/IAuthorizable.sol": "/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nabstract contract IAuthorizable {\n\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        virtual;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        virtual;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        virtual;\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        virtual\n        returns (address[] memory);\n}\n",
		"../utils/0xUtils/LibAuthorizableRichErrors.sol": "/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nlibrary LibAuthorizableRichErrors {\n\n    // bytes4(keccak256(\"AuthorizedAddressMismatchError(address,address)\"))\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\n        0x140a84db;\n\n    // bytes4(keccak256(\"IndexOutOfBoundsError(uint256,uint256)\"))\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\n        0xe9f83771;\n\n    // bytes4(keccak256(\"SenderNotAuthorizedError(address)\"))\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xb65a25b9;\n\n    // bytes4(keccak256(\"TargetAlreadyAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\n        0xde16f1a0;\n\n    // bytes4(keccak256(\"TargetNotAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xeb5108a2;\n\n    // bytes4(keccak256(\"ZeroCantBeAuthorizedError()\"))\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\n        hex\"57654fe4\";\n\n    // solhint-disable func-name-mixedcase\n    function AuthorizedAddressMismatchError(\n        address authorized,\n        address target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\n            authorized,\n            target\n        );\n    }\n\n    function IndexOutOfBoundsError(\n        uint256 index,\n        uint256 length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\n            index,\n            length\n        );\n    }\n\n    function SenderNotAuthorizedError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\n            sender\n        );\n    }\n\n    function TargetAlreadyAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function TargetNotAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function ZeroCantBeAuthorizedError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\n    }\n}\n",
		"../utils/0xUtils/Ownable.sol": "/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./interfaces/IOwnable.sol\";\nimport \"./LibOwnableRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\ncontract Ownable is\n    IOwnable\n{\n    /// @dev The owner of this contract.\n    /// @return 0 The owner address.\n    address public owner;\n\n    constructor ()\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    /// @dev Change the owner of this contract.\n    /// @param newOwner New owner address.\n    function transferOwnership(address newOwner)\n        public\n        override\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            LibRichErrors.rrevert(LibOwnableRichErrors.TransferOwnerToZeroError());\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            LibRichErrors.rrevert(LibOwnableRichErrors.OnlyOwnerError(\n                msg.sender,\n                owner\n            ));\n        }\n    }\n}\n",
		"../utils/0xUtils/interfaces/IOwnable.sol": "/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nabstract contract IOwnable {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner)\n        public\n        virtual;\n}\n",
		"../utils/0xUtils/LibOwnableRichErrors.sol": "pragma solidity >=0.5.9 <0.8.0;\n\n\nlibrary LibOwnableRichErrors {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n",
		"./libs/LibStakingRichErrors.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../interfaces/IStructs.sol\";\n\n\nlibrary LibStakingRichErrors {\n\n    enum OperatorShareErrorCodes {\n        OperatorShareTooLarge,\n        CanOnlyDecreaseOperatorShare\n    }\n\n    enum InitializationErrorCodes {\n        MixinSchedulerAlreadyInitialized,\n        MixinParamsAlreadyInitialized\n    }\n\n    enum InvalidParamValueErrorCodes {\n        InvalidCobbDouglasAlpha,\n        InvalidRewardDelegatedStakeWeight,\n        InvalidMaximumMakersInPool,\n        InvalidMinimumPoolStake,\n        InvalidEpochDuration\n    }\n\n    enum PopManagerErrorCodes {\n        PopAlreadyRegistered,\n        PopNotRegistered\n    }\n\n    // bytes4(keccak256(\"OnlyCallableByPopError(address)\"))\n    bytes4 internal constant ONLY_CALLABLE_BY_POP_ERROR_SELECTOR =\n        0x61ecb802;\n\n    // bytes4(keccak256(\"PopManagerError(uint8,address)\"))\n    bytes4 internal constant POP_MANAGER_ERROR_SELECTOR =\n        0xb9588e43;\n\n    // bytes4(keccak256(\"InsufficientBalanceError(uint256,uint256)\"))\n    bytes4 internal constant INSUFFICIENT_BALANCE_ERROR_SELECTOR =\n        0x84c8b7c9;\n\n    // bytes4(keccak256(\"OnlyCallableByPoolOperatorError(address,bytes32)\"))\n    bytes4 internal constant ONLY_CALLABLE_BY_POOL_OPERATOR_ERROR_SELECTOR =\n        0x82ded785;\n\n    // bytes4(keccak256(\"BlockTimestampTooLowError(uint256,uint256)\"))\n    bytes4 internal constant BLOCK_TIMESTAMP_TOO_LOW_ERROR_SELECTOR =\n        0xa6bcde47;\n\n    // bytes4(keccak256(\"OnlyCallableByStakingContractError(address)\"))\n    bytes4 internal constant ONLY_CALLABLE_BY_STAKING_CONTRACT_ERROR_SELECTOR =\n        0xca1d07a2;\n\n    // bytes4(keccak256(\"OnlyCallableIfInCatastrophicFailureError()\"))\n    bytes internal constant ONLY_CALLABLE_IF_IN_CATASTROPHIC_FAILURE_ERROR =\n        hex\"3ef081cc\";\n\n    // bytes4(keccak256(\"OnlyCallableIfNotInCatastrophicFailureError()\"))\n    bytes internal constant ONLY_CALLABLE_IF_NOT_IN_CATASTROPHIC_FAILURE_ERROR =\n        hex\"7dd020ce\";\n\n    // bytes4(keccak256(\"OperatorShareError(uint8,bytes32,uint32)\"))\n    bytes4 internal constant OPERATOR_SHARE_ERROR_SELECTOR =\n        0x22df9597;\n\n    // bytes4(keccak256(\"PoolExistenceError(bytes32,bool)\"))\n    bytes4 internal constant POOL_EXISTENCE_ERROR_SELECTOR =\n        0x9ae94f01;\n\n    // bytes4(keccak256(\"ProxyDestinationCannotBeNilError()\"))\n    bytes internal constant PROXY_DESTINATION_CANNOT_BE_NIL_ERROR =\n        hex\"6eff8285\";\n\n    // bytes4(keccak256(\"InitializationError(uint8)\"))\n    bytes4 internal constant INITIALIZATION_ERROR_SELECTOR =\n        0x0b02d773;\n\n    // bytes4(keccak256(\"InvalidParamValueError(uint8)\"))\n    bytes4 internal constant INVALID_PARAM_VALUE_ERROR_SELECTOR =\n        0xfc45bd11;\n\n    // bytes4(keccak256(\"InvalidProtocolFeePaymentError(uint256,uint256)\"))\n    bytes4 internal constant INVALID_PROTOCOL_FEE_PAYMENT_ERROR_SELECTOR =\n        0x31d7a505;\n\n    // bytes4(keccak256(\"PreviousEpochNotFinalizedError(uint256,uint256)\"))\n    bytes4 internal constant PREVIOUS_EPOCH_NOT_FINALIZED_ERROR_SELECTOR =\n        0x614b800a;\n\n    // bytes4(keccak256(\"PoolNotFinalizedError(bytes32,uint256)\"))\n    bytes4 internal constant POOL_NOT_FINALIZED_ERROR_SELECTOR =\n        0x5caa0b05;\n\n    // solhint-disable func-name-mixedcase\n    function OnlyCallableByPopError(\n        address senderAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_CALLABLE_BY_POP_ERROR_SELECTOR,\n            senderAddress\n        );\n    }\n\n    function PopManagerError(\n        PopManagerErrorCodes errorCodes,\n        address popAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            POP_MANAGER_ERROR_SELECTOR,\n            errorCodes,\n            popAddress\n        );\n    }\n\n    function InsufficientBalanceError(\n        uint256 amount,\n        uint256 balance\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INSUFFICIENT_BALANCE_ERROR_SELECTOR,\n            amount,\n            balance\n        );\n    }\n\n    function OnlyCallableByPoolOperatorError(\n        address senderAddress,\n        bytes32 poolId\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_CALLABLE_BY_POOL_OPERATOR_ERROR_SELECTOR,\n            senderAddress,\n            poolId\n        );\n    }\n\n    function BlockTimestampTooLowError(\n        uint256 epochEndTime,\n        uint256 currentBlockTimestamp\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            BLOCK_TIMESTAMP_TOO_LOW_ERROR_SELECTOR,\n            epochEndTime,\n            currentBlockTimestamp\n        );\n    }\n\n    function OnlyCallableByStakingContractError(\n        address senderAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_CALLABLE_BY_STAKING_CONTRACT_ERROR_SELECTOR,\n            senderAddress\n        );\n    }\n\n    function OnlyCallableIfInCatastrophicFailureError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ONLY_CALLABLE_IF_IN_CATASTROPHIC_FAILURE_ERROR;\n    }\n\n    function OnlyCallableIfNotInCatastrophicFailureError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ONLY_CALLABLE_IF_NOT_IN_CATASTROPHIC_FAILURE_ERROR;\n    }\n\n    function OperatorShareError(\n        OperatorShareErrorCodes errorCodes,\n        bytes32 poolId,\n        uint32 operatorShare\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            OPERATOR_SHARE_ERROR_SELECTOR,\n            errorCodes,\n            poolId,\n            operatorShare\n        );\n    }\n\n    function PoolExistenceError(\n        bytes32 poolId,\n        bool alreadyExists\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            POOL_EXISTENCE_ERROR_SELECTOR,\n            poolId,\n            alreadyExists\n        );\n    }\n\n    function InvalidProtocolFeePaymentError(\n        uint256 expectedProtocolFeePaid,\n        uint256 actualProtocolFeePaid\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_PROTOCOL_FEE_PAYMENT_ERROR_SELECTOR,\n            expectedProtocolFeePaid,\n            actualProtocolFeePaid\n        );\n    }\n\n    function InitializationError(InitializationErrorCodes code)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INITIALIZATION_ERROR_SELECTOR,\n            uint8(code)\n        );\n    }\n\n    function InvalidParamValueError(InvalidParamValueErrorCodes code)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_PARAM_VALUE_ERROR_SELECTOR,\n            uint8(code)\n        );\n    }\n\n    function ProxyDestinationCannotBeNilError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return PROXY_DESTINATION_CANNOT_BE_NIL_ERROR;\n    }\n\n    function PreviousEpochNotFinalizedError(\n        uint256 unfinalizedEpoch,\n        uint256 unfinalizedPoolsRemaining\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            PREVIOUS_EPOCH_NOT_FINALIZED_ERROR_SELECTOR,\n            unfinalizedEpoch,\n            unfinalizedPoolsRemaining\n        );\n    }\n\n    function PoolNotFinalizedError(\n        bytes32 poolId,\n        uint256 epoch\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            POOL_NOT_FINALIZED_ERROR_SELECTOR,\n            poolId,\n            epoch\n        );\n    }\n}\n",
		"./interfaces/IStakingEvents.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IStakingEvents {\n\n    /// @dev Emitted by MixinStake when GRG is staked.\n    /// @param staker of GRG.\n    /// @param amount of GRG staked.\n    event Stake(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted by MixinStake when GRG is unstaked.\n    /// @param staker of GRG.\n    /// @param amount of GRG unstaked.\n    event Unstake(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted by MixinStake when GRG is unstaked.\n    /// @param staker of GRG.\n    /// @param amount of GRG unstaked.\n    event MoveStake(\n        address indexed staker,\n        uint256 amount,\n        uint8 fromStatus,\n        bytes32 indexed fromPool,\n        uint8 toStatus,\n        bytes32 indexed toPool\n    );\n\n    /// @dev Emitted by MixinExchangeManager when an exchange is added.\n    /// @param exchangeAddress Address of new exchange.\n    event PopAdded(\n        address exchangeAddress\n    );\n\n    /// @dev Emitted by MixinExchangeManager when an exchange is removed.\n    /// @param exchangeAddress Address of removed exchange.\n    event PopRemoved(\n        address exchangeAddress\n    );\n\n    /// @dev Emitted by MixinExchangeFees when a pool starts earning rewards in an epoch.\n    /// @param epoch The epoch in which the pool earned rewards.\n    /// @param poolId The ID of the pool.\n    event StakingPoolEarnedRewardsInEpoch(\n        uint256 indexed epoch,\n        bytes32 indexed poolId\n    );\n\n    /// @dev Emitted by MixinFinalizer when an epoch has ended.\n    /// @param epoch The epoch that ended.\n    /// @param numPoolsToFinalize Number of pools that earned rewards during `epoch` and must be finalized.\n    /// @param rewardsAvailable Rewards available to all pools that earned rewards during `epoch`.\n    /// @param totalWeightedStake Total weighted stake across all pools that earned rewards during `epoch`.\n    /// @param totalFeesCollected Total fees collected across all pools that earned rewards during `epoch`.\n    event EpochEnded(\n        uint256 indexed epoch,\n        uint256 numPoolsToFinalize,\n        uint256 rewardsAvailable,\n        uint256 totalFeesCollected,\n        uint256 totalWeightedStake\n    );\n\n    /// @dev Emitted by MixinFinalizer when an epoch is fully finalized.\n    /// @param epoch The epoch being finalized.\n    /// @param rewardsPaid Total amount of rewards paid out.\n    /// @param rewardsRemaining Rewards left over.\n    event EpochFinalized(\n        uint256 indexed epoch,\n        uint256 rewardsPaid,\n        uint256 rewardsRemaining\n    );\n\n    /// @dev Emitted by MixinFinalizer when rewards are paid out to a pool.\n    /// @param epoch The epoch when the rewards were paid out.\n    /// @param poolId The pool's ID.\n    /// @param operatorReward Amount of reward paid to pool operator.\n    /// @param membersReward Amount of reward paid to pool members.\n    event RewardsPaid(\n        uint256 indexed epoch,\n        bytes32 indexed poolId,\n        uint256 operatorReward,\n        uint256 membersReward\n    );\n\n    /// @dev Emitted whenever staking parameters are changed via the `setParams()` function.\n    /// @param epochDurationInSeconds Minimum seconds between epochs.\n    /// @param rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @param minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @param cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @param cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    event ParamsSet(\n        uint256 epochDurationInSeconds,\n        uint32 rewardDelegatedStakeWeight,\n        uint256 minimumPoolStake,\n        uint256 cobbDouglasAlphaNumerator,\n        uint256 cobbDouglasAlphaDenominator\n    );\n\n    /// @dev Emitted by MixinStakingPool when a new pool is created.\n    /// @param poolId Unique id generated for pool.\n    /// @param operator The operator (creator) of pool.\n    /// @param operatorShare The share of rewards given to the operator, in ppm.\n    event StakingPoolCreated(\n        bytes32 poolId,\n        address operator,\n        uint32 operatorShare\n    );\n\n    /// @dev Emitted by MixinStakingPool when a rigoblock pool is added to its staking pool.\n    /// @param rbPoolAddress Adress of maker added to pool.\n    /// @param poolId Unique id of pool.\n    event RbPoolStakingPoolSet(\n        address indexed rbPoolAddress,\n        bytes32 indexed poolId\n    );\n\n    /// @dev Emitted when a staking pool's operator share is decreased.\n    /// @param poolId Unique Id of pool.\n    /// @param oldOperatorShare Previous share of rewards owned by operator.\n    /// @param newOperatorShare Newly decreased share of rewards owned by operator.\n    event OperatorShareDecreased(\n        bytes32 indexed poolId,\n        uint32 oldOperatorShare,\n        uint32 newOperatorShare\n    );\n    \n    /// @dev Emitted when an inflation mint call is executed successfully.\n    /// @param grgAmount Amount of GRG tokens minted to the staking proxy.\n    event GrgMintEvent(uint256 grgAmount);\n    \n    /// @dev Emitted whenever an inflation mint call is reverted.\n    /// @param reason String of the revert message.\n    event CatchStringEvent(string reason);\n    \n    /// @dev Emitted to catch any other inflation mint call fail.\n    /// @param reason Bytes output of the reverted transaction.\n    event ReturnDataEvent(bytes reason);\n}\n",
		"./interfaces/IStakingProxy.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IStructs.sol\";\n\n\nabstract contract IStakingProxy {\n\n    /// @dev Emitted by StakingProxy when a staking contract is attached.\n    /// @param newStakingContractAddress Address of newly attached staking contract.\n    event StakingContractAttachedToProxy(\n        address newStakingContractAddress\n    );\n\n    /// @dev Emitted by StakingProxy when a staking contract is detached.\n    event StakingContractDetachedFromProxy();\n\n    /// @dev Attach a staking contract; future calls will be delegated to the staking contract.\n    /// Note that this is callable only by an authorized address.\n    /// @param _stakingContract Address of staking contract.\n    function attachStakingContract(address _stakingContract)\n        external\n        virtual;\n\n    /// @dev Detach the current staking contract.\n    /// Note that this is callable only by an authorized address.\n    function detachStakingContract()\n        external\n        virtual;\n\n    /// @dev Asserts that an epoch is between 5 and 30 days long.\n    //       Asserts that 0 < cobb douglas alpha value <= 1.\n    //       Asserts that a stake weight is <= 100%.\n    //       Asserts that pools allow >= 1 maker.\n    //       Asserts that all addresses are initialized.\n    function assertValidStorageParams()\n        external\n        view\n        virtual;\n}\n",
		"./stake/MixinStake.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../staking_pools/MixinStakingPool.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\n\n\nabstract contract MixinStake is\n    MixinStakingPool\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Stake GRG tokens. Tokens are deposited into the GRG Vault.\n    ///      Unstake to retrieve the GRG. Stake is in the 'Active' status.\n    /// @param amount Amount of GRG to stake.\n    function stake(uint256 amount)\n        external\n        override\n    {\n        address staker = msg.sender;\n\n        // deposit equivalent amount of GRG into vault\n        getGrgVault().depositFrom(staker, amount);\n\n        // mint stake\n        _increaseCurrentAndNextBalance(\n            _ownerStakeByStatus[uint8(IStructs.StakeStatus.UNDELEGATED)][staker],\n            amount\n        );\n\n        // notify\n        emit Stake(\n            staker,\n            amount\n        );\n    }\n\n    /// @dev Unstake. Tokens are withdrawn from the GRG Vault and returned to\n    ///      the staker. Stake must be in the 'undelegated' status in both the\n    ///      current and next epoch in order to be unstaked.\n    /// @param amount Amount of GRG to unstake.\n    function unstake(uint256 amount)\n        external\n        override\n    {\n        address staker = msg.sender;\n\n        IStructs.StoredBalance memory undelegatedBalance =\n            _loadCurrentBalance(_ownerStakeByStatus[uint8(IStructs.StakeStatus.UNDELEGATED)][staker]);\n\n        // stake must be undelegated in current and next epoch to be withdrawn\n        uint256 currentWithdrawableStake = LibSafeMath.min256(\n            undelegatedBalance.currentEpochBalance,\n            undelegatedBalance.nextEpochBalance\n        );\n\n        if (amount > currentWithdrawableStake) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InsufficientBalanceError(\n                    amount,\n                    currentWithdrawableStake\n                )\n            );\n        }\n\n        // burn undelegated stake\n        _decreaseCurrentAndNextBalance(\n            _ownerStakeByStatus[uint8(IStructs.StakeStatus.UNDELEGATED)][staker],\n            amount\n        );\n\n        // withdraw equivalent amount of GRG from vault\n        getGrgVault().withdrawFrom(staker, amount);\n\n        // emit stake event\n        emit Unstake(\n            staker,\n            amount\n        );\n    }\n\n    /// @dev Moves stake between statuses: 'undelegated' or 'delegated'.\n    ///      Delegated stake can also be moved between pools.\n    ///      This change comes into effect next epoch.\n    /// @param from Status to move stake out of.\n    /// @param to Status to move stake into.\n    /// @param amount Amount of stake to move.\n    function moveStake(\n        IStructs.StakeInfo calldata from,\n        IStructs.StakeInfo calldata to,\n        uint256 amount\n    )\n        external\n        override\n    {\n        address staker = msg.sender;\n\n        // Sanity check: no-op if no stake is being moved.\n        if (amount == 0) {\n            return;\n        }\n\n        // Sanity check: no-op if moving stake from undelegated to undelegated.\n        if (from.status == IStructs.StakeStatus.UNDELEGATED &&\n            to.status == IStructs.StakeStatus.UNDELEGATED) {\n            return;\n        }\n\n        // handle delegation\n        if (from.status == IStructs.StakeStatus.DELEGATED) {\n            _undelegateStake(\n                from.poolId,\n                staker,\n                amount\n            );\n        }\n\n        if (to.status == IStructs.StakeStatus.DELEGATED) {\n            _delegateStake(\n                to.poolId,\n                staker,\n                amount\n            );\n        }\n\n        // execute move\n        IStructs.StoredBalance storage fromPtr = _ownerStakeByStatus[uint8(from.status)][staker];\n        IStructs.StoredBalance storage toPtr = _ownerStakeByStatus[uint8(to.status)][staker];\n        _moveStake(\n            fromPtr,\n            toPtr,\n            amount\n        );\n\n        // notify\n        emit MoveStake(\n            staker,\n            amount,\n            uint8(from.status),\n            from.poolId,\n            uint8(to.status),\n            to.poolId\n        );\n    }\n\n    /// @dev Delegates a owners stake to a staking pool.\n    /// @param poolId Id of pool to delegate to.\n    /// @param staker Owner who wants to delegate.\n    /// @param amount Amount of stake to delegate.\n    function _delegateStake(\n        bytes32 poolId,\n        address staker,\n        uint256 amount\n    )\n        private\n    {\n        // Sanity check the pool we're delegating to exists.\n        _assertStakingPoolExists(poolId);\n\n        _withdrawAndSyncDelegatorRewards(\n            poolId,\n            staker\n        );\n\n        // Increase how much stake the staker has delegated to the input pool.\n        _increaseNextBalance(\n            _delegatedStakeToPoolByOwner[staker][poolId],\n            amount\n        );\n\n        // Increase how much stake has been delegated to pool.\n        _increaseNextBalance(\n            _delegatedStakeByPoolId[poolId],\n            amount\n        );\n\n        // Increase next balance of global delegated stake.\n        _increaseNextBalance(\n            _globalStakeByStatus[uint8(IStructs.StakeStatus.DELEGATED)],\n            amount\n        );\n    }\n\n    /// @dev Un-Delegates a owners stake from a staking pool.\n    /// @param poolId Id of pool to un-delegate from.\n    /// @param staker Owner who wants to un-delegate.\n    /// @param amount Amount of stake to un-delegate.\n    function _undelegateStake(\n        bytes32 poolId,\n        address staker,\n        uint256 amount\n    )\n        private\n    {\n        // sanity check the pool we're undelegating from exists\n        _assertStakingPoolExists(poolId);\n\n        _withdrawAndSyncDelegatorRewards(\n            poolId,\n            staker\n        );\n\n        // Decrease how much stake the staker has delegated to the input pool.\n        _decreaseNextBalance(\n            _delegatedStakeToPoolByOwner[staker][poolId],\n            amount\n        );\n\n        // Decrease how much stake has been delegated to pool.\n        _decreaseNextBalance(\n            _delegatedStakeByPoolId[poolId],\n            amount\n        );\n\n        // Decrease next balance of global delegated stake (aggregated across all stakers).\n        _decreaseNextBalance(\n            _globalStakeByStatus[uint8(IStructs.StakeStatus.DELEGATED)],\n            amount\n        );\n    }\n}\n",
		"../utils/0xUtils/LibSafeMath.sol": "pragma solidity >=0.5.9 <0.8.0;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"../utils/0xUtils/LibSafeMathRichErrors.sol": "pragma solidity >=0.5.4 <0.8.0;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
		"./staking_pools/MixinStakingPool.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../sys/MixinAbstract.sol\";\nimport \"./MixinStakingPoolRewards.sol\";\n\n\nabstract contract MixinStakingPool is\n    MixinAbstract,\n    MixinStakingPoolRewards\n{\n    using LibSafeMath for uint256;\n    using LibSafeDowncast for uint256;\n\n    /// @dev Asserts that the sender is the operator of the input pool.\n    /// @param poolId Pool sender must be operator of.\n    modifier onlyStakingPoolOperator(bytes32 poolId) {\n        _assertSenderIsPoolOperator(poolId);\n        _;\n    }\n\n    /// @dev Create a new staking pool. The sender will be the staking pal of this pool.\n    /// Note that a staking pal must be payable.\n    /// @param rigoblockPoolAddress Adds rigoblock pool to the created staking pool for convenience if non-null.\n    /// @return poolId The unique pool id generated for this pool.\n    function createStakingPool(address rigoblockPoolAddress)\n        external\n        override\n        returns (bytes32 poolId)\n    {\n        (uint256 rbPoolId, , , , address rbPoolOwner, ) = getDragoRegistry().fromAddress(rigoblockPoolAddress);\n        require(\n            rbPoolId != uint256(0),\n            \"NON_REGISTERED_RB_POOL_ERROR\"\n        );\n        // note that an operator must be payable\n        address operator = rbPoolOwner;\n\n        // add stakingPal, which receives part of operator reward\n        address stakingPal = msg.sender;\n\n        // operator initially shares 30% with stakers\n        uint32 operatorShare = uint32(700000);\n\n        // staking pal received 10% of operator rewards\n        uint32 stakingPalShare = uint32(100000);\n\n        // check that staking pool does not exist and add unique id for this pool\n        _assertStakingPoolDoesNotExist(bytes32(rbPoolId));\n        poolId = bytes32(rbPoolId);\n\n        // @notice _assertNewOperatorShare if operatorShare, stakingPalShare are inputs after an upgrade\n\n        // create and store pool\n        IStructs.Pool memory pool = IStructs.Pool({\n            operator: operator,\n            stakingPal: stakingPal,\n            operatorShare: operatorShare,\n            stakingPalShare : stakingPalShare\n        });\n        _poolById[poolId] = pool;\n\n        // Staking pool has been created\n        emit StakingPoolCreated(poolId, operator, operatorShare);\n\n        joinStakingPoolAsRbPoolAccount(poolId, rigoblockPoolAddress);\n\n        return poolId;\n    }\n\n    /// @dev Allows the operator to update the staking pal address.\n    /// @param poolId Unique id of pool.\n    /// @param newStakingPalAddress Address of the new staking pal.\n    function setStakingPalAddress(bytes32 poolId, address newStakingPalAddress)\n        external\n        override\n        onlyStakingPoolOperator(poolId)\n    {\n        IStructs.Pool storage pool = _poolById[poolId];\n\n        if (newStakingPalAddress == address(0) || pool.stakingPal == newStakingPalAddress) {\n            return;\n        }\n\n        pool.stakingPal = newStakingPalAddress;\n    }\n\n    /// @dev Decreases the operator share for the given pool (i.e. increases pool rewards for members).\n    /// @param poolId Unique Id of pool.\n    /// @param newOperatorShare The newly decreased percentage of any rewards owned by the operator.\n    function decreaseStakingPoolOperatorShare(bytes32 poolId, uint32 newOperatorShare)\n        external\n        override\n        onlyStakingPoolOperator(poolId)\n    {\n        // load pool and assert that we can decrease\n        uint32 currentOperatorShare = _poolById[poolId].operatorShare;\n        _assertNewOperatorShare(\n            poolId,\n            currentOperatorShare,\n            newOperatorShare\n        );\n\n        // decrease operator share\n        _poolById[poolId].operatorShare = newOperatorShare;\n        emit OperatorShareDecreased(\n            poolId,\n            currentOperatorShare,\n            newOperatorShare\n        );\n    }\n\n    /// @dev Allows caller to join a staking pool as a rigoblock pool account.\n    /// @param poolId Unique id of pool.\n    /// @param rigoblockPoolAccount Address of subaccount to be added to staking pool.\n    function joinStakingPoolAsRbPoolAccount(\n        bytes32 poolId,\n        address rigoblockPoolAccount)\n        public\n        override\n    {\n        (address poolAddress, , , uint256 rbPoolId, , ) = getDragoRegistry().fromId(uint256(poolId));\n\n        // only rigoblock pools registered in drago registry can have accounts added to their staking pool\n        if (rbPoolId == uint256(0)) {\n            revert(\"NON_REGISTERED_POOL_ID_ERROR\");\n        }\n\n        // only allow pool itself to be registered account\n        if (poolAddress != rigoblockPoolAccount) {\n            revert(\"POOL_TO_JOIN_NOT_SELF_ERROR\");\n        }\n\n        // write to storage\n        poolIdByRbPoolAccount[poolAddress] = poolId;\n        emit RbPoolStakingPoolSet(\n            rigoblockPoolAccount,\n            poolId\n        );\n    }\n\n    /// @dev Returns a staking pool\n    /// @param poolId Unique id of pool.\n    function getStakingPool(bytes32 poolId)\n        public\n        view\n        override\n        returns (IStructs.Pool memory)\n    {\n        return _poolById[poolId];\n    }\n\n    /// @dev Reverts iff a staking pool does not exist.\n    /// @param poolId Unique id of pool.\n    function _assertStakingPoolExists(bytes32 poolId)\n        internal\n        view\n    {\n        if (_poolById[poolId].operator == NIL_ADDRESS) {\n            // we use the pool's operator as a proxy for its existence\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.PoolExistenceError(\n                    poolId,\n                    false\n                )\n            );\n        }\n    }\n\n    /// @dev Reverts iff a staking pool does exist.\n    /// @param poolId Unique id of pool.\n    function _assertStakingPoolDoesNotExist(bytes32 poolId)\n        internal\n        view\n    {\n        if (_poolById[poolId].operator != NIL_ADDRESS) {\n            // we use the pool's operator as a proxy for its existence\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.PoolExistenceError(\n                    poolId,\n                    false\n                )\n            );\n        }\n    }\n\n    /// @dev Reverts iff the new operator share is invalid.\n    /// @param poolId Unique id of pool.\n    /// @param currentOperatorShare Current operator share.\n    /// @param newOperatorShare New operator share.\n    function _assertNewOperatorShare(\n        bytes32 poolId,\n        uint32 currentOperatorShare,\n        uint32 newOperatorShare\n    )\n        private\n        pure\n    {\n        // sanity checks\n        if (newOperatorShare > PPM_DENOMINATOR) {\n            // operator share must be a valid fraction\n            LibRichErrors.rrevert(LibStakingRichErrors.OperatorShareError(\n                LibStakingRichErrors.OperatorShareErrorCodes.OperatorShareTooLarge,\n                poolId,\n                newOperatorShare\n            ));\n        } else if (newOperatorShare > currentOperatorShare) {\n            // new share must be less than or equal to the current share\n            LibRichErrors.rrevert(LibStakingRichErrors.OperatorShareError(\n                LibStakingRichErrors.OperatorShareErrorCodes.CanOnlyDecreaseOperatorShare,\n                poolId,\n                newOperatorShare\n            ));\n        }\n    }\n\n    /// @dev Asserts that the sender is the operator of the input pool.\n    /// @param poolId Pool sender must be operator of.\n    function _assertSenderIsPoolOperator(bytes32 poolId)\n        private\n        view\n    {\n        address operator = _poolById[poolId].operator;\n        if (msg.sender != operator) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.OnlyCallableByPoolOperatorError(\n                    msg.sender,\n                    poolId\n                )\n            );\n        }\n    }\n}\n",
		"./sys/MixinAbstract.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Exposes some internal functions from various contracts to avoid\n///      cyclical dependencies.\nabstract contract MixinAbstract {\n\n    /// @dev Computes the reward owed to a pool during finalization.\n    ///      Does nothing if the pool is already finalized.\n    /// @param poolId The pool's ID.\n    /// @return totalReward The total reward owed to a pool.\n    /// @return membersStake The total stake for all non-operator members in\n    ///         this pool.\n    function _getUnfinalizedPoolRewards(bytes32 poolId)\n        internal\n        view\n        virtual\n        returns (\n            uint256 totalReward,\n            uint256 membersStake\n        );\n\n    /// @dev Asserts that a pool has been finalized last epoch.\n    /// @param poolId The id of the pool that should have been finalized.\n    function _assertPoolFinalizedLastEpoch(bytes32 poolId)\n        internal\n        view\n        virtual;\n}\n",
		"./staking_pools/MixinStakingPoolRewards.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibMath.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../interfaces/IStaking.sol\";\nimport \"./MixinCumulativeRewards.sol\";\nimport \"../sys/MixinAbstract.sol\";\n\n\nabstract contract MixinStakingPoolRewards is\n    IStaking,\n    MixinAbstract,\n    MixinCumulativeRewards\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Withdraws the caller's WETH rewards that have accumulated\n    ///      until the last epoch.\n    /// @param poolId Unique id of pool.\n    function withdrawDelegatorRewards(bytes32 poolId)\n        external\n        override\n    {\n        _withdrawAndSyncDelegatorRewards(poolId, msg.sender);\n    }\n\n    /// @dev Computes the reward balance in ETH of the operator of a pool.\n    /// @param poolId Unique id of pool.\n    /// @return reward totalReward Balance in ETH.\n    function computeRewardBalanceOfOperator(bytes32 poolId)\n        external\n        view\n        override\n        returns (uint256 reward)\n    {\n        // Because operator rewards are immediately withdrawn as WETH\n        // on finalization, the only factor in this function are unfinalized\n        // rewards.\n        IStructs.Pool memory pool = _poolById[poolId];\n        // Get any unfinalized rewards.\n        (uint256 unfinalizedTotalRewards, uint256 unfinalizedMembersStake) =\n            _getUnfinalizedPoolRewards(poolId);\n\n        // Get the operators' portion.\n        (reward,) = _computePoolRewardsSplit(\n            pool.operatorShare,\n            unfinalizedTotalRewards,\n            unfinalizedMembersStake\n        );\n        return reward;\n    }\n\n    /// @dev Computes the reward balance in ETH of a specific member of a pool.\n    /// @param poolId Unique id of pool.\n    /// @param member The member of the pool.\n    /// @return reward totalReward Balance in ETH.\n    function computeRewardBalanceOfDelegator(bytes32 poolId, address member)\n        external\n        view\n        override\n        returns (uint256 reward)\n    {\n        IStructs.Pool memory pool = _poolById[poolId];\n        // Get any unfinalized rewards.\n        (uint256 unfinalizedTotalRewards, uint256 unfinalizedMembersStake) =\n            _getUnfinalizedPoolRewards(poolId);\n\n        // Get the members' portion.\n        (, uint256 unfinalizedMembersReward) = _computePoolRewardsSplit(\n            pool.operatorShare,\n            unfinalizedTotalRewards,\n            unfinalizedMembersStake\n        );\n        return _computeDelegatorReward(\n            poolId,\n            member,\n            unfinalizedMembersReward,\n            unfinalizedMembersStake\n        );\n    }\n\n    /// @dev Syncs rewards for a delegator. This includes withdrawing rewards\n    ///      rewards and adding/removing dependencies on cumulative rewards.\n    /// @param poolId Unique id of pool.\n    /// @param member of the pool.\n    function _withdrawAndSyncDelegatorRewards(\n        bytes32 poolId,\n        address member\n    )\n        internal\n    {\n        // Ensure the pool is finalized.\n        _assertPoolFinalizedLastEpoch(poolId);\n\n        // Compute balance owed to delegator\n        uint256 balance = _computeDelegatorReward(\n            poolId,\n            member,\n            // No unfinalized values because we ensured the pool is already\n            // finalized.\n            0,\n            0\n        );\n\n        // Sync the delegated stake balance. This will ensure future calls of\n        // `_computeDelegatorReward` during this epoch will return 0,\n        // preventing a delegator from withdrawing more than once an epoch.\n        _delegatedStakeToPoolByOwner[member][poolId] =\n            _loadCurrentBalance(_delegatedStakeToPoolByOwner[member][poolId]);\n\n        // Withdraw non-0 balance\n        if (balance != 0) {\n            // Decrease the balance of the pool\n            _decreasePoolRewards(poolId, balance);\n\n            // Withdraw the member's GRG balance\n            getGrgContract().transfer(member, balance);\n        }\n\n        // Ensure a cumulative reward entry exists for this epoch,\n        // copying the previous epoch's CR if one doesn't exist already.\n        _updateCumulativeReward(poolId);\n    }\n\n    /// @dev Handles a pool's reward at the current epoch.\n    ///      This will split the reward between the operator and members,\n    ///      depositing them into their respective vaults, and update the\n    ///      accounting needed to allow members to withdraw their individual\n    ///      rewards.\n    /// @param poolId Unique Id of pool.\n    /// @param reward received by the pool.\n    /// @param membersStake the amount of non-operator delegated stake that\n    ///        will split the  reward.\n    /// @return operatorReward Portion of `reward` given to the pool operator.\n    /// @return membersReward Portion of `reward` given to the pool members.\n    function _syncPoolRewards(\n        bytes32 poolId,\n        uint256 reward,\n        uint256 membersStake\n    )\n        internal\n        returns (uint256 operatorReward, uint256 membersReward)\n    {\n        IStructs.Pool memory pool = _poolById[poolId];\n\n        // Split the reward between operator and members\n        (operatorReward, membersReward) = _computePoolRewardsSplit(\n            pool.operatorShare,\n            reward,\n            membersStake\n        );\n\n        if (operatorReward > 0) {\n            if (pool.operator == pool.stakingPal) {\n                // Transfer the operator's grg reward to the operator\n                getGrgContract().transfer(pool.operator, operatorReward);\n            } else {\n                // Transfer staking pal share of operator's reward to staking pal\n                // Transfer the reamining operator's grg reward to the operator\n                uint256 stakingPalReward = operatorReward.safeMul(pool.stakingPalShare).safeDiv(PPM_DENOMINATOR);\n                getGrgContract().transfer(pool.stakingPal, stakingPalReward);\n                getGrgContract().transfer(pool.operator, operatorReward.safeSub(stakingPalReward));\n            }\n        }\n\n        if (membersReward > 0) {\n            // Increase the balance of the pool\n            _increasePoolRewards(poolId, membersReward);\n            // Create a cumulative reward entry at the current epoch.\n            _addCumulativeReward(poolId, membersReward, membersStake);\n        }\n\n        return (operatorReward, membersReward);\n    }\n\n    /// @dev Compute the split of a pool reward between the operator and members\n    ///      based on the `operatorShare` and `membersStake`.\n    /// @param operatorShare The fraction of rewards owed to the operator,\n    ///        in PPM.\n    /// @param totalReward The pool reward.\n    /// @param membersStake The amount of member (non-operator) stake delegated\n    ///        to the pool in the epoch the rewards were earned.\n    /// @return operatorReward Portion of `totalReward` given to the pool operator.\n    /// @return membersReward Portion of `totalReward` given to the pool members.\n    function _computePoolRewardsSplit(\n        uint32 operatorShare,\n        uint256 totalReward,\n        uint256 membersStake\n    )\n        internal\n        pure\n        returns (uint256 operatorReward, uint256 membersReward)\n    {\n        if (membersStake == 0) {\n            operatorReward = totalReward;\n        } else {\n            operatorReward = LibMath.getPartialAmountCeil(\n                uint256(operatorShare),\n                PPM_DENOMINATOR,\n                totalReward\n            );\n            membersReward = totalReward.safeSub(operatorReward);\n        }\n        return (operatorReward, membersReward);\n    }\n\n    /// @dev Computes the reward balance in ETH of a specific member of a pool.\n    /// @param poolId Unique id of pool.\n    /// @param member of the pool.\n    /// @param unfinalizedMembersReward Unfinalized total members reward (if any).\n    /// @param unfinalizedMembersStake Unfinalized total members stake (if any).\n    /// @return reward Balance in WETH.\n    function _computeDelegatorReward(\n        bytes32 poolId,\n        address member,\n        uint256 unfinalizedMembersReward,\n        uint256 unfinalizedMembersStake\n    )\n        private\n        view\n        returns (uint256 reward)\n    {\n        uint256 currentEpoch_ = currentEpoch;\n        IStructs.StoredBalance memory delegatedStake = _delegatedStakeToPoolByOwner[member][poolId];\n\n        // There can be no rewards if the last epoch when stake was stored is\n        // equal to the current epoch, because all prior rewards, including\n        // rewards finalized this epoch have been claimed.\n        if (delegatedStake.currentEpoch == currentEpoch_) {\n            return 0;\n        }\n\n        // We account for rewards over 3 intervals, below.\n\n        // 1/3 Unfinalized rewards earned in `currentEpoch - 1`.\n        reward = _computeUnfinalizedDelegatorReward(\n            delegatedStake,\n            currentEpoch_,\n            unfinalizedMembersReward,\n            unfinalizedMembersStake\n        );\n\n        // 2/3 Finalized rewards earned in epochs [`delegatedStake.currentEpoch + 1` .. `currentEpoch - 1`]\n        uint256 delegatedStakeNextEpoch = uint256(delegatedStake.currentEpoch).safeAdd(1);\n        reward = reward.safeAdd(\n            _computeMemberRewardOverInterval(\n                poolId,\n                delegatedStake.currentEpochBalance,\n                delegatedStake.currentEpoch,\n                delegatedStakeNextEpoch\n            )\n        );\n\n        // 3/3 Finalized rewards earned in epoch `delegatedStake.currentEpoch`.\n        reward = reward.safeAdd(\n            _computeMemberRewardOverInterval(\n                poolId,\n                delegatedStake.nextEpochBalance,\n                delegatedStakeNextEpoch,\n                currentEpoch_\n            )\n        );\n\n        return reward;\n    }\n\n    /// @dev Computes the unfinalized rewards earned by a delegator in the last epoch.\n    /// @param delegatedStake Amount of stake delegated to pool by a specific staker\n    /// @param currentEpoch_ The epoch in which this call is executing\n    /// @param unfinalizedMembersReward Unfinalized total members reward (if any).\n    /// @param unfinalizedMembersStake Unfinalized total members stake (if any).\n    /// @return reward Balance in WETH.\n    function _computeUnfinalizedDelegatorReward(\n        IStructs.StoredBalance memory delegatedStake,\n        uint256 currentEpoch_,\n        uint256 unfinalizedMembersReward,\n        uint256 unfinalizedMembersStake\n    )\n        private\n        pure\n        returns (uint256)\n    {\n        // If there are unfinalized rewards this epoch, compute the member's\n        // share.\n        if (unfinalizedMembersReward == 0 || unfinalizedMembersStake == 0) {\n            return 0;\n        }\n\n        // Unfinalized rewards are always earned from stake in\n        // the prior epoch so we want the stake at `currentEpoch_-1`.\n        uint256 unfinalizedStakeBalance = delegatedStake.currentEpoch >= currentEpoch_.safeSub(1) ?\n            delegatedStake.currentEpochBalance :\n            delegatedStake.nextEpochBalance;\n\n        // Sanity check to save gas on computation\n        if (unfinalizedStakeBalance == 0) {\n            return 0;\n        }\n\n        // Compute unfinalized reward\n        return LibMath.getPartialAmountFloor(\n            unfinalizedMembersReward,\n            unfinalizedMembersStake,\n            unfinalizedStakeBalance\n        );\n    }\n\n    /// @dev Increases rewards for a pool.\n    /// @param poolId Unique id of pool.\n    /// @param amount Amount to increment rewards by.\n    function _increasePoolRewards(bytes32 poolId, uint256 amount)\n        private\n    {\n        rewardsByPoolId[poolId] = rewardsByPoolId[poolId].safeAdd(amount);\n        grgReservedForPoolRewards = grgReservedForPoolRewards.safeAdd(amount);\n    }\n\n    /// @dev Decreases rewards for a pool.\n    /// @param poolId Unique id of pool.\n    /// @param amount Amount to decrement rewards by.\n    function _decreasePoolRewards(bytes32 poolId, uint256 amount)\n        private\n    {\n        rewardsByPoolId[poolId] = rewardsByPoolId[poolId].safeSub(amount);\n        grgReservedForPoolRewards = grgReservedForPoolRewards.safeSub(amount);\n    }\n}\n",
		"../utils/0xUtils/LibMath.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./LibSafeMath.sol\";\nimport \"./LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
		"../utils/0xUtils/LibMathRichErrors.sol": "pragma solidity >=0.5.9 <0.8.0;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
		"./staking_pools/MixinCumulativeRewards.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibFractions.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../stake/MixinStakeBalances.sol\";\nimport \"../immutable/MixinConstants.sol\";\n\n\nabstract contract MixinCumulativeRewards is\n    MixinStakeBalances,\n    MixinConstants\n{\n    using LibSafeMath for uint256;\n\n    /// @dev returns true iff Cumulative Rewards are set\n    function _isCumulativeRewardSet(IStructs.Fraction memory cumulativeReward)\n        internal\n        pure\n        returns (bool)\n    {\n        // We use the denominator as a proxy for whether the cumulative\n        // reward is set, as setting the cumulative reward always sets this\n        // field to at least 1.\n        return cumulativeReward.denominator != 0;\n    }\n\n    /// @dev Sets a pool's cumulative delegator rewards for the current epoch,\n    ///      given the rewards earned and stake from the last epoch, which will\n    ///      be summed with the previous cumulative rewards for this pool.\n    ///      If the last cumulative reward epoch is the current epoch, this is a\n    ///      no-op.\n    /// @param poolId The pool ID.\n    /// @param reward The total reward earned by pool delegators from the last epoch.\n    /// @param stake The total delegated stake in the pool in the last epoch.\n    function _addCumulativeReward(\n        bytes32 poolId,\n        uint256 reward,\n        uint256 stake\n    )\n        internal\n    {\n        // Fetch the last epoch at which we stored an entry for this pool;\n        // this is the most up-to-date cumulative rewards for this pool.\n        uint256 lastStoredEpoch = _cumulativeRewardsByPoolLastStored[poolId];\n        uint256 currentEpoch_ = currentEpoch;\n\n        // If we already have a record for this epoch, don't overwrite it.\n        if (lastStoredEpoch == currentEpoch_) {\n            return;\n        }\n\n        IStructs.Fraction memory mostRecentCumulativeReward =\n            _cumulativeRewardsByPool[poolId][lastStoredEpoch];\n\n        // Compute new cumulative reward\n        IStructs.Fraction memory cumulativeReward;\n        if (_isCumulativeRewardSet(mostRecentCumulativeReward)) {\n            // If we have a prior cumulative reward entry, we sum them as fractions.\n            (cumulativeReward.numerator, cumulativeReward.denominator) = LibFractions.add(\n                mostRecentCumulativeReward.numerator,\n                mostRecentCumulativeReward.denominator,\n                reward,\n                stake\n            );\n            // Normalize to prevent overflows in future operations.\n            (cumulativeReward.numerator, cumulativeReward.denominator) = LibFractions.normalize(\n                cumulativeReward.numerator,\n                cumulativeReward.denominator\n            );\n        } else {\n            (cumulativeReward.numerator, cumulativeReward.denominator) = (reward, stake);\n        }\n\n        // Store cumulative rewards for this epoch.\n        _cumulativeRewardsByPool[poolId][currentEpoch_] = cumulativeReward;\n        _cumulativeRewardsByPoolLastStored[poolId] = currentEpoch_;\n    }\n\n    /// @dev Sets a pool's cumulative delegator rewards for the current epoch,\n    ///      using the last stored cumulative rewards. If we've already set\n    ///      a CR for this epoch, this is a no-op.\n    /// @param poolId The pool ID.\n    function _updateCumulativeReward(bytes32 poolId)\n        internal\n    {\n        // Just add empty rewards for this epoch, which will be added to\n        // the previous CR, so we end up with the previous CR being set for\n        // this epoch.\n        _addCumulativeReward(poolId, 0, 1);\n    }\n\n    /// @dev Computes a member's reward over a given epoch interval.\n    /// @param poolId Uniqud Id of pool.\n    /// @param memberStakeOverInterval Stake delegated to pool by member over\n    ///        the interval.\n    /// @param beginEpoch Beginning of interval.\n    /// @param endEpoch End of interval.\n    /// @return reward Reward accumulated over interval [beginEpoch, endEpoch]\n    function _computeMemberRewardOverInterval(\n        bytes32 poolId,\n        uint256 memberStakeOverInterval,\n        uint256 beginEpoch,\n        uint256 endEpoch\n    )\n        internal\n        view\n        returns (uint256 reward)\n    {\n        // Sanity check if we can skip computation, as it will result in zero.\n        if (memberStakeOverInterval == 0 || beginEpoch == endEpoch) {\n            return 0;\n        }\n\n        // Sanity check interval\n        require(beginEpoch < endEpoch, \"CR_INTERVAL_INVALID\");\n\n        // Sanity check begin reward\n        IStructs.Fraction memory beginReward = _getCumulativeRewardAtEpoch(poolId, beginEpoch);\n        IStructs.Fraction memory endReward = _getCumulativeRewardAtEpoch(poolId, endEpoch);\n\n        // Compute reward\n        reward = LibFractions.scaleDifference(\n            endReward.numerator,\n            endReward.denominator,\n            beginReward.numerator,\n            beginReward.denominator,\n            memberStakeOverInterval\n        );\n    }\n\n    /// @dev Fetch the most recent cumulative reward entry for a pool.\n    /// @param poolId Unique ID of pool.\n    /// @return cumulativeReward The most recent cumulative reward `poolId`.\n    function _getMostRecentCumulativeReward(bytes32 poolId)\n        private\n        view\n        returns (IStructs.Fraction memory cumulativeReward)\n    {\n        uint256 lastStoredEpoch = _cumulativeRewardsByPoolLastStored[poolId];\n        return _cumulativeRewardsByPool[poolId][lastStoredEpoch];\n    }\n\n    /// @dev Fetch the cumulative reward for a given epoch.\n    ///      If the corresponding CR does not exist in state, then we backtrack\n    ///      to find its value by querying `epoch-1` and then most recent CR.\n    /// @param poolId Unique ID of pool.\n    /// @param epoch The epoch to find the\n    /// @return cumulativeReward The cumulative reward for `poolId` at `epoch`.\n    function _getCumulativeRewardAtEpoch(bytes32 poolId, uint256 epoch)\n        private\n        view\n        returns (IStructs.Fraction memory cumulativeReward)\n    {\n        // Return CR at `epoch`, given it's set.\n        cumulativeReward = _cumulativeRewardsByPool[poolId][epoch];\n        if (_isCumulativeRewardSet(cumulativeReward)) {\n            return cumulativeReward;\n        }\n\n        // Return CR at `epoch-1`, given it's set.\n        uint256 lastEpoch = epoch.safeSub(1);\n        cumulativeReward = _cumulativeRewardsByPool[poolId][lastEpoch];\n        if (_isCumulativeRewardSet(cumulativeReward)) {\n            return cumulativeReward;\n        }\n\n        // Return the most recent CR, given it's less than `epoch`.\n        uint256 mostRecentEpoch = _cumulativeRewardsByPoolLastStored[poolId];\n        if (mostRecentEpoch < epoch) {\n            cumulativeReward = _cumulativeRewardsByPool[poolId][mostRecentEpoch];\n            if (_isCumulativeRewardSet(cumulativeReward)) {\n                return cumulativeReward;\n            }\n        }\n\n        // Otherwise return an empty CR.\n        return IStructs.Fraction(0, 1);\n    }\n}\n",
		"../utils/0xUtils/LibFractions.sol": "pragma solidity >=0.5.4 <0.8.0;\n\nimport \"./LibSafeMath.sol\";\n\n\nlibrary LibFractions {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Safely adds two fractions `n1/d1 + n2/d2`\n    /// @param n1 numerator of `1`\n    /// @param d1 denominator of `1`\n    /// @param n2 numerator of `2`\n    /// @param d2 denominator of `2`\n    /// @return numerator Numerator of sum\n    /// @return denominator Denominator of sum\n    function add(\n        uint256 n1,\n        uint256 d1,\n        uint256 n2,\n        uint256 d2\n    )\n        internal\n        pure\n        returns (\n            uint256 numerator,\n            uint256 denominator\n        )\n    {\n        if (n1 == 0) {\n            return (numerator = n2, denominator = d2);\n        }\n        if (n2 == 0) {\n            return (numerator = n1, denominator = d1);\n        }\n        numerator = n1\n            .safeMul(d2)\n            .safeAdd(n2.safeMul(d1));\n        denominator = d1.safeMul(d2);\n        return (numerator, denominator);\n    }\n\n    /// @dev Rescales a fraction to prevent overflows during addition if either\n    ///      the numerator or the denominator are > `maxValue`.\n    /// @param numerator The numerator.\n    /// @param denominator The denominator.\n    /// @param maxValue The maximum value allowed for both the numerator and\n    ///        denominator.\n    /// @return scaledNumerator The rescaled numerator.\n    /// @return scaledDenominator The rescaled denominator.\n    function normalize(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 maxValue\n    )\n        internal\n        pure\n        returns (\n            uint256 scaledNumerator,\n            uint256 scaledDenominator\n        )\n    {\n        // If either the numerator or the denominator are > `maxValue`,\n        // re-scale them by `maxValue` to prevent overflows in future operations.\n        if (numerator > maxValue || denominator > maxValue) {\n            uint256 rescaleBase = numerator >= denominator ? numerator : denominator;\n            rescaleBase = rescaleBase.safeDiv(maxValue);\n            scaledNumerator = numerator.safeDiv(rescaleBase);\n            scaledDenominator = denominator.safeDiv(rescaleBase);\n        } else {\n            scaledNumerator = numerator;\n            scaledDenominator = denominator;\n        }\n        return (scaledNumerator, scaledDenominator);\n    }\n\n    /// @dev Rescales a fraction to prevent overflows during addition if either\n    ///      the numerator or the denominator are > 2 ** 127.\n    /// @param numerator The numerator.\n    /// @param denominator The denominator.\n    /// @return scaledNumerator The rescaled numerator.\n    /// @return scaledDenominator The rescaled denominator.\n    function normalize(\n        uint256 numerator,\n        uint256 denominator\n    )\n        internal\n        pure\n        returns (\n            uint256 scaledNumerator,\n            uint256 scaledDenominator\n        )\n    {\n        return normalize(numerator, denominator, 2 ** 127);\n    }\n\n    /// @dev Safely scales the difference between two fractions.\n    /// @param n1 numerator of `1`\n    /// @param d1 denominator of `1`\n    /// @param n2 numerator of `2`\n    /// @param d2 denominator of `2`\n    /// @param s scalar to multiply by difference.\n    /// @return result `s * (n1/d1 - n2/d2)`.\n    function scaleDifference(\n        uint256 n1,\n        uint256 d1,\n        uint256 n2,\n        uint256 d2,\n        uint256 s\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        if (s == 0) {\n            return 0;\n        }\n        if (n2 == 0) {\n            return result = s\n                .safeMul(n1)\n                .safeDiv(d1);\n        }\n        uint256 numerator = n1\n            .safeMul(d2)\n            .safeSub(n2.safeMul(d1));\n        uint256 tmp = numerator.safeDiv(d2);\n        return s\n            .safeMul(tmp)\n            .safeDiv(d1);\n    }\n}\n",
		"./stake/MixinStakeBalances.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibSafeDowncast.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../immutable/MixinDeploymentConstants.sol\";\nimport \"./MixinStakeStorage.sol\";\nimport \"../../rigoToken/Inflation/InflationFace.sol\";\n\n\nabstract contract MixinStakeBalances is\n    MixinStakeStorage,\n    MixinDeploymentConstants\n{\n    using LibSafeMath for uint256;\n    using LibSafeDowncast for uint256;\n\n    /// @dev Gets global stake for a given status.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Global stake for given status.\n    function getGlobalStakeByStatus(IStructs.StakeStatus stakeStatus)\n        external\n        view\n        override\n        returns (IStructs.StoredBalance memory balance)\n    {\n        balance = _loadCurrentBalance(\n            _globalStakeByStatus[uint8(IStructs.StakeStatus.DELEGATED)]\n        );\n        if (stakeStatus == IStructs.StakeStatus.UNDELEGATED) {\n            // Undelegated stake is the difference between total stake and delegated stake\n            // Note that any ZRX erroneously sent to the vault will be counted as undelegated stake\n            uint256 totalStake = getGrgVault().balanceOfGrgVault();\n            balance.currentEpochBalance = totalStake.safeSub(balance.currentEpochBalance).downcastToUint96();\n            balance.nextEpochBalance = totalStake.safeSub(balance.nextEpochBalance).downcastToUint96();\n        }\n        return balance;\n    }\n\n    /// @dev Gets an owner's stake balances by status.\n    /// @param staker Owner of stake.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Owner's stake balances for given status.\n    function getOwnerStakeByStatus(\n        address staker,\n        IStructs.StakeStatus stakeStatus\n    )\n        external\n        view\n        override\n        returns (IStructs.StoredBalance memory balance)\n    {\n        balance = _loadCurrentBalance(\n            _ownerStakeByStatus[uint8(stakeStatus)][staker]\n        );\n        return balance;\n    }\n\n    /// @dev Returns the total stake for a given staker.\n    /// @param staker of stake.\n    /// @return Total GRG staked by `staker`.\n    function getTotalStake(address staker)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return getGrgVault().balanceOf(staker);\n    }\n\n    /// @dev Returns the stake delegated to a specific staking pool, by a given staker.\n    /// @param staker of stake.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Stake delegated to pool by staker.\n    function getStakeDelegatedToPoolByOwner(address staker, bytes32 poolId)\n        public\n        view\n        override\n        returns (IStructs.StoredBalance memory balance)\n    {\n        balance = _loadCurrentBalance(_delegatedStakeToPoolByOwner[staker][poolId]);\n        return balance;\n    }\n\n    /// @dev Returns the total stake delegated to a specific staking pool,\n    ///      across all members.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Total stake delegated to pool.\n    function getTotalStakeDelegatedToPool(bytes32 poolId)\n        public\n        view\n        override\n        returns (IStructs.StoredBalance memory balance)\n    {\n        balance = _loadCurrentBalance(_delegatedStakeByPoolId[poolId]);\n        return balance;\n    }\n}\n",
		"./libs/LibSafeDowncast.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeDowncast {\n\n    /// @dev Safely downcasts to a uint96\n    /// Note that this reverts if the input value is too large.\n    function downcastToUint96(uint256 a)\n        internal\n        pure\n        returns (uint96 b)\n    {\n        b = uint96(a);\n        if (uint256(b) != a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256DowncastError(\n                LibSafeMathRichErrors.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n                a\n            ));\n        }\n        return b;\n    }\n\n    /// @dev Safely downcasts to a uint64\n    /// Note that this reverts if the input value is too large.\n    function downcastToUint64(uint256 a)\n        internal\n        pure\n        returns (uint64 b)\n    {\n        b = uint64(a);\n        if (uint256(b) != a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256DowncastError(\n                LibSafeMathRichErrors.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n                a\n            ));\n        }\n        return b;\n    }\n\n    /// @dev Safely downcasts to a uint32\n    /// Note that this reverts if the input value is too large.\n    function downcastToUint32(uint256 a)\n        internal\n        pure\n        returns (uint32 b)\n    {\n        b = uint32(a);\n        if (uint256(b) != a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256DowncastError(\n                LibSafeMathRichErrors.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n                a\n            ));\n        }\n        return b;\n    }\n}\n",
		"./immutable/MixinDeploymentConstants.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/IEtherToken.sol\";\nimport \"../interfaces/IGrgVault.sol\";\nimport \"../interfaces/IStaking.sol\";\nimport \"../../protocol/DragoRegistry/IDragoRegistry.sol\";\nimport \"../../rigoToken/RigoToken/RigoTokenFace.sol\";\n\n\n// solhint-disable separate-by-one-line-in-contract\nabstract contract MixinDeploymentConstants is IStaking {\n\n    // Mainnet GrgVault address\n    address constant private GRG_VAULT_ADDRESS = address(0x0a33744eE5D57d6d69944213d8E6ad80d64Fdc58);\n\n    // Ropsten GrgVault address\n    // address constant private GRG_VAULT_ADDRESS = address(0x7fc6a07e4b7b859c80F949A2A7812e00C64b4264);\n    \n    // Mainnet DragoRegistry address\n    address constant private DRAGO_REGISTRY_ADDRESS = address(0xdE6445484a8dcD9bf35fC95eb4E3990Cc358822e);\n    \n    // Ropsten DragoRegistry address\n    // address constant private DRAGO_REGISTRY_ADDRESS = address(0x4e868D1dDF940316964eA7673E21bE6CBED8b30B);\n    \n    // Mainnet GRG Address\n    address constant private GRG_ADDRESS = address(0x4FbB350052Bca5417566f188eB2EBCE5b19BC964);\n\n    // Ropsten GRG Address\n    // address constant private GRG_ADDRESS = address(0x6FA8590920c5966713b1a86916f7b0419411e474);\n\n    /// @dev An overridable way to access the deployed grgVault.\n    ///      Must be view to allow overrides to access state.\n    /// @return grgVault The grgVault contract.\n    function getGrgVault()\n        public\n        view\n        virtual\n        override\n        returns (IGrgVault grgVault)\n    {\n        grgVault = IGrgVault(GRG_VAULT_ADDRESS);\n        return grgVault;\n    }\n    \n    /// @dev An overridable way to access the deployed dragoRegistry.\n    ///      Must be view to allow overrides to access state.\n    /// @return dragoRegistry The dragoRegistry contract.\n    function getDragoRegistry()\n        public\n        view\n        virtual\n        override\n        returns (IDragoRegistry dragoRegistry)\n    {\n        dragoRegistry = IDragoRegistry(DRAGO_REGISTRY_ADDRESS);\n        return dragoRegistry;\n    }\n    \n    /// @dev An overridable way to access the deployed GRG contract.\n    ///      Must be view to allow overrides to access state.\n    /// @return grgContract The GRG contract instance.\n    function getGrgContract()\n        public\n        view\n        virtual\n        override\n        returns (RigoTokenFace grgContract)\n    {\n        grgContract = RigoTokenFace(GRG_ADDRESS);\n        return grgContract;\n    }\n}\n",
		"../utils/0xUtils/IEtherToken.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >= 0.5.9;\n\nimport \"./IERC20Token.sol\";\n\n\nabstract contract IEtherToken is\n    IERC20Token\n{\n    function deposit()\n        public\n        virtual\n        payable;\n\n    function withdraw(uint256 amount)\n        public\n        virtual;\n}\n",
		"../utils/0xUtils/IERC20Token.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nabstract contract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        virtual\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        virtual\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        virtual\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        virtual\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        virtual\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        virtual\n        returns (uint256);\n}\n",
		"./stake/MixinStakeStorage.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibSafeDowncast.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../sys/MixinScheduler.sol\";\n\n\n/// @dev This mixin contains logic for managing stake storage.\nabstract contract MixinStakeStorage is\n    MixinScheduler\n{\n    using LibSafeMath for uint256;\n    using LibSafeDowncast for uint256;\n\n    /// @dev Moves stake between states: 'undelegated' or 'delegated'.\n    ///      This change comes into effect next epoch.\n    /// @param fromPtr pointer to storage location of `from` stake.\n    /// @param toPtr pointer to storage location of `to` stake.\n    /// @param amount of stake to move.\n    function _moveStake(\n        IStructs.StoredBalance storage fromPtr,\n        IStructs.StoredBalance storage toPtr,\n        uint256 amount\n    )\n        internal\n    {\n        // do nothing if pointers are equal\n        if (_arePointersEqual(fromPtr, toPtr)) {\n            return;\n        }\n\n        // load current balances from storage\n        IStructs.StoredBalance memory from = _loadCurrentBalance(fromPtr);\n        IStructs.StoredBalance memory to = _loadCurrentBalance(toPtr);\n\n        // sanity check on balance\n        if (amount > from.nextEpochBalance) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InsufficientBalanceError(\n                    amount,\n                    from.nextEpochBalance\n                )\n            );\n        }\n\n        // move stake for next epoch\n        from.nextEpochBalance = uint256(from.nextEpochBalance).safeSub(amount).downcastToUint96();\n        to.nextEpochBalance = uint256(to.nextEpochBalance).safeAdd(amount).downcastToUint96();\n\n        // update state in storage\n        _storeBalance(fromPtr, from);\n        _storeBalance(toPtr, to);\n    }\n\n    /// @dev Loads a balance from storage and updates its fields to reflect values for the current epoch.\n    /// @param balancePtr to load.\n    /// @return balance current balance.\n    function _loadCurrentBalance(IStructs.StoredBalance storage balancePtr)\n        internal\n        view\n        returns (IStructs.StoredBalance memory balance)\n    {\n        balance = balancePtr;\n        uint256 currentEpoch_ = currentEpoch;\n        if (currentEpoch_ > balance.currentEpoch) {\n            balance.currentEpoch = currentEpoch_.downcastToUint64();\n            balance.currentEpochBalance = balance.nextEpochBalance;\n        }\n        return balance;\n    }\n\n    /// @dev Increments both the `current` and `next` fields.\n    /// @param balancePtr storage pointer to balance.\n    /// @param amount to mint.\n    function _increaseCurrentAndNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n        internal\n    {\n        // Remove stake from balance\n        IStructs.StoredBalance memory balance = _loadCurrentBalance(balancePtr);\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeAdd(amount).downcastToUint96();\n        balance.currentEpochBalance = uint256(balance.currentEpochBalance).safeAdd(amount).downcastToUint96();\n\n        // update state\n        _storeBalance(balancePtr, balance);\n    }\n\n    /// @dev Decrements both the `current` and `next` fields.\n    /// @param balancePtr storage pointer to balance.\n    /// @param amount to mint.\n    function _decreaseCurrentAndNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n        internal\n    {\n        // Remove stake from balance\n        IStructs.StoredBalance memory balance = _loadCurrentBalance(balancePtr);\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeSub(amount).downcastToUint96();\n        balance.currentEpochBalance = uint256(balance.currentEpochBalance).safeSub(amount).downcastToUint96();\n\n        // update state\n        _storeBalance(balancePtr, balance);\n    }\n\n    /// @dev Increments the `next` field (but not the `current` field).\n    /// @param balancePtr storage pointer to balance.\n    /// @param amount to increment by.\n    function _increaseNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n        internal\n    {\n        // Add stake to balance\n        IStructs.StoredBalance memory balance = _loadCurrentBalance(balancePtr);\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeAdd(amount).downcastToUint96();\n\n        // update state\n        _storeBalance(balancePtr, balance);\n    }\n\n    /// @dev Decrements the `next` field (but not the `current` field).\n    /// @param balancePtr storage pointer to balance.\n    /// @param amount to decrement by.\n    function _decreaseNextBalance(IStructs.StoredBalance storage balancePtr, uint256 amount)\n        internal\n    {\n        // Remove stake from balance\n        IStructs.StoredBalance memory balance = _loadCurrentBalance(balancePtr);\n        balance.nextEpochBalance = uint256(balance.nextEpochBalance).safeSub(amount).downcastToUint96();\n\n        // update state\n        _storeBalance(balancePtr, balance);\n    }\n\n    /// @dev Stores a balance in storage.\n    /// @param balancePtr points to where `balance` will be stored.\n    /// @param balance to save to storage.\n    function _storeBalance(\n        IStructs.StoredBalance storage balancePtr,\n        IStructs.StoredBalance memory balance\n    )\n        private\n    {\n        // note - this compresses into a single `sstore` when optimizations are enabled,\n        // since the StoredBalance struct occupies a single word of storage.\n        balancePtr.currentEpoch = balance.currentEpoch;\n        balancePtr.nextEpochBalance = balance.nextEpochBalance;\n        balancePtr.currentEpochBalance = balance.currentEpochBalance;\n    }\n\n    /// @dev Returns true iff storage pointers resolve to same storage location.\n    /// @param balancePtrA first storage pointer.\n    /// @param balancePtrB second storage pointer.\n    /// @return areEqual true iff pointers are equal.\n    function _arePointersEqual(\n        // solhint-disable-next-line no-unused-vars\n        IStructs.StoredBalance storage balancePtrA,\n        // solhint-disable-next-line no-unused-vars\n        IStructs.StoredBalance storage balancePtrB\n    )\n        private\n        pure\n        returns (bool areEqual)\n    {\n        assembly {\n            areEqual := and(\n                eq(balancePtrA.slot, balancePtrB.slot),\n                eq(balancePtrA.offset, balancePtrB.offset)\n            )\n        }\n        return areEqual;\n    }\n}\n",
		"./sys/MixinScheduler.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\nimport \"../immutable/MixinStorage.sol\";\nimport \"../interfaces/IStakingEvents.sol\";\nimport \"../interfaces/IStaking.sol\";\n\n\nabstract contract MixinScheduler is\n    IStaking,\n    IStakingEvents,\n    MixinStorage\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Returns the earliest end time in seconds of this epoch.\n    ///      The next epoch can begin once this time is reached.\n    ///      Epoch period = [startTimeInSeconds..endTimeInSeconds)\n    /// @return Time in seconds.\n    function getCurrentEpochEarliestEndTimeInSeconds()\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return currentEpochStartTimeInSeconds.safeAdd(epochDurationInSeconds);\n    }\n\n    /// @dev Initializes state owned by this mixin.\n    ///      Fails if state was already initialized.\n    function _initMixinScheduler()\n        internal\n    {\n        // assert the current values before overwriting them.\n        _assertSchedulerNotInitialized();\n\n        // solhint-disable-next-line\n        currentEpochStartTimeInSeconds = block.timestamp;\n        currentEpoch = 1;\n    }\n\n    /// @dev Moves to the next epoch, given the current epoch period has ended.\n    ///      Time intervals that are measured in epochs (like timeLocks) are also incremented, given\n    ///      their periods have ended.\n    function _goToNextEpoch()\n        internal\n    {\n        // get current timestamp\n        // solhint-disable-next-line not-rely-on-time\n        uint256 currentBlockTimestamp = block.timestamp;\n\n        // validate that we can increment the current epoch\n        uint256 epochEndTime = getCurrentEpochEarliestEndTimeInSeconds();\n        if (epochEndTime > currentBlockTimestamp) {\n            LibRichErrors.rrevert(LibStakingRichErrors.BlockTimestampTooLowError(\n                epochEndTime,\n                currentBlockTimestamp\n            ));\n        }\n\n        // incremment epoch\n        uint256 nextEpoch = currentEpoch.safeAdd(1);\n        currentEpoch = nextEpoch;\n        currentEpochStartTimeInSeconds = currentBlockTimestamp;\n    }\n\n    /// @dev Assert scheduler state before initializing it.\n    /// This must be updated for each migration.\n    function _assertSchedulerNotInitialized()\n        internal\n        view\n    {\n        if (currentEpochStartTimeInSeconds != 0) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InitializationError(\n                    LibStakingRichErrors.InitializationErrorCodes.MixinSchedulerAlreadyInitialized\n                )\n            );\n        }\n    }\n}\n",
		"../rigoToken/Inflation/InflationFace.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.8.0;\n\n/// @title Inflation Interface - Allows interaction with the Inflation contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface InflationFace {\n\n    /*\n     * PUBLIC VARIABLES\n     */\n    // solhint-disable-next-line\n    function RIGO_TOKEN_ADDRESS()\n        external\n        view\n        returns (address);\n\n    //solhint-disable-next-line\n    function STAKING_PROXY_ADDRESS()\n        external\n        view\n        returns (address);\n\n    function slot()\n        external\n        view\n        returns (uint256);\n\n    function epochLength()\n        external\n        view\n        returns (uint256);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows staking proxy to mint rewards.\n    /// @return mintedInflation Number of allocated tokens.\n    function mintInflation()\n        external\n        returns (uint256 mintedInflation);\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Returns whether an epoch has ended.\n    /// @return Bool the epoch has ended.\n    function epochEnded()\n        external\n        view\n        returns (bool);\n\n    /// @dev Returns how long until next claim.\n    /// @return Number in seconds.\n    function timeUntilNextClaim()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the epoch inflation.\n    /// @return Value of units of GRG minted in an epoch.\n    function getEpochInflation()\n        external\n        view\n        returns (uint256);\n}\n",
		"./rewards/MixinPopRewards.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibMath.sol\";\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../sys/MixinFinalizer.sol\";\nimport \"../staking_pools/MixinStakingPool.sol\";\nimport \"./MixinPopManager.sol\";\n\n\nabstract contract MixinPopRewards is\n    MixinPopManager,\n    MixinStakingPool,\n    MixinFinalizer\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Credits the value of a pool's pop reward.\n    ///      Only a known RigoBlock pop can call this method. See\n    ///      (MixinPopManager).\n    /// @param poolAccount The address of the rigoblock pool account.\n    /// @param popReward The pop reward.\n    function creditPopReward(\n        address poolAccount,\n        uint256 popReward\n    )\n        external\n        payable\n        override\n        onlyPop\n    {\n        // Get the pool id of the maker address.\n        bytes32 poolId = poolIdByRbPoolAccount[poolAccount];\n\n        // Only attribute the pop reward to a pool if the pool account is\n        // registered to a pool.\n        if (poolId == NIL_POOL_ID) {\n            return;\n        }\n\n        uint256 poolStake = getTotalStakeDelegatedToPool(poolId).currentEpochBalance;\n        // Ignore pools with dust stake.\n        if (poolStake < minimumPoolStake) {\n            return;\n        }\n\n        // Look up the pool stats and aggregated stats for this epoch.\n        uint256 currentEpoch_ = currentEpoch;\n        IStructs.PoolStats storage poolStatsPtr = poolStatsByEpoch[poolId][currentEpoch_];\n        IStructs.AggregatedStats storage aggregatedStatsPtr = aggregatedStatsByEpoch[currentEpoch_];\n\n        // Perform some initialization if this is the pool's first protocol fee in this epoch.\n        uint256 feesCollectedByPool = poolStatsPtr.feesCollected;\n        if (feesCollectedByPool == 0) {\n            // Compute member and total weighted stake.\n            (uint256 membersStakeInPool, uint256 weightedStakeInPool) = _computeMembersAndWeightedStake(poolId, poolStake);\n            poolStatsPtr.membersStake = membersStakeInPool;\n            poolStatsPtr.weightedStake = weightedStakeInPool;\n\n            // Increase the total weighted stake.\n            aggregatedStatsPtr.totalWeightedStake = aggregatedStatsPtr.totalWeightedStake.safeAdd(weightedStakeInPool);\n\n            // Increase the number of pools to finalize.\n            aggregatedStatsPtr.numPoolsToFinalize = aggregatedStatsPtr.numPoolsToFinalize.safeAdd(1);\n\n            // Emit an event so keepers know what pools earned rewards this epoch.\n            emit StakingPoolEarnedRewardsInEpoch(currentEpoch_, poolId);\n        }\n\n        if (popReward > feesCollectedByPool) {\n            // Credit the fees to the pool.\n            poolStatsPtr.feesCollected = popReward;\n\n            // Increase the total fees collected this epoch.\n            aggregatedStatsPtr.totalFeesCollected = aggregatedStatsPtr\n                .totalFeesCollected\n                .safeAdd(popReward)\n                .safeSub(feesCollectedByPool);\n        }\n    }\n\n    /// @dev Get stats on a staking pool in this epoch.\n    /// @param poolId Pool Id to query.\n    /// @return PoolStats struct for pool id.\n    function getStakingPoolStatsThisEpoch(bytes32 poolId)\n        external\n        view\n        override\n        returns (IStructs.PoolStats memory)\n    {\n        return poolStatsByEpoch[poolId][currentEpoch];\n    }\n\n    /// @dev Computes the members and weighted stake for a pool at the current\n    ///      epoch.\n    /// @param poolId ID of the pool.\n    /// @param totalStake Total (unweighted) stake in the pool.\n    /// @return membersStake Non-operator stake in the pool.\n    /// @return weightedStake Weighted stake of the pool.\n    function _computeMembersAndWeightedStake(\n        bytes32 poolId,\n        uint256 totalStake\n    )\n        private\n        view\n        returns (uint256 membersStake, uint256 weightedStake)\n    {\n        uint256 operatorStake = getStakeDelegatedToPoolByOwner(\n            _poolById[poolId].operator,\n            poolId\n        ).currentEpochBalance;\n\n        membersStake = totalStake.safeSub(operatorStake);\n        weightedStake = operatorStake.safeAdd(\n            LibMath.getPartialAmountFloor(\n                rewardDelegatedStakeWeight,\n                PPM_DENOMINATOR,\n                membersStake\n            )\n        );\n        return (membersStake, weightedStake);\n    }\n}\n",
		"./sys/MixinFinalizer.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/LibSafeMath.sol\";\nimport \"../libs/LibCobbDouglas.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../staking_pools/MixinStakingPoolRewards.sol\";\n\n\nabstract contract MixinFinalizer is\n    MixinStakingPoolRewards\n{\n    using LibSafeMath for uint256;\n\n    /// @dev Begins a new epoch, preparing the prior one for finalization.\n    ///      Throws if not enough time has passed between epochs or if the\n    ///      previous epoch was not fully finalized.\n    /// @return numPoolsToFinalize The number of unfinalized pools.\n    function endEpoch()\n        external\n        override\n        returns (uint256)\n    {\n        uint256 currentEpoch_ = currentEpoch;\n        uint256 prevEpoch = currentEpoch_.safeSub(1);\n\n        // Make sure the previous epoch has been fully finalized.\n        uint256 numPoolsToFinalizeFromPrevEpoch = aggregatedStatsByEpoch[prevEpoch].numPoolsToFinalize;\n        if (numPoolsToFinalizeFromPrevEpoch != 0) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.PreviousEpochNotFinalizedError(\n                    prevEpoch,\n                    numPoolsToFinalizeFromPrevEpoch\n                )\n            );\n        }\n\n        // mint epoch inflation, jump first epoch as all regitered pool accounts will become active from following epoch\n        //  mint happens before time has passed check, therefore tokens will be allocated even before expiry if method is called\n        //  but will not be minted again until epoch time has passed. This could happen when epoch length is changed only.\n        if (currentEpoch_ > uint256(1)) {\n            try InflationFace(getGrgContract().minter()).mintInflation() returns (uint256 mintedInflation) {\n                emit GrgMintEvent(mintedInflation);\n            } catch Error(string memory revertReason) {\n                emit CatchStringEvent(revertReason);\n            } catch (bytes memory returnData) {\n                emit ReturnDataEvent(returnData);\n            }\n        }\n\n        // Load aggregated stats for the epoch we're ending.\n        aggregatedStatsByEpoch[currentEpoch_].rewardsAvailable = _getAvailableGrgBalance();\n        IStructs.AggregatedStats memory aggregatedStats = aggregatedStatsByEpoch[currentEpoch_];\n\n        // Emit an event.\n        emit EpochEnded(\n            currentEpoch_,\n            aggregatedStats.numPoolsToFinalize,\n            aggregatedStats.rewardsAvailable,\n            aggregatedStats.totalFeesCollected,\n            aggregatedStats.totalWeightedStake\n        );\n\n        // Advance the epoch. This will revert if not enough time has passed.\n        _goToNextEpoch();\n\n        // If there are no pools to finalize then the epoch is finalized.\n        if (aggregatedStats.numPoolsToFinalize == 0) {\n            emit EpochFinalized(currentEpoch_, 0, aggregatedStats.rewardsAvailable);\n        }\n\n        return aggregatedStats.numPoolsToFinalize;\n    }\n\n    /// @dev Instantly finalizes a single pool that earned rewards in the previous\n    ///      epoch, crediting it rewards for members and withdrawing operator's\n    ///      rewards as WETH. This can be called by internal functions that need\n    ///      to finalize a pool immediately. Does nothing if the pool is already\n    ///      finalized or did not earn rewards in the previous epoch.\n    /// @param poolId The pool ID to finalize.\n    function finalizePool(bytes32 poolId)\n        external\n        override\n    {\n        // Compute relevant epochs\n        uint256 currentEpoch_ = currentEpoch;\n        uint256 prevEpoch = currentEpoch_.safeSub(1);\n\n        // Load the aggregated stats into memory; noop if no pools to finalize.\n        IStructs.AggregatedStats memory aggregatedStats = aggregatedStatsByEpoch[prevEpoch];\n        if (aggregatedStats.numPoolsToFinalize == 0) {\n            return;\n        }\n\n        // Noop if the pool did not earn rewards or already finalized (has no fees).\n        IStructs.PoolStats memory poolStats = poolStatsByEpoch[poolId][prevEpoch];\n        if (poolStats.feesCollected == 0) {\n            return;\n        }\n\n        // Clear the pool stats so we don't finalize it again, and to recoup\n        // some gas.\n        delete poolStatsByEpoch[poolId][prevEpoch];\n\n        // Compute the rewards.\n        uint256 rewards = _getUnfinalizedPoolRewardsFromPoolStats(poolStats, aggregatedStats);\n\n        // Pay the operator and update rewards for the pool.\n        // Note that we credit at the CURRENT epoch even though these rewards\n        // were earned in the previous epoch.\n        (uint256 operatorReward, uint256 membersReward) = _syncPoolRewards(\n            poolId,\n            rewards,\n            poolStats.membersStake\n        );\n\n        // Emit an event.\n        emit RewardsPaid(\n            currentEpoch_,\n            poolId,\n            operatorReward,\n            membersReward\n        );\n\n        uint256 totalReward = operatorReward.safeAdd(membersReward);\n\n        // Increase `totalRewardsFinalized`.\n        aggregatedStatsByEpoch[prevEpoch].totalRewardsFinalized =\n            aggregatedStats.totalRewardsFinalized =\n            aggregatedStats.totalRewardsFinalized.safeAdd(totalReward);\n\n        // Decrease the number of unfinalized pools left.\n        aggregatedStatsByEpoch[prevEpoch].numPoolsToFinalize =\n            aggregatedStats.numPoolsToFinalize =\n            aggregatedStats.numPoolsToFinalize.safeSub(1);\n\n        // If there are no more unfinalized pools remaining, the epoch is\n        // finalized.\n        if (aggregatedStats.numPoolsToFinalize == 0) {\n            emit EpochFinalized(\n                prevEpoch,\n                aggregatedStats.totalRewardsFinalized,\n                aggregatedStats.rewardsAvailable.safeSub(aggregatedStats.totalRewardsFinalized)\n            );\n        }\n    }\n\n    /// @dev Computes the reward owed to a pool during finalization.\n    ///      Does nothing if the pool is already finalized.\n    /// @param poolId The pool's ID.\n    /// @return reward The total reward owed to a pool.\n    /// @return membersStake The total stake for all non-operator members in\n    ///         this pool.\n    function _getUnfinalizedPoolRewards(bytes32 poolId)\n        internal\n        view\n        virtual\n        override\n        returns (\n            uint256 reward,\n            uint256 membersStake\n        )\n    {\n        uint256 prevEpoch = currentEpoch.safeSub(1);\n        IStructs.PoolStats memory poolStats = poolStatsByEpoch[poolId][prevEpoch];\n        reward = _getUnfinalizedPoolRewardsFromPoolStats(poolStats, aggregatedStatsByEpoch[prevEpoch]);\n        membersStake = poolStats.membersStake;\n    }\n\n    /// @dev Returns the GRG balance of this contract, minus\n    ///      any GRG that has already been reserved for rewards.\n    function _getAvailableGrgBalance()\n        internal\n        view\n        returns (uint256 grgBalance)\n    {\n        grgBalance = getGrgContract().balanceOf(address(this))\n            .safeSub(grgReservedForPoolRewards);\n\n        return grgBalance;\n    }\n\n    /// @dev Asserts that a pool has been finalized last epoch.\n    /// @param poolId The id of the pool that should have been finalized.\n    function _assertPoolFinalizedLastEpoch(bytes32 poolId)\n        internal\n        view\n        virtual\n        override\n    {\n        uint256 prevEpoch = currentEpoch.safeSub(1);\n        IStructs.PoolStats memory poolStats = poolStatsByEpoch[poolId][prevEpoch];\n\n        // A pool that has any fees remaining has not been finalized\n        if (poolStats.feesCollected != 0) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.PoolNotFinalizedError(\n                    poolId,\n                    prevEpoch\n                )\n            );\n        }\n    }\n\n    /// @dev Computes the reward owed to a pool during finalization.\n    /// @param poolStats Stats for a specific pool.\n    /// @param aggregatedStats Stats aggregated across all pools.\n    /// @return rewards Unfinalized rewards for the input pool.\n    function _getUnfinalizedPoolRewardsFromPoolStats(\n        IStructs.PoolStats memory poolStats,\n        IStructs.AggregatedStats memory aggregatedStats\n    )\n        private\n        view\n        returns (uint256 rewards)\n    {\n        // There can't be any rewards if the pool did not collect any fees.\n        if (poolStats.feesCollected == 0) {\n            return rewards;\n        }\n\n        // Use the cobb-douglas function to compute the total reward.\n        rewards = LibCobbDouglas.cobbDouglas(\n            aggregatedStats.rewardsAvailable,\n            poolStats.feesCollected,\n            aggregatedStats.totalFeesCollected,\n            poolStats.weightedStake,\n            aggregatedStats.totalWeightedStake,\n            cobbDouglasAlphaNumerator,\n            cobbDouglasAlphaDenominator\n        );\n\n        // Clip the reward to always be under\n        // `rewardsAvailable - totalRewardsPaid`,\n        // in case cobb-douglas overflows, which should be unlikely.\n        uint256 rewardsRemaining = aggregatedStats.rewardsAvailable.safeSub(aggregatedStats.totalRewardsFinalized);\n        if (rewardsRemaining < rewards) {\n            rewards = rewardsRemaining;\n        }\n    }\n}\n",
		"./libs/LibCobbDouglas.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./LibFixedMath.sol\";\n\n\nlibrary LibCobbDouglas {\n\n    /// @dev The cobb-douglas function used to compute fee-based rewards for\n    ///      staking pools in a given epoch. This function does not perform\n    ///      bounds checking on the inputs, but the following conditions\n    ///      need to be true:\n    ///         0 <= fees / totalFees <= 1\n    ///         0 <= stake / totalStake <= 1\n    ///         0 <= alphaNumerator / alphaDenominator <= 1\n    /// @param totalRewards collected over an epoch.\n    /// @param fees Fees attributed to the the staking pool.\n    /// @param totalFees Total fees collected across all pools that earned rewards.\n    /// @param stake Stake attributed to the staking pool.\n    /// @param totalStake Total stake across all pools that earned rewards.\n    /// @param alphaNumerator Numerator of `alpha` in the cobb-douglas function.\n    /// @param alphaDenominator Denominator of `alpha` in the cobb-douglas\n    ///        function.\n    /// @return rewards Rewards owed to the staking pool.\n    function cobbDouglas(\n        uint256 totalRewards,\n        uint256 fees,\n        uint256 totalFees,\n        uint256 stake,\n        uint256 totalStake,\n        uint32 alphaNumerator,\n        uint32 alphaDenominator\n    )\n        internal\n        pure\n        returns (uint256 rewards)\n    {\n        int256 feeRatio = LibFixedMath.toFixed(fees, totalFees);\n        int256 stakeRatio = LibFixedMath.toFixed(stake, totalStake);\n        if (feeRatio == 0 || stakeRatio == 0) {\n            return rewards = 0;\n        }\n        // The cobb-doublas function has the form:\n        // `totalRewards * feeRatio ^ alpha * stakeRatio ^ (1-alpha)`\n        // This is equivalent to:\n        // `totalRewards * stakeRatio * e^(alpha * (ln(feeRatio / stakeRatio)))`\n        // However, because `ln(x)` has the domain of `0 < x < 1`\n        // and `exp(x)` has the domain of `x < 0`,\n        // and fixed-point math easily overflows with multiplication,\n        // we will choose the following if `stakeRatio > feeRatio`:\n        // `totalRewards * stakeRatio / e^(alpha * (ln(stakeRatio / feeRatio)))`\n\n        // Compute\n        // `e^(alpha * ln(feeRatio/stakeRatio))` if feeRatio <= stakeRatio\n        // or\n        // `e^(alpa * ln(stakeRatio/feeRatio))` if feeRatio > stakeRatio\n        int256 n = feeRatio <= stakeRatio ?\n            LibFixedMath.div(feeRatio, stakeRatio) :\n            LibFixedMath.div(stakeRatio, feeRatio);\n        n = LibFixedMath.exp(\n            LibFixedMath.mulDiv(\n                LibFixedMath.ln(n),\n                int256(alphaNumerator),\n                int256(alphaDenominator)\n            )\n        );\n        // Compute\n        // `totalRewards * n` if feeRatio <= stakeRatio\n        // or\n        // `totalRewards / n` if stakeRatio > feeRatio\n        // depending on the choice we made earlier.\n        n = feeRatio <= stakeRatio ?\n            LibFixedMath.mul(stakeRatio, n) :\n            LibFixedMath.div(stakeRatio, n);\n        // Multiply the above with totalRewards.\n        rewards = LibFixedMath.uintMul(n, totalRewards);\n    }\n}\n",
		"./libs/LibFixedMath.sol": "/*\n\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./LibFixedMathRichErrors.sol\";\n\n\n// solhint-disable indent\n/// @dev Signed, fixed-point, 127-bit precision math library.\nlibrary LibFixedMath {\n\n    // 1\n    int256 private constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n    // 2**255\n    int256 private constant MIN_FIXED_VAL = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n    // 1^2 (in fixed-point)\n    int256 private constant FIXED_1_SQUARED = int256(0x4000000000000000000000000000000000000000000000000000000000000000);\n    // 1\n    int256 private constant LN_MAX_VAL = FIXED_1;\n    // e ^ -63.875\n    int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n    // 0\n    int256 private constant EXP_MAX_VAL = 0;\n    // -63.875\n    int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n    /// @dev Get one as a fixed-point number.\n    function one() internal pure returns (int256 f) {\n        f = FIXED_1;\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _add(a, b);\n    }\n\n    /// @dev Returns the addition of two fixed point numbers, reverting on overflow.\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n        if (b == MIN_FIXED_VAL) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.SignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_SMALL,\n                b\n            ));\n        }\n        c = _add(a, -b);\n    }\n\n    /// @dev Returns the multiplication of two fixed point numbers, reverting on overflow.\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _mul(a, b) / FIXED_1;\n    }\n\n    /// @dev Returns the division of two fixed point numbers.\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        c = _div(_mul(a, FIXED_1), b);\n    }\n\n    /// @dev Performs (a * n) / d, without scaling for precision.\n    function mulDiv(int256 a, int256 n, int256 d) internal pure returns (int256 c) {\n        c = _div(_mul(a, n), d);\n    }\n\n    /// @dev Returns the unsigned integer result of multiplying a fixed-point\n    ///      number with an integer, reverting if the multiplication overflows.\n    ///      Negative results are clamped to zero.\n    function uintMul(int256 f, uint256 u) internal pure returns (uint256) {\n        if (int256(u) < int256(0)) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.UnsignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                u\n            ));\n        }\n        int256 c = _mul(f, int256(u));\n        if (c <= 0) {\n            return 0;\n        }\n        return uint256(uint256(c) >> 127);\n    }\n\n    /// @dev Returns the absolute value of a fixed point number.\n    function abs(int256 f) internal pure returns (int256 c) {\n        if (f == MIN_FIXED_VAL) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.SignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_SMALL,\n                f\n            ));\n        }\n        if (f >= 0) {\n            c = f;\n        } else {\n            c = -f;\n        }\n    }\n\n    /// @dev Returns 1 / `x`, where `x` is a fixed-point number.\n    function invert(int256 f) internal pure returns (int256 c) {\n        c = _div(FIXED_1_SQUARED, f);\n    }\n\n    /// @dev Convert signed `n` / 1 to a fixed-point number.\n    function toFixed(int256 n) internal pure returns (int256 f) {\n        f = _mul(n, FIXED_1);\n    }\n\n    /// @dev Convert signed `n` / `d` to a fixed-point number.\n    function toFixed(int256 n, int256 d) internal pure returns (int256 f) {\n        f = _div(_mul(n, FIXED_1), d);\n    }\n\n    /// @dev Convert unsigned `n` / 1 to a fixed-point number.\n    ///      Reverts if `n` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.UnsignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                n\n            ));\n        }\n        f = _mul(int256(n), FIXED_1);\n    }\n\n    /// @dev Convert unsigned `n` / `d` to a fixed-point number.\n    ///      Reverts if `n` / `d` is too large to fit in a fixed-point number.\n    function toFixed(uint256 n, uint256 d) internal pure returns (int256 f) {\n        if (int256(n) < int256(0)) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.UnsignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                n\n            ));\n        }\n        if (int256(d) < int256(0)) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.UnsignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                d\n            ));\n        }\n        f = _div(_mul(int256(n), FIXED_1), int256(d));\n    }\n\n    /// @dev Convert a fixed-point number to an integer.\n    function toInteger(int256 f) internal pure returns (int256 n) {\n        return f / FIXED_1;\n    }\n\n    /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n    function ln(int256 x) internal pure returns (int256 r) {\n        if (x > LN_MAX_VAL) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.SignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                x\n            ));\n        }\n        if (x <= 0) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.SignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_SMALL,\n                x\n            ));\n        }\n        if (x == FIXED_1) {\n            return 0;\n        }\n        if (x <= LN_MIN_VAL) {\n            return EXP_MIN_VAL;\n        }\n\n        int256 y;\n        int256 z;\n        int256 w;\n\n        // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n        // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n        //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n        // e ^ -32\n        if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n            r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n        }\n        // e ^ -16\n        if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n            r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n        }\n        // e ^ -8\n        if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n            x = x * FIXED_1 / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n        }\n        // e ^ -4\n        if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n        }\n        // e ^ -2\n        if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n        }\n        // e ^ -1\n        if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n        }\n        // e ^ -0.5\n        if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n            x = x * FIXED_1 / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n        }\n        // e ^ -0.25\n        if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n            r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n        }\n        // e ^ -0.125\n        if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n            r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n            x = x * FIXED_1 / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n        }\n        // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n        // Add the taylor series for log(1 + z), where z = x - 1\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        r += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1; // add y^01 / 01 - y^02 / 02\n        r += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1; // add y^03 / 03 - y^04 / 04\n        r += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1; // add y^05 / 05 - y^06 / 06\n        r += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1; // add y^07 / 07 - y^08 / 08\n        r += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1; // add y^09 / 09 - y^10 / 10\n        r += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1; // add y^11 / 11 - y^12 / 12\n        r += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1; // add y^13 / 13 - y^14 / 14\n        r += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;                      // add y^15 / 15 - y^16 / 16\n    }\n\n    /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n    function exp(int256 x) internal pure returns (int256 r) {\n        if (x < EXP_MIN_VAL) {\n            // Saturate to zero below EXP_MIN_VAL.\n            return 0;\n        }\n        if (x == 0) {\n            return FIXED_1;\n        }\n        if (x > EXP_MAX_VAL) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.SignedValueError(\n                LibFixedMathRichErrors.ValueErrorCodes.TOO_LARGE,\n                x\n            ));\n        }\n\n        // Rewrite the input as a product of natural exponents and a\n        // single residual q, where q is a number of small magnitude.\n        // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n        //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n        //              -> q = -0.044\n\n        // Multiply with the taylor series for e^q\n        int256 y;\n        int256 z;\n        // q = x % 0.125 (the residual)\n        z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n        z = z * y / FIXED_1; r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1; r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1; r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1; r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1; r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1; r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1; r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1; r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1; r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1; r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1; r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1; r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1; r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1; r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1; r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1; r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1; r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1; r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        // Multiply with the non-residual terms.\n        x = -x;\n        // e ^ -32\n        if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)\n                / int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n        }\n        // e ^ -16\n        if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)\n                / int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n        }\n        // e ^ -8\n        if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)\n                / int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n        }\n        // e ^ -4\n        if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)\n                / int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n        }\n        // e ^ -2\n        if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)\n                / int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n        }\n        // e ^ -1\n        if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n            r = r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)\n                / int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n        }\n        // e ^ -0.5\n        if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)\n                / int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n        }\n        // e ^ -0.25\n        if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n            r = r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)\n                / int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n        }\n        // e ^ -0.125\n        if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n            r = r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)\n                / int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n        }\n    }\n\n    /// @dev Returns the multiplication two numbers, reverting on overflow.\n    function _mul(int256 a, int256 b) private pure returns (int256 c) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        c = a * b;\n        if (c / a != b || c / b != a) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.BinOpError(\n                LibFixedMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n    }\n\n    /// @dev Returns the division of two numbers, reverting on division by zero.\n    function _div(int256 a, int256 b) private pure returns (int256 c) {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.BinOpError(\n                LibFixedMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        if (a == MIN_FIXED_VAL && b == -1) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.BinOpError(\n                LibFixedMathRichErrors.BinOpErrorCodes.DIVISION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        c = a / b;\n    }\n\n    /// @dev Adds two numbers, reverting on overflow.\n    function _add(int256 a, int256 b) private pure returns (int256 c) {\n        c = a + b;\n        if ((a < 0 && b < 0 && c > a) || (a > 0 && b > 0 && c < a)) {\n            LibRichErrors.rrevert(LibFixedMathRichErrors.BinOpError(\n                LibFixedMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n    }\n}\n",
		"./libs/LibFixedMathRichErrors.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\n\n\nlibrary LibFixedMathRichErrors {\n\n    enum ValueErrorCodes {\n        TOO_SMALL,\n        TOO_LARGE\n    }\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        DIVISION_BY_ZERO,\n        DIVISION_OVERFLOW\n    }\n\n    // bytes4(keccak256(\"SignedValueError(uint8,int256)\"))\n    bytes4 internal constant SIGNED_VALUE_ERROR_SELECTOR =\n        0xed2f26a1;\n\n    // bytes4(keccak256(\"UnsignedValueError(uint8,uint256)\"))\n    bytes4 internal constant UNSIGNED_VALUE_ERROR_SELECTOR =\n        0xbd79545f;\n\n    // bytes4(keccak256(\"BinOpError(uint8,int256,int256)\"))\n    bytes4 internal constant BIN_OP_ERROR_SELECTOR =\n        0x8c12dfe7;\n\n    // solhint-disable func-name-mixedcase\n    function SignedValueError(\n        ValueErrorCodes error,\n        int256 n\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SIGNED_VALUE_ERROR_SELECTOR,\n            uint8(error),\n            n\n        );\n    }\n\n    function UnsignedValueError(\n        ValueErrorCodes error,\n        uint256 n\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UNSIGNED_VALUE_ERROR_SELECTOR,\n            uint8(error),\n            n\n        );\n    }\n\n    function BinOpError(\n        BinOpErrorCodes error,\n        int256 a,\n        int256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            BIN_OP_ERROR_SELECTOR,\n            uint8(error),\n            a,\n            b\n        );\n    }\n}\n",
		"./rewards/MixinPopManager.sol": "/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\nimport \"../interfaces/IStakingEvents.sol\";\nimport \"../interfaces/IStaking.sol\";\nimport \"../immutable/MixinStorage.sol\";\n\n\nabstract contract MixinPopManager is\n    IStaking,\n    IStakingEvents,\n    MixinStorage\n{\n    /// @dev Asserts that the call is coming from a valid pop.\n    modifier onlyPop() {\n        if (!validPops[msg.sender]) {\n            LibRichErrors.rrevert(LibStakingRichErrors.OnlyCallableByPopError(\n                msg.sender\n            ));\n        }\n        _;\n    }\n\n    /// @dev Adds a new pop address.\n    /// @param addr Address of pop contract to add.\n    function addPopAddress(address addr)\n        external\n        override\n        onlyAuthorized\n    {\n        if (validPops[addr]) {\n            LibRichErrors.rrevert(LibStakingRichErrors.PopManagerError(\n                LibStakingRichErrors.PopManagerErrorCodes.PopAlreadyRegistered,\n                addr\n            ));\n        }\n        validPops[addr] = true;\n        emit PopAdded(addr);\n    }\n\n    /// @dev Removes an existing proof_of_performance address.\n    /// @param addr Address of proof_of_performance contract to remove.\n    function removePopAddress(address addr)\n        external\n        override\n        onlyAuthorized\n    {\n        if (!validPops[addr]) {\n            LibRichErrors.rrevert(LibStakingRichErrors.PopManagerError(\n                LibStakingRichErrors.PopManagerErrorCodes.PopNotRegistered,\n                addr\n            ));\n        }\n        validPops[addr] = false;\n        emit PopRemoved(addr);\n    }\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.7.4+commit.3f05b770",
		"settings": {
			"remappings": [],
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}