{
	"schemaVersion": "2.0.0",
	"contractName": "Exchange",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "filled",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmounts",
						"type": "uint256[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "batchFillOrders",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "cancelled",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "hash",
						"type": "bytes32"
					},
					{
						"name": "signerAddress",
						"type": "address"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "preSign",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "leftOrder",
						"type": "tuple"
					},
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "rightOrder",
						"type": "tuple"
					},
					{
						"name": "leftSignature",
						"type": "bytes"
					},
					{
						"name": "rightSignature",
						"type": "bytes"
					}
				],
				"name": "matchOrders",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"name": "makerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "takerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "makerFeePaid",
										"type": "uint256"
									},
									{
										"name": "takerFeePaid",
										"type": "uint256"
									}
								],
								"name": "left",
								"type": "tuple"
							},
							{
								"components": [
									{
										"name": "makerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "takerAssetFilledAmount",
										"type": "uint256"
									},
									{
										"name": "makerFeePaid",
										"type": "uint256"
									},
									{
										"name": "takerFeePaid",
										"type": "uint256"
									}
								],
								"name": "right",
								"type": "tuple"
							},
							{
								"name": "leftMakerAssetSpreadAmount",
								"type": "uint256"
							}
						],
						"name": "matchedFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "fillOrderNoThrow",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "fillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"name": "assetProxies",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					}
				],
				"name": "batchCancelOrders",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmounts",
						"type": "uint256[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "batchFillOrKillOrders",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "targetOrderEpoch",
						"type": "uint256"
					}
				],
				"name": "cancelOrdersUpTo",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmounts",
						"type": "uint256[]"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "batchFillOrdersNoThrow",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "assetProxyId",
						"type": "bytes4"
					}
				],
				"name": "getAssetProxy",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "transactions",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "fillOrKillOrder",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "fillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "validatorAddress",
						"type": "address"
					},
					{
						"name": "approval",
						"type": "bool"
					}
				],
				"name": "setSignatureValidatorApproval",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "allowedValidators",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketSellOrders",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					}
				],
				"name": "getOrdersInfo",
				"outputs": [
					{
						"components": [
							{
								"name": "orderStatus",
								"type": "uint8"
							},
							{
								"name": "orderHash",
								"type": "bytes32"
							},
							{
								"name": "orderTakerAssetFilledAmount",
								"type": "uint256"
							}
						],
						"name": "",
						"type": "tuple[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					},
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "preSigned",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "hash",
						"type": "bytes32"
					},
					{
						"name": "signerAddress",
						"type": "address"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "isValidSignature",
				"outputs": [
					{
						"name": "isValid",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "makerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketBuyOrdersNoThrow",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "fillOrder",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "fillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "salt",
						"type": "uint256"
					},
					{
						"name": "signerAddress",
						"type": "address"
					},
					{
						"name": "data",
						"type": "bytes"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "executeTransaction",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "assetProxy",
						"type": "address"
					}
				],
				"name": "registerAssetProxy",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					}
				],
				"name": "getOrderInfo",
				"outputs": [
					{
						"components": [
							{
								"name": "orderStatus",
								"type": "uint8"
							},
							{
								"name": "orderHash",
								"type": "bytes32"
							},
							{
								"name": "orderTakerAssetFilledAmount",
								"type": "uint256"
							}
						],
						"name": "orderInfo",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					}
				],
				"name": "cancelOrder",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "orderEpoch",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "ZRX_ASSET_DATA",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketSellOrdersNoThrow",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "EIP712_DOMAIN_HASH",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "orders",
						"type": "tuple[]"
					},
					{
						"name": "makerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "signatures",
						"type": "bytes[]"
					}
				],
				"name": "marketBuyOrders",
				"outputs": [
					{
						"components": [
							{
								"name": "makerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetFilledAmount",
								"type": "uint256"
							},
							{
								"name": "makerFeePaid",
								"type": "uint256"
							},
							{
								"name": "takerFeePaid",
								"type": "uint256"
							}
						],
						"name": "totalFillResults",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "currentContextAddress",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "VERSION",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "signerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "validatorAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "SignatureValidatorApproval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "makerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "feeRecipientAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "takerAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "senderAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "makerAssetFilledAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "takerAssetFilledAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "makerFeePaid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "takerFeePaid",
						"type": "uint256"
					},
					{
						"indexed": true,
						"name": "orderHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "makerAssetData",
						"type": "bytes"
					},
					{
						"indexed": false,
						"name": "takerAssetData",
						"type": "bytes"
					}
				],
				"name": "Fill",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "makerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "feeRecipientAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "senderAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "orderHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "makerAssetData",
						"type": "bytes"
					},
					{
						"indexed": false,
						"name": "takerAssetData",
						"type": "bytes"
					}
				],
				"name": "Cancel",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "makerAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "senderAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "orderEpoch",
						"type": "uint256"
					}
				],
				"name": "CancelUpTo",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "id",
						"type": "bytes4"
					},
					{
						"indexed": false,
						"name": "assetProxy",
						"type": "address"
					}
				],
				"name": "AssetProxyRegistered",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"batchCancelOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": {
					"details": "Synchronously cancels multiple orders in a single transaction.",
					"params": {
						"orders": "Array of order specifications."
					}
				},
				"batchFillOrKillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])": {
					"details": "Synchronously executes multiple calls of fillOrKill.",
					"params": {
						"orders": "Array of order specifications.",
						"signatures": "Proofs that orders have been created by makers.",
						"takerAssetFillAmounts": "Array of desired amounts of takerAsset to sell in orders."
					},
					"return": "Amounts filled and fees paid by makers and taker.         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets."
				},
				"batchFillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])": {
					"details": "Synchronously executes multiple calls of fillOrder.",
					"params": {
						"orders": "Array of order specifications.",
						"signatures": "Proofs that orders have been created by makers.",
						"takerAssetFillAmounts": "Array of desired amounts of takerAsset to sell in orders."
					},
					"return": "Amounts filled and fees paid by makers and taker.         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets."
				},
				"batchFillOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])": {
					"details": "Fills an order with specified parameters and ECDSA signature.      Returns false if the transaction would otherwise revert.",
					"params": {
						"orders": "Array of order specifications.",
						"signatures": "Proofs that orders have been created by makers.",
						"takerAssetFillAmounts": "Array of desired amounts of takerAsset to sell in orders."
					},
					"return": "Amounts filled and fees paid by makers and taker.         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets."
				},
				"cancelOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
					"details": "After calling, the order can not be filled anymore.      Throws if order is invalid or sender does not have permission to cancel.",
					"params": {
						"order": "Order to cancel. Order must be OrderStatus.FILLABLE."
					}
				},
				"cancelOrdersUpTo(uint256)": {
					"details": "Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).",
					"params": {
						"targetOrderEpoch": "Orders created with a salt less or equal to this value will be cancelled."
					}
				},
				"executeTransaction(uint256,address,bytes,bytes)": {
					"details": "Executes an exchange method call in the context of signer.",
					"params": {
						"data": "AbiV2 encoded calldata.",
						"salt": "Arbitrary number to ensure uniqueness of transaction hash.",
						"signature": "Proof of signer transaction by signer.",
						"signerAddress": "Address of transaction signer."
					}
				},
				"fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)": {
					"details": "Fills the input order. Reverts if exact takerAssetFillAmount not filled.",
					"params": {
						"order": "Order struct containing order specifications.",
						"signature": "Proof that order has been created by maker.",
						"takerAssetFillAmount": "Desired amount of takerAsset to sell."
					}
				},
				"fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)": {
					"details": "Fills the input order.",
					"params": {
						"order": "Order struct containing order specifications.",
						"signature": "Proof that order has been created by maker.",
						"takerAssetFillAmount": "Desired amount of takerAsset to sell."
					},
					"return": "Amounts filled and fees paid by maker and taker."
				},
				"fillOrderNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)": {
					"details": "Fills the input order.      Returns false if the transaction would otherwise revert.",
					"params": {
						"order": "Order struct containing order specifications.",
						"signature": "Proof that order has been created by maker.",
						"takerAssetFillAmount": "Desired amount of takerAsset to sell."
					},
					"return": "Amounts filled and fees paid by maker and taker."
				},
				"getAssetProxy(bytes4)": {
					"details": "Gets an asset proxy.",
					"params": {
						"assetProxyId": "Id of the asset proxy."
					},
					"return": "The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered."
				},
				"getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
					"details": "Gets information about an order: status, hash, and amount filled.",
					"params": {
						"order": "Order to gather information on."
					},
					"return": "OrderInfo Information about the order and its state.         See LibOrder.OrderInfo for a complete description."
				},
				"getOrdersInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": {
					"details": "Fetches information for all passed in orders.",
					"params": {
						"orders": "Array of order specifications."
					},
					"return": "Array of OrderInfo instances that correspond to each order."
				},
				"isValidSignature(bytes32,address,bytes)": {
					"details": "Verifies that a hash has been signed by the given signer.",
					"params": {
						"hash": "Any 32 byte hash.",
						"signature": "Proof that the hash has been signed by signer.",
						"signerAddress": "Address that should have signed the given hash."
					},
					"return": "True if the address recovered from the provided signature matches the input signer address."
				},
				"marketBuyOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
					"details": "Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.",
					"params": {
						"makerAssetFillAmount": "Desired amount of makerAsset to buy.",
						"orders": "Array of order specifications.",
						"signatures": "Proofs that orders have been signed by makers."
					},
					"return": "Amounts filled and fees paid by makers and taker."
				},
				"marketBuyOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
					"details": "Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.      Returns false if the transaction would otherwise revert.",
					"params": {
						"makerAssetFillAmount": "Desired amount of makerAsset to buy.",
						"orders": "Array of order specifications.",
						"signatures": "Proofs that orders have been signed by makers."
					},
					"return": "Amounts filled and fees paid by makers and taker."
				},
				"marketSellOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
					"details": "Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.",
					"params": {
						"orders": "Array of order specifications.",
						"signatures": "Proofs that orders have been created by makers.",
						"takerAssetFillAmount": "Desired amount of takerAsset to sell."
					},
					"return": "Amounts filled and fees paid by makers and taker."
				},
				"marketSellOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
					"details": "Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.      Returns false if the transaction would otherwise revert.",
					"params": {
						"orders": "Array of order specifications.",
						"signatures": "Proofs that orders have been signed by makers.",
						"takerAssetFillAmount": "Desired amount of takerAsset to sell."
					},
					"return": "Amounts filled and fees paid by makers and taker."
				},
				"matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes,bytes)": {
					"details": "Match two complementary orders that have a profitable spread.      Each order is filled at their respective price point. However, the calculations are      carried out as though the orders are both being filled at the right order's price point.      The profit made by the left order goes to the taker (who matched the two orders).",
					"params": {
						"leftOrder": "First order to match.",
						"leftSignature": "Proof that order was created by the left maker.",
						"rightOrder": "Second order to match.",
						"rightSignature": "Proof that order was created by the right maker."
					},
					"return": "matchedFillResults Amounts filled and fees paid by maker and taker of matched orders."
				},
				"preSign(bytes32,address,bytes)": {
					"details": "Approves a hash on-chain using any valid signature type.      After presigning a hash, the preSign signature type will become valid for that hash and signer.",
					"params": {
						"signature": "Proof that the hash has been signed by signer.",
						"signerAddress": "Address that should have signed the given hash."
					}
				},
				"registerAssetProxy(address)": {
					"details": "Registers an asset proxy to its asset proxy id.      Once an asset proxy is registered, it cannot be unregistered.",
					"params": {
						"assetProxy": "Address of new asset proxy to register."
					}
				},
				"setSignatureValidatorApproval(address,bool)": {
					"details": "Approves/unnapproves a Validator contract to verify signatures on signer's behalf.",
					"params": {
						"approval": "Approval or disapproval of  Validator contract.",
						"validatorAddress": "Address of Validator contract."
					}
				}
			}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60806040526000805460ff191690553480156200001b57600080fd5b50604080517f454950373132446f6d61696e28000000000000000000000000000000000000006020808301919091527f737472696e67206e616d652c0000000000000000000000000000000000000000602d8301527f737472696e672076657273696f6e2c000000000000000000000000000000000060398301527f6164647265737320766572696679696e67436f6e74726163740000000000000060488301527f2900000000000000000000000000000000000000000000000000000000000000606183015282516042818403018152606290920192839052815191929182918401908083835b60208310620001245780518252601f19909201916020918201910162000103565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208285018552600b8084527f30782050726f746f636f6c000000000000000000000000000000000000000000928401928352945190965091945090928392508083835b60208310620001ae5780518252601f1990920191602091820191016200018d565b51815160209384036101000a600019018019909216911617905260408051929094018290038220828501855260018084527f3200000000000000000000000000000000000000000000000000000000000000928401928352945190965091945090928392508083835b60208310620002385780518252601f19909201916020918201910162000217565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208282019890985281840196909652606081019690965250306080808701919091528151808703909101815260a09095019081905284519093849350850191508083835b60208310620002c35780518252601f199092019160209182019101620002a2565b5181516000196020949094036101000a939093019283169219169190911790526040519201829003909120600155505060028054600160a060020a0319163317905550614a7f80620003166000396000f3006080604052600436106101b65763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663288cdc9181146101bb578063297bb70b146101f15780632ac126221461021e5780633683ef8e1461024b5780633c28d8611461026d5780633e228bae1461029a5780633fd3c997146102ba5780634ac14782146102e75780634d0ae546146103075780634f9559b11461032757806350dde190146103475780636070410814610367578063642f2eaf1461039457806364a3bc15146103b457806377fcce68146103d45780637b8e3514146103f45780637e1d9808146104145780637e9d74dc1461043457806382c174d0146104615780638da5cb5b146104815780639363470214610496578063a3e20380146104b6578063b4be83d5146104d6578063bfc8bfce146104f6578063c585bb9314610516578063c75e0a8114610536578063d46b02c314610563578063d9bfa73e14610583578063db123b1a146105a3578063dd1c7d18146105c5578063e306f779146105e5578063e5fa431b146105fa578063eea086ba1461061a578063f2fde38b1461062f578063ffa1ad741461064f575b600080fd5b3480156101c757600080fd5b506101db6101d6366004613a2d565b610664565b6040516101e89190614652565b60405180910390f35b3480156101fd57600080fd5b5061021161020c366004613950565b610676565b6040516101e8919061492c565b34801561022a57600080fd5b5061023e610239366004613a2d565b61074e565b6040516101e89190614644565b34801561025757600080fd5b5061026b610266366004613a6a565b610763565b005b34801561027957600080fd5b5061028d610288366004613b9e565b610801565b6040516101e8919061493a565b3480156102a657600080fd5b506102116102b5366004613c5e565b610945565b3480156102c657600080fd5b506102da6102d5366004613b2d565b61099b565b6040516101e8919061470e565b3480156102f357600080fd5b5061026b61030236600461391b565b6109b6565b34801561031357600080fd5b50610211610322366004613950565b610a30565b34801561033357600080fd5b5061026b610342366004613a2d565b610aeb565b34801561035357600080fd5b50610211610362366004613950565b610c0f565b34801561037357600080fd5b50610387610382366004613b2d565b610ca3565b6040516101e89190614564565b3480156103a057600080fd5b5061023e6103af366004613a2d565b610ccc565b3480156103c057600080fd5b506102116103cf366004613c5e565b610ce1565b3480156103e057600080fd5b5061026b6103ef3660046138eb565b610d39565b34801561040057600080fd5b5061023e61040f3660046138b1565b610df5565b34801561042057600080fd5b5061021161042f3660046139e4565b610e15565b34801561044057600080fd5b5061045461044f36600461391b565b610f26565b6040516101e89190614633565b34801561046d57600080fd5b5061023e61047c366004613a4b565b610fbb565b34801561048d57600080fd5b50610387610fdb565b3480156104a257600080fd5b5061023e6104b1366004613ad2565b610fea565b3480156104c257600080fd5b506102116104d13660046139e4565b6113f7565b3480156104e257600080fd5b506102116104f1366004613c5e565b61150a565b34801561050257600080fd5b5061026b610511366004613ca7565b611550565b34801561052257600080fd5b5061026b610531366004613893565b611725565b34801561054257600080fd5b50610556610551366004613b69565b6118b3565b6040516101e89190614949565b34801561056f57600080fd5b5061026b61057e366004613b69565b6119a0565b34801561058f57600080fd5b506101db61059e3660046138b1565b6119e9565b3480156105af57600080fd5b506105b8611a06565b6040516101e891906146fd565b3480156105d157600080fd5b506102116105e03660046139e4565b611a66565b3480156105f157600080fd5b506101db611b3b565b34801561060657600080fd5b506102116106153660046139e4565b611b41565b34801561062657600080fd5b50610387611c60565b34801561063b57600080fd5b5061026b61064a366004613893565b611c6f565b34801561065b57600080fd5b506105b8611cd7565b60036020526000908152604090205481565b61067e6134c5565b6000806106896134c5565b60005460ff16156106b85760405160e560020a62461bcd0281526004016106af906148ac565b60405180910390fd5b6000805460ff191660011781558751935091505b81831461073a5761072387838151811015156106e457fe5b9060200190602002015187848151811015156106fc57fe5b90602001906020020151878581518110151561071457fe5b90602001906020020151611d0e565b905061072f8482611dac565b6001909101906106cc565b50506000805460ff19169055509392505050565b60046020526000908152604090205460ff1681565b600160a060020a03831633146107cf576107ae848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843750610fea945050505050565b15156107cf5760405160e560020a62461bcd0281526004016106af906147dc565b50506000918252600660209081526040808420600160a060020a0390931684529190529020805460ff19166001179055565b6108096134ee565b61081161351d565b61081961351d565b6000805460ff16156108405760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff1916600117905561016080890151610140808a01919091528901519088015261086e886118b3565b9250610879876118b3565b9150610883611e0e565b905061089188848389611e33565b61089d87838388611e33565b6108a78888611f2e565b6108bb888885604001518560400151611f77565b8051602081015190519195506108d6918a91869181906120fe565b6020808501519081015190516108f291899185919081906120fe565b61090b88828560200151866040015188600001516121bb565b61092487828460200151856040015188602001516121bb565b6109308888838761225a565b50506000805460ff1916905550949350505050565b61094d6134c5565b606061095a8585856123c8565b9050608081825160208401305af4801561099157815183526020820151602084015260408201516040840152606082015160608401525b505b509392505050565b600a60205260009081526040902054600160a060020a031681565b60008054819060ff16156109df5760405160e560020a62461bcd0281526004016106af906148ac565b50506000805460ff191660011781558151905b808214610a2157610a198382815181101515610a0a57fe5b9060200190602002015161257c565b6001016109f2565b50506000805460ff1916905550565b610a386134c5565b600080610a436134c5565b60005460ff1615610a695760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff191660011781558751935091505b81831461073a57610ad48783815181101515610a9557fe5b906020019060200201518784815181101515610aad57fe5b906020019060200201518785815181101515610ac557fe5b906020019060200201516125a7565b9050610ae08482611dac565b600190910190610a7d565b6000805481908190819060ff1615610b185760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff19166001179055610b2d611e0e565b9350600160a060020a0384163314610b455733610b48565b60005b600160a060020a038086166000908152600560209081526040808320938516835292905220549093506001860192509050808211610b9b5760405160e560020a62461bcd0281526004016106af9061486c565b600160a060020a0380851660008181526005602090815260408083209488168084529490915290819020859055517f82af639571738f4ebd4268fb0363d8957ebe1bbb9e78dba5ebd69eed39b154f090610bf6908690614652565b60405180910390a350506000805460ff19169055505050565b610c176134c5565b600080610c226134c5565b86519250600091505b818314610c9957610c828783815181101515610c4357fe5b906020019060200201518784815181101515610c5b57fe5b906020019060200201518785815181101515610c7357fe5b90602001906020020151610945565b9050610c8e8482611dac565b600190910190610c2b565b5050509392505050565b600160e060020a031981166000908152600a6020526040902054600160a060020a03165b919050565b60086020526000908152604090205460ff1681565b610ce96134c5565b60005460ff1615610d0f5760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff19166001179055610d278484846125a7565b6000805460ff19169055949350505050565b6000805460ff1615610d605760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff19166001179055610d75611e0e565b600160a060020a0381811660008181526007602090815260408083209489168084529490915290819020805460ff19168715151790555192935090917fa8656e308026eeabce8f0bc18048433252318ab80ac79da0b3d3d8697dfba89190610dde908690614644565b60405180910390a350506000805460ff1916905550565b600760209081526000928352604080842090915290825290205460ff1681565b610e1d6134c5565b60606000806000610e2c6134c5565b60005460ff1615610e525760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff1916600117815589518a91908110610e6c57fe5b906020019060200201516101600151945088519350600092505b828414610f0f57848984815181101515610e9c57fe5b906020019060200201516101600181905250610ebc8887602001516125e3565b9150610ee88984815181101515610ecf57fe5b9060200190602002015183898681518110151561071457fe5b9050610ef48682611dac565b60208601518811610f0457610f0f565b600190920191610e86565b50506000805460ff19169055509195945050505050565b60606000606060008451925082604051908082528060200260200182016040528015610f6c57816020015b610f5961351d565b815260200190600190039081610f515790505b509150600090505b80831461099357610f9b8582815181101515610f8c57fe5b906020019060200201516118b3565b8282815181101515610fa957fe5b60209081029091010152600101610f74565b600660209081526000928352604080842090915290825290205460ff1681565b600254600160a060020a031681565b6000806000806000806000806000895111151561101c5760405160e560020a62461bcd0281526004016106af9061485c565b61102589612613565b60f860020a90049650600760ff8816106110545760405160e560020a62461bcd0281526004016106af9061477c565b8660ff16600781111561106357fe5b9550600086600781111561107357fe5b14156110945760405160e560020a62461bcd0281526004016106af9061484c565b60018660078111156110a257fe5b14156110d3578851156110ca5760405160e560020a62461bcd0281526004016106af9061491c565b600097506113e9565b60028660078111156110e157fe5b14156111be57885160411461110b5760405160e560020a62461bcd0281526004016106af9061471c565b88600081518110151561111a57fe5b016020015160f860020a90819004810204945061113e89600163ffffffff61266816565b935061115189602163ffffffff61266816565b925060018b8686866040516000815260200160405260405161117694939291906146ad565b60206040516020810390808403906000865af115801561119a573d6000803e3d6000fd5b5050604051601f190151600160a060020a038c811690821614995092506113e99050565b60038660078111156111cc57fe5b14156113035788516041146111f65760405160e560020a62461bcd0281526004016106af9061471c565b88600081518110151561120557fe5b016020015160f860020a90819004810204945061122989600163ffffffff61266816565b935061123c89602163ffffffff61266816565b925060018b60405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083106112bf5780518252601f1990920191602091820191016112a0565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206000835291019283905261117694509250899189915088906146ad565b600486600781111561131157fe5b1415611329576113228b8b8b61269c565b97506113e9565b600586600781111561133757fe5b141561138d57611346896127a4565b600160a060020a03808c1660009081526007602090815260408083209385168352929052205490915060ff16151561138157600097506113e9565b611322818c8c8c6127e8565b600686600781111561139b57fe5b14156113ce5760008b8152600660209081526040808320600160a060020a038e16845290915290205460ff1697506113e9565b60405160e560020a62461bcd0281526004016106af9061477c565b505050505050509392505050565b6113ff6134c5565b606060008060008061140f6134c5565b89600081518110151561141e57fe5b906020019060200201516101400151955089519450600093505b8385146114fd57858a8581518110151561144e57fe5b602090810290910101516101400152865161146a908a906125e3565b92506114ad8a8581518110151561147d57fe5b9060200190602002015160a001518b8681518110151561149957fe5b9060200190602002015160800151856128f7565b91506114d98a858151811015156114c057fe5b90602001906020020151838a87815181101515610c7357fe5b90506114e58782611dac565b865189116114f2576114fd565b600190930192611438565b5050505050509392505050565b6115126134c5565b60005460ff16156115385760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff19166001179055610d27848484611d0e565b600954600090600160a060020a03161561157f5760405160e560020a62461bcd0281526004016106af906148ac565b6115c26115bd888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843750612936945050505050565b612af2565b60008181526008602052604090205490915060ff16156115f75760405160e560020a62461bcd0281526004016106af906147cc565b600160a060020a038616331461168c57611642818785858080601f01602080910402602001604051908101604052809392919081815260200183838082843750610fea945050505050565b15156116635760405160e560020a62461bcd0281526004016106af9061490c565b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388161790555b60008181526008602052604090819020805460ff191660011790555130908690869080838380828437820191505092505050600060405180830381855af491505015156116ee5760405160e560020a62461bcd0281526004016106af906147fc565b600160a060020a038616331461171c576009805473ffffffffffffffffffffffffffffffffffffffff191690555b50505050505050565b60025460009081908190600160a060020a031633146117595760405160e560020a62461bcd0281526004016106af906148bc565b83925082600160a060020a031663ae25532e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117b357600080fd5b505af11580156117c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117eb9190810190613b4b565b600160e060020a031981166000908152600a6020526040902054909250600160a060020a0316905080156118345760405160e560020a62461bcd0281526004016106af9061475c565b600160e060020a031982166000908152600a602052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038616179055517fd2c6b762299c609bdb96520b58a49bfb80186934d4f71a86a367571a15c03194906118a590849087906146e2565b60405180910390a150505050565b6118bb61351d565b6118c482612b32565b60208083018290526000918252600390526040908190205490820152608082015115156118f85760015b60ff168152610cc7565b60a0820151151561190a5760026118ee565b60a08201516040820151106119205760056118ee565b61010082015142106119335760046118ee565b60208082015160009081526004909152604090205460ff16156119575760066118ee565b6101208201518251600160a060020a03908116600090815260056020908152604080832060608801519094168352929052205411156119975760066118ee565b60038152919050565b60005460ff16156119c65760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff191660011790556119dc8161257c565b506000805460ff19169055565b600560209081526000928352604080842090915290825290205481565b606060405190810160405280602481526020017ff47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f81526020017f4699f4980000000000000000000000000000000000000000000000000000000081525081565b611a6e6134c5565b60606000806000611a7d6134c5565b886000815181101515611a8c57fe5b906020019060200201516101600151945088519350600092505b828414611b2f57848984815181101515611abc57fe5b906020019060200201516101600181905250611adc8887602001516125e3565b9150611b088984815181101515611aef57fe5b90602001906020020151838986815181101515610c7357fe5b9050611b148682611dac565b60208601518811611b2457611b2f565b600190920191611aa6565b50505050509392505050565b60015481565b611b496134c5565b6060600080600080611b596134c5565b60005460ff1615611b7f5760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff191660011781558a518b91908110611b9957fe5b906020019060200201516101400151955089519450600093505b838514611c4857858a85815181101515611bc957fe5b6020908102909101015161014001528651611be5908a906125e3565b9250611bf88a8581518110151561147d57fe5b9150611c248a85815181101515611c0b57fe5b90602001906020020151838a8781518110151561071457fe5b9050611c308782611dac565b86518911611c3d57611c48565b600190930192611bb3565b50506000805460ff1916905550929695505050505050565b600954600160a060020a031681565b600254600160a060020a03163314611c9c5760405160e560020a62461bcd0281526004016106af906148bc565b600160a060020a03811615611cd4576002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60408051808201909152600581527f322e302e30000000000000000000000000000000000000000000000000000000602082015281565b611d166134c5565b611d1e61351d565b6000806000611d2c886118b3565b9350611d36611e0e565b9250611d4488858589611e33565b611d568860a0015185604001516125e3565b9150611d628783612b40565b9050611d758885898489600001516120fe565b611d7f8882612b56565b9450611d96888486602001518760400151896121bb565b611da1888487612bb7565b505050509392505050565b81518151611dba9190612c6f565b825260208083015190820151611dd09190612c6f565b602083015260408083015190820151611de99190612c6f565b604083015260608083015190820151611e029190612c6f565b60609092019190915250565b600954600090600160a060020a0316818115611e2a5781611e2c565b335b9392505050565b825160ff16600314611e5a5760405160e560020a62461bcd0281526004016106af906148dc565b6060840151600160a060020a031615611e9c576060840151600160a060020a03163314611e9c5760405160e560020a62461bcd0281526004016106af906148ec565b6020840151600160a060020a031615611ee95781600160a060020a03168460200151600160a060020a0316141515611ee95760405160e560020a62461bcd0281526004016106af9061472c565b60408301511515611f2857611f078360200151856000015183610fea565b1515611f285760405160e560020a62461bcd0281526004016106af9061479c565b50505050565b611f408260a001518260a00151612ca2565b611f5283608001518360800151612ca2565b1015611f735760405160e560020a62461bcd0281526004016106af906148fc565b5050565b611f7f6134ee565b600080600080611f938960a00151886125e3565b9350611fa889608001518a60a0015186612ce6565b9250611fb88860a00151876125e3565b9150611fcd88608001518960a0015184612ce6565b90508084106120105760208086018051839052805182018490525151865182015260808a015160a08b01518751909201516120089290612ce6565b85515261204d565b845183905284516020908101859052855181015190860180519190915260a089015160808a01519151516120449290612d35565b60208087015101525b845151602080870151015161206291906125e3565b604086015284515160808a015160c08b015161207f929190612ce6565b85516040015284516020015160a08a015160e08b01516120a0929190612ce6565b855160600152602085015151608089015160c08a01516120c1929190612ce6565b856020015160400181815250506120e98560200151602001518960a001518a60e00151612ce6565b60208601516060015250505050949350505050565b8215156121205760405160e560020a62461bcd0281526004016106af9061481c565b828211156121435760405160e560020a62461bcd0281526004016106af9061480c565b8460a00151612156856040015184612c6f565b11156121775760405160e560020a62461bcd0281526004016106af9061473c565b612185856080015183612ca2565b612193828760a00151612ca2565b11156121b45760405160e560020a62461bcd0281526004016106af9061489c565b5050505050565b6121c9828260200151612c6f565b600084815260036020908152604091829020929092558681015187518451938501518584015160608701516101408c01516101608d015196518b98600160a060020a039788169897909616967f0bcc4c97732e47d9946f229edb95f5b6323f601300e4690de719993f3c3711299661224b968f96339692959194909390614572565b60405180910390a45050505050565b60608060405190810160405280602481526020017ff47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f81526020017f4699f4980000000000000000000000000000000000000000000000000000000081525090506122db85610140015186600001518660000151856020015160200151612da4565b610140840151845186518451602001516122f793929190612da4565b6123108561014001518660000151858560400151612da4565b61232c8186600001518760400151856000015160400151612da4565b6123488185600001518660400151856020015160400151612da4565b8360400151600160a060020a03168560400151600160a060020a03161415612398576123938184876040015161238e866000015160600151876020015160600151612c6f565b612da4565b6121b4565b6123b081848760400151856000015160600151612da4565b6121b481848660400151856020015160600151612da4565b604080517fb4be83d5000000000000000000000000000000000000000000000000000000006020808301919091526060602483018181528751608485019081528884015160a48601529488015160c48501529087015160e4840152608087015161010484015260a087015161012484015260c087015161014484015260e08701516101648401526101008701516101848401526101208701516101a4840152610140870180516101c485019081526101608901516101e4860152610180905251805161020485018190529394919384936044870192849261022489019291820191601f82010460005b818110156124cf5783518552602094850194909301926001016124b1565b50505050818103610160808401919091528a0151805180835260209283019291820191601f82010460005b818110156125185783518552602094850194909301926001016124fa565b50505089845250848103602093840190815288518083529093918201918981019190601f82010460005b81811015612560578351855260209485019490930192600101612542565b505050601f198883030188525060405250505050509392505050565b61258461351d565b61258d826118b3565b90506125998282612ee7565b611f73828260200151612f92565b6125af6134c5565b6125ba848484611d0e565b60208101519091508314611e2c5760405160e560020a62461bcd0281526004016106af9061488c565b6000828211156126085760405160e560020a62461bcd0281526004016106af9061474c565b508082035b92915050565b600080825111151561263a5760405160e560020a62461bcd0281526004016106af9061483c565b81518290600019810190811061264c57fe5b01602001518251600019019092525060f860020a908190040290565b6000816020018351101515156126935760405160e560020a62461bcd0281526004016106af9061476c565b50016020015190565b6040516000906060907f1626ba7e00000000000000000000000000000000000000000000000000000000906126d7908790869060240161468d565b60408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e060020a0319909416939093178352815191935090829081885afa80801561273e576001811461279857611da1565b60e560020a62461bcd026000527c20000000000000000000000000000000000000000000000000000000006020527c0c57414c4c45545f4552524f5200000000000000000000000000000000604052600060605260646000fd5b50505195945050505050565b600060148251101515156127cd5760405160e560020a62461bcd0281526004016106af906148cc565b6127db82601484510361300e565b8251601319019092525090565b6040516000906060907f93634702000000000000000000000000000000000000000000000000000000009061282590879087908790602401614660565b60408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e060020a03199094169390931783528151919350908290818a5afa80801561288c57600181146128e6576128eb565b60e560020a62461bcd026000527c20000000000000000000000000000000000000000000000000000000006020527c0f56414c494441544f525f4552524f5200000000000000000000000000604052600060605260646000fd5b825194505b50505050949350505050565b600080831161291b5760405160e560020a62461bcd0281526004016106af9061478c565b61292e6129288584612ca2565b8461304b565b949350505050565b604080517f5a65726f45785472616e73616374696f6e2800000000000000000000000000006020808301919091527f75696e743235362073616c742c0000000000000000000000000000000000000060328301527f61646472657373207369676e6572416464726573732c00000000000000000000603f8301527f627974657320646174610000000000000000000000000000000000000000000060558301527f2900000000000000000000000000000000000000000000000000000000000000605f830152825180830384018152606090920192839052815160009384938493909282918401908083835b60208310612a415780518252601f199092019160209182019101612a22565b51815160209384036101000a600019018019909216911617905260405191909301819003812089519097508995509093508392850191508083835b60208310612a9b5780518252601f199092019160209182019101612a7c565b51815160209384036101000a60001901801990921691161790526040805192909401829003822097825281019a909a5250600160a060020a0397909716968801969096525050606085015250506080909120919050565b6001546040517f19010000000000000000000000000000000000000000000000000000000000008152600281019190915260228101919091526042902090565b600061260d6115bd83613062565b6000818310612b4f5781611e2c565b5090919050565b612b5e6134c5565b6020810182905260a08301516080840151612b7a918491612ce6565b808252608084015160c0850151612b92929190612ce6565b604082015260a083015160e0840151612bac918491612ce6565b606082015292915050565b60408051606081018252602481527ff47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f60208201527f4699f498000000000000000000000000000000000000000000000000000000009181019190915261014084015184518351612c2a9291908690612da4565b612c438461016001518486600001518560200151612da4565b612c5b81856000015186604001518560400151612da4565b611f28818486604001518560600151612da4565b600082820183811015612c975760405160e560020a62461bcd0281526004016106af906147bc565b8091505b5092915050565b600080831515612cb55760009150612c9b565b50828202828482811515612cc557fe5b0414612c975760405160e560020a62461bcd0281526004016106af906147bc565b6000808311612d0a5760405160e560020a62461bcd0281526004016106af9061478c565b612d158484846133e9565b1561291b5760405160e560020a62461bcd0281526004016106af906147ec565b6000808311612d595760405160e560020a62461bcd0281526004016106af9061478c565b612d64848484613457565b15612d845760405160e560020a62461bcd0281526004016106af906147ec565b61292e612928612d948685612ca2565b612d9f8660016125e3565b612c6f565b600080600083118015612dc9575083600160a060020a031685600160a060020a031614155b15612edf578551600310612df25760405160e560020a62461bcd0281526004016106af9061487c565b5050602084810151600160e060020a0319166000818152600a909252604090912054600160a060020a0316801515612e3f5760405160e560020a62461bcd0281526004016106af9061482c565b604051660fffffffffffe0603f885101168060840182017fa85e59e400000000000000000000000000000000000000000000000000000000835260806004840152600160a060020a0388166024840152600160a060020a0387166044840152856064840152608483015b81811015612ec157895181526020998a019901612ea9565b61020084858403866000895af1801515612ed9573d85fd5b50505050505b505050505050565b805160009060ff16600314612f115760405160e560020a62461bcd0281526004016106af906148dc565b6060830151600160a060020a031615612f53576060830151600160a060020a03163314612f535760405160e560020a62461bcd0281526004016106af906148ec565b612f5b611e0e565b8351909150600160a060020a03808316911614612f8d5760405160e560020a62461bcd0281526004016106af906147ac565b505050565b60008181526004602052604090819020805460ff1916600117905582810151835161014085015161016086015193518594600160a060020a039485169493909316927fdc47b3613d9fe400085f6dbdc99453462279057e6207385042827ed6b1a62cf792613002923392906145f6565b60405180910390a45050565b6000816014018351101515156130395760405160e560020a62461bcd0281526004016106af906148cc565b500160140151600160a060020a031690565b600080828481151561305957fe5b04949350505050565b604080517f4f726465722800000000000000000000000000000000000000000000000000006020808301919091527f61646472657373206d616b6572416464726573732c000000000000000000000060268301527f616464726573732074616b6572416464726573732c0000000000000000000000603b8301527f6164647265737320666565526563697069656e74416464726573732c0000000060508301527f616464726573732073656e646572416464726573732c00000000000000000000606c8301527f75696e74323536206d616b65724173736574416d6f756e742c0000000000000060828301527f75696e743235362074616b65724173736574416d6f756e742c00000000000000609b8301527f75696e74323536206d616b65724665652c00000000000000000000000000000060b48301527f75696e743235362074616b65724665652c00000000000000000000000000000060c58301527f75696e743235362065787069726174696f6e54696d655365636f6e64732c000060d68301527f75696e743235362073616c742c0000000000000000000000000000000000000060f48301527f6279746573206d616b65724173736574446174612c00000000000000000000006101018301527f62797465732074616b65724173736574446174610000000000000000000000006101168301527f290000000000000000000000000000000000000000000000000000000000000061012a830152825161010b81840301815261012b90920192839052815160009384938493849391929182918401908083835b602083106132cc5780518252601f1990920191602091820191016132ad565b51815160209384036101000a60001901801990921691161790526040519190930181900381206101408b0151805191995095509093508392850191508083835b6020831061332b5780518252601f19909201916020918201910161330c565b51815160209384036101000a60001901801990921691161790526040519190930181900381206101608b0151805191985095509093508392850191508083835b6020831061338a5780518252601f19909201916020918201910161336b565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120601f19890180516101408b018051610160909c0180519a84529881529288526101a0822091529890525050509190525090919050565b60008080841161340e5760405160e560020a62461bcd0281526004016106af9061478c565b821580613419575084155b156134275760009150610993565b8380151561343157fe5b85840990506134408584612ca2565b61344c6103e883612ca2565b101595945050505050565b60008080841161347c5760405160e560020a62461bcd0281526004016106af9061478c565b821580613487575084155b156134955760009150610993565b8380151561349f57fe5b8584099050836134af85836125e3565b8115156134b857fe5b0690506134408584612ca2565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b610120604051908101604052806135036134c5565b81526020016135106134c5565b8152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b6000611e2c82356149d1565b6000601f8201831361355a57600080fd5b813561356d6135688261497e565b614957565b81815260209384019390925082018360005b838110156135ab578135860161359588826136fb565b845250602092830192919091019060010161357f565b5050505092915050565b6000601f820183136135c657600080fd5b81356135d46135688261497e565b81815260209384019390925082018360005b838110156135ab57813586016135fc888261374a565b84525060209283019291909101906001016135e6565b6000601f8201831361362357600080fd5b81356136316135688261497e565b9150818183526020840193506020810190508385602084028201111561365657600080fd5b60005b838110156135ab578161366c888261368e565b8452506020928301929190910190600101613659565b6000611e2c82356149dd565b6000611e2c82356149e2565b6000611e2c82356149e5565b6000611e2c82516149e5565b600080601f830184136136c457600080fd5b50813567ffffffffffffffff8111156136dc57600080fd5b6020830191508360018202830111156136f457600080fd5b9250929050565b6000601f8201831361370c57600080fd5b813561371a6135688261499f565b9150808252602083016020830185838301111561373657600080fd5b613741838284614a03565b50505092915050565b6000610180828403121561375d57600080fd5b613768610180614957565b90506000613776848461353d565b82525060206137878484830161353d565b602083015250604061379b8482850161353d565b60408301525060606137af8482850161353d565b60608301525060806137c38482850161368e565b60808301525060a06137d78482850161368e565b60a08301525060c06137eb8482850161368e565b60c08301525060e06137ff8482850161368e565b60e0830152506101006138148482850161368e565b6101008301525061012061382a8482850161368e565b6101208301525061014082013567ffffffffffffffff81111561384c57600080fd5b613858848285016136fb565b6101408301525061016082013567ffffffffffffffff81111561387a57600080fd5b613886848285016136fb565b6101608301525092915050565b6000602082840312156138a557600080fd5b600061292e848461353d565b600080604083850312156138c457600080fd5b60006138d0858561353d565b92505060206138e18582860161353d565b9150509250929050565b600080604083850312156138fe57600080fd5b600061390a858561353d565b92505060206138e185828601613682565b60006020828403121561392d57600080fd5b813567ffffffffffffffff81111561394457600080fd5b61292e848285016135b5565b60008060006060848603121561396557600080fd5b833567ffffffffffffffff81111561397c57600080fd5b613988868287016135b5565b935050602084013567ffffffffffffffff8111156139a557600080fd5b6139b186828701613612565b925050604084013567ffffffffffffffff8111156139ce57600080fd5b6139da86828701613549565b9150509250925092565b6000806000606084860312156139f957600080fd5b833567ffffffffffffffff811115613a1057600080fd5b613a1c868287016135b5565b93505060206139b18682870161368e565b600060208284031215613a3f57600080fd5b600061292e848461368e565b60008060408385031215613a5e57600080fd5b60006138d0858561368e565b60008060008060608587031215613a8057600080fd5b6000613a8c878761368e565b9450506020613a9d8782880161353d565b935050604085013567ffffffffffffffff811115613aba57600080fd5b613ac6878288016136b2565b95989497509550505050565b600080600060608486031215613ae757600080fd5b6000613af3868661368e565b9350506020613b048682870161353d565b925050604084013567ffffffffffffffff811115613b2157600080fd5b6139da868287016136fb565b600060208284031215613b3f57600080fd5b600061292e848461369a565b600060208284031215613b5d57600080fd5b600061292e84846136a6565b600060208284031215613b7b57600080fd5b813567ffffffffffffffff811115613b9257600080fd5b61292e8482850161374a565b60008060008060808587031215613bb457600080fd5b843567ffffffffffffffff811115613bcb57600080fd5b613bd78782880161374a565b945050602085013567ffffffffffffffff811115613bf457600080fd5b613c008782880161374a565b935050604085013567ffffffffffffffff811115613c1d57600080fd5b613c29878288016136fb565b925050606085013567ffffffffffffffff811115613c4657600080fd5b613c52878288016136fb565b91505092959194509250565b600080600060608486031215613c7357600080fd5b833567ffffffffffffffff811115613c8a57600080fd5b613c968682870161374a565b9350506020613b048682870161368e565b60008060008060008060808789031215613cc057600080fd5b6000613ccc898961368e565b9650506020613cdd89828a0161353d565b955050604087013567ffffffffffffffff811115613cfa57600080fd5b613d0689828a016136b2565b9450945050606087013567ffffffffffffffff811115613d2557600080fd5b613d3189828a016136b2565b92509250509295509295509295565b613d49816149d1565b82525050565b6000613d5a826149cd565b808452602084019350613d6c836149c7565b60005b82811015613d9c57613d82868351614524565b613d8b826149c7565b606096909601959150600101613d6f565b5093949350505050565b613d49816149dd565b613d49816149e2565b613d49816149e5565b6000613dcc826149cd565b808452613de0816020860160208601614a0f565b613de981614a3b565b9093016020019392505050565b613d49816149f8565b601281527f4c454e4754485f36355f52455155495245440000000000000000000000000000602082015260400190565b600d81527f494e56414c49445f54414b455200000000000000000000000000000000000000602082015260400190565b600e81527f4f524445525f4f56455246494c4c000000000000000000000000000000000000602082015260400190565b601181527f55494e543235365f554e444552464c4f57000000000000000000000000000000602082015260400190565b601a81527f41535345545f50524f58595f414c52454144595f455849535453000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601581527f5349474e41545552455f554e535550504f525445440000000000000000000000602082015260400190565b601081527f4449564953494f4e5f42595f5a45524f00000000000000000000000000000000602082015260400190565b601781527f494e56414c49445f4f524445525f5349474e4154555245000000000000000000602082015260400190565b600d81527f494e56414c49445f4d414b455200000000000000000000000000000000000000602082015260400190565b601081527f55494e543235365f4f564552464c4f5700000000000000000000000000000000602082015260400190565b600f81527f494e56414c49445f54585f484153480000000000000000000000000000000000602082015260400190565b601181527f494e56414c49445f5349474e4154555245000000000000000000000000000000602082015260400190565b600e81527f524f554e44494e475f4552524f52000000000000000000000000000000000000602082015260400190565b601081527f4641494c45445f455845435554494f4e00000000000000000000000000000000602082015260400190565b600d81527f54414b45525f4f56455250415900000000000000000000000000000000000000602082015260400190565b601481527f494e56414c49445f54414b45525f414d4f554e54000000000000000000000000602082015260400190565b601a81527f41535345545f50524f58595f444f45535f4e4f545f4558495354000000000000602082015260400190565b602181527f475245415445525f5448414e5f5a45524f5f4c454e4754485f5245515549524560208201527f4400000000000000000000000000000000000000000000000000000000000000604082015260600190565b601181527f5349474e41545552455f494c4c4547414c000000000000000000000000000000602082015260400190565b601e81527f4c454e4754485f475245415445525f5448414e5f305f52455155495245440000602082015260400190565b601781527f494e56414c49445f4e45575f4f524445525f45504f4348000000000000000000602082015260400190565b601e81527f4c454e4754485f475245415445525f5448414e5f335f52455155495245440000602082015260400190565b601481527f434f4d504c4554455f46494c4c5f4641494c4544000000000000000000000000602082015260400190565b601281527f494e56414c49445f46494c4c5f50524943450000000000000000000000000000602082015260400190565b601281527f5245454e5452414e43595f494c4c4547414c0000000000000000000000000000602082015260400190565b601381527f4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601081527f4f524445525f554e46494c4c41424c4500000000000000000000000000000000602082015260400190565b600e81527f494e56414c49445f53454e444552000000000000000000000000000000000000602082015260400190565b601881527f4e454741544956455f5350524541445f52455155495245440000000000000000602082015260400190565b601481527f494e56414c49445f54585f5349474e4154555245000000000000000000000000602082015260400190565b601181527f4c454e4754485f305f5245515549524544000000000000000000000000000000602082015260400190565b805160808301906144b28482613daf565b5060208201516144c56020850182613daf565b5060408201516144d86040850182613daf565b506060820151611f286060850182613daf565b80516101208301906144fd84826144a1565b50602082015161451060808501826144a1565b506040820151611f28610100850182613daf565b80516060830190614535848261455b565b5060208201516145486020850182613daf565b506040820151611f286040850182613daf565b613d49816149f2565b6020810161260d8284613d40565b6101008101614581828b613d40565b61458e602083018a613d40565b61459b6040830189613daf565b6145a86060830188613daf565b6145b56080830187613daf565b6145c260a0830186613daf565b81810360c08301526145d48185613dc1565b905081810360e08301526145e88184613dc1565b9a9950505050505050505050565b606081016146048286613d40565b81810360208301526146168185613dc1565b9050818103604083015261462a8184613dc1565b95945050505050565b60208082528101611e2c8184613d4f565b6020810161260d8284613da6565b6020810161260d8284613daf565b6060810161466e8286613daf565b61467b6020830185613d40565b818103604083015261462a8184613dc1565b6040810161469b8285613daf565b818103602083015261292e8184613dc1565b608081016146bb8287613daf565b6146c8602083018661455b565b6146d56040830185613daf565b61462a6060830184613daf565b604081016146f08285613db8565b611e2c6020830184613d40565b60208082528101611e2c8184613dc1565b6020810161260d8284613df6565b6020808252810161260d81613dff565b6020808252810161260d81613e2f565b6020808252810161260d81613e5f565b6020808252810161260d81613e8f565b6020808252810161260d81613ebf565b6020808252810161260d81613eef565b6020808252810161260d81613f45565b6020808252810161260d81613f75565b6020808252810161260d81613fa5565b6020808252810161260d81613fd5565b6020808252810161260d81614005565b6020808252810161260d81614035565b6020808252810161260d81614065565b6020808252810161260d81614095565b6020808252810161260d816140c5565b6020808252810161260d816140f5565b6020808252810161260d81614125565b6020808252810161260d81614155565b6020808252810161260d81614185565b6020808252810161260d816141db565b6020808252810161260d8161420b565b6020808252810161260d8161423b565b6020808252810161260d8161426b565b6020808252810161260d8161429b565b6020808252810161260d816142cb565b6020808252810161260d816142fb565b6020808252810161260d8161432b565b6020808252810161260d8161435b565b6020808252810161260d816143b1565b6020808252810161260d816143e1565b6020808252810161260d81614411565b6020808252810161260d81614441565b6020808252810161260d81614471565b6080810161260d82846144a1565b610120810161260d82846144eb565b6060810161260d8284614524565b60405181810167ffffffffffffffff8111828210171561497657600080fd5b604052919050565b600067ffffffffffffffff82111561499557600080fd5b5060209081020190565b600067ffffffffffffffff8211156149b657600080fd5b506020601f91909101601f19160190565b60200190565b5190565b600160a060020a031690565b151590565b90565b600160e060020a03191690565b60ff1690565b600061260d826149d1565b82818337506000910152565b60005b83811015614a2a578181015183820152602001614a12565b83811115611f285750506000910152565b601f01601f1916905600a265627a7a723058209219d554eb931cb835892b8c5e0b1b54523849eccd20d59c3876634aa7a242346c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x454950373132446F6D61696E2800000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x737472696E67206E616D652C0000000000000000000000000000000000000000 PUSH1 0x2D DUP4 ADD MSTORE PUSH32 0x737472696E672076657273696F6E2C0000000000000000000000000000000000 PUSH1 0x39 DUP4 ADD MSTORE PUSH32 0x6164647265737320766572696679696E67436F6E747261637400000000000000 PUSH1 0x48 DUP4 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x61 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x42 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x62 SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 DUP3 SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x124 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x103 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 DUP3 DUP6 ADD DUP6 MSTORE PUSH1 0xB DUP1 DUP5 MSTORE PUSH32 0x30782050726F746F636F6C000000000000000000000000000000000000000000 SWAP3 DUP5 ADD SWAP3 DUP4 MSTORE SWAP5 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP SWAP1 SWAP3 DUP4 SWAP3 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x1AE JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x18D JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 DUP3 DUP6 ADD DUP6 MSTORE PUSH1 0x1 DUP1 DUP5 MSTORE PUSH32 0x3200000000000000000000000000000000000000000000000000000000000000 SWAP3 DUP5 ADD SWAP3 DUP4 MSTORE SWAP5 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP SWAP1 SWAP3 DUP4 SWAP3 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x238 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x217 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 DUP3 DUP3 ADD SWAP9 SWAP1 SWAP9 MSTORE DUP2 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x60 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE POP ADDRESS PUSH1 0x80 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP8 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xA0 SWAP1 SWAP6 ADD SWAP1 DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP4 DUP5 SWAP4 POP DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x2C3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x2A2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 SWAP5 SWAP1 SWAP5 SUB PUSH2 0x100 EXP SWAP4 SWAP1 SWAP4 ADD SWAP3 DUP4 AND SWAP3 NOT AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 PUSH1 0x1 SSTORE POP POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE POP PUSH2 0x4A7F DUP1 PUSH3 0x316 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1B6 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x288CDC91 DUP2 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x297BB70B EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x2AC12622 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0x3683EF8E EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x3C28D861 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0x3E228BAE EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0x3FD3C997 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x4AC14782 EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x4D0AE546 EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0x4F9559B1 EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x50DDE190 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x60704108 EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x642F2EAF EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0x64A3BC15 EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x77FCCE68 EQ PUSH2 0x3D4 JUMPI DUP1 PUSH4 0x7B8E3514 EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0x7E1D9808 EQ PUSH2 0x414 JUMPI DUP1 PUSH4 0x7E9D74DC EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0x82C174D0 EQ PUSH2 0x461 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x481 JUMPI DUP1 PUSH4 0x93634702 EQ PUSH2 0x496 JUMPI DUP1 PUSH4 0xA3E20380 EQ PUSH2 0x4B6 JUMPI DUP1 PUSH4 0xB4BE83D5 EQ PUSH2 0x4D6 JUMPI DUP1 PUSH4 0xBFC8BFCE EQ PUSH2 0x4F6 JUMPI DUP1 PUSH4 0xC585BB93 EQ PUSH2 0x516 JUMPI DUP1 PUSH4 0xC75E0A81 EQ PUSH2 0x536 JUMPI DUP1 PUSH4 0xD46B02C3 EQ PUSH2 0x563 JUMPI DUP1 PUSH4 0xD9BFA73E EQ PUSH2 0x583 JUMPI DUP1 PUSH4 0xDB123B1A EQ PUSH2 0x5A3 JUMPI DUP1 PUSH4 0xDD1C7D18 EQ PUSH2 0x5C5 JUMPI DUP1 PUSH4 0xE306F779 EQ PUSH2 0x5E5 JUMPI DUP1 PUSH4 0xE5FA431B EQ PUSH2 0x5FA JUMPI DUP1 PUSH4 0xEEA086BA EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x62F JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x64F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x1D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A2D JUMP JUMPDEST PUSH2 0x664 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x4652 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x20C CALLDATASIZE PUSH1 0x4 PUSH2 0x3950 JUMP JUMPDEST PUSH2 0x676 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x492C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A2D JUMP JUMPDEST PUSH2 0x74E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x4644 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A6A JUMP JUMPDEST PUSH2 0x763 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x288 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B9E JUMP JUMPDEST PUSH2 0x801 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x493A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x2B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C5E JUMP JUMPDEST PUSH2 0x945 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x2D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B2D JUMP JUMPDEST PUSH2 0x99B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x470E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x302 CALLDATASIZE PUSH1 0x4 PUSH2 0x391B JUMP JUMPDEST PUSH2 0x9B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x322 CALLDATASIZE PUSH1 0x4 PUSH2 0x3950 JUMP JUMPDEST PUSH2 0xA30 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A2D JUMP JUMPDEST PUSH2 0xAEB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x3950 JUMP JUMPDEST PUSH2 0xC0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x387 PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B2D JUMP JUMPDEST PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x4564 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x3A2D JUMP JUMPDEST PUSH2 0xCCC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x3CF CALLDATASIZE PUSH1 0x4 PUSH2 0x3C5E JUMP JUMPDEST PUSH2 0xCE1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x3EF CALLDATASIZE PUSH1 0x4 PUSH2 0x38EB JUMP JUMPDEST PUSH2 0xD39 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x40F CALLDATASIZE PUSH1 0x4 PUSH2 0x38B1 JUMP JUMPDEST PUSH2 0xDF5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x42F CALLDATASIZE PUSH1 0x4 PUSH2 0x39E4 JUMP JUMPDEST PUSH2 0xE15 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x454 PUSH2 0x44F CALLDATASIZE PUSH1 0x4 PUSH2 0x391B JUMP JUMPDEST PUSH2 0xF26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x4633 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x47C CALLDATASIZE PUSH1 0x4 PUSH2 0x3A4B JUMP JUMPDEST PUSH2 0xFBB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x387 PUSH2 0xFDB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x4B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AD2 JUMP JUMPDEST PUSH2 0xFEA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x4D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x39E4 JUMP JUMPDEST PUSH2 0x13F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x4F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C5E JUMP JUMPDEST PUSH2 0x150A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x511 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CA7 JUMP JUMPDEST PUSH2 0x1550 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x531 CALLDATASIZE PUSH1 0x4 PUSH2 0x3893 JUMP JUMPDEST PUSH2 0x1725 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x542 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x556 PUSH2 0x551 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B69 JUMP JUMPDEST PUSH2 0x18B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x4949 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x57E CALLDATASIZE PUSH1 0x4 PUSH2 0x3B69 JUMP JUMPDEST PUSH2 0x19A0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x59E CALLDATASIZE PUSH1 0x4 PUSH2 0x38B1 JUMP JUMPDEST PUSH2 0x19E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B8 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x46FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x5E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x39E4 JUMP JUMPDEST PUSH2 0x1A66 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x1B3B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x615 CALLDATASIZE PUSH1 0x4 PUSH2 0x39E4 JUMP JUMPDEST PUSH2 0x1B41 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x387 PUSH2 0x1C60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x64A CALLDATASIZE PUSH1 0x4 PUSH2 0x3893 JUMP JUMPDEST PUSH2 0x1C6F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B8 PUSH2 0x1CD7 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x67E PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x689 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE DUP8 MLOAD SWAP4 POP SWAP2 POP JUMPDEST DUP2 DUP4 EQ PUSH2 0x73A JUMPI PUSH2 0x723 DUP8 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x6E4 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x6FC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x714 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1D0E JUMP JUMPDEST SWAP1 POP PUSH2 0x72F DUP5 DUP3 PUSH2 0x1DAC JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x6CC JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND CALLER EQ PUSH2 0x7CF JUMPI PUSH2 0x7AE DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0xFEA SWAP5 POP POP POP POP POP JUMP JUMPDEST ISZERO ISZERO PUSH2 0x7CF JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47DC JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x809 PUSH2 0x34EE JUMP JUMPDEST PUSH2 0x811 PUSH2 0x351D JUMP JUMPDEST PUSH2 0x819 PUSH2 0x351D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x840 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x160 DUP1 DUP10 ADD MLOAD PUSH2 0x140 DUP1 DUP11 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP10 ADD MLOAD SWAP1 DUP9 ADD MSTORE PUSH2 0x86E DUP9 PUSH2 0x18B3 JUMP JUMPDEST SWAP3 POP PUSH2 0x879 DUP8 PUSH2 0x18B3 JUMP JUMPDEST SWAP2 POP PUSH2 0x883 PUSH2 0x1E0E JUMP JUMPDEST SWAP1 POP PUSH2 0x891 DUP9 DUP5 DUP4 DUP10 PUSH2 0x1E33 JUMP JUMPDEST PUSH2 0x89D DUP8 DUP4 DUP4 DUP9 PUSH2 0x1E33 JUMP JUMPDEST PUSH2 0x8A7 DUP9 DUP9 PUSH2 0x1F2E JUMP JUMPDEST PUSH2 0x8BB DUP9 DUP9 DUP6 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x1F77 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 ADD MLOAD SWAP1 MLOAD SWAP2 SWAP6 POP PUSH2 0x8D6 SWAP2 DUP11 SWAP2 DUP7 SWAP2 DUP2 SWAP1 PUSH2 0x20FE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD MLOAD SWAP1 DUP2 ADD MLOAD SWAP1 MLOAD PUSH2 0x8F2 SWAP2 DUP10 SWAP2 DUP6 SWAP2 SWAP1 DUP2 SWAP1 PUSH2 0x20FE JUMP JUMPDEST PUSH2 0x90B DUP9 DUP3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x21BB JUMP JUMPDEST PUSH2 0x924 DUP8 DUP3 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x21BB JUMP JUMPDEST PUSH2 0x930 DUP9 DUP9 DUP4 DUP8 PUSH2 0x225A JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x94D PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x95A DUP6 DUP6 DUP6 PUSH2 0x23C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x80 DUP2 DUP3 MLOAD PUSH1 0x20 DUP5 ADD ADDRESS GAS DELEGATECALL DUP1 ISZERO PUSH2 0x991 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE JUMPDEST POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x9DF JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE DUP2 MLOAD SWAP1 JUMPDEST DUP1 DUP3 EQ PUSH2 0xA21 JUMPI PUSH2 0xA19 DUP4 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x257C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x9F2 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xA38 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA43 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA69 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE DUP8 MLOAD SWAP4 POP SWAP2 POP JUMPDEST DUP2 DUP4 EQ PUSH2 0x73A JUMPI PUSH2 0xAD4 DUP8 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA95 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAAD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAC5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x25A7 JUMP JUMPDEST SWAP1 POP PUSH2 0xAE0 DUP5 DUP3 PUSH2 0x1DAC JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xB18 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xB2D PUSH2 0x1E0E JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND CALLER EQ PUSH2 0xB45 JUMPI CALLER PUSH2 0xB48 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP4 POP PUSH1 0x1 DUP7 ADD SWAP3 POP SWAP1 POP DUP1 DUP3 GT PUSH2 0xB9B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE MLOAD PUSH32 0x82AF639571738F4EBD4268FB0363D8957EBE1BBB9E78DBA5EBD69EED39B154F0 SWAP1 PUSH2 0xBF6 SWAP1 DUP7 SWAP1 PUSH2 0x4652 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xC17 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC22 PUSH2 0x34C5 JUMP JUMPDEST DUP7 MLOAD SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP2 DUP4 EQ PUSH2 0xC99 JUMPI PUSH2 0xC82 DUP8 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC43 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC5B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC73 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x945 JUMP JUMPDEST SWAP1 POP PUSH2 0xC8E DUP5 DUP3 PUSH2 0x1DAC JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xC2B JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xCE9 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD0F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xD27 DUP5 DUP5 DUP5 PUSH2 0x25A7 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD60 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xD75 PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP8 ISZERO ISZERO OR SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH32 0xA8656E308026EEABCE8F0BC18048433252318AB80AC79DA0B3D3D8697DFBA891 SWAP1 PUSH2 0xDDE SWAP1 DUP7 SWAP1 PUSH2 0x4644 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xE1D PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xE2C PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE52 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE DUP10 MLOAD DUP11 SWAP2 SWAP1 DUP2 LT PUSH2 0xE6C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP5 POP DUP9 MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP3 DUP5 EQ PUSH2 0xF0F JUMPI DUP5 DUP10 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xE9C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0xEBC DUP9 DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x25E3 JUMP JUMPDEST SWAP2 POP PUSH2 0xEE8 DUP10 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xECF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x714 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0xEF4 DUP7 DUP3 PUSH2 0x1DAC JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD DUP9 GT PUSH2 0xF04 JUMPI PUSH2 0xF0F JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0xE86 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP5 MLOAD SWAP3 POP DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF6C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xF59 PUSH2 0x351D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xF51 JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP1 DUP4 EQ PUSH2 0x993 JUMPI PUSH2 0xF9B DUP6 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xF8C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x18B3 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xFA9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xF74 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP10 MLOAD GT ISZERO ISZERO PUSH2 0x101C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x485C JUMP JUMPDEST PUSH2 0x1025 DUP10 PUSH2 0x2613 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV SWAP7 POP PUSH1 0x7 PUSH1 0xFF DUP9 AND LT PUSH2 0x1054 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x477C JUMP JUMPDEST DUP7 PUSH1 0xFF AND PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1063 JUMPI INVALID JUMPDEST SWAP6 POP PUSH1 0x0 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1073 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1094 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x484C JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x10A2 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x10D3 JUMPI DUP9 MLOAD ISZERO PUSH2 0x10CA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x491C JUMP JUMPDEST PUSH1 0x0 SWAP8 POP PUSH2 0x13E9 JUMP JUMPDEST PUSH1 0x2 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x10E1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x11BE JUMPI DUP9 MLOAD PUSH1 0x41 EQ PUSH2 0x110B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x471C JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x111A JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x113E DUP10 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x2668 AND JUMP JUMPDEST SWAP4 POP PUSH2 0x1151 DUP10 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0x2668 AND JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP12 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1176 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x46AD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 PUSH1 0x0 DUP7 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x119A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP13 DUP2 AND SWAP1 DUP3 AND EQ SWAP10 POP SWAP3 POP PUSH2 0x13E9 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x11CC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1303 JUMPI DUP9 MLOAD PUSH1 0x41 EQ PUSH2 0x11F6 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x471C JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1205 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x1229 DUP10 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x2668 AND JUMP JUMPDEST SWAP4 POP PUSH2 0x123C DUP10 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0x2668 AND JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP PUSH1 0x1C ADD DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x12BF JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x12A0 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x0 DUP4 MSTORE SWAP2 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH2 0x1176 SWAP5 POP SWAP3 POP DUP10 SWAP2 DUP10 SWAP2 POP DUP9 SWAP1 PUSH2 0x46AD JUMP JUMPDEST PUSH1 0x4 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1311 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1329 JUMPI PUSH2 0x1322 DUP12 DUP12 DUP12 PUSH2 0x269C JUMP JUMPDEST SWAP8 POP PUSH2 0x13E9 JUMP JUMPDEST PUSH1 0x5 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1337 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x138D JUMPI PUSH2 0x1346 DUP10 PUSH2 0x27A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1381 JUMPI PUSH1 0x0 SWAP8 POP PUSH2 0x13E9 JUMP JUMPDEST PUSH2 0x1322 DUP2 DUP13 DUP13 DUP13 PUSH2 0x27E8 JUMP JUMPDEST PUSH1 0x6 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x139B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x13CE JUMPI PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP15 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP8 POP PUSH2 0x13E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x477C JUMP JUMPDEST POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x13FF PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140F PUSH2 0x34C5 JUMP JUMPDEST DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x141E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP6 POP DUP10 MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP4 DUP6 EQ PUSH2 0x14FD JUMPI DUP6 DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x144E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP7 MLOAD PUSH2 0x146A SWAP1 DUP11 SWAP1 PUSH2 0x25E3 JUMP JUMPDEST SWAP3 POP PUSH2 0x14AD DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x147D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP12 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1499 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x28F7 JUMP JUMPDEST SWAP2 POP PUSH2 0x14D9 DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x14C0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP11 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC73 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x14E5 DUP8 DUP3 PUSH2 0x1DAC JUMP JUMPDEST DUP7 MLOAD DUP10 GT PUSH2 0x14F2 JUMPI PUSH2 0x14FD JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1438 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1512 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1538 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xD27 DUP5 DUP5 DUP5 PUSH2 0x1D0E JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x157F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH2 0x15C2 PUSH2 0x15BD DUP9 DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x2936 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2AF2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x15F7 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND CALLER EQ PUSH2 0x168C JUMPI PUSH2 0x1642 DUP2 DUP8 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0xFEA SWAP5 POP POP POP POP POP JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1663 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x490C JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD ADDRESS SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP ISZERO ISZERO PUSH2 0x16EE JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND CALLER EQ PUSH2 0x171C JUMPI PUSH1 0x9 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x1759 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48BC JUMP JUMPDEST DUP4 SWAP3 POP DUP3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0xAE25532E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x17EB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3B4B JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP DUP1 ISZERO PUSH2 0x1834 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x475C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND OR SWAP1 SSTORE MLOAD PUSH32 0xD2C6B762299C609BDB96520B58A49BFB80186934D4F71A86A367571A15C03194 SWAP1 PUSH2 0x18A5 SWAP1 DUP5 SWAP1 DUP8 SWAP1 PUSH2 0x46E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0x18BB PUSH2 0x351D JUMP JUMPDEST PUSH2 0x18C4 DUP3 PUSH2 0x2B32 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x3 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x18F8 JUMPI PUSH1 0x1 JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x190A JUMPI PUSH1 0x2 PUSH2 0x18EE JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MLOAD LT PUSH2 0x1920 JUMPI PUSH1 0x5 PUSH2 0x18EE JUMP JUMPDEST PUSH2 0x100 DUP3 ADD MLOAD TIMESTAMP LT PUSH2 0x1933 JUMPI PUSH1 0x4 PUSH2 0x18EE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1957 JUMPI PUSH1 0x6 PUSH2 0x18EE JUMP JUMPDEST PUSH2 0x120 DUP3 ADD MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD GT ISZERO PUSH2 0x1997 JUMPI PUSH1 0x6 PUSH2 0x18EE JUMP JUMPDEST PUSH1 0x3 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x19C6 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x19DC DUP2 PUSH2 0x257C JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0xF47261B0000000000000000000000000E41D2489571D322189246DAFA5EBDE1F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4699F49800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH2 0x1A6E PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1A7D PUSH2 0x34C5 JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1A8C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP5 POP DUP9 MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP3 DUP5 EQ PUSH2 0x1B2F JUMPI DUP5 DUP10 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1ABC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1ADC DUP9 DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x25E3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B08 DUP10 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1AEF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC73 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1B14 DUP7 DUP3 PUSH2 0x1DAC JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD DUP9 GT PUSH2 0x1B24 JUMPI PUSH2 0x1B2F JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1AA6 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B49 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1B59 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1B7F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE DUP11 MLOAD DUP12 SWAP2 SWAP1 DUP2 LT PUSH2 0x1B99 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP6 POP DUP10 MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP4 DUP6 EQ PUSH2 0x1C48 JUMPI DUP6 DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1BC9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP7 MLOAD PUSH2 0x1BE5 SWAP1 DUP11 SWAP1 PUSH2 0x25E3 JUMP JUMPDEST SWAP3 POP PUSH2 0x1BF8 DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x147D JUMPI INVALID JUMPDEST SWAP2 POP PUSH2 0x1C24 DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1C0B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP11 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x714 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1C30 DUP8 DUP3 PUSH2 0x1DAC JUMP JUMPDEST DUP7 MLOAD DUP10 GT PUSH2 0x1C3D JUMPI PUSH2 0x1C48 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1BB3 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x1C9C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48BC JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH2 0x1CD4 JUMPI PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH32 0x322E302E30000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH2 0x1D16 PUSH2 0x34C5 JUMP JUMPDEST PUSH2 0x1D1E PUSH2 0x351D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1D2C DUP9 PUSH2 0x18B3 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D36 PUSH2 0x1E0E JUMP JUMPDEST SWAP3 POP PUSH2 0x1D44 DUP9 DUP6 DUP6 DUP10 PUSH2 0x1E33 JUMP JUMPDEST PUSH2 0x1D56 DUP9 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x25E3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D62 DUP8 DUP4 PUSH2 0x2B40 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D75 DUP9 DUP6 DUP10 DUP5 DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0x20FE JUMP JUMPDEST PUSH2 0x1D7F DUP9 DUP3 PUSH2 0x2B56 JUMP JUMPDEST SWAP5 POP PUSH2 0x1D96 DUP9 DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP10 PUSH2 0x21BB JUMP JUMPDEST PUSH2 0x1DA1 DUP9 DUP5 DUP8 PUSH2 0x2BB7 JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x1DBA SWAP2 SWAP1 PUSH2 0x2C6F JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1DD0 SWAP2 SWAP1 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1DE9 SWAP2 SWAP1 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1E02 SWAP2 SWAP1 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 DUP2 ISZERO PUSH2 0x1E2A JUMPI DUP2 PUSH2 0x1E2C JUMP JUMPDEST CALLER JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 MLOAD PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x1E5A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48DC JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x1E9C JUMPI PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x1E9C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48EC JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x1EE9 JUMPI DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO ISZERO PUSH2 0x1EE9 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x472C JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD ISZERO ISZERO PUSH2 0x1F28 JUMPI PUSH2 0x1F07 DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD DUP4 PUSH2 0xFEA JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1F28 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x479C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1F40 DUP3 PUSH1 0xA0 ADD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD PUSH2 0x2CA2 JUMP JUMPDEST PUSH2 0x1F52 DUP4 PUSH1 0x80 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x2CA2 JUMP JUMPDEST LT ISZERO PUSH2 0x1F73 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48FC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1F7F PUSH2 0x34EE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1F93 DUP10 PUSH1 0xA0 ADD MLOAD DUP9 PUSH2 0x25E3 JUMP JUMPDEST SWAP4 POP PUSH2 0x1FA8 DUP10 PUSH1 0x80 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD DUP7 PUSH2 0x2CE6 JUMP JUMPDEST SWAP3 POP PUSH2 0x1FB8 DUP9 PUSH1 0xA0 ADD MLOAD DUP8 PUSH2 0x25E3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FCD DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP5 PUSH2 0x2CE6 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 LT PUSH2 0x2010 JUMPI PUSH1 0x20 DUP1 DUP7 ADD DUP1 MLOAD DUP4 SWAP1 MSTORE DUP1 MLOAD DUP3 ADD DUP5 SWAP1 MSTORE MLOAD MLOAD DUP7 MLOAD DUP3 ADD MSTORE PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0xA0 DUP12 ADD MLOAD DUP8 MLOAD SWAP1 SWAP3 ADD MLOAD PUSH2 0x2008 SWAP3 SWAP1 PUSH2 0x2CE6 JUMP JUMPDEST DUP6 MLOAD MSTORE PUSH2 0x204D JUMP JUMPDEST DUP5 MLOAD DUP4 SWAP1 MSTORE DUP5 MLOAD PUSH1 0x20 SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE DUP6 MLOAD DUP2 ADD MLOAD SWAP1 DUP7 ADD DUP1 MLOAD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP10 ADD MLOAD PUSH1 0x80 DUP11 ADD MLOAD SWAP2 MLOAD MLOAD PUSH2 0x2044 SWAP3 SWAP1 PUSH2 0x2D35 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP8 ADD MLOAD ADD MSTORE JUMPDEST DUP5 MLOAD MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD ADD MLOAD PUSH2 0x2062 SWAP2 SWAP1 PUSH2 0x25E3 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE DUP5 MLOAD MLOAD PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0xC0 DUP12 ADD MLOAD PUSH2 0x207F SWAP3 SWAP2 SWAP1 PUSH2 0x2CE6 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x40 ADD MSTORE DUP5 MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0xA0 DUP11 ADD MLOAD PUSH1 0xE0 DUP12 ADD MLOAD PUSH2 0x20A0 SWAP3 SWAP2 SWAP1 PUSH2 0x2CE6 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x60 ADD MSTORE PUSH1 0x20 DUP6 ADD MLOAD MLOAD PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0xC0 DUP11 ADD MLOAD PUSH2 0x20C1 SWAP3 SWAP2 SWAP1 PUSH2 0x2CE6 JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x20E9 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH2 0x2CE6 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x60 ADD MSTORE POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO PUSH2 0x2120 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x481C JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x2143 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x480C JUMP JUMPDEST DUP5 PUSH1 0xA0 ADD MLOAD PUSH2 0x2156 DUP6 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x2C6F JUMP JUMPDEST GT ISZERO PUSH2 0x2177 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x473C JUMP JUMPDEST PUSH2 0x2185 DUP6 PUSH1 0x80 ADD MLOAD DUP4 PUSH2 0x2CA2 JUMP JUMPDEST PUSH2 0x2193 DUP3 DUP8 PUSH1 0xA0 ADD MLOAD PUSH2 0x2CA2 JUMP JUMPDEST GT ISZERO PUSH2 0x21B4 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x489C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x21C9 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP7 DUP2 ADD MLOAD DUP8 MLOAD DUP5 MLOAD SWAP4 DUP6 ADD MLOAD DUP6 DUP5 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH2 0x140 DUP13 ADD MLOAD PUSH2 0x160 DUP14 ADD MLOAD SWAP7 MLOAD DUP12 SWAP9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP8 DUP9 AND SWAP9 SWAP8 SWAP1 SWAP7 AND SWAP7 PUSH32 0xBCC4C97732E47D9946F229EDB95F5B6323F601300E4690DE719993F3C371129 SWAP7 PUSH2 0x224B SWAP7 DUP16 SWAP7 CALLER SWAP7 SWAP3 SWAP6 SWAP2 SWAP5 SWAP1 SWAP4 SWAP1 PUSH2 0x4572 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0xF47261B0000000000000000000000000E41D2489571D322189246DAFA5EBDE1F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4699F49800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x22DB DUP6 PUSH2 0x140 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x140 DUP5 ADD MLOAD DUP5 MLOAD DUP7 MLOAD DUP5 MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x22F7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x2310 DUP6 PUSH2 0x140 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP6 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x232C DUP2 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x2348 DUP2 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO PUSH2 0x2398 JUMPI PUSH2 0x2393 DUP2 DUP5 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x238E DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x2C6F JUMP JUMPDEST PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x21B4 JUMP JUMPDEST PUSH2 0x23B0 DUP2 DUP5 DUP8 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x21B4 DUP2 DUP5 DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 PUSH1 0x24 DUP4 ADD DUP2 DUP2 MSTORE DUP8 MLOAD PUSH1 0x84 DUP6 ADD SWAP1 DUP2 MSTORE DUP9 DUP5 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE SWAP5 DUP9 ADD MLOAD PUSH1 0xC4 DUP6 ADD MSTORE SWAP1 DUP8 ADD MLOAD PUSH1 0xE4 DUP5 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x104 DUP5 ADD MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH2 0x124 DUP5 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0x144 DUP5 ADD MSTORE PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x164 DUP5 ADD MSTORE PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x184 DUP5 ADD MSTORE PUSH2 0x120 DUP8 ADD MLOAD PUSH2 0x1A4 DUP5 ADD MSTORE PUSH2 0x140 DUP8 ADD DUP1 MLOAD PUSH2 0x1C4 DUP6 ADD SWAP1 DUP2 MSTORE PUSH2 0x160 DUP10 ADD MLOAD PUSH2 0x1E4 DUP7 ADD MSTORE PUSH2 0x180 SWAP1 MSTORE MLOAD DUP1 MLOAD PUSH2 0x204 DUP6 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP5 SWAP2 SWAP4 DUP5 SWAP4 PUSH1 0x44 DUP8 ADD SWAP3 DUP5 SWAP3 PUSH2 0x224 DUP10 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x24CF JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x24B1 JUMP JUMPDEST POP POP POP POP DUP2 DUP2 SUB PUSH2 0x160 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP11 ADD MLOAD DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2518 JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x24FA JUMP JUMPDEST POP POP POP DUP10 DUP5 MSTORE POP DUP5 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD SWAP1 DUP2 MSTORE DUP9 MLOAD DUP1 DUP4 MSTORE SWAP1 SWAP4 SWAP2 DUP3 ADD SWAP2 DUP10 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2560 JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2542 JUMP JUMPDEST POP POP POP PUSH1 0x1F NOT DUP9 DUP4 SUB ADD DUP9 MSTORE POP PUSH1 0x40 MSTORE POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2584 PUSH2 0x351D JUMP JUMPDEST PUSH2 0x258D DUP3 PUSH2 0x18B3 JUMP JUMPDEST SWAP1 POP PUSH2 0x2599 DUP3 DUP3 PUSH2 0x2EE7 JUMP JUMPDEST PUSH2 0x1F73 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x2F92 JUMP JUMPDEST PUSH2 0x25AF PUSH2 0x34C5 JUMP JUMPDEST PUSH2 0x25BA DUP5 DUP5 DUP5 PUSH2 0x1D0E JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD SWAP1 SWAP2 POP DUP4 EQ PUSH2 0x1E2C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x488C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2608 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x474C JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT ISZERO ISZERO PUSH2 0x263A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x483C JUMP JUMPDEST DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x264C JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH1 0x0 NOT ADD SWAP1 SWAP3 MSTORE POP PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x2693 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x476C JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x26D7 SWAP1 DUP8 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x468D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE DUP2 MLOAD SWAP2 SWAP4 POP SWAP1 DUP3 SWAP1 DUP2 DUP9 GAS STATICCALL DUP1 DUP1 ISZERO PUSH2 0x273E JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x2798 JUMPI PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xC57414C4C45545F4552524F5200000000000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP POP MLOAD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x27CD JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48CC JUMP JUMPDEST PUSH2 0x27DB DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x300E JUMP JUMPDEST DUP3 MLOAD PUSH1 0x13 NOT ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x9363470200000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2825 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x4660 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE DUP2 MLOAD SWAP2 SWAP4 POP SWAP1 DUP3 SWAP1 DUP2 DUP11 GAS STATICCALL DUP1 DUP1 ISZERO PUSH2 0x288C JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x28E6 JUMPI PUSH2 0x28EB JUMP JUMPDEST PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF56414C494441544F525F4552524F5200000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST DUP3 MLOAD SWAP5 POP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x291B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x478C JUMP JUMPDEST PUSH2 0x292E PUSH2 0x2928 DUP6 DUP5 PUSH2 0x2CA2 JUMP JUMPDEST DUP5 PUSH2 0x304B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x5A65726F45785472616E73616374696F6E280000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0x32 DUP4 ADD MSTORE PUSH32 0x61646472657373207369676E6572416464726573732C00000000000000000000 PUSH1 0x3F DUP4 ADD MSTORE PUSH32 0x6279746573206461746100000000000000000000000000000000000000000000 PUSH1 0x55 DUP4 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x5F DUP4 ADD MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x0 SWAP4 DUP5 SWAP4 DUP5 SWAP4 SWAP1 SWAP3 DUP3 SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2A41 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2A22 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 SUB DUP2 KECCAK256 DUP10 MLOAD SWAP1 SWAP8 POP DUP10 SWAP6 POP SWAP1 SWAP4 POP DUP4 SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2A9B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2A7C JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 SWAP8 DUP3 MSTORE DUP2 ADD SWAP11 SWAP1 SWAP11 MSTORE POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP8 SWAP1 SWAP8 AND SWAP7 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP6 ADD MSTORE POP POP PUSH1 0x80 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x22 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260D PUSH2 0x15BD DUP4 PUSH2 0x3062 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2B4F JUMPI DUP2 PUSH2 0x1E2C JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B5E PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x2B7A SWAP2 DUP5 SWAP2 PUSH2 0x2CE6 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x2B92 SWAP3 SWAP2 SWAP1 PUSH2 0x2CE6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xE0 DUP5 ADD MLOAD PUSH2 0x2BAC SWAP2 DUP5 SWAP2 PUSH2 0x2CE6 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH32 0xF47261B0000000000000000000000000E41D2489571D322189246DAFA5EBDE1F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4699F49800000000000000000000000000000000000000000000000000000000 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x140 DUP5 ADD MLOAD DUP5 MLOAD DUP4 MLOAD PUSH2 0x2C2A SWAP3 SWAP2 SWAP1 DUP7 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x2C43 DUP5 PUSH2 0x160 ADD MLOAD DUP5 DUP7 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x2C5B DUP2 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x1F28 DUP2 DUP5 DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x2C97 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47BC JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 ISZERO ISZERO PUSH2 0x2CB5 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x2C9B JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x2CC5 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x2C97 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47BC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x2D0A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x478C JUMP JUMPDEST PUSH2 0x2D15 DUP5 DUP5 DUP5 PUSH2 0x33E9 JUMP JUMPDEST ISZERO PUSH2 0x291B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47EC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x2D59 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x478C JUMP JUMPDEST PUSH2 0x2D64 DUP5 DUP5 DUP5 PUSH2 0x3457 JUMP JUMPDEST ISZERO PUSH2 0x2D84 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47EC JUMP JUMPDEST PUSH2 0x292E PUSH2 0x2928 PUSH2 0x2D94 DUP7 DUP6 PUSH2 0x2CA2 JUMP JUMPDEST PUSH2 0x2D9F DUP7 PUSH1 0x1 PUSH2 0x25E3 JUMP JUMPDEST PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 GT DUP1 ISZERO PUSH2 0x2DC9 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2EDF JUMPI DUP6 MLOAD PUSH1 0x3 LT PUSH2 0x2DF2 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x487C JUMP JUMPDEST POP POP PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP1 ISZERO ISZERO PUSH2 0x2E3F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x482C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH7 0xFFFFFFFFFFFE0 PUSH1 0x3F DUP9 MLOAD ADD AND DUP1 PUSH1 0x84 ADD DUP3 ADD PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x80 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND PUSH1 0x44 DUP5 ADD MSTORE DUP6 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x84 DUP4 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2EC1 JUMPI DUP10 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP10 DUP11 ADD SWAP10 ADD PUSH2 0x2EA9 JUMP JUMPDEST PUSH2 0x200 DUP5 DUP6 DUP5 SUB DUP7 PUSH1 0x0 DUP10 GAS CALL DUP1 ISZERO ISZERO PUSH2 0x2ED9 JUMPI RETURNDATASIZE DUP6 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x2F11 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48DC JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x2F53 JUMPI PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x2F53 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48EC JUMP JUMPDEST PUSH2 0x2F5B PUSH2 0x1E0E JUMP JUMPDEST DUP4 MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP4 AND SWAP2 AND EQ PUSH2 0x2F8D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47AC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH2 0x140 DUP6 ADD MLOAD PUSH2 0x160 DUP7 ADD MLOAD SWAP4 MLOAD DUP6 SWAP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP5 DUP6 AND SWAP5 SWAP4 SWAP1 SWAP4 AND SWAP3 PUSH32 0xDC47B3613D9FE400085F6DBDC99453462279057E6207385042827ED6B1A62CF7 SWAP3 PUSH2 0x3002 SWAP3 CALLER SWAP3 SWAP1 PUSH2 0x45F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x3039 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48CC JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x3059 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x4F72646572280000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x61646472657373206D616B6572416464726573732C0000000000000000000000 PUSH1 0x26 DUP4 ADD MSTORE PUSH32 0x616464726573732074616B6572416464726573732C0000000000000000000000 PUSH1 0x3B DUP4 ADD MSTORE PUSH32 0x6164647265737320666565526563697069656E74416464726573732C00000000 PUSH1 0x50 DUP4 ADD MSTORE PUSH32 0x616464726573732073656E646572416464726573732C00000000000000000000 PUSH1 0x6C DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724173736574416D6F756E742C00000000000000 PUSH1 0x82 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724173736574416D6F756E742C00000000000000 PUSH1 0x9B DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724665652C000000000000000000000000000000 PUSH1 0xB4 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724665652C000000000000000000000000000000 PUSH1 0xC5 DUP4 ADD MSTORE PUSH32 0x75696E743235362065787069726174696F6E54696D655365636F6E64732C0000 PUSH1 0xD6 DUP4 ADD MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0xF4 DUP4 ADD MSTORE PUSH32 0x6279746573206D616B65724173736574446174612C0000000000000000000000 PUSH2 0x101 DUP4 ADD MSTORE PUSH32 0x62797465732074616B6572417373657444617461000000000000000000000000 PUSH2 0x116 DUP4 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH2 0x12A DUP4 ADD MSTORE DUP3 MLOAD PUSH2 0x10B DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH2 0x12B SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x0 SWAP4 DUP5 SWAP4 DUP5 SWAP4 DUP5 SWAP4 SWAP2 SWAP3 SWAP2 DUP3 SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x32CC JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x32AD JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 SUB DUP2 KECCAK256 PUSH2 0x140 DUP12 ADD MLOAD DUP1 MLOAD SWAP2 SWAP10 POP SWAP6 POP SWAP1 SWAP4 POP DUP4 SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x332B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x330C JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 SUB DUP2 KECCAK256 PUSH2 0x160 DUP12 ADD MLOAD DUP1 MLOAD SWAP2 SWAP9 POP SWAP6 POP SWAP1 SWAP4 POP DUP4 SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x338A JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x336B JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 PUSH1 0x1F NOT DUP10 ADD DUP1 MLOAD PUSH2 0x140 DUP12 ADD DUP1 MLOAD PUSH2 0x160 SWAP1 SWAP13 ADD DUP1 MLOAD SWAP11 DUP5 MSTORE SWAP9 DUP2 MSTORE SWAP3 DUP9 MSTORE PUSH2 0x1A0 DUP3 KECCAK256 SWAP2 MSTORE SWAP9 SWAP1 MSTORE POP POP POP SWAP2 SWAP1 MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP5 GT PUSH2 0x340E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x478C JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x3419 JUMPI POP DUP5 ISZERO JUMPDEST ISZERO PUSH2 0x3427 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x993 JUMP JUMPDEST DUP4 DUP1 ISZERO ISZERO PUSH2 0x3431 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x3440 DUP6 DUP5 PUSH2 0x2CA2 JUMP JUMPDEST PUSH2 0x344C PUSH2 0x3E8 DUP4 PUSH2 0x2CA2 JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP5 GT PUSH2 0x347C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x478C JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x3487 JUMPI POP DUP5 ISZERO JUMPDEST ISZERO PUSH2 0x3495 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x993 JUMP JUMPDEST DUP4 DUP1 ISZERO ISZERO PUSH2 0x349F JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP DUP4 PUSH2 0x34AF DUP6 DUP4 PUSH2 0x25E3 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 0x34B8 JUMPI INVALID JUMPDEST MOD SWAP1 POP PUSH2 0x3440 DUP6 DUP5 PUSH2 0x2CA2 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x120 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x3503 PUSH2 0x34C5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3510 PUSH2 0x34C5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E2C DUP3 CALLDATALOAD PUSH2 0x49D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x355A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x356D PUSH2 0x3568 DUP3 PUSH2 0x497E JUMP JUMPDEST PUSH2 0x4957 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35AB JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x3595 DUP9 DUP3 PUSH2 0x36FB JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x357F JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x35C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x35D4 PUSH2 0x3568 DUP3 PUSH2 0x497E JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35AB JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x35FC DUP9 DUP3 PUSH2 0x374A JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x35E6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x3623 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3631 PUSH2 0x3568 DUP3 PUSH2 0x497E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x3656 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35AB JUMPI DUP2 PUSH2 0x366C DUP9 DUP3 PUSH2 0x368E JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3659 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E2C DUP3 CALLDATALOAD PUSH2 0x49DD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E2C DUP3 CALLDATALOAD PUSH2 0x49E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E2C DUP3 CALLDATALOAD PUSH2 0x49E5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E2C DUP3 MLOAD PUSH2 0x49E5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1F DUP4 ADD DUP5 SGT PUSH2 0x36C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x36DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x36F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x370C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x371A PUSH2 0x3568 DUP3 PUSH2 0x499F JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x3736 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3741 DUP4 DUP3 DUP5 PUSH2 0x4A03 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x375D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3768 PUSH2 0x180 PUSH2 0x4957 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3776 DUP5 DUP5 PUSH2 0x353D JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x3787 DUP5 DUP5 DUP4 ADD PUSH2 0x353D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x379B DUP5 DUP3 DUP6 ADD PUSH2 0x353D JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x37AF DUP5 DUP3 DUP6 ADD PUSH2 0x353D JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x37C3 DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x37D7 DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x37EB DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x37FF DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x3814 DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x382A DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x384C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3858 DUP5 DUP3 DUP6 ADD PUSH2 0x36FB JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x387A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3886 DUP5 DUP3 DUP6 ADD PUSH2 0x36FB JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x292E DUP5 DUP5 PUSH2 0x353D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x38D0 DUP6 DUP6 PUSH2 0x353D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x38E1 DUP6 DUP3 DUP7 ADD PUSH2 0x353D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x390A DUP6 DUP6 PUSH2 0x353D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x38E1 DUP6 DUP3 DUP7 ADD PUSH2 0x3682 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x392D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3944 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x292E DUP5 DUP3 DUP6 ADD PUSH2 0x35B5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x397C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3988 DUP7 DUP3 DUP8 ADD PUSH2 0x35B5 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39B1 DUP7 DUP3 DUP8 ADD PUSH2 0x3612 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39DA DUP7 DUP3 DUP8 ADD PUSH2 0x3549 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x39F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A1C DUP7 DUP3 DUP8 ADD PUSH2 0x35B5 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x39B1 DUP7 DUP3 DUP8 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x292E DUP5 DUP5 PUSH2 0x368E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x38D0 DUP6 DUP6 PUSH2 0x368E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3A80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A8C DUP8 DUP8 PUSH2 0x368E JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3A9D DUP8 DUP3 DUP9 ADD PUSH2 0x353D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3ABA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AC6 DUP8 DUP3 DUP9 ADD PUSH2 0x36B2 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3AE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3AF3 DUP7 DUP7 PUSH2 0x368E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3B04 DUP7 DUP3 DUP8 ADD PUSH2 0x353D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39DA DUP7 DUP3 DUP8 ADD PUSH2 0x36FB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x292E DUP5 DUP5 PUSH2 0x369A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x292E DUP5 DUP5 PUSH2 0x36A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x292E DUP5 DUP3 DUP6 ADD PUSH2 0x374A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3BB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BD7 DUP8 DUP3 DUP9 ADD PUSH2 0x374A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C00 DUP8 DUP3 DUP9 ADD PUSH2 0x374A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C29 DUP8 DUP3 DUP9 ADD PUSH2 0x36FB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C52 DUP8 DUP3 DUP9 ADD PUSH2 0x36FB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3C73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C96 DUP7 DUP3 DUP8 ADD PUSH2 0x374A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3B04 DUP7 DUP3 DUP8 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3CC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3CCC DUP10 DUP10 PUSH2 0x368E JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3CDD DUP10 DUP3 DUP11 ADD PUSH2 0x353D JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D06 DUP10 DUP3 DUP11 ADD PUSH2 0x36B2 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D31 DUP10 DUP3 DUP11 ADD PUSH2 0x36B2 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49D1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D5A DUP3 PUSH2 0x49CD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x3D6C DUP4 PUSH2 0x49C7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3D9C JUMPI PUSH2 0x3D82 DUP7 DUP4 MLOAD PUSH2 0x4524 JUMP JUMPDEST PUSH2 0x3D8B DUP3 PUSH2 0x49C7 JUMP JUMPDEST PUSH1 0x60 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x3D6F JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49DD JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49E2 JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49E5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DCC DUP3 PUSH2 0x49CD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x3DE0 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4A0F JUMP JUMPDEST PUSH2 0x3DE9 DUP2 PUSH2 0x4A3B JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49F8 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36355F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH32 0x494E56414C49445F54414B455200000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE DUP2 MSTORE PUSH32 0x4F524445525F4F56455246494C4C000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1A DUP2 MSTORE PUSH32 0x41535345545F50524F58595F414C52454144595F455849535453000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x15 DUP2 MSTORE PUSH32 0x5349474E41545552455F554E535550504F525445440000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x4449564953494F4E5F42595F5A45524F00000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x494E56414C49445F4F524445525F5349474E4154555245000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH32 0x494E56414C49445F4D414B455200000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP2 MSTORE PUSH32 0x494E56414C49445F54585F484153480000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x494E56414C49445F5349474E4154555245000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE DUP2 MSTORE PUSH32 0x524F554E44494E475F4552524F52000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x4641494C45445F455845435554494F4E00000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH32 0x54414B45525F4F56455250415900000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54414B45525F414D4F554E54000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1A DUP2 MSTORE PUSH32 0x41535345545F50524F58595F444F45535F4E4F545F4558495354000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x21 DUP2 MSTORE PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x5349474E41545552455F494C4C4547414C000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1E DUP2 MSTORE PUSH32 0x4C454E4754485F475245415445525F5448414E5F305F52455155495245440000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x494E56414C49445F4E45575F4F524445525F45504F4348000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1E DUP2 MSTORE PUSH32 0x4C454E4754485F475245415445525F5448414E5F335F52455155495245440000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP2 MSTORE PUSH32 0x434F4D504C4554455F46494C4C5F4641494C4544000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH32 0x494E56414C49445F46494C4C5F50524943450000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH32 0x5245454E5452414E43595F494C4C4547414C0000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x13 DUP2 MSTORE PUSH32 0x4F4E4C595F434F4E54524143545F4F574E455200000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE DUP2 MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x18 DUP2 MSTORE PUSH32 0x4E454741544956455F5350524541445F52455155495245440000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54585F5349474E4154555245000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x4C454E4754485F305F5245515549524544000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x44B2 DUP5 DUP3 PUSH2 0x3DAF JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x44C5 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x44D8 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1F28 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST DUP1 MLOAD PUSH2 0x120 DUP4 ADD SWAP1 PUSH2 0x44FD DUP5 DUP3 PUSH2 0x44A1 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4510 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x44A1 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1F28 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x4535 DUP5 DUP3 PUSH2 0x455B JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4548 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1F28 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49F2 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x3D40 JUMP JUMPDEST PUSH2 0x100 DUP2 ADD PUSH2 0x4581 DUP3 DUP12 PUSH2 0x3D40 JUMP JUMPDEST PUSH2 0x458E PUSH1 0x20 DUP4 ADD DUP11 PUSH2 0x3D40 JUMP JUMPDEST PUSH2 0x459B PUSH1 0x40 DUP4 ADD DUP10 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x45A8 PUSH1 0x60 DUP4 ADD DUP9 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x45B5 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x45C2 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x3DAF JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x45D4 DUP2 DUP6 PUSH2 0x3DC1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x45E8 DUP2 DUP5 PUSH2 0x3DC1 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x4604 DUP3 DUP7 PUSH2 0x3D40 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4616 DUP2 DUP6 PUSH2 0x3DC1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x462A DUP2 DUP5 PUSH2 0x3DC1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1E2C DUP2 DUP5 PUSH2 0x3D4F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x3DA6 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x3DAF JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x466E DUP3 DUP7 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x467B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3D40 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x462A DUP2 DUP5 PUSH2 0x3DC1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x469B DUP3 DUP6 PUSH2 0x3DAF JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x292E DUP2 DUP5 PUSH2 0x3DC1 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x46BB DUP3 DUP8 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x46C8 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x455B JUMP JUMPDEST PUSH2 0x46D5 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x462A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3DAF JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x46F0 DUP3 DUP6 PUSH2 0x3DB8 JUMP JUMPDEST PUSH2 0x1E2C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3D40 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1E2C DUP2 DUP5 PUSH2 0x3DC1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x3DF6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3DFF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3E2F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3E5F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3E8F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3EBF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3EEF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3F45 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3F75 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3FA5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3FD5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4005 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4035 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4065 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4095 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x40C5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x40F5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4125 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4155 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4185 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x41DB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x420B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x423B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x426B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x429B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x42CB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x42FB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x432B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x435B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x43B1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x43E1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4411 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4441 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4471 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x44A1 JUMP JUMPDEST PUSH2 0x120 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x44EB JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x4524 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x49B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260D DUP3 PUSH2 0x49D1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A2A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4A12 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1F28 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 SWAP3 NOT 0xd5 SLOAD 0xeb SWAP4 SHR 0xb8 CALLDATALOAD DUP10 0x2b DUP13 0x5e SIGNEXTEND SHL SLOAD MSTORE CODESIZE 0x49 0xec 0xcd KECCAK256 0xd5 SWAP13 CODESIZE PUSH23 0x634AA7A242346C6578706572696D656E74616CF5003700 ",
				"sourceMap": "145063:514:1:-;;;18908:5;18886:27;;-1:-1:-1;;18886:27:1;;;145354:221;5:2:-1;;;;30:1;27;20:12;5:2;-1:-1;22348:148:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;22348:148:1;;;;;;;;22338:159;;22348:148;;;;;22338:159;;;;22348:148;22338:159;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;22338:159:1;;;;;;;;;;;;22814:18;;;;;;;;;;;;;;;;22798:36;;22338:159;;-1:-1:-1;22338:159:1;;-1:-1:-1;22798:36:1;;;;-1:-1:-1;22814:18:1;22798:36;22814:18;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;22798:36:1;;;;;;;;;;;;22864:21;;;;;274:1:-1;22864:21:1;;;;;;;;;;22848:39;;22798:36;;-1:-1:-1;22798:36:1;;-1:-1:-1;22848:39:1;;;;-1:-1:-1;274:1;22848:39:1;22864:21;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;22848:39:1;;;;;;;;;;;;22719:214;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;22917:4:1;22719:214;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;22719:214:1;;;;;;;;22709:225;;22719:214;;;;-1:-1:-1;22709:225:1;;;-1:-1:-1;22709:225:1;22719:214;22709:225;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;-1:-1;;263:2;259:12;;;;254:3;250:22;246:30;;;;340:21;;;311:9;;295:26;377:20;;;;365:33;;22709:225:1;;;;;;;;;;274:1:-1;22688:246:1;-1:-1:-1;;75121:5:1;:18;;-1:-1:-1;;;;;;75121:18:1;75129:10;75121:18;;;-1:-1:-1;145063:514:1;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106101b65763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663288cdc9181146101bb578063297bb70b146101f15780632ac126221461021e5780633683ef8e1461024b5780633c28d8611461026d5780633e228bae1461029a5780633fd3c997146102ba5780634ac14782146102e75780634d0ae546146103075780634f9559b11461032757806350dde190146103475780636070410814610367578063642f2eaf1461039457806364a3bc15146103b457806377fcce68146103d45780637b8e3514146103f45780637e1d9808146104145780637e9d74dc1461043457806382c174d0146104615780638da5cb5b146104815780639363470214610496578063a3e20380146104b6578063b4be83d5146104d6578063bfc8bfce146104f6578063c585bb9314610516578063c75e0a8114610536578063d46b02c314610563578063d9bfa73e14610583578063db123b1a146105a3578063dd1c7d18146105c5578063e306f779146105e5578063e5fa431b146105fa578063eea086ba1461061a578063f2fde38b1461062f578063ffa1ad741461064f575b600080fd5b3480156101c757600080fd5b506101db6101d6366004613a2d565b610664565b6040516101e89190614652565b60405180910390f35b3480156101fd57600080fd5b5061021161020c366004613950565b610676565b6040516101e8919061492c565b34801561022a57600080fd5b5061023e610239366004613a2d565b61074e565b6040516101e89190614644565b34801561025757600080fd5b5061026b610266366004613a6a565b610763565b005b34801561027957600080fd5b5061028d610288366004613b9e565b610801565b6040516101e8919061493a565b3480156102a657600080fd5b506102116102b5366004613c5e565b610945565b3480156102c657600080fd5b506102da6102d5366004613b2d565b61099b565b6040516101e8919061470e565b3480156102f357600080fd5b5061026b61030236600461391b565b6109b6565b34801561031357600080fd5b50610211610322366004613950565b610a30565b34801561033357600080fd5b5061026b610342366004613a2d565b610aeb565b34801561035357600080fd5b50610211610362366004613950565b610c0f565b34801561037357600080fd5b50610387610382366004613b2d565b610ca3565b6040516101e89190614564565b3480156103a057600080fd5b5061023e6103af366004613a2d565b610ccc565b3480156103c057600080fd5b506102116103cf366004613c5e565b610ce1565b3480156103e057600080fd5b5061026b6103ef3660046138eb565b610d39565b34801561040057600080fd5b5061023e61040f3660046138b1565b610df5565b34801561042057600080fd5b5061021161042f3660046139e4565b610e15565b34801561044057600080fd5b5061045461044f36600461391b565b610f26565b6040516101e89190614633565b34801561046d57600080fd5b5061023e61047c366004613a4b565b610fbb565b34801561048d57600080fd5b50610387610fdb565b3480156104a257600080fd5b5061023e6104b1366004613ad2565b610fea565b3480156104c257600080fd5b506102116104d13660046139e4565b6113f7565b3480156104e257600080fd5b506102116104f1366004613c5e565b61150a565b34801561050257600080fd5b5061026b610511366004613ca7565b611550565b34801561052257600080fd5b5061026b610531366004613893565b611725565b34801561054257600080fd5b50610556610551366004613b69565b6118b3565b6040516101e89190614949565b34801561056f57600080fd5b5061026b61057e366004613b69565b6119a0565b34801561058f57600080fd5b506101db61059e3660046138b1565b6119e9565b3480156105af57600080fd5b506105b8611a06565b6040516101e891906146fd565b3480156105d157600080fd5b506102116105e03660046139e4565b611a66565b3480156105f157600080fd5b506101db611b3b565b34801561060657600080fd5b506102116106153660046139e4565b611b41565b34801561062657600080fd5b50610387611c60565b34801561063b57600080fd5b5061026b61064a366004613893565b611c6f565b34801561065b57600080fd5b506105b8611cd7565b60036020526000908152604090205481565b61067e6134c5565b6000806106896134c5565b60005460ff16156106b85760405160e560020a62461bcd0281526004016106af906148ac565b60405180910390fd5b6000805460ff191660011781558751935091505b81831461073a5761072387838151811015156106e457fe5b9060200190602002015187848151811015156106fc57fe5b90602001906020020151878581518110151561071457fe5b90602001906020020151611d0e565b905061072f8482611dac565b6001909101906106cc565b50506000805460ff19169055509392505050565b60046020526000908152604090205460ff1681565b600160a060020a03831633146107cf576107ae848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843750610fea945050505050565b15156107cf5760405160e560020a62461bcd0281526004016106af906147dc565b50506000918252600660209081526040808420600160a060020a0390931684529190529020805460ff19166001179055565b6108096134ee565b61081161351d565b61081961351d565b6000805460ff16156108405760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff1916600117905561016080890151610140808a01919091528901519088015261086e886118b3565b9250610879876118b3565b9150610883611e0e565b905061089188848389611e33565b61089d87838388611e33565b6108a78888611f2e565b6108bb888885604001518560400151611f77565b8051602081015190519195506108d6918a91869181906120fe565b6020808501519081015190516108f291899185919081906120fe565b61090b88828560200151866040015188600001516121bb565b61092487828460200151856040015188602001516121bb565b6109308888838761225a565b50506000805460ff1916905550949350505050565b61094d6134c5565b606061095a8585856123c8565b9050608081825160208401305af4801561099157815183526020820151602084015260408201516040840152606082015160608401525b505b509392505050565b600a60205260009081526040902054600160a060020a031681565b60008054819060ff16156109df5760405160e560020a62461bcd0281526004016106af906148ac565b50506000805460ff191660011781558151905b808214610a2157610a198382815181101515610a0a57fe5b9060200190602002015161257c565b6001016109f2565b50506000805460ff1916905550565b610a386134c5565b600080610a436134c5565b60005460ff1615610a695760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff191660011781558751935091505b81831461073a57610ad48783815181101515610a9557fe5b906020019060200201518784815181101515610aad57fe5b906020019060200201518785815181101515610ac557fe5b906020019060200201516125a7565b9050610ae08482611dac565b600190910190610a7d565b6000805481908190819060ff1615610b185760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff19166001179055610b2d611e0e565b9350600160a060020a0384163314610b455733610b48565b60005b600160a060020a038086166000908152600560209081526040808320938516835292905220549093506001860192509050808211610b9b5760405160e560020a62461bcd0281526004016106af9061486c565b600160a060020a0380851660008181526005602090815260408083209488168084529490915290819020859055517f82af639571738f4ebd4268fb0363d8957ebe1bbb9e78dba5ebd69eed39b154f090610bf6908690614652565b60405180910390a350506000805460ff19169055505050565b610c176134c5565b600080610c226134c5565b86519250600091505b818314610c9957610c828783815181101515610c4357fe5b906020019060200201518784815181101515610c5b57fe5b906020019060200201518785815181101515610c7357fe5b90602001906020020151610945565b9050610c8e8482611dac565b600190910190610c2b565b5050509392505050565b600160e060020a031981166000908152600a6020526040902054600160a060020a03165b919050565b60086020526000908152604090205460ff1681565b610ce96134c5565b60005460ff1615610d0f5760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff19166001179055610d278484846125a7565b6000805460ff19169055949350505050565b6000805460ff1615610d605760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff19166001179055610d75611e0e565b600160a060020a0381811660008181526007602090815260408083209489168084529490915290819020805460ff19168715151790555192935090917fa8656e308026eeabce8f0bc18048433252318ab80ac79da0b3d3d8697dfba89190610dde908690614644565b60405180910390a350506000805460ff1916905550565b600760209081526000928352604080842090915290825290205460ff1681565b610e1d6134c5565b60606000806000610e2c6134c5565b60005460ff1615610e525760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff1916600117815589518a91908110610e6c57fe5b906020019060200201516101600151945088519350600092505b828414610f0f57848984815181101515610e9c57fe5b906020019060200201516101600181905250610ebc8887602001516125e3565b9150610ee88984815181101515610ecf57fe5b9060200190602002015183898681518110151561071457fe5b9050610ef48682611dac565b60208601518811610f0457610f0f565b600190920191610e86565b50506000805460ff19169055509195945050505050565b60606000606060008451925082604051908082528060200260200182016040528015610f6c57816020015b610f5961351d565b815260200190600190039081610f515790505b509150600090505b80831461099357610f9b8582815181101515610f8c57fe5b906020019060200201516118b3565b8282815181101515610fa957fe5b60209081029091010152600101610f74565b600660209081526000928352604080842090915290825290205460ff1681565b600254600160a060020a031681565b6000806000806000806000806000895111151561101c5760405160e560020a62461bcd0281526004016106af9061485c565b61102589612613565b60f860020a90049650600760ff8816106110545760405160e560020a62461bcd0281526004016106af9061477c565b8660ff16600781111561106357fe5b9550600086600781111561107357fe5b14156110945760405160e560020a62461bcd0281526004016106af9061484c565b60018660078111156110a257fe5b14156110d3578851156110ca5760405160e560020a62461bcd0281526004016106af9061491c565b600097506113e9565b60028660078111156110e157fe5b14156111be57885160411461110b5760405160e560020a62461bcd0281526004016106af9061471c565b88600081518110151561111a57fe5b016020015160f860020a90819004810204945061113e89600163ffffffff61266816565b935061115189602163ffffffff61266816565b925060018b8686866040516000815260200160405260405161117694939291906146ad565b60206040516020810390808403906000865af115801561119a573d6000803e3d6000fd5b5050604051601f190151600160a060020a038c811690821614995092506113e99050565b60038660078111156111cc57fe5b14156113035788516041146111f65760405160e560020a62461bcd0281526004016106af9061471c565b88600081518110151561120557fe5b016020015160f860020a90819004810204945061122989600163ffffffff61266816565b935061123c89602163ffffffff61266816565b925060018b60405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083106112bf5780518252601f1990920191602091820191016112a0565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206000835291019283905261117694509250899189915088906146ad565b600486600781111561131157fe5b1415611329576113228b8b8b61269c565b97506113e9565b600586600781111561133757fe5b141561138d57611346896127a4565b600160a060020a03808c1660009081526007602090815260408083209385168352929052205490915060ff16151561138157600097506113e9565b611322818c8c8c6127e8565b600686600781111561139b57fe5b14156113ce5760008b8152600660209081526040808320600160a060020a038e16845290915290205460ff1697506113e9565b60405160e560020a62461bcd0281526004016106af9061477c565b505050505050509392505050565b6113ff6134c5565b606060008060008061140f6134c5565b89600081518110151561141e57fe5b906020019060200201516101400151955089519450600093505b8385146114fd57858a8581518110151561144e57fe5b602090810290910101516101400152865161146a908a906125e3565b92506114ad8a8581518110151561147d57fe5b9060200190602002015160a001518b8681518110151561149957fe5b9060200190602002015160800151856128f7565b91506114d98a858151811015156114c057fe5b90602001906020020151838a87815181101515610c7357fe5b90506114e58782611dac565b865189116114f2576114fd565b600190930192611438565b5050505050509392505050565b6115126134c5565b60005460ff16156115385760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff19166001179055610d27848484611d0e565b600954600090600160a060020a03161561157f5760405160e560020a62461bcd0281526004016106af906148ac565b6115c26115bd888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843750612936945050505050565b612af2565b60008181526008602052604090205490915060ff16156115f75760405160e560020a62461bcd0281526004016106af906147cc565b600160a060020a038616331461168c57611642818785858080601f01602080910402602001604051908101604052809392919081815260200183838082843750610fea945050505050565b15156116635760405160e560020a62461bcd0281526004016106af9061490c565b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388161790555b60008181526008602052604090819020805460ff191660011790555130908690869080838380828437820191505092505050600060405180830381855af491505015156116ee5760405160e560020a62461bcd0281526004016106af906147fc565b600160a060020a038616331461171c576009805473ffffffffffffffffffffffffffffffffffffffff191690555b50505050505050565b60025460009081908190600160a060020a031633146117595760405160e560020a62461bcd0281526004016106af906148bc565b83925082600160a060020a031663ae25532e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117b357600080fd5b505af11580156117c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117eb9190810190613b4b565b600160e060020a031981166000908152600a6020526040902054909250600160a060020a0316905080156118345760405160e560020a62461bcd0281526004016106af9061475c565b600160e060020a031982166000908152600a602052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038616179055517fd2c6b762299c609bdb96520b58a49bfb80186934d4f71a86a367571a15c03194906118a590849087906146e2565b60405180910390a150505050565b6118bb61351d565b6118c482612b32565b60208083018290526000918252600390526040908190205490820152608082015115156118f85760015b60ff168152610cc7565b60a0820151151561190a5760026118ee565b60a08201516040820151106119205760056118ee565b61010082015142106119335760046118ee565b60208082015160009081526004909152604090205460ff16156119575760066118ee565b6101208201518251600160a060020a03908116600090815260056020908152604080832060608801519094168352929052205411156119975760066118ee565b60038152919050565b60005460ff16156119c65760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff191660011790556119dc8161257c565b506000805460ff19169055565b600560209081526000928352604080842090915290825290205481565b606060405190810160405280602481526020017ff47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f81526020017f4699f4980000000000000000000000000000000000000000000000000000000081525081565b611a6e6134c5565b60606000806000611a7d6134c5565b886000815181101515611a8c57fe5b906020019060200201516101600151945088519350600092505b828414611b2f57848984815181101515611abc57fe5b906020019060200201516101600181905250611adc8887602001516125e3565b9150611b088984815181101515611aef57fe5b90602001906020020151838986815181101515610c7357fe5b9050611b148682611dac565b60208601518811611b2457611b2f565b600190920191611aa6565b50505050509392505050565b60015481565b611b496134c5565b6060600080600080611b596134c5565b60005460ff1615611b7f5760405160e560020a62461bcd0281526004016106af906148ac565b6000805460ff191660011781558a518b91908110611b9957fe5b906020019060200201516101400151955089519450600093505b838514611c4857858a85815181101515611bc957fe5b6020908102909101015161014001528651611be5908a906125e3565b9250611bf88a8581518110151561147d57fe5b9150611c248a85815181101515611c0b57fe5b90602001906020020151838a8781518110151561071457fe5b9050611c308782611dac565b86518911611c3d57611c48565b600190930192611bb3565b50506000805460ff1916905550929695505050505050565b600954600160a060020a031681565b600254600160a060020a03163314611c9c5760405160e560020a62461bcd0281526004016106af906148bc565b600160a060020a03811615611cd4576002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60408051808201909152600581527f322e302e30000000000000000000000000000000000000000000000000000000602082015281565b611d166134c5565b611d1e61351d565b6000806000611d2c886118b3565b9350611d36611e0e565b9250611d4488858589611e33565b611d568860a0015185604001516125e3565b9150611d628783612b40565b9050611d758885898489600001516120fe565b611d7f8882612b56565b9450611d96888486602001518760400151896121bb565b611da1888487612bb7565b505050509392505050565b81518151611dba9190612c6f565b825260208083015190820151611dd09190612c6f565b602083015260408083015190820151611de99190612c6f565b604083015260608083015190820151611e029190612c6f565b60609092019190915250565b600954600090600160a060020a0316818115611e2a5781611e2c565b335b9392505050565b825160ff16600314611e5a5760405160e560020a62461bcd0281526004016106af906148dc565b6060840151600160a060020a031615611e9c576060840151600160a060020a03163314611e9c5760405160e560020a62461bcd0281526004016106af906148ec565b6020840151600160a060020a031615611ee95781600160a060020a03168460200151600160a060020a0316141515611ee95760405160e560020a62461bcd0281526004016106af9061472c565b60408301511515611f2857611f078360200151856000015183610fea565b1515611f285760405160e560020a62461bcd0281526004016106af9061479c565b50505050565b611f408260a001518260a00151612ca2565b611f5283608001518360800151612ca2565b1015611f735760405160e560020a62461bcd0281526004016106af906148fc565b5050565b611f7f6134ee565b600080600080611f938960a00151886125e3565b9350611fa889608001518a60a0015186612ce6565b9250611fb88860a00151876125e3565b9150611fcd88608001518960a0015184612ce6565b90508084106120105760208086018051839052805182018490525151865182015260808a015160a08b01518751909201516120089290612ce6565b85515261204d565b845183905284516020908101859052855181015190860180519190915260a089015160808a01519151516120449290612d35565b60208087015101525b845151602080870151015161206291906125e3565b604086015284515160808a015160c08b015161207f929190612ce6565b85516040015284516020015160a08a015160e08b01516120a0929190612ce6565b855160600152602085015151608089015160c08a01516120c1929190612ce6565b856020015160400181815250506120e98560200151602001518960a001518a60e00151612ce6565b60208601516060015250505050949350505050565b8215156121205760405160e560020a62461bcd0281526004016106af9061481c565b828211156121435760405160e560020a62461bcd0281526004016106af9061480c565b8460a00151612156856040015184612c6f565b11156121775760405160e560020a62461bcd0281526004016106af9061473c565b612185856080015183612ca2565b612193828760a00151612ca2565b11156121b45760405160e560020a62461bcd0281526004016106af9061489c565b5050505050565b6121c9828260200151612c6f565b600084815260036020908152604091829020929092558681015187518451938501518584015160608701516101408c01516101608d015196518b98600160a060020a039788169897909616967f0bcc4c97732e47d9946f229edb95f5b6323f601300e4690de719993f3c3711299661224b968f96339692959194909390614572565b60405180910390a45050505050565b60608060405190810160405280602481526020017ff47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f81526020017f4699f4980000000000000000000000000000000000000000000000000000000081525090506122db85610140015186600001518660000151856020015160200151612da4565b610140840151845186518451602001516122f793929190612da4565b6123108561014001518660000151858560400151612da4565b61232c8186600001518760400151856000015160400151612da4565b6123488185600001518660400151856020015160400151612da4565b8360400151600160a060020a03168560400151600160a060020a03161415612398576123938184876040015161238e866000015160600151876020015160600151612c6f565b612da4565b6121b4565b6123b081848760400151856000015160600151612da4565b6121b481848660400151856020015160600151612da4565b604080517fb4be83d5000000000000000000000000000000000000000000000000000000006020808301919091526060602483018181528751608485019081528884015160a48601529488015160c48501529087015160e4840152608087015161010484015260a087015161012484015260c087015161014484015260e08701516101648401526101008701516101848401526101208701516101a4840152610140870180516101c485019081526101608901516101e4860152610180905251805161020485018190529394919384936044870192849261022489019291820191601f82010460005b818110156124cf5783518552602094850194909301926001016124b1565b50505050818103610160808401919091528a0151805180835260209283019291820191601f82010460005b818110156125185783518552602094850194909301926001016124fa565b50505089845250848103602093840190815288518083529093918201918981019190601f82010460005b81811015612560578351855260209485019490930192600101612542565b505050601f198883030188525060405250505050509392505050565b61258461351d565b61258d826118b3565b90506125998282612ee7565b611f73828260200151612f92565b6125af6134c5565b6125ba848484611d0e565b60208101519091508314611e2c5760405160e560020a62461bcd0281526004016106af9061488c565b6000828211156126085760405160e560020a62461bcd0281526004016106af9061474c565b508082035b92915050565b600080825111151561263a5760405160e560020a62461bcd0281526004016106af9061483c565b81518290600019810190811061264c57fe5b01602001518251600019019092525060f860020a908190040290565b6000816020018351101515156126935760405160e560020a62461bcd0281526004016106af9061476c565b50016020015190565b6040516000906060907f1626ba7e00000000000000000000000000000000000000000000000000000000906126d7908790869060240161468d565b60408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e060020a0319909416939093178352815191935090829081885afa80801561273e576001811461279857611da1565b60e560020a62461bcd026000527c20000000000000000000000000000000000000000000000000000000006020527c0c57414c4c45545f4552524f5200000000000000000000000000000000604052600060605260646000fd5b50505195945050505050565b600060148251101515156127cd5760405160e560020a62461bcd0281526004016106af906148cc565b6127db82601484510361300e565b8251601319019092525090565b6040516000906060907f93634702000000000000000000000000000000000000000000000000000000009061282590879087908790602401614660565b60408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e060020a03199094169390931783528151919350908290818a5afa80801561288c57600181146128e6576128eb565b60e560020a62461bcd026000527c20000000000000000000000000000000000000000000000000000000006020527c0f56414c494441544f525f4552524f5200000000000000000000000000604052600060605260646000fd5b825194505b50505050949350505050565b600080831161291b5760405160e560020a62461bcd0281526004016106af9061478c565b61292e6129288584612ca2565b8461304b565b949350505050565b604080517f5a65726f45785472616e73616374696f6e2800000000000000000000000000006020808301919091527f75696e743235362073616c742c0000000000000000000000000000000000000060328301527f61646472657373207369676e6572416464726573732c00000000000000000000603f8301527f627974657320646174610000000000000000000000000000000000000000000060558301527f2900000000000000000000000000000000000000000000000000000000000000605f830152825180830384018152606090920192839052815160009384938493909282918401908083835b60208310612a415780518252601f199092019160209182019101612a22565b51815160209384036101000a600019018019909216911617905260405191909301819003812089519097508995509093508392850191508083835b60208310612a9b5780518252601f199092019160209182019101612a7c565b51815160209384036101000a60001901801990921691161790526040805192909401829003822097825281019a909a5250600160a060020a0397909716968801969096525050606085015250506080909120919050565b6001546040517f19010000000000000000000000000000000000000000000000000000000000008152600281019190915260228101919091526042902090565b600061260d6115bd83613062565b6000818310612b4f5781611e2c565b5090919050565b612b5e6134c5565b6020810182905260a08301516080840151612b7a918491612ce6565b808252608084015160c0850151612b92929190612ce6565b604082015260a083015160e0840151612bac918491612ce6565b606082015292915050565b60408051606081018252602481527ff47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f60208201527f4699f498000000000000000000000000000000000000000000000000000000009181019190915261014084015184518351612c2a9291908690612da4565b612c438461016001518486600001518560200151612da4565b612c5b81856000015186604001518560400151612da4565b611f28818486604001518560600151612da4565b600082820183811015612c975760405160e560020a62461bcd0281526004016106af906147bc565b8091505b5092915050565b600080831515612cb55760009150612c9b565b50828202828482811515612cc557fe5b0414612c975760405160e560020a62461bcd0281526004016106af906147bc565b6000808311612d0a5760405160e560020a62461bcd0281526004016106af9061478c565b612d158484846133e9565b1561291b5760405160e560020a62461bcd0281526004016106af906147ec565b6000808311612d595760405160e560020a62461bcd0281526004016106af9061478c565b612d64848484613457565b15612d845760405160e560020a62461bcd0281526004016106af906147ec565b61292e612928612d948685612ca2565b612d9f8660016125e3565b612c6f565b600080600083118015612dc9575083600160a060020a031685600160a060020a031614155b15612edf578551600310612df25760405160e560020a62461bcd0281526004016106af9061487c565b5050602084810151600160e060020a0319166000818152600a909252604090912054600160a060020a0316801515612e3f5760405160e560020a62461bcd0281526004016106af9061482c565b604051660fffffffffffe0603f885101168060840182017fa85e59e400000000000000000000000000000000000000000000000000000000835260806004840152600160a060020a0388166024840152600160a060020a0387166044840152856064840152608483015b81811015612ec157895181526020998a019901612ea9565b61020084858403866000895af1801515612ed9573d85fd5b50505050505b505050505050565b805160009060ff16600314612f115760405160e560020a62461bcd0281526004016106af906148dc565b6060830151600160a060020a031615612f53576060830151600160a060020a03163314612f535760405160e560020a62461bcd0281526004016106af906148ec565b612f5b611e0e565b8351909150600160a060020a03808316911614612f8d5760405160e560020a62461bcd0281526004016106af906147ac565b505050565b60008181526004602052604090819020805460ff1916600117905582810151835161014085015161016086015193518594600160a060020a039485169493909316927fdc47b3613d9fe400085f6dbdc99453462279057e6207385042827ed6b1a62cf792613002923392906145f6565b60405180910390a45050565b6000816014018351101515156130395760405160e560020a62461bcd0281526004016106af906148cc565b500160140151600160a060020a031690565b600080828481151561305957fe5b04949350505050565b604080517f4f726465722800000000000000000000000000000000000000000000000000006020808301919091527f61646472657373206d616b6572416464726573732c000000000000000000000060268301527f616464726573732074616b6572416464726573732c0000000000000000000000603b8301527f6164647265737320666565526563697069656e74416464726573732c0000000060508301527f616464726573732073656e646572416464726573732c00000000000000000000606c8301527f75696e74323536206d616b65724173736574416d6f756e742c0000000000000060828301527f75696e743235362074616b65724173736574416d6f756e742c00000000000000609b8301527f75696e74323536206d616b65724665652c00000000000000000000000000000060b48301527f75696e743235362074616b65724665652c00000000000000000000000000000060c58301527f75696e743235362065787069726174696f6e54696d655365636f6e64732c000060d68301527f75696e743235362073616c742c0000000000000000000000000000000000000060f48301527f6279746573206d616b65724173736574446174612c00000000000000000000006101018301527f62797465732074616b65724173736574446174610000000000000000000000006101168301527f290000000000000000000000000000000000000000000000000000000000000061012a830152825161010b81840301815261012b90920192839052815160009384938493849391929182918401908083835b602083106132cc5780518252601f1990920191602091820191016132ad565b51815160209384036101000a60001901801990921691161790526040519190930181900381206101408b0151805191995095509093508392850191508083835b6020831061332b5780518252601f19909201916020918201910161330c565b51815160209384036101000a60001901801990921691161790526040519190930181900381206101608b0151805191985095509093508392850191508083835b6020831061338a5780518252601f19909201916020918201910161336b565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120601f19890180516101408b018051610160909c0180519a84529881529288526101a0822091529890525050509190525090919050565b60008080841161340e5760405160e560020a62461bcd0281526004016106af9061478c565b821580613419575084155b156134275760009150610993565b8380151561343157fe5b85840990506134408584612ca2565b61344c6103e883612ca2565b101595945050505050565b60008080841161347c5760405160e560020a62461bcd0281526004016106af9061478c565b821580613487575084155b156134955760009150610993565b8380151561349f57fe5b8584099050836134af85836125e3565b8115156134b857fe5b0690506134408584612ca2565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b610120604051908101604052806135036134c5565b81526020016135106134c5565b8152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b6000611e2c82356149d1565b6000601f8201831361355a57600080fd5b813561356d6135688261497e565b614957565b81815260209384019390925082018360005b838110156135ab578135860161359588826136fb565b845250602092830192919091019060010161357f565b5050505092915050565b6000601f820183136135c657600080fd5b81356135d46135688261497e565b81815260209384019390925082018360005b838110156135ab57813586016135fc888261374a565b84525060209283019291909101906001016135e6565b6000601f8201831361362357600080fd5b81356136316135688261497e565b9150818183526020840193506020810190508385602084028201111561365657600080fd5b60005b838110156135ab578161366c888261368e565b8452506020928301929190910190600101613659565b6000611e2c82356149dd565b6000611e2c82356149e2565b6000611e2c82356149e5565b6000611e2c82516149e5565b600080601f830184136136c457600080fd5b50813567ffffffffffffffff8111156136dc57600080fd5b6020830191508360018202830111156136f457600080fd5b9250929050565b6000601f8201831361370c57600080fd5b813561371a6135688261499f565b9150808252602083016020830185838301111561373657600080fd5b613741838284614a03565b50505092915050565b6000610180828403121561375d57600080fd5b613768610180614957565b90506000613776848461353d565b82525060206137878484830161353d565b602083015250604061379b8482850161353d565b60408301525060606137af8482850161353d565b60608301525060806137c38482850161368e565b60808301525060a06137d78482850161368e565b60a08301525060c06137eb8482850161368e565b60c08301525060e06137ff8482850161368e565b60e0830152506101006138148482850161368e565b6101008301525061012061382a8482850161368e565b6101208301525061014082013567ffffffffffffffff81111561384c57600080fd5b613858848285016136fb565b6101408301525061016082013567ffffffffffffffff81111561387a57600080fd5b613886848285016136fb565b6101608301525092915050565b6000602082840312156138a557600080fd5b600061292e848461353d565b600080604083850312156138c457600080fd5b60006138d0858561353d565b92505060206138e18582860161353d565b9150509250929050565b600080604083850312156138fe57600080fd5b600061390a858561353d565b92505060206138e185828601613682565b60006020828403121561392d57600080fd5b813567ffffffffffffffff81111561394457600080fd5b61292e848285016135b5565b60008060006060848603121561396557600080fd5b833567ffffffffffffffff81111561397c57600080fd5b613988868287016135b5565b935050602084013567ffffffffffffffff8111156139a557600080fd5b6139b186828701613612565b925050604084013567ffffffffffffffff8111156139ce57600080fd5b6139da86828701613549565b9150509250925092565b6000806000606084860312156139f957600080fd5b833567ffffffffffffffff811115613a1057600080fd5b613a1c868287016135b5565b93505060206139b18682870161368e565b600060208284031215613a3f57600080fd5b600061292e848461368e565b60008060408385031215613a5e57600080fd5b60006138d0858561368e565b60008060008060608587031215613a8057600080fd5b6000613a8c878761368e565b9450506020613a9d8782880161353d565b935050604085013567ffffffffffffffff811115613aba57600080fd5b613ac6878288016136b2565b95989497509550505050565b600080600060608486031215613ae757600080fd5b6000613af3868661368e565b9350506020613b048682870161353d565b925050604084013567ffffffffffffffff811115613b2157600080fd5b6139da868287016136fb565b600060208284031215613b3f57600080fd5b600061292e848461369a565b600060208284031215613b5d57600080fd5b600061292e84846136a6565b600060208284031215613b7b57600080fd5b813567ffffffffffffffff811115613b9257600080fd5b61292e8482850161374a565b60008060008060808587031215613bb457600080fd5b843567ffffffffffffffff811115613bcb57600080fd5b613bd78782880161374a565b945050602085013567ffffffffffffffff811115613bf457600080fd5b613c008782880161374a565b935050604085013567ffffffffffffffff811115613c1d57600080fd5b613c29878288016136fb565b925050606085013567ffffffffffffffff811115613c4657600080fd5b613c52878288016136fb565b91505092959194509250565b600080600060608486031215613c7357600080fd5b833567ffffffffffffffff811115613c8a57600080fd5b613c968682870161374a565b9350506020613b048682870161368e565b60008060008060008060808789031215613cc057600080fd5b6000613ccc898961368e565b9650506020613cdd89828a0161353d565b955050604087013567ffffffffffffffff811115613cfa57600080fd5b613d0689828a016136b2565b9450945050606087013567ffffffffffffffff811115613d2557600080fd5b613d3189828a016136b2565b92509250509295509295509295565b613d49816149d1565b82525050565b6000613d5a826149cd565b808452602084019350613d6c836149c7565b60005b82811015613d9c57613d82868351614524565b613d8b826149c7565b606096909601959150600101613d6f565b5093949350505050565b613d49816149dd565b613d49816149e2565b613d49816149e5565b6000613dcc826149cd565b808452613de0816020860160208601614a0f565b613de981614a3b565b9093016020019392505050565b613d49816149f8565b601281527f4c454e4754485f36355f52455155495245440000000000000000000000000000602082015260400190565b600d81527f494e56414c49445f54414b455200000000000000000000000000000000000000602082015260400190565b600e81527f4f524445525f4f56455246494c4c000000000000000000000000000000000000602082015260400190565b601181527f55494e543235365f554e444552464c4f57000000000000000000000000000000602082015260400190565b601a81527f41535345545f50524f58595f414c52454144595f455849535453000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601581527f5349474e41545552455f554e535550504f525445440000000000000000000000602082015260400190565b601081527f4449564953494f4e5f42595f5a45524f00000000000000000000000000000000602082015260400190565b601781527f494e56414c49445f4f524445525f5349474e4154555245000000000000000000602082015260400190565b600d81527f494e56414c49445f4d414b455200000000000000000000000000000000000000602082015260400190565b601081527f55494e543235365f4f564552464c4f5700000000000000000000000000000000602082015260400190565b600f81527f494e56414c49445f54585f484153480000000000000000000000000000000000602082015260400190565b601181527f494e56414c49445f5349474e4154555245000000000000000000000000000000602082015260400190565b600e81527f524f554e44494e475f4552524f52000000000000000000000000000000000000602082015260400190565b601081527f4641494c45445f455845435554494f4e00000000000000000000000000000000602082015260400190565b600d81527f54414b45525f4f56455250415900000000000000000000000000000000000000602082015260400190565b601481527f494e56414c49445f54414b45525f414d4f554e54000000000000000000000000602082015260400190565b601a81527f41535345545f50524f58595f444f45535f4e4f545f4558495354000000000000602082015260400190565b602181527f475245415445525f5448414e5f5a45524f5f4c454e4754485f5245515549524560208201527f4400000000000000000000000000000000000000000000000000000000000000604082015260600190565b601181527f5349474e41545552455f494c4c4547414c000000000000000000000000000000602082015260400190565b601e81527f4c454e4754485f475245415445525f5448414e5f305f52455155495245440000602082015260400190565b601781527f494e56414c49445f4e45575f4f524445525f45504f4348000000000000000000602082015260400190565b601e81527f4c454e4754485f475245415445525f5448414e5f335f52455155495245440000602082015260400190565b601481527f434f4d504c4554455f46494c4c5f4641494c4544000000000000000000000000602082015260400190565b601281527f494e56414c49445f46494c4c5f50524943450000000000000000000000000000602082015260400190565b601281527f5245454e5452414e43595f494c4c4547414c0000000000000000000000000000602082015260400190565b601381527f4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000602082015260400190565b602681527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560208201527f5155495245440000000000000000000000000000000000000000000000000000604082015260600190565b601081527f4f524445525f554e46494c4c41424c4500000000000000000000000000000000602082015260400190565b600e81527f494e56414c49445f53454e444552000000000000000000000000000000000000602082015260400190565b601881527f4e454741544956455f5350524541445f52455155495245440000000000000000602082015260400190565b601481527f494e56414c49445f54585f5349474e4154555245000000000000000000000000602082015260400190565b601181527f4c454e4754485f305f5245515549524544000000000000000000000000000000602082015260400190565b805160808301906144b28482613daf565b5060208201516144c56020850182613daf565b5060408201516144d86040850182613daf565b506060820151611f286060850182613daf565b80516101208301906144fd84826144a1565b50602082015161451060808501826144a1565b506040820151611f28610100850182613daf565b80516060830190614535848261455b565b5060208201516145486020850182613daf565b506040820151611f286040850182613daf565b613d49816149f2565b6020810161260d8284613d40565b6101008101614581828b613d40565b61458e602083018a613d40565b61459b6040830189613daf565b6145a86060830188613daf565b6145b56080830187613daf565b6145c260a0830186613daf565b81810360c08301526145d48185613dc1565b905081810360e08301526145e88184613dc1565b9a9950505050505050505050565b606081016146048286613d40565b81810360208301526146168185613dc1565b9050818103604083015261462a8184613dc1565b95945050505050565b60208082528101611e2c8184613d4f565b6020810161260d8284613da6565b6020810161260d8284613daf565b6060810161466e8286613daf565b61467b6020830185613d40565b818103604083015261462a8184613dc1565b6040810161469b8285613daf565b818103602083015261292e8184613dc1565b608081016146bb8287613daf565b6146c8602083018661455b565b6146d56040830185613daf565b61462a6060830184613daf565b604081016146f08285613db8565b611e2c6020830184613d40565b60208082528101611e2c8184613dc1565b6020810161260d8284613df6565b6020808252810161260d81613dff565b6020808252810161260d81613e2f565b6020808252810161260d81613e5f565b6020808252810161260d81613e8f565b6020808252810161260d81613ebf565b6020808252810161260d81613eef565b6020808252810161260d81613f45565b6020808252810161260d81613f75565b6020808252810161260d81613fa5565b6020808252810161260d81613fd5565b6020808252810161260d81614005565b6020808252810161260d81614035565b6020808252810161260d81614065565b6020808252810161260d81614095565b6020808252810161260d816140c5565b6020808252810161260d816140f5565b6020808252810161260d81614125565b6020808252810161260d81614155565b6020808252810161260d81614185565b6020808252810161260d816141db565b6020808252810161260d8161420b565b6020808252810161260d8161423b565b6020808252810161260d8161426b565b6020808252810161260d8161429b565b6020808252810161260d816142cb565b6020808252810161260d816142fb565b6020808252810161260d8161432b565b6020808252810161260d8161435b565b6020808252810161260d816143b1565b6020808252810161260d816143e1565b6020808252810161260d81614411565b6020808252810161260d81614441565b6020808252810161260d81614471565b6080810161260d82846144a1565b610120810161260d82846144eb565b6060810161260d8284614524565b60405181810167ffffffffffffffff8111828210171561497657600080fd5b604052919050565b600067ffffffffffffffff82111561499557600080fd5b5060209081020190565b600067ffffffffffffffff8211156149b657600080fd5b506020601f91909101601f19160190565b60200190565b5190565b600160a060020a031690565b151590565b90565b600160e060020a03191690565b60ff1690565b600061260d826149d1565b82818337506000910152565b60005b83811015614a2a578181015183820152602001614a12565b83811115611f285750506000910152565b601f01601f1916905600a265627a7a723058209219d554eb931cb835892b8c5e0b1b54523849eccd20d59c3876634aa7a242346c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1B6 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x288CDC91 DUP2 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x297BB70B EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x2AC12622 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0x3683EF8E EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x3C28D861 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0x3E228BAE EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0x3FD3C997 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x4AC14782 EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x4D0AE546 EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0x4F9559B1 EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x50DDE190 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x60704108 EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x642F2EAF EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0x64A3BC15 EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x77FCCE68 EQ PUSH2 0x3D4 JUMPI DUP1 PUSH4 0x7B8E3514 EQ PUSH2 0x3F4 JUMPI DUP1 PUSH4 0x7E1D9808 EQ PUSH2 0x414 JUMPI DUP1 PUSH4 0x7E9D74DC EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0x82C174D0 EQ PUSH2 0x461 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x481 JUMPI DUP1 PUSH4 0x93634702 EQ PUSH2 0x496 JUMPI DUP1 PUSH4 0xA3E20380 EQ PUSH2 0x4B6 JUMPI DUP1 PUSH4 0xB4BE83D5 EQ PUSH2 0x4D6 JUMPI DUP1 PUSH4 0xBFC8BFCE EQ PUSH2 0x4F6 JUMPI DUP1 PUSH4 0xC585BB93 EQ PUSH2 0x516 JUMPI DUP1 PUSH4 0xC75E0A81 EQ PUSH2 0x536 JUMPI DUP1 PUSH4 0xD46B02C3 EQ PUSH2 0x563 JUMPI DUP1 PUSH4 0xD9BFA73E EQ PUSH2 0x583 JUMPI DUP1 PUSH4 0xDB123B1A EQ PUSH2 0x5A3 JUMPI DUP1 PUSH4 0xDD1C7D18 EQ PUSH2 0x5C5 JUMPI DUP1 PUSH4 0xE306F779 EQ PUSH2 0x5E5 JUMPI DUP1 PUSH4 0xE5FA431B EQ PUSH2 0x5FA JUMPI DUP1 PUSH4 0xEEA086BA EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x62F JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x64F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x1D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A2D JUMP JUMPDEST PUSH2 0x664 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x4652 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x20C CALLDATASIZE PUSH1 0x4 PUSH2 0x3950 JUMP JUMPDEST PUSH2 0x676 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x492C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A2D JUMP JUMPDEST PUSH2 0x74E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x4644 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A6A JUMP JUMPDEST PUSH2 0x763 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x288 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B9E JUMP JUMPDEST PUSH2 0x801 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x493A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x2B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C5E JUMP JUMPDEST PUSH2 0x945 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x2D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B2D JUMP JUMPDEST PUSH2 0x99B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x470E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x302 CALLDATASIZE PUSH1 0x4 PUSH2 0x391B JUMP JUMPDEST PUSH2 0x9B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x322 CALLDATASIZE PUSH1 0x4 PUSH2 0x3950 JUMP JUMPDEST PUSH2 0xA30 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A2D JUMP JUMPDEST PUSH2 0xAEB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x3950 JUMP JUMPDEST PUSH2 0xC0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x387 PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B2D JUMP JUMPDEST PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x4564 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x3A2D JUMP JUMPDEST PUSH2 0xCCC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x3CF CALLDATASIZE PUSH1 0x4 PUSH2 0x3C5E JUMP JUMPDEST PUSH2 0xCE1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x3EF CALLDATASIZE PUSH1 0x4 PUSH2 0x38EB JUMP JUMPDEST PUSH2 0xD39 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x40F CALLDATASIZE PUSH1 0x4 PUSH2 0x38B1 JUMP JUMPDEST PUSH2 0xDF5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x42F CALLDATASIZE PUSH1 0x4 PUSH2 0x39E4 JUMP JUMPDEST PUSH2 0xE15 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x454 PUSH2 0x44F CALLDATASIZE PUSH1 0x4 PUSH2 0x391B JUMP JUMPDEST PUSH2 0xF26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x4633 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x47C CALLDATASIZE PUSH1 0x4 PUSH2 0x3A4B JUMP JUMPDEST PUSH2 0xFBB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x387 PUSH2 0xFDB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23E PUSH2 0x4B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AD2 JUMP JUMPDEST PUSH2 0xFEA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x4D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x39E4 JUMP JUMPDEST PUSH2 0x13F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x4F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C5E JUMP JUMPDEST PUSH2 0x150A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x511 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CA7 JUMP JUMPDEST PUSH2 0x1550 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x531 CALLDATASIZE PUSH1 0x4 PUSH2 0x3893 JUMP JUMPDEST PUSH2 0x1725 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x542 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x556 PUSH2 0x551 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B69 JUMP JUMPDEST PUSH2 0x18B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x4949 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x57E CALLDATASIZE PUSH1 0x4 PUSH2 0x3B69 JUMP JUMPDEST PUSH2 0x19A0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x59E CALLDATASIZE PUSH1 0x4 PUSH2 0x38B1 JUMP JUMPDEST PUSH2 0x19E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B8 PUSH2 0x1A06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x46FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x5E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x39E4 JUMP JUMPDEST PUSH2 0x1A66 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x1B3B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH2 0x615 CALLDATASIZE PUSH1 0x4 PUSH2 0x39E4 JUMP JUMPDEST PUSH2 0x1B41 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x387 PUSH2 0x1C60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x64A CALLDATASIZE PUSH1 0x4 PUSH2 0x3893 JUMP JUMPDEST PUSH2 0x1C6F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B8 PUSH2 0x1CD7 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x67E PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x689 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE DUP8 MLOAD SWAP4 POP SWAP2 POP JUMPDEST DUP2 DUP4 EQ PUSH2 0x73A JUMPI PUSH2 0x723 DUP8 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x6E4 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x6FC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x714 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x1D0E JUMP JUMPDEST SWAP1 POP PUSH2 0x72F DUP5 DUP3 PUSH2 0x1DAC JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x6CC JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND CALLER EQ PUSH2 0x7CF JUMPI PUSH2 0x7AE DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0xFEA SWAP5 POP POP POP POP POP JUMP JUMPDEST ISZERO ISZERO PUSH2 0x7CF JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47DC JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x809 PUSH2 0x34EE JUMP JUMPDEST PUSH2 0x811 PUSH2 0x351D JUMP JUMPDEST PUSH2 0x819 PUSH2 0x351D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x840 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x160 DUP1 DUP10 ADD MLOAD PUSH2 0x140 DUP1 DUP11 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP10 ADD MLOAD SWAP1 DUP9 ADD MSTORE PUSH2 0x86E DUP9 PUSH2 0x18B3 JUMP JUMPDEST SWAP3 POP PUSH2 0x879 DUP8 PUSH2 0x18B3 JUMP JUMPDEST SWAP2 POP PUSH2 0x883 PUSH2 0x1E0E JUMP JUMPDEST SWAP1 POP PUSH2 0x891 DUP9 DUP5 DUP4 DUP10 PUSH2 0x1E33 JUMP JUMPDEST PUSH2 0x89D DUP8 DUP4 DUP4 DUP9 PUSH2 0x1E33 JUMP JUMPDEST PUSH2 0x8A7 DUP9 DUP9 PUSH2 0x1F2E JUMP JUMPDEST PUSH2 0x8BB DUP9 DUP9 DUP6 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x1F77 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 ADD MLOAD SWAP1 MLOAD SWAP2 SWAP6 POP PUSH2 0x8D6 SWAP2 DUP11 SWAP2 DUP7 SWAP2 DUP2 SWAP1 PUSH2 0x20FE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD MLOAD SWAP1 DUP2 ADD MLOAD SWAP1 MLOAD PUSH2 0x8F2 SWAP2 DUP10 SWAP2 DUP6 SWAP2 SWAP1 DUP2 SWAP1 PUSH2 0x20FE JUMP JUMPDEST PUSH2 0x90B DUP9 DUP3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x21BB JUMP JUMPDEST PUSH2 0x924 DUP8 DUP3 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x21BB JUMP JUMPDEST PUSH2 0x930 DUP9 DUP9 DUP4 DUP8 PUSH2 0x225A JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x94D PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x95A DUP6 DUP6 DUP6 PUSH2 0x23C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x80 DUP2 DUP3 MLOAD PUSH1 0x20 DUP5 ADD ADDRESS GAS DELEGATECALL DUP1 ISZERO PUSH2 0x991 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE JUMPDEST POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x9DF JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE DUP2 MLOAD SWAP1 JUMPDEST DUP1 DUP3 EQ PUSH2 0xA21 JUMPI PUSH2 0xA19 DUP4 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA0A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x257C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x9F2 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xA38 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA43 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA69 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE DUP8 MLOAD SWAP4 POP SWAP2 POP JUMPDEST DUP2 DUP4 EQ PUSH2 0x73A JUMPI PUSH2 0xAD4 DUP8 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xA95 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAAD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xAC5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x25A7 JUMP JUMPDEST SWAP1 POP PUSH2 0xAE0 DUP5 DUP3 PUSH2 0x1DAC JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xB18 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xB2D PUSH2 0x1E0E JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND CALLER EQ PUSH2 0xB45 JUMPI CALLER PUSH2 0xB48 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP4 POP PUSH1 0x1 DUP7 ADD SWAP3 POP SWAP1 POP DUP1 DUP3 GT PUSH2 0xB9B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE MLOAD PUSH32 0x82AF639571738F4EBD4268FB0363D8957EBE1BBB9E78DBA5EBD69EED39B154F0 SWAP1 PUSH2 0xBF6 SWAP1 DUP7 SWAP1 PUSH2 0x4652 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xC17 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC22 PUSH2 0x34C5 JUMP JUMPDEST DUP7 MLOAD SWAP3 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP2 DUP4 EQ PUSH2 0xC99 JUMPI PUSH2 0xC82 DUP8 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC43 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC5B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC73 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x945 JUMP JUMPDEST SWAP1 POP PUSH2 0xC8E DUP5 DUP3 PUSH2 0x1DAC JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xC2B JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xCE9 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD0F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xD27 DUP5 DUP5 DUP5 PUSH2 0x25A7 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD60 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xD75 PUSH2 0x1E0E JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP8 ISZERO ISZERO OR SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH32 0xA8656E308026EEABCE8F0BC18048433252318AB80AC79DA0B3D3D8697DFBA891 SWAP1 PUSH2 0xDDE SWAP1 DUP7 SWAP1 PUSH2 0x4644 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xE1D PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xE2C PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE52 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE DUP10 MLOAD DUP11 SWAP2 SWAP1 DUP2 LT PUSH2 0xE6C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP5 POP DUP9 MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP3 DUP5 EQ PUSH2 0xF0F JUMPI DUP5 DUP10 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xE9C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0xEBC DUP9 DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x25E3 JUMP JUMPDEST SWAP2 POP PUSH2 0xEE8 DUP10 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xECF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x714 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0xEF4 DUP7 DUP3 PUSH2 0x1DAC JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD DUP9 GT PUSH2 0xF04 JUMPI PUSH2 0xF0F JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0xE86 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP5 MLOAD SWAP3 POP DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF6C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xF59 PUSH2 0x351D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xF51 JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP1 DUP4 EQ PUSH2 0x993 JUMPI PUSH2 0xF9B DUP6 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xF8C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x18B3 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xFA9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xF74 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP10 MLOAD GT ISZERO ISZERO PUSH2 0x101C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x485C JUMP JUMPDEST PUSH2 0x1025 DUP10 PUSH2 0x2613 JUMP JUMPDEST PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DIV SWAP7 POP PUSH1 0x7 PUSH1 0xFF DUP9 AND LT PUSH2 0x1054 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x477C JUMP JUMPDEST DUP7 PUSH1 0xFF AND PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1063 JUMPI INVALID JUMPDEST SWAP6 POP PUSH1 0x0 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1073 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1094 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x484C JUMP JUMPDEST PUSH1 0x1 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x10A2 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x10D3 JUMPI DUP9 MLOAD ISZERO PUSH2 0x10CA JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x491C JUMP JUMPDEST PUSH1 0x0 SWAP8 POP PUSH2 0x13E9 JUMP JUMPDEST PUSH1 0x2 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x10E1 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x11BE JUMPI DUP9 MLOAD PUSH1 0x41 EQ PUSH2 0x110B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x471C JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x111A JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x113E DUP10 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x2668 AND JUMP JUMPDEST SWAP4 POP PUSH2 0x1151 DUP10 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0x2668 AND JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP12 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1176 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x46AD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 PUSH1 0x0 DUP7 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x119A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP13 DUP2 AND SWAP1 DUP3 AND EQ SWAP10 POP SWAP3 POP PUSH2 0x13E9 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x11CC JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1303 JUMPI DUP9 MLOAD PUSH1 0x41 EQ PUSH2 0x11F6 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x471C JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1205 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP5 POP PUSH2 0x1229 DUP10 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x2668 AND JUMP JUMPDEST SWAP4 POP PUSH2 0x123C DUP10 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0x2668 AND JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP PUSH1 0x1C ADD DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x12BF JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x12A0 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x0 DUP4 MSTORE SWAP2 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH2 0x1176 SWAP5 POP SWAP3 POP DUP10 SWAP2 DUP10 SWAP2 POP DUP9 SWAP1 PUSH2 0x46AD JUMP JUMPDEST PUSH1 0x4 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1311 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1329 JUMPI PUSH2 0x1322 DUP12 DUP12 DUP12 PUSH2 0x269C JUMP JUMPDEST SWAP8 POP PUSH2 0x13E9 JUMP JUMPDEST PUSH1 0x5 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1337 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x138D JUMPI PUSH2 0x1346 DUP10 PUSH2 0x27A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1381 JUMPI PUSH1 0x0 SWAP8 POP PUSH2 0x13E9 JUMP JUMPDEST PUSH2 0x1322 DUP2 DUP13 DUP13 DUP13 PUSH2 0x27E8 JUMP JUMPDEST PUSH1 0x6 DUP7 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x139B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x13CE JUMPI PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP15 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP8 POP PUSH2 0x13E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x477C JUMP JUMPDEST POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x13FF PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140F PUSH2 0x34C5 JUMP JUMPDEST DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x141E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP6 POP DUP10 MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP4 DUP6 EQ PUSH2 0x14FD JUMPI DUP6 DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x144E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP7 MLOAD PUSH2 0x146A SWAP1 DUP11 SWAP1 PUSH2 0x25E3 JUMP JUMPDEST SWAP3 POP PUSH2 0x14AD DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x147D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP12 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1499 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x28F7 JUMP JUMPDEST SWAP2 POP PUSH2 0x14D9 DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x14C0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP11 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC73 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x14E5 DUP8 DUP3 PUSH2 0x1DAC JUMP JUMPDEST DUP7 MLOAD DUP10 GT PUSH2 0x14F2 JUMPI PUSH2 0x14FD JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1438 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1512 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1538 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xD27 DUP5 DUP5 DUP5 PUSH2 0x1D0E JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x157F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH2 0x15C2 PUSH2 0x15BD DUP9 DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0x2936 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2AF2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x15F7 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND CALLER EQ PUSH2 0x168C JUMPI PUSH2 0x1642 DUP2 DUP8 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP PUSH2 0xFEA SWAP5 POP POP POP POP POP JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1663 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x490C JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD ADDRESS SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP ISZERO ISZERO PUSH2 0x16EE JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND CALLER EQ PUSH2 0x171C JUMPI PUSH1 0x9 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x1759 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48BC JUMP JUMPDEST DUP4 SWAP3 POP DUP3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0xAE25532E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x17EB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3B4B JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP DUP1 ISZERO PUSH2 0x1834 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x475C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND OR SWAP1 SSTORE MLOAD PUSH32 0xD2C6B762299C609BDB96520B58A49BFB80186934D4F71A86A367571A15C03194 SWAP1 PUSH2 0x18A5 SWAP1 DUP5 SWAP1 DUP8 SWAP1 PUSH2 0x46E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 0x18BB PUSH2 0x351D JUMP JUMPDEST PUSH2 0x18C4 DUP3 PUSH2 0x2B32 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x3 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x18F8 JUMPI PUSH1 0x1 JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x190A JUMPI PUSH1 0x2 PUSH2 0x18EE JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MLOAD LT PUSH2 0x1920 JUMPI PUSH1 0x5 PUSH2 0x18EE JUMP JUMPDEST PUSH2 0x100 DUP3 ADD MLOAD TIMESTAMP LT PUSH2 0x1933 JUMPI PUSH1 0x4 PUSH2 0x18EE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1957 JUMPI PUSH1 0x6 PUSH2 0x18EE JUMP JUMPDEST PUSH2 0x120 DUP3 ADD MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD GT ISZERO PUSH2 0x1997 JUMPI PUSH1 0x6 PUSH2 0x18EE JUMP JUMPDEST PUSH1 0x3 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x19C6 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x19DC DUP2 PUSH2 0x257C JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0xF47261B0000000000000000000000000E41D2489571D322189246DAFA5EBDE1F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4699F49800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH2 0x1A6E PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1A7D PUSH2 0x34C5 JUMP JUMPDEST DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1A8C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD MLOAD SWAP5 POP DUP9 MLOAD SWAP4 POP PUSH1 0x0 SWAP3 POP JUMPDEST DUP3 DUP5 EQ PUSH2 0x1B2F JUMPI DUP5 DUP10 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1ABC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1ADC DUP9 DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x25E3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B08 DUP10 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1AEF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP10 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC73 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1B14 DUP7 DUP3 PUSH2 0x1DAC JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD DUP9 GT PUSH2 0x1B24 JUMPI PUSH2 0x1B2F JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1AA6 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B49 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1B59 PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1B7F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE DUP11 MLOAD DUP12 SWAP2 SWAP1 DUP2 LT PUSH2 0x1B99 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x140 ADD MLOAD SWAP6 POP DUP10 MLOAD SWAP5 POP PUSH1 0x0 SWAP4 POP JUMPDEST DUP4 DUP6 EQ PUSH2 0x1C48 JUMPI DUP6 DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1BC9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MSTORE DUP7 MLOAD PUSH2 0x1BE5 SWAP1 DUP11 SWAP1 PUSH2 0x25E3 JUMP JUMPDEST SWAP3 POP PUSH2 0x1BF8 DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x147D JUMPI INVALID JUMPDEST SWAP2 POP PUSH2 0x1C24 DUP11 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1C0B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP4 DUP11 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x714 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1C30 DUP8 DUP3 PUSH2 0x1DAC JUMP JUMPDEST DUP7 MLOAD DUP10 GT PUSH2 0x1C3D JUMPI PUSH2 0x1C48 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1BB3 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x1C9C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48BC JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO PUSH2 0x1CD4 JUMPI PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH32 0x322E302E30000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH2 0x1D16 PUSH2 0x34C5 JUMP JUMPDEST PUSH2 0x1D1E PUSH2 0x351D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1D2C DUP9 PUSH2 0x18B3 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D36 PUSH2 0x1E0E JUMP JUMPDEST SWAP3 POP PUSH2 0x1D44 DUP9 DUP6 DUP6 DUP10 PUSH2 0x1E33 JUMP JUMPDEST PUSH2 0x1D56 DUP9 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x25E3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D62 DUP8 DUP4 PUSH2 0x2B40 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D75 DUP9 DUP6 DUP10 DUP5 DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0x20FE JUMP JUMPDEST PUSH2 0x1D7F DUP9 DUP3 PUSH2 0x2B56 JUMP JUMPDEST SWAP5 POP PUSH2 0x1D96 DUP9 DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP10 PUSH2 0x21BB JUMP JUMPDEST PUSH2 0x1DA1 DUP9 DUP5 DUP8 PUSH2 0x2BB7 JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x1DBA SWAP2 SWAP1 PUSH2 0x2C6F JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1DD0 SWAP2 SWAP1 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1DE9 SWAP2 SWAP1 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x1E02 SWAP2 SWAP1 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 DUP2 ISZERO PUSH2 0x1E2A JUMPI DUP2 PUSH2 0x1E2C JUMP JUMPDEST CALLER JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 MLOAD PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x1E5A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48DC JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x1E9C JUMPI PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x1E9C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48EC JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x1EE9 JUMPI DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO ISZERO PUSH2 0x1EE9 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x472C JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD ISZERO ISZERO PUSH2 0x1F28 JUMPI PUSH2 0x1F07 DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD DUP4 PUSH2 0xFEA JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1F28 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x479C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1F40 DUP3 PUSH1 0xA0 ADD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD PUSH2 0x2CA2 JUMP JUMPDEST PUSH2 0x1F52 DUP4 PUSH1 0x80 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x2CA2 JUMP JUMPDEST LT ISZERO PUSH2 0x1F73 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48FC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1F7F PUSH2 0x34EE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1F93 DUP10 PUSH1 0xA0 ADD MLOAD DUP9 PUSH2 0x25E3 JUMP JUMPDEST SWAP4 POP PUSH2 0x1FA8 DUP10 PUSH1 0x80 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD DUP7 PUSH2 0x2CE6 JUMP JUMPDEST SWAP3 POP PUSH2 0x1FB8 DUP9 PUSH1 0xA0 ADD MLOAD DUP8 PUSH2 0x25E3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FCD DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP5 PUSH2 0x2CE6 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 LT PUSH2 0x2010 JUMPI PUSH1 0x20 DUP1 DUP7 ADD DUP1 MLOAD DUP4 SWAP1 MSTORE DUP1 MLOAD DUP3 ADD DUP5 SWAP1 MSTORE MLOAD MLOAD DUP7 MLOAD DUP3 ADD MSTORE PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0xA0 DUP12 ADD MLOAD DUP8 MLOAD SWAP1 SWAP3 ADD MLOAD PUSH2 0x2008 SWAP3 SWAP1 PUSH2 0x2CE6 JUMP JUMPDEST DUP6 MLOAD MSTORE PUSH2 0x204D JUMP JUMPDEST DUP5 MLOAD DUP4 SWAP1 MSTORE DUP5 MLOAD PUSH1 0x20 SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE DUP6 MLOAD DUP2 ADD MLOAD SWAP1 DUP7 ADD DUP1 MLOAD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP10 ADD MLOAD PUSH1 0x80 DUP11 ADD MLOAD SWAP2 MLOAD MLOAD PUSH2 0x2044 SWAP3 SWAP1 PUSH2 0x2D35 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP8 ADD MLOAD ADD MSTORE JUMPDEST DUP5 MLOAD MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD ADD MLOAD PUSH2 0x2062 SWAP2 SWAP1 PUSH2 0x25E3 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE DUP5 MLOAD MLOAD PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0xC0 DUP12 ADD MLOAD PUSH2 0x207F SWAP3 SWAP2 SWAP1 PUSH2 0x2CE6 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x40 ADD MSTORE DUP5 MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0xA0 DUP11 ADD MLOAD PUSH1 0xE0 DUP12 ADD MLOAD PUSH2 0x20A0 SWAP3 SWAP2 SWAP1 PUSH2 0x2CE6 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x60 ADD MSTORE PUSH1 0x20 DUP6 ADD MLOAD MLOAD PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0xC0 DUP11 ADD MLOAD PUSH2 0x20C1 SWAP3 SWAP2 SWAP1 PUSH2 0x2CE6 JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x20E9 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH2 0x2CE6 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x60 ADD MSTORE POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO PUSH2 0x2120 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x481C JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x2143 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x480C JUMP JUMPDEST DUP5 PUSH1 0xA0 ADD MLOAD PUSH2 0x2156 DUP6 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x2C6F JUMP JUMPDEST GT ISZERO PUSH2 0x2177 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x473C JUMP JUMPDEST PUSH2 0x2185 DUP6 PUSH1 0x80 ADD MLOAD DUP4 PUSH2 0x2CA2 JUMP JUMPDEST PUSH2 0x2193 DUP3 DUP8 PUSH1 0xA0 ADD MLOAD PUSH2 0x2CA2 JUMP JUMPDEST GT ISZERO PUSH2 0x21B4 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x489C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x21C9 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP7 DUP2 ADD MLOAD DUP8 MLOAD DUP5 MLOAD SWAP4 DUP6 ADD MLOAD DUP6 DUP5 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH2 0x140 DUP13 ADD MLOAD PUSH2 0x160 DUP14 ADD MLOAD SWAP7 MLOAD DUP12 SWAP9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP8 DUP9 AND SWAP9 SWAP8 SWAP1 SWAP7 AND SWAP7 PUSH32 0xBCC4C97732E47D9946F229EDB95F5B6323F601300E4690DE719993F3C371129 SWAP7 PUSH2 0x224B SWAP7 DUP16 SWAP7 CALLER SWAP7 SWAP3 SWAP6 SWAP2 SWAP5 SWAP1 SWAP4 SWAP1 PUSH2 0x4572 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0xF47261B0000000000000000000000000E41D2489571D322189246DAFA5EBDE1F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4699F49800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x22DB DUP6 PUSH2 0x140 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x140 DUP5 ADD MLOAD DUP5 MLOAD DUP7 MLOAD DUP5 MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x22F7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x2310 DUP6 PUSH2 0x140 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP6 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x232C DUP2 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x2348 DUP2 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP6 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO PUSH2 0x2398 JUMPI PUSH2 0x2393 DUP2 DUP5 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x238E DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x2C6F JUMP JUMPDEST PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x21B4 JUMP JUMPDEST PUSH2 0x23B0 DUP2 DUP5 DUP8 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x21B4 DUP2 DUP5 DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 PUSH1 0x24 DUP4 ADD DUP2 DUP2 MSTORE DUP8 MLOAD PUSH1 0x84 DUP6 ADD SWAP1 DUP2 MSTORE DUP9 DUP5 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE SWAP5 DUP9 ADD MLOAD PUSH1 0xC4 DUP6 ADD MSTORE SWAP1 DUP8 ADD MLOAD PUSH1 0xE4 DUP5 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x104 DUP5 ADD MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH2 0x124 DUP5 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0x144 DUP5 ADD MSTORE PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x164 DUP5 ADD MSTORE PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x184 DUP5 ADD MSTORE PUSH2 0x120 DUP8 ADD MLOAD PUSH2 0x1A4 DUP5 ADD MSTORE PUSH2 0x140 DUP8 ADD DUP1 MLOAD PUSH2 0x1C4 DUP6 ADD SWAP1 DUP2 MSTORE PUSH2 0x160 DUP10 ADD MLOAD PUSH2 0x1E4 DUP7 ADD MSTORE PUSH2 0x180 SWAP1 MSTORE MLOAD DUP1 MLOAD PUSH2 0x204 DUP6 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP5 SWAP2 SWAP4 DUP5 SWAP4 PUSH1 0x44 DUP8 ADD SWAP3 DUP5 SWAP3 PUSH2 0x224 DUP10 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x24CF JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x24B1 JUMP JUMPDEST POP POP POP POP DUP2 DUP2 SUB PUSH2 0x160 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP11 ADD MLOAD DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 DUP3 ADD SWAP2 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2518 JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x24FA JUMP JUMPDEST POP POP POP DUP10 DUP5 MSTORE POP DUP5 DUP2 SUB PUSH1 0x20 SWAP4 DUP5 ADD SWAP1 DUP2 MSTORE DUP9 MLOAD DUP1 DUP4 MSTORE SWAP1 SWAP4 SWAP2 DUP3 ADD SWAP2 DUP10 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2560 JUMPI DUP4 MLOAD DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2542 JUMP JUMPDEST POP POP POP PUSH1 0x1F NOT DUP9 DUP4 SUB ADD DUP9 MSTORE POP PUSH1 0x40 MSTORE POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2584 PUSH2 0x351D JUMP JUMPDEST PUSH2 0x258D DUP3 PUSH2 0x18B3 JUMP JUMPDEST SWAP1 POP PUSH2 0x2599 DUP3 DUP3 PUSH2 0x2EE7 JUMP JUMPDEST PUSH2 0x1F73 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x2F92 JUMP JUMPDEST PUSH2 0x25AF PUSH2 0x34C5 JUMP JUMPDEST PUSH2 0x25BA DUP5 DUP5 DUP5 PUSH2 0x1D0E JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD SWAP1 SWAP2 POP DUP4 EQ PUSH2 0x1E2C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x488C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2608 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x474C JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT ISZERO ISZERO PUSH2 0x263A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x483C JUMP JUMPDEST DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x264C JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH1 0x0 NOT ADD SWAP1 SWAP3 MSTORE POP PUSH1 0xF8 PUSH1 0x2 EXP SWAP1 DUP2 SWAP1 DIV MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x2693 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x476C JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x26D7 SWAP1 DUP8 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x468D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE DUP2 MLOAD SWAP2 SWAP4 POP SWAP1 DUP3 SWAP1 DUP2 DUP9 GAS STATICCALL DUP1 DUP1 ISZERO PUSH2 0x273E JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x2798 JUMPI PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xC57414C4C45545F4552524F5200000000000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP POP MLOAD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x27CD JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48CC JUMP JUMPDEST PUSH2 0x27DB DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x300E JUMP JUMPDEST DUP3 MLOAD PUSH1 0x13 NOT ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x9363470200000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2825 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x4660 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE DUP2 MLOAD SWAP2 SWAP4 POP SWAP1 DUP3 SWAP1 DUP2 DUP11 GAS STATICCALL DUP1 DUP1 ISZERO PUSH2 0x288C JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x28E6 JUMPI PUSH2 0x28EB JUMP JUMPDEST PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF56414C494441544F525F4552524F5200000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST DUP3 MLOAD SWAP5 POP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x291B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x478C JUMP JUMPDEST PUSH2 0x292E PUSH2 0x2928 DUP6 DUP5 PUSH2 0x2CA2 JUMP JUMPDEST DUP5 PUSH2 0x304B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x5A65726F45785472616E73616374696F6E280000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0x32 DUP4 ADD MSTORE PUSH32 0x61646472657373207369676E6572416464726573732C00000000000000000000 PUSH1 0x3F DUP4 ADD MSTORE PUSH32 0x6279746573206461746100000000000000000000000000000000000000000000 PUSH1 0x55 DUP4 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x5F DUP4 ADD MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x0 SWAP4 DUP5 SWAP4 DUP5 SWAP4 SWAP1 SWAP3 DUP3 SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2A41 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2A22 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 SUB DUP2 KECCAK256 DUP10 MLOAD SWAP1 SWAP8 POP DUP10 SWAP6 POP SWAP1 SWAP4 POP DUP4 SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x2A9B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2A7C JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 SWAP8 DUP3 MSTORE DUP2 ADD SWAP11 SWAP1 SWAP11 MSTORE POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP8 SWAP1 SWAP8 AND SWAP7 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP6 ADD MSTORE POP POP PUSH1 0x80 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x22 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260D PUSH2 0x15BD DUP4 PUSH2 0x3062 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2B4F JUMPI DUP2 PUSH2 0x1E2C JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B5E PUSH2 0x34C5 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x2B7A SWAP2 DUP5 SWAP2 PUSH2 0x2CE6 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x2B92 SWAP3 SWAP2 SWAP1 PUSH2 0x2CE6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xE0 DUP5 ADD MLOAD PUSH2 0x2BAC SWAP2 DUP5 SWAP2 PUSH2 0x2CE6 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH32 0xF47261B0000000000000000000000000E41D2489571D322189246DAFA5EBDE1F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4699F49800000000000000000000000000000000000000000000000000000000 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x140 DUP5 ADD MLOAD DUP5 MLOAD DUP4 MLOAD PUSH2 0x2C2A SWAP3 SWAP2 SWAP1 DUP7 SWAP1 PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x2C43 DUP5 PUSH2 0x160 ADD MLOAD DUP5 DUP7 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x2C5B DUP2 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH2 0x1F28 DUP2 DUP5 DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x2DA4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x2C97 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47BC JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 ISZERO ISZERO PUSH2 0x2CB5 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x2C9B JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x2CC5 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x2C97 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47BC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x2D0A JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x478C JUMP JUMPDEST PUSH2 0x2D15 DUP5 DUP5 DUP5 PUSH2 0x33E9 JUMP JUMPDEST ISZERO PUSH2 0x291B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47EC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x2D59 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x478C JUMP JUMPDEST PUSH2 0x2D64 DUP5 DUP5 DUP5 PUSH2 0x3457 JUMP JUMPDEST ISZERO PUSH2 0x2D84 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47EC JUMP JUMPDEST PUSH2 0x292E PUSH2 0x2928 PUSH2 0x2D94 DUP7 DUP6 PUSH2 0x2CA2 JUMP JUMPDEST PUSH2 0x2D9F DUP7 PUSH1 0x1 PUSH2 0x25E3 JUMP JUMPDEST PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 GT DUP1 ISZERO PUSH2 0x2DC9 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2EDF JUMPI DUP6 MLOAD PUSH1 0x3 LT PUSH2 0x2DF2 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x487C JUMP JUMPDEST POP POP PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP1 ISZERO ISZERO PUSH2 0x2E3F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x482C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH7 0xFFFFFFFFFFFE0 PUSH1 0x3F DUP9 MLOAD ADD AND DUP1 PUSH1 0x84 ADD DUP3 ADD PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x80 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND PUSH1 0x44 DUP5 ADD MSTORE DUP6 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x84 DUP4 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2EC1 JUMPI DUP10 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP10 DUP11 ADD SWAP10 ADD PUSH2 0x2EA9 JUMP JUMPDEST PUSH2 0x200 DUP5 DUP6 DUP5 SUB DUP7 PUSH1 0x0 DUP10 GAS CALL DUP1 ISZERO ISZERO PUSH2 0x2ED9 JUMPI RETURNDATASIZE DUP6 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x2F11 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48DC JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO PUSH2 0x2F53 JUMPI PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x2F53 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48EC JUMP JUMPDEST PUSH2 0x2F5B PUSH2 0x1E0E JUMP JUMPDEST DUP4 MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP4 AND SWAP2 AND EQ PUSH2 0x2F8D JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x47AC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH2 0x140 DUP6 ADD MLOAD PUSH2 0x160 DUP7 ADD MLOAD SWAP4 MLOAD DUP6 SWAP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP5 DUP6 AND SWAP5 SWAP4 SWAP1 SWAP4 AND SWAP3 PUSH32 0xDC47B3613D9FE400085F6DBDC99453462279057E6207385042827ED6B1A62CF7 SWAP3 PUSH2 0x3002 SWAP3 CALLER SWAP3 SWAP1 PUSH2 0x45F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x3039 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x48CC JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x3059 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x4F72646572280000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x61646472657373206D616B6572416464726573732C0000000000000000000000 PUSH1 0x26 DUP4 ADD MSTORE PUSH32 0x616464726573732074616B6572416464726573732C0000000000000000000000 PUSH1 0x3B DUP4 ADD MSTORE PUSH32 0x6164647265737320666565526563697069656E74416464726573732C00000000 PUSH1 0x50 DUP4 ADD MSTORE PUSH32 0x616464726573732073656E646572416464726573732C00000000000000000000 PUSH1 0x6C DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724173736574416D6F756E742C00000000000000 PUSH1 0x82 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724173736574416D6F756E742C00000000000000 PUSH1 0x9B DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724665652C000000000000000000000000000000 PUSH1 0xB4 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724665652C000000000000000000000000000000 PUSH1 0xC5 DUP4 ADD MSTORE PUSH32 0x75696E743235362065787069726174696F6E54696D655365636F6E64732C0000 PUSH1 0xD6 DUP4 ADD MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0xF4 DUP4 ADD MSTORE PUSH32 0x6279746573206D616B65724173736574446174612C0000000000000000000000 PUSH2 0x101 DUP4 ADD MSTORE PUSH32 0x62797465732074616B6572417373657444617461000000000000000000000000 PUSH2 0x116 DUP4 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH2 0x12A DUP4 ADD MSTORE DUP3 MLOAD PUSH2 0x10B DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH2 0x12B SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x0 SWAP4 DUP5 SWAP4 DUP5 SWAP4 DUP5 SWAP4 SWAP2 SWAP3 SWAP2 DUP3 SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x32CC JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x32AD JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 SUB DUP2 KECCAK256 PUSH2 0x140 DUP12 ADD MLOAD DUP1 MLOAD SWAP2 SWAP10 POP SWAP6 POP SWAP1 SWAP4 POP DUP4 SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x332B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x330C JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 SUB DUP2 KECCAK256 PUSH2 0x160 DUP12 ADD MLOAD DUP1 MLOAD SWAP2 SWAP9 POP SWAP6 POP SWAP1 SWAP4 POP DUP4 SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x338A JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x336B JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 PUSH1 0x1F NOT DUP10 ADD DUP1 MLOAD PUSH2 0x140 DUP12 ADD DUP1 MLOAD PUSH2 0x160 SWAP1 SWAP13 ADD DUP1 MLOAD SWAP11 DUP5 MSTORE SWAP9 DUP2 MSTORE SWAP3 DUP9 MSTORE PUSH2 0x1A0 DUP3 KECCAK256 SWAP2 MSTORE SWAP9 SWAP1 MSTORE POP POP POP SWAP2 SWAP1 MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP5 GT PUSH2 0x340E JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x478C JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x3419 JUMPI POP DUP5 ISZERO JUMPDEST ISZERO PUSH2 0x3427 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x993 JUMP JUMPDEST DUP4 DUP1 ISZERO ISZERO PUSH2 0x3431 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x3440 DUP6 DUP5 PUSH2 0x2CA2 JUMP JUMPDEST PUSH2 0x344C PUSH2 0x3E8 DUP4 PUSH2 0x2CA2 JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP5 GT PUSH2 0x347C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6AF SWAP1 PUSH2 0x478C JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x3487 JUMPI POP DUP5 ISZERO JUMPDEST ISZERO PUSH2 0x3495 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x993 JUMP JUMPDEST DUP4 DUP1 ISZERO ISZERO PUSH2 0x349F JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP DUP4 PUSH2 0x34AF DUP6 DUP4 PUSH2 0x25E3 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 0x34B8 JUMPI INVALID JUMPDEST MOD SWAP1 POP PUSH2 0x3440 DUP6 DUP5 PUSH2 0x2CA2 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x120 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x3503 PUSH2 0x34C5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3510 PUSH2 0x34C5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E2C DUP3 CALLDATALOAD PUSH2 0x49D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x355A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x356D PUSH2 0x3568 DUP3 PUSH2 0x497E JUMP JUMPDEST PUSH2 0x4957 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35AB JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x3595 DUP9 DUP3 PUSH2 0x36FB JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x357F JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x35C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x35D4 PUSH2 0x3568 DUP3 PUSH2 0x497E JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35AB JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x35FC DUP9 DUP3 PUSH2 0x374A JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x35E6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x3623 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3631 PUSH2 0x3568 DUP3 PUSH2 0x497E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x3656 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35AB JUMPI DUP2 PUSH2 0x366C DUP9 DUP3 PUSH2 0x368E JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3659 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E2C DUP3 CALLDATALOAD PUSH2 0x49DD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E2C DUP3 CALLDATALOAD PUSH2 0x49E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E2C DUP3 CALLDATALOAD PUSH2 0x49E5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E2C DUP3 MLOAD PUSH2 0x49E5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1F DUP4 ADD DUP5 SGT PUSH2 0x36C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x36DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x36F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x370C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x371A PUSH2 0x3568 DUP3 PUSH2 0x499F JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x3736 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3741 DUP4 DUP3 DUP5 PUSH2 0x4A03 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x375D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3768 PUSH2 0x180 PUSH2 0x4957 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3776 DUP5 DUP5 PUSH2 0x353D JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x3787 DUP5 DUP5 DUP4 ADD PUSH2 0x353D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x379B DUP5 DUP3 DUP6 ADD PUSH2 0x353D JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x37AF DUP5 DUP3 DUP6 ADD PUSH2 0x353D JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x37C3 DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x37D7 DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x37EB DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0x37FF DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0x3814 DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x382A DUP5 DUP3 DUP6 ADD PUSH2 0x368E JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x384C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3858 DUP5 DUP3 DUP6 ADD PUSH2 0x36FB JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x387A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3886 DUP5 DUP3 DUP6 ADD PUSH2 0x36FB JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x292E DUP5 DUP5 PUSH2 0x353D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x38D0 DUP6 DUP6 PUSH2 0x353D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x38E1 DUP6 DUP3 DUP7 ADD PUSH2 0x353D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x390A DUP6 DUP6 PUSH2 0x353D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x38E1 DUP6 DUP3 DUP7 ADD PUSH2 0x3682 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x392D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3944 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x292E DUP5 DUP3 DUP6 ADD PUSH2 0x35B5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x397C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3988 DUP7 DUP3 DUP8 ADD PUSH2 0x35B5 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39B1 DUP7 DUP3 DUP8 ADD PUSH2 0x3612 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39DA DUP7 DUP3 DUP8 ADD PUSH2 0x3549 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x39F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A1C DUP7 DUP3 DUP8 ADD PUSH2 0x35B5 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x39B1 DUP7 DUP3 DUP8 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x292E DUP5 DUP5 PUSH2 0x368E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x38D0 DUP6 DUP6 PUSH2 0x368E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3A80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A8C DUP8 DUP8 PUSH2 0x368E JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3A9D DUP8 DUP3 DUP9 ADD PUSH2 0x353D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3ABA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AC6 DUP8 DUP3 DUP9 ADD PUSH2 0x36B2 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3AE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3AF3 DUP7 DUP7 PUSH2 0x368E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3B04 DUP7 DUP3 DUP8 ADD PUSH2 0x353D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39DA DUP7 DUP3 DUP8 ADD PUSH2 0x36FB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x292E DUP5 DUP5 PUSH2 0x369A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x292E DUP5 DUP5 PUSH2 0x36A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x292E DUP5 DUP3 DUP6 ADD PUSH2 0x374A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3BB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BD7 DUP8 DUP3 DUP9 ADD PUSH2 0x374A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C00 DUP8 DUP3 DUP9 ADD PUSH2 0x374A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C29 DUP8 DUP3 DUP9 ADD PUSH2 0x36FB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C52 DUP8 DUP3 DUP9 ADD PUSH2 0x36FB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3C73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C96 DUP7 DUP3 DUP8 ADD PUSH2 0x374A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3B04 DUP7 DUP3 DUP8 ADD PUSH2 0x368E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3CC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3CCC DUP10 DUP10 PUSH2 0x368E JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3CDD DUP10 DUP3 DUP11 ADD PUSH2 0x353D JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D06 DUP10 DUP3 DUP11 ADD PUSH2 0x36B2 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D31 DUP10 DUP3 DUP11 ADD PUSH2 0x36B2 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49D1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D5A DUP3 PUSH2 0x49CD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x3D6C DUP4 PUSH2 0x49C7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3D9C JUMPI PUSH2 0x3D82 DUP7 DUP4 MLOAD PUSH2 0x4524 JUMP JUMPDEST PUSH2 0x3D8B DUP3 PUSH2 0x49C7 JUMP JUMPDEST PUSH1 0x60 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x3D6F JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49DD JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49E2 JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49E5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DCC DUP3 PUSH2 0x49CD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH2 0x3DE0 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4A0F JUMP JUMPDEST PUSH2 0x3DE9 DUP2 PUSH2 0x4A3B JUMP JUMPDEST SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49F8 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36355F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH32 0x494E56414C49445F54414B455200000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE DUP2 MSTORE PUSH32 0x4F524445525F4F56455246494C4C000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1A DUP2 MSTORE PUSH32 0x41535345545F50524F58595F414C52454144595F455849535453000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x15 DUP2 MSTORE PUSH32 0x5349474E41545552455F554E535550504F525445440000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x4449564953494F4E5F42595F5A45524F00000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x494E56414C49445F4F524445525F5349474E4154555245000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH32 0x494E56414C49445F4D414B455200000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP2 MSTORE PUSH32 0x494E56414C49445F54585F484153480000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x494E56414C49445F5349474E4154555245000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE DUP2 MSTORE PUSH32 0x524F554E44494E475F4552524F52000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x4641494C45445F455845435554494F4E00000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH32 0x54414B45525F4F56455250415900000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54414B45525F414D4F554E54000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1A DUP2 MSTORE PUSH32 0x41535345545F50524F58595F444F45535F4E4F545F4558495354000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x21 DUP2 MSTORE PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x5349474E41545552455F494C4C4547414C000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1E DUP2 MSTORE PUSH32 0x4C454E4754485F475245415445525F5448414E5F305F52455155495245440000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x17 DUP2 MSTORE PUSH32 0x494E56414C49445F4E45575F4F524445525F45504F4348000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1E DUP2 MSTORE PUSH32 0x4C454E4754485F475245415445525F5448414E5F335F52455155495245440000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP2 MSTORE PUSH32 0x434F4D504C4554455F46494C4C5F4641494C4544000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH32 0x494E56414C49445F46494C4C5F50524943450000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH32 0x5245454E5452414E43595F494C4C4547414C0000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x13 DUP2 MSTORE PUSH32 0x4F4E4C595F434F4E54524143545F4F574E455200000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x10 DUP2 MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE DUP2 MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x18 DUP2 MSTORE PUSH32 0x4E454741544956455F5350524541445F52455155495245440000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP2 MSTORE PUSH32 0x494E56414C49445F54585F5349474E4154555245000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 DUP2 MSTORE PUSH32 0x4C454E4754485F305F5245515549524544000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x44B2 DUP5 DUP3 PUSH2 0x3DAF JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x44C5 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x44D8 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1F28 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST DUP1 MLOAD PUSH2 0x120 DUP4 ADD SWAP1 PUSH2 0x44FD DUP5 DUP3 PUSH2 0x44A1 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4510 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x44A1 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1F28 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x4535 DUP5 DUP3 PUSH2 0x455B JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x4548 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1F28 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x3D49 DUP2 PUSH2 0x49F2 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x3D40 JUMP JUMPDEST PUSH2 0x100 DUP2 ADD PUSH2 0x4581 DUP3 DUP12 PUSH2 0x3D40 JUMP JUMPDEST PUSH2 0x458E PUSH1 0x20 DUP4 ADD DUP11 PUSH2 0x3D40 JUMP JUMPDEST PUSH2 0x459B PUSH1 0x40 DUP4 ADD DUP10 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x45A8 PUSH1 0x60 DUP4 ADD DUP9 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x45B5 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x45C2 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x3DAF JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x45D4 DUP2 DUP6 PUSH2 0x3DC1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x45E8 DUP2 DUP5 PUSH2 0x3DC1 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x4604 DUP3 DUP7 PUSH2 0x3D40 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4616 DUP2 DUP6 PUSH2 0x3DC1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x462A DUP2 DUP5 PUSH2 0x3DC1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1E2C DUP2 DUP5 PUSH2 0x3D4F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x3DA6 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x3DAF JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x466E DUP3 DUP7 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x467B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3D40 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x462A DUP2 DUP5 PUSH2 0x3DC1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x469B DUP3 DUP6 PUSH2 0x3DAF JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x292E DUP2 DUP5 PUSH2 0x3DC1 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x46BB DUP3 DUP8 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x46C8 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x455B JUMP JUMPDEST PUSH2 0x46D5 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3DAF JUMP JUMPDEST PUSH2 0x462A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3DAF JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x46F0 DUP3 DUP6 PUSH2 0x3DB8 JUMP JUMPDEST PUSH2 0x1E2C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3D40 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1E2C DUP2 DUP5 PUSH2 0x3DC1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x3DF6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3DFF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3E2F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3E5F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3E8F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3EBF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3EEF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3F45 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3F75 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3FA5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x3FD5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4005 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4035 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4065 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4095 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x40C5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x40F5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4125 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4155 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4185 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x41DB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x420B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x423B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x426B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x429B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x42CB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x42FB JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x432B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x435B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x43B1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x43E1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4411 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4441 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x260D DUP2 PUSH2 0x4471 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x44A1 JUMP JUMPDEST PUSH2 0x120 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x44EB JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x260D DUP3 DUP5 PUSH2 0x4524 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x49B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 PUSH1 0x2 EXP SUB NOT AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260D DUP3 PUSH2 0x49D1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A2A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4A12 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1F28 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 SWAP3 NOT 0xd5 SLOAD 0xeb SWAP4 SHR 0xb8 CALLDATALOAD DUP10 0x2b DUP13 0x5e SIGNEXTEND SHL SLOAD MSTORE CODESIZE 0x49 0xec 0xcd KECCAK256 0xd5 SWAP13 CODESIZE PUSH23 0x634AA7A242346C6578706572696D656E74616CF5003700 ",
				"sourceMap": "145063:514:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;75750:42;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;75750:42:1;;;;;;;;;;;;;;;;;;;;;;;;;107303:647;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;107303:647:1;;;;;;;;;;;;;;;;;75840:42;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;75840:42:1;;;;;;;;;;;;;;;;;93883:445;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;93883:445:1;;;;;;;;;;;132706:2875;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;132706:2875:1;;;;;;;;;;;;;;;;;105309:1515;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;105309:1515:1;;;;;;;;;125153:51;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;125153:51:1;;;;;;;;;;;;;;;;;118913:260;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;118913:260:1;;;;;;;;;108430:659;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;108430:659:1;;;;;;;;;76491:1076;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;76491:1076:1;;;;;;;;;109648:632;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;109648:632:1;;;;;;;;;126269:154;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;126269:154:1;;;;;;;;;;;;;;;;;120816:45;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;120816:45:1;;;;;;;;;104527:395;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;104527:395:1;;;;;;;;;94565:412;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;94565:412:1;;;;;;;;;93477:71;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;93477:71:1;;;;;;;;;110668:1503;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;110668:1503:1;;;;;;;;;119367:419;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;119367:419:1;;;;;;;;;;;;;;;;;93357:63;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;93357:63:1;;;;;;;;;75050:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;75050:20:1;;;;95349:4836;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;95349:4836:1;;;;;;;;;116879:1899;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;116879:1899:1;;;;;;;;;77884:374;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;77884:374:1;;;;;;;;;121275:1456;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;121275:1456:1;;;;;;;;;125413:666;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;125413:666:1;;;;;;;;;78887:2261;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;78887:2261:1;;;;;;;;;;;;;;;;;78489:124;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;78489:124:1;;;;;;;;;76100:67;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;76100:67:1;;;;;;;;;21685:185;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21685:185:1;;;;;;;;;;;;112628:1488;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;112628:1488:1;;;;;;;;;22604:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22604:33:1;;;;114504:1914;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;114504:1914:1;;;;;;;;;120913:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;120913:36:1;;;;75292:167;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;75292:167:1;;;;;;;;;145244:40;;8:9:-1;5:2;;;30:1;27;20:12;5:2;145244:40:1;;;;75750:42;;;;;;;;;;;;;:::o;107303:647::-;107510:35;;:::i;:::-;107561:20;107612:9;107665:36;;:::i;:::-;19158:6;;;;19157:7;19136:72;;;;-1:-1:-1;;;;;19136:72:1;;;;;;;;;;;;;;;;;19262:6;:13;;-1:-1:-1;;19262:13:1;19271:4;19262:13;;;107584;;;-1:-1:-1;19262:6:1;-1:-1:-1;107607:304:1;107627:17;;;107607:304;;107704:131;107739:6;107746:1;107739:9;;;;;;;;;;;;;;;;;;107766:21;107788:1;107766:24;;;;;;;;;;;;;;;;;;107808:10;107819:1;107808:13;;;;;;;;;;;;;;;;;;107704:17;:131::i;:::-;107665:170;;107849:51;107864:16;107882:17;107849:14;:51::i;:::-;107646:3;;;;;107607:304;;;-1:-1:-1;;19384:5:1;19375:14;;-1:-1:-1;;19375:14:1;;;-1:-1:-1;107303:647:1;;-1:-1:-1;;;107303:647:1:o;75840:42::-;;;;;;;;;;;;;;;:::o;93883:445::-;-1:-1:-1;;;;;94019:27:1;;94036:10;94019:27;94015:260;;94087:126;94125:4;94151:13;94186:9;;94087:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;94087:16:1;;-1:-1:-1;;;;;94087:126:1:i;:::-;94062:202;;;;;;-1:-1:-1;;;;;94062:202:1;;;;;;;;;-1:-1:-1;;94284:15:1;;;;:9;:15;;;;;;;;-1:-1:-1;;;;;94284:30:1;;;;;;;;;;:37;;-1:-1:-1;;94284:37:1;94317:4;94284:37;;;93883:445::o;132706:2875::-;132942:59;;:::i;:::-;133407:39;;:::i;:::-;133482:40;;:::i;:::-;133591:20;19158:6;;;;19157:7;19136:72;;;;-1:-1:-1;;;;;19136:72:1;;;;;;;;;19262:6;:13;;-1:-1:-1;;19262:13:1;19271:4;19262:13;;;133271:24;;;;;133243:25;;;;:52;;;;133333:24;;;133305:25;;;:52;133449:23;133271:9;133449:12;:23::i;:::-;133407:65;;133525:24;133538:10;133525:12;:24::i;:::-;133482:67;;133614:26;:24;:26::i;:::-;133591:49;;133703:132;133736:9;133759:13;133786:12;133812:13;133703:19;:132::i;:::-;133845:135;133878:10;133902:14;133930:12;133956:14;133845:19;:135::i;:::-;133990:39;134007:9;134018:10;133990:16;:39::i;:::-;134106:195;134147:9;134170:10;134194:13;:41;;;134249:14;:42;;;134106:27;:195::i;:::-;134425:23;;:46;;;;134545;;134085:216;;-1:-1:-1;134346:255:1;;134375:9;;134398:13;;134425:46;;134346:15;:255::i;:::-;134692:24;;;;;:47;;;;134814;;134611:260;;134640:10;;134664:14;;134692:47;;;134611:15;:260::i;:::-;134915:205;134946:9;134969:12;134995:13;:23;;;135032:13;:41;;;135087:18;:23;;;134915:17;:205::i;:::-;135130:209;135161:10;135185:12;135211:14;:24;;;135249:14;:42;;;135305:18;:24;;;135130:17;:209::i;:::-;135404:134;135437:9;135460:10;135484:12;135510:18;135404:19;:134::i;:::-;-1:-1:-1;;19384:5:1;19375:14;;-1:-1:-1;;19375:14:1;;;-1:-1:-1;132706:2875:1;;-1:-1:-1;;;;132706:2875:1:o;105309:1515::-;105480:30;;:::i;:::-;105573;105606:104;105638:5;105657:20;105691:9;105606:18;:104::i;:::-;105573:137;;106286:3;106207:17;106142;106136:24;106040:2;106021:17;106017:26;105932:7;105861:3;105831:532;106379:7;106376:2;;;106431:17;106425:24;106412:11;106405:45;106525:2;106506:17;106502:26;106496:33;106491:2;106478:11;106474:20;106467:63;106605:2;106586:17;106582:26;106576:33;106571:2;106558:11;106554:20;106547:63;106685:2;106666:17;106662:26;106656:33;106651:2;106638:11;106634:20;106627:63;106376:2;-1:-1:-1;105309:1515:1;;;;;;;:::o;125153:51::-;;;;;;;;;;;;-1:-1:-1;;;;;125153:51:1;;:::o;118913:260::-;119022:20;19158:6;;119022:20;;19158:6;;19157:7;19136:72;;;;-1:-1:-1;;;;;19136:72:1;;;;;;;;;-1:-1:-1;;19262:6:1;:13;;-1:-1:-1;;19262:13:1;19271:4;19262:13;;;119045;;;119068:99;119088:17;;;119068:99;;119126:30;119146:6;119153:1;119146:9;;;;;;;;;;;;;;;;;;119126:19;:30::i;:::-;119107:3;;119068:99;;;-1:-1:-1;;19384:5:1;19375:14;;-1:-1:-1;;19375:14:1;;;-1:-1:-1;118913:260:1:o;108430:659::-;108643:35;;:::i;:::-;108694:20;108745:9;108798:36;;:::i;:::-;19158:6;;;;19157:7;19136:72;;;;-1:-1:-1;;;;;19136:72:1;;;;;;;;;19262:6;:13;;-1:-1:-1;;19262:13:1;19271:4;19262:13;;;108717;;;-1:-1:-1;19262:6:1;-1:-1:-1;108740:310:1;108760:17;;;108740:310;;108837:137;108878:6;108885:1;108878:9;;;;;;;;;;;;;;;;;;108905:21;108927:1;108905:24;;;;;;;;;;;;;;;;;;108947:10;108958:1;108947:13;;;;;;;;;;;;;;;;;;108837:23;:137::i;:::-;108798:176;;108988:51;109003:16;109021:17;108988:14;:51::i;:::-;108779:3;;;;;108740:310;;76491:1076;76595:20;19158:6;;76595:20;;;;;;19158:6;;19157:7;19136:72;;;;-1:-1:-1;;;;;19136:72:1;;;;;;;;;19262:6;:13;;-1:-1:-1;;19262:13:1;19271:4;19262:13;;;76618:26;:24;:26::i;:::-;76595:49;-1:-1:-1;;;;;;76926:26:1;;76942:10;76926:26;:52;;76968:10;76926:52;;;76963:1;76926:52;-1:-1:-1;;;;;77144:24:1;;;;;;;:10;:24;;;;;;;;:39;;;;;;;;;;76902:76;;-1:-1:-1;77109:1:1;77090:20;;;-1:-1:-1;77144:39:1;-1:-1:-1;77272:29:1;;;77251:99;;;;-1:-1:-1;;;;;77251:99:1;;;;;;;;;-1:-1:-1;;;;;77390:24:1;;;;;;;:10;:24;;;;;;;;:39;;;;;;;;;;;;;;:55;;;77460:100;;;;;77432:13;;77460:100;;;;;;;;;;-1:-1:-1;;19384:5:1;19375:14;;-1:-1:-1;;19375:14:1;;;-1:-1:-1;;;76491:1076:1:o;109648:632::-;109841:35;;:::i;:::-;109892:20;109943:9;109996:36;;:::i;:::-;109915:6;:13;109892:36;;109955:1;109943:13;;109938:303;109958:17;;;109938:303;;110035:130;110069:6;110076:1;110069:9;;;;;;;;;;;;;;;;;;110096:21;110118:1;110096:24;;;;;;;;;;;;;;;;;;110138:10;110149:1;110138:13;;;;;;;;;;;;;;;;;;110035:16;:130::i;:::-;109996:169;;110179:51;110194:16;110212:17;110179:14;:51::i;:::-;109977:3;;;;;109938:303;;;109648:632;;;;;;;;:::o;126269:154::-;-1:-1:-1;;;;;;126390:26:1;;126360:7;126390:26;;;:12;:26;;;;;;-1:-1:-1;;;;;126390:26:1;126269:154;;;;:::o;120816:45::-;;;;;;;;;;;;;;;:::o;104527:395::-;104718:30;;:::i;:::-;19158:6;;;;19157:7;19136:72;;;;-1:-1:-1;;;;;19136:72:1;;;;;;;;;19262:6;:13;;-1:-1:-1;;19262:13:1;19271:4;19262:13;;;104778:109;104815:5;104834:20;104868:9;104778:23;:109::i;:::-;19384:5;19375:14;;-1:-1:-1;;19375:14:1;;;104764:123;104527:395;-1:-1:-1;;;;104527:395:1:o;94565:412::-;94719:21;19158:6;;;;19157:7;19136:72;;;;-1:-1:-1;;;;;19136:72:1;;;;;;;;;19262:6;:13;;-1:-1:-1;;19262:13:1;19271:4;19262:13;;;94743:26;:24;:26::i;:::-;-1:-1:-1;;;;;94779:32:1;;;;;;;:17;:32;;;;;;;;:50;;;;;;;;;;;;;;:61;;-1:-1:-1;;94779:61:1;;;;;;;94855:115;94779:32;;-1:-1:-1;94779:50:1;;94855:115;;;;94779:61;;94855:115;;;;;;;;;;-1:-1:-1;;19384:5:1;19375:14;;-1:-1:-1;;19375:14:1;;;-1:-1:-1;94565:412:1:o;93477:71::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;110668:1503::-;110866:35;;:::i;:::-;110917:27;110982:20;111033:9;111419:37;111610:36;;:::i;:::-;19158:6;;;;19157:7;19136:72;;;;-1:-1:-1;;;;;19136:72:1;;;;;;;;;19262:6;:13;;-1:-1:-1;;19262:13:1;19271:4;19262:13;;;110947:9;;:6;;19262;110947:9;;;;;;;;;;;;;;:24;;;110917:54;;111005:6;:13;110982:36;;111045:1;111033:13;;111028:1104;111048:17;;;111028:1104;;111322:14;111295:6;111302:1;111295:9;;;;;;;;;;;;;;;;;;:24;;:41;;;;111459:70;111467:20;111489:16;:39;;;111459:7;:70::i;:::-;111419:110;;111649:136;111684:6;111691:1;111684:9;;;;;;;;;;;;;;;;;;111711:29;111758:10;111769:1;111758:13;;;;;;;;;111649:136;111610:175;;111870:51;111885:16;111903:17;111870:14;:51::i;:::-;112019:39;;;;:63;-1:-1:-1;112015:107:1;;112102:5;;112015:107;111067:3;;;;;111028:1104;;;-1:-1:-1;;19384:5:1;19375:14;;-1:-1:-1;;19375:14:1;;;-1:-1:-1;110668:1503:1;;;-1:-1:-1;;;;;110668:1503:1:o;119367:419::-;119467:20;119510;119556:38;119650:9;119533:6;:13;119510:36;;119622:12;119597:38;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;119556:79;;119662:1;119650:13;;119645:108;119665:17;;;119645:108;;119719:23;119732:6;119739:1;119732:9;;;;;;;;;;;;;;;;;;119719:12;:23::i;:::-;119703:10;119714:1;119703:13;;;;;;;;;;;;;;;;;;:39;119684:3;;119645:108;;93357:63;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;75050:20::-;;;-1:-1:-1;;;;;75050:20:1;;:::o;95349:4836::-;95511:12;95701:22;95942:27;96063:7;96080:9;96099;96118:17;99182:24;95579:1;95560:9;:16;:20;95539:97;;;;;;-1:-1:-1;;;;;95539:97:1;;;;;;;;;95732:23;:9;:21;:23::i;:::-;-1:-1:-1;;;95726:30:1;;;-1:-1:-1;95854:29:1;95829:55;;;;95808:123;;;;-1:-1:-1;;;;;95808:123:1;;;;;;;;;95986:16;95972:31;;;;;;;;;;95942:61;-1:-1:-1;96485:21:1;96468:13;:38;;;;;;;;;96464:3371;;;96522:27;;-1:-1:-1;;;;;96522:27:1;;;;;;;;96464:3371;96831:21;96814:13;:38;;;;;;;;;96810:3025;;;96893:16;;:21;96868:97;;;;-1:-1:-1;;;;;96868:97:1;;;;;;;;;96989:5;;-1:-1:-1;97008:14:1;;96810:3025;97095:20;97078:13;:37;;;;;;;;;97074:2761;;;97156:16;;97176:2;97156:22;97131:99;;;;-1:-1:-1;;;;;97131:99:1;;;;;;;;;97254:9;97264:1;97254:12;;;;;;;;;;;;;;-1:-1:-1;;;97254:12:1;;;;;;97248:19;;-1:-1:-1;97285:24:1;:9;97307:1;97285:24;:21;:24;:::i;:::-;97281:28;-1:-1:-1;97327:25:1;:9;97349:2;97327:25;:21;:25;:::i;:::-;97323:29;;97378:102;97405:4;97427:1;97446;97465;97378:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;97378:102:1;;-1:-1:-1;;97378:102:1;;-1:-1:-1;;;;;97504:26:1;;;;;;;;-1:-1:-1;97378:102:1;-1:-1:-1;97544:14:1;;-1:-1:-1;97544:14:1;97074:2761;97635:21;97618:13;:38;;;;;;;;;97614:2221;;;97697:16;;97717:2;97697:22;97672:99;;;;-1:-1:-1;;;;;97672:99:1;;;;;;;;;97795:9;97805:1;97795:12;;;;;;;;;;;;;;-1:-1:-1;;;97795:12:1;;;;;;97789:19;;-1:-1:-1;97826:24:1;:9;97848:1;97826:24;:21;:24;:::i;:::-;97822:28;-1:-1:-1;97868:25:1;:9;97890:2;97868:25;:21;:25;:::i;:::-;97864:29;;97919:225;98050:4;97956:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;97956:116:1;;;97946:127;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;97946:127:1;;;;;;;;;;;;-1:-1:-1;97919:225:1;;;;;;;;;;-1:-1:-1;97946:127:1;-1:-1:-1;98091:1:1;;98110;;-1:-1:-1;98129:1:1;;97919:225;;97614:2221;98392:20;98375:13;:37;;;;;;;;;98371:1464;;;98438:116;98478:4;98500:13;98531:9;98438:22;:116::i;:::-;98428:126;-1:-1:-1;98568:14:1;;98371:1464;99081:23;99064:13;:40;;;;;;;;;99060:775;;;99209:26;:9;:24;:26::i;:::-;-1:-1:-1;;;;;99308:32:1;;;;;;;:17;:32;;;;;;;;:50;;;;;;;;;;99182:53;;-1:-1:-1;99308:50:1;;99307:51;99303:102;;;99385:5;99378:12;;;;99303:102;99428:153;99471:16;99505:4;99527:13;99558:9;99428:25;:153::i;99060:775::-;99717:23;99700:13;:40;;;;;;;;;99696:139;;;99766:15;;;;:9;:15;;;;;;;;-1:-1:-1;;;;;99766:30:1;;;;;;;;;;;;;-1:-1:-1;99810:14:1;;99696:139;100147:31;;-1:-1:-1;;;;;100147:31:1;;;;;;;;95349:4836;;;;;;;;;;;;;:::o;116879:1899::-;117062:35;;:::i;:::-;117113:27;117178:20;117229:9;117619:37;117925;118216:36;;:::i;:::-;117143:6;117150:1;117143:9;;;;;;;;;;;;;;;;;;:24;;;117113:54;;117201:6;:13;117178:36;;117241:1;117229:13;;117224:1515;117244:17;;;117224:1515;;117523:14;117496:6;117503:1;117496:9;;;;;;;;;;;;;;;;;;;:24;;:41;117689:39;;117659:70;;117667:20;;117659:7;:70::i;:::-;117619:110;;117965:170;118004:6;118011:1;118004:9;;;;;;;;;;;;;;;;;;:26;;;118048:6;118055:1;118048:9;;;;;;;;;;;;;;;;;;:26;;;118092:29;117965:21;:170::i;:::-;117925:210;;118255:135;118289:6;118296:1;118289:9;;;;;;;;;;;;;;;;;;118316:29;118363:10;118374:1;118363:13;;;;;;;;;118255:135;118216:174;;118475:51;118490:16;118508:17;118475:14;:51::i;:::-;118626:39;;:63;-1:-1:-1;118622:107:1;;118709:5;;118622:107;117263:3;;;;;117224:1515;;;116879:1899;;;;;;;;;;;:::o;77884:374::-;78060:30;;:::i;:::-;19158:6;;;;19157:7;19136:72;;;;-1:-1:-1;;;;;19136:72:1;;;;;;;;;19262:6;:13;;-1:-1:-1;;19262:13:1;19271:4;19262:13;;;78120:103;78151:5;78170:20;78204:9;78120:17;:103::i;121275:1456::-;121489:21;;121579:23;;-1:-1:-1;;;;;121489:21:1;:35;121468:100;;;;-1:-1:-1;;;;;121468:100:1;;;;;;;;;121605:113;121623:94;121658:4;121676:13;121703:4;;121623:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;121623:21:1;;-1:-1:-1;;;;;121623:94:1:i;:::-;121605:17;:113::i;:::-;121805:29;;;;:12;:29;;;;;;121579:139;;-1:-1:-1;121805:29:1;;121804:30;121783:92;;;;-1:-1:-1;;;;;121783:92:1;;;;;;;;;-1:-1:-1;;;;;121961:27:1;;121978:10;121961:27;121957:410;;122063:137;122101:15;122138:13;122173:9;;122063:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;122063:16:1;;-1:-1:-1;;;;;122063:137:1:i;:::-;122038:216;;;;;;-1:-1:-1;;;;;122038:216:1;;;;;;;;;122319:21;:37;;-1:-1:-1;;122319:37:1;-1:-1:-1;;;;;122319:37:1;;;;;121957:410;122408:29;;;;:12;:29;;;;;;;:36;;-1:-1:-1;;122408:36:1;122440:4;122408:36;;;122475:32;122483:4;;122502;;;;122475:32;122502:4;;;;122475:32;;;;;;;;;;;;;;;;;;;;;;;;122454:95;;;;;;-1:-1:-1;;;;;122454:95:1;;;;;;;;;-1:-1:-1;;;;;122637:27:1;;122654:10;122637:27;122633:92;;122680:21;:34;;-1:-1:-1;;122680:34:1;;;122633:92;121275:1456;;;;;;;:::o;125413:666::-;75218:5;;125510:30;;;;;;-1:-1:-1;;;;;75218:5:1;75204:10;:19;75183:85;;;;-1:-1:-1;;;;;75183:85:1;;;;;;;;;125555:10;125510:56;;125661:18;-1:-1:-1;;;;;125661:29:1;;:31;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;125661:31:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;125661:31:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;125661:31:1;;;;;;;;;-1:-1:-1;;;;;;125730:26:1;;;;;;:12;:26;;;;;;125639:53;;-1:-1:-1;;;;;;125730:26:1;;-1:-1:-1;125787:31:1;;125766:104;;;;-1:-1:-1;;;;;125766:104:1;;;;;;;;;-1:-1:-1;;;;;;125930:26:1;;;;;;:12;:26;;;;;;;:47;;-1:-1:-1;;125930:47:1;-1:-1:-1;;;;;125930:47:1;;;;;125992:80;;;;;125930:26;;126052:10;;125992:80;;;;;;;;;;125413:666;;;;:::o;78887:2261::-;78974:26;;:::i;:::-;79072:19;79085:5;79072:12;:19::i;:::-;79050;;;;:41;;;;79173:27;;;:6;:27;;;;;;;;79133:37;;;:67;79502:22;;;;:27;79498:157;;;79575:38;79569:45;79545:69;;;;79628:16;;79498:157;79968:22;;;;:27;79964:157;;;80041:38;80035:45;;79964:157;80215:22;;;;80174:37;;;;:63;80170:179;;80283:24;80277:31;;80170:179;80473:27;;;;80454:15;:46;80450:157;;80546:19;80540:26;;80450:157;80676:19;;;;;80666:30;;;;:9;:30;;;;;;;;;80662:143;;;80742:21;80736:28;;80662:143;80872:10;;;;80829:18;;-1:-1:-1;;;;;80818:30:1;;;;;;;:10;:30;;;;;;;;80849:19;;;;80818:51;;;;;;;;;;:64;80814:177;;;80928:21;80922:28;;80814:177;81094:20;81064:51;;;78887:2261;-1:-1:-1;78887:2261:1:o;78489:124::-;19158:6;;;;19157:7;19136:72;;;;-1:-1:-1;;;;;19136:72:1;;;;;;;;;19262:6;:13;;-1:-1:-1;;19262:13:1;19271:4;19262:13;;;78580:26;78600:5;78580:19;:26::i;:::-;-1:-1:-1;19384:5:1;19375:14;;-1:-1:-1;;19375:14:1;;;78489:124::o;76100:67::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;21685:185::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;112628:1488::-;112812:35;;:::i;:::-;112863:27;112928:20;112979:9;113365:37;113556:36;;:::i;:::-;112893:6;112900:1;112893:9;;;;;;;;;;;;;;;;;;:24;;;112863:54;;112951:6;:13;112928:36;;112991:1;112979:13;;112974:1103;112994:17;;;112974:1103;;113268:14;113241:6;113248:1;113241:9;;;;;;;;;;;;;;;;;;:24;;:41;;;;113405:70;113413:20;113435:16;:39;;;113405:7;:70::i;:::-;113365:110;;113595:135;113629:6;113636:1;113629:9;;;;;;;;;;;;;;;;;;113656:29;113703:10;113714:1;113703:13;;;;;;;;;113595:135;113556:174;;113815:51;113830:16;113848:17;113815:14;:51::i;:::-;113964:39;;;;:63;-1:-1:-1;113960:107:1;;114047:5;;113960:107;113013:3;;;;;112974:1103;;;112628:1488;;;;;;;;;;:::o;22604:33::-;;;;:::o;114504:1914::-;114701:35;;:::i;:::-;114752:27;114817:20;114868:9;115258:37;115564;115855:36;;:::i;:::-;19158:6;;;;19157:7;19136:72;;;;-1:-1:-1;;;;;19136:72:1;;;;;;;;;19262:6;:13;;-1:-1:-1;;19262:13:1;19271:4;19262:13;;;114782:9;;:6;;19262;114782:9;;;;;;;;;;;;;;:24;;;114752:54;;114840:6;:13;114817:36;;114880:1;114868:13;;114863:1516;114883:17;;;114863:1516;;115162:14;115135:6;115142:1;115135:9;;;;;;;;;;;;;;;;;;;:24;;:41;115328:39;;115298:70;;115306:20;;115298:7;:70::i;:::-;115258:110;;115604:170;115643:6;115650:1;115643:9;;;;;;;;;115604:170;115564:210;;115894:136;115929:6;115936:1;115929:9;;;;;;;;;;;;;;;;;;115956:29;116003:10;116014:1;116003:13;;;;;;;;;115894:136;115855:175;;116115:51;116130:16;116148:17;116115:14;:51::i;:::-;116266:39;;:63;-1:-1:-1;116262:107:1;;116349:5;;116262:107;114902:3;;;;;114863:1516;;;-1:-1:-1;;19384:5:1;19375:14;;-1:-1:-1;;19375:14:1;;;-1:-1:-1;114504:1914:1;;;-1:-1:-1;;;;;;114504:1914:1:o;120913:36::-;;;-1:-1:-1;;;;;120913:36:1;;:::o;75292:167::-;75218:5;;-1:-1:-1;;;;;75218:5:1;75204:10;:19;75183:85;;;;-1:-1:-1;;;;;75183:85:1;;;;;;;;;-1:-1:-1;;;;;75388:22:1;;;75384:69;;75426:5;:16;;-1:-1:-1;;75426:16:1;-1:-1:-1;;;;;75426:16:1;;;;;75384:69;75292:167;:::o;145244:40::-;;;;;;;;;;;;;;;;;;;:::o;81465:1563::-;81630:30;;:::i;:::-;81704:26;;:::i;:::-;81794:20;82083:33;82199:30;81733:19;81746:5;81733:12;:19::i;:::-;81704:48;;81817:26;:24;:26::i;:::-;81794:49;;81908:120;81941:5;81960:9;81983:12;82009:9;81908:19;:120::i;:::-;82119:70;82127:5;:22;;;82151:9;:37;;;82119:7;:70::i;:::-;82083:106;;82232:55;82239:20;82261:25;82232:6;:55::i;:::-;82199:88;;82326:185;82355:5;82374:9;82397:20;82431:22;82467:11;:34;;;82326:15;:185::i;:::-;82581:51;82602:5;82609:22;82581:20;:51::i;:::-;82567:65;;82685:181;82716:5;82735:12;82761:9;:19;;;82794:9;:37;;;82845:11;82685:17;:181::i;:::-;82901:91;82926:5;82945:12;82971:11;82901;:91::i;:::-;81465:1563;;;;;;;;;:::o;25178:648::-;25371:39;;25412:40;;25363:90;;25371:39;25363:7;:90::i;:::-;25321:132;;25513:39;;;;;25554:40;;;;25505:90;;25513:39;25505:7;:90::i;:::-;25463:39;;;:132;25645:29;;;;;25676:30;;;;25637:70;;25645:29;25637:7;:70::i;:::-;25605:29;;;:102;25757:29;;;;;25788:30;;;;25749:70;;25757:29;25749:7;:70::i;:::-;25717:29;;;;:102;;;;-1:-1:-1;25178:648:1:o;124690:307::-;124829:21;;124773:7;;-1:-1:-1;;;;;124829:21:1;124773:7;124885:36;;:74;;124937:22;124885:74;;;124924:10;124885:74;124860:99;124690:307;-1:-1:-1;;;124690:307:1:o;85667:1244::-;85959:21;;:52;;85990:20;85959:52;85938:115;;;;-1:-1:-1;;;;;85938:115:1;;;;;;;;;86125:19;;;;-1:-1:-1;;;;;86125:33:1;;86121:170;;86199:19;;;;-1:-1:-1;;;;;86199:33:1;86222:10;86199:33;86174:106;;;;-1:-1:-1;;;;;86174:106:1;;;;;;;;;86361:18;;;;-1:-1:-1;;;;;86361:32:1;;86357:169;;86456:12;-1:-1:-1;;;;;86434:34:1;:5;:18;;;-1:-1:-1;;;;;86434:34:1;;86409:106;;;;;;-1:-1:-1;;;;;86409:106:1;;;;;;;;;86608:37;;;;:42;86604:301;;;86691:146;86729:9;:19;;;86770:5;:18;;;86810:9;86691:16;:146::i;:::-;86666:228;;;;;;-1:-1:-1;;;;;86666:228:1;;;;;;;;;85667:1244;;;;:::o;135751:1075::-;136705:64;136713:9;:26;;;136741:10;:27;;;136705:7;:64::i;:::-;136625;136633:9;:26;;;136661:10;:27;;;136625:7;:64::i;:::-;:144;;136604:215;;;;-1:-1:-1;;;;;136604:215:1;;;;;;;;;135751:1075;;:::o;137562:4783::-;137834:59;;:::i;:::-;138005:37;138123;138331:38;138452;138045:68;138053:9;:26;;;138081:31;138045:7;:68::i;:::-;138005:108;;138163:158;138202:9;:26;;;138242:9;:26;;;138282:29;138163:25;:158::i;:::-;138123:198;;138372:70;138380:10;:27;;;138409:32;138372:7;:70::i;:::-;138331:111;;138493:161;138532:10;:27;;;138573:10;:27;;;138614:30;138493:25;:161::i;:::-;138452:202;-1:-1:-1;139412:63:1;;;139408:1671;;139542:24;;;;;;:80;;;139636:24;;:47;;:80;;;139779:24;:47;139730:23;;:46;;:96;140118:26;;;;140162;;;;140206:23;;:46;;;;140075:191;;140162:26;140075:25;:191::i;:::-;140026:23;;:240;139408:1671;;;140347:23;;:78;;;140439:23;;:46;;;;:78;;;140581:23;;:46;;;140531:24;;;;;:96;;;;140917:27;;;;140962;;;;141007:24;;:47;140875:193;;140962:27;140875:24;:193::i;:::-;140825:24;;;;;:47;:243;139408:1671;141201:23;;:46;141261:24;;;;;:47;;141180:138;;141201:46;141180:7;:138::i;:::-;141132:45;;;:186;141446:23;;:46;141506:26;;;;141546:18;;;;141407:167;;141446:46;141506:26;141407:25;:167::i;:::-;141368:23;;:36;;:206;141662:23;;:46;;;141722:26;;;;141762:18;;;;141623:167;;141662:46;141722:26;141623:25;:167::i;:::-;141584:23;;:36;;:206;141920:24;;;;:47;141981:27;;;;142022:19;;;;141881:170;;141920:47;141981:27;141881:25;:170::i;:::-;141841:18;:24;;;:37;;:210;;;;;142101:170;142140:18;:24;;;:47;;;142201:10;:27;;;142242:10;:19;;;142101:25;:170::i;:::-;142061:24;;;;:37;;:210;137562:4783;;;;;;;;;;:::o;87345:2415::-;87740:25;;;87719:92;;;;-1:-1:-1;;;;;87719:92:1;;;;;;;;;88031:46;;;;88010:106;;;;-1:-1:-1;;;;;88010:106:1;;;;;;;;;88390:5;:22;;;88316:70;88324:9;:37;;;88363:22;88316:7;:70::i;:::-;:96;;88295:157;;;;-1:-1:-1;;;;;88295:157:1;;;;;;;;;89654:55;89662:5;:22;;;89686;89654:7;:55::i;:::-;89571;89579:22;89603:5;:22;;;89571:7;:55::i;:::-;:138;;89550:203;;;;-1:-1:-1;;;;;89550:203:1;;;;;;;;;87345:2415;;;;;:::o;83834:792::-;84112:72;84120:27;84149:11;:34;;;84112:7;:72::i;:::-;84092:17;;;;:6;:17;;;;;;;;;:92;;;;84271:25;;;;84239:18;;84360:34;;84408;;;;84456:24;;;;84494;;;;84555:20;;;;84589;;;;84221:398;;84092:17;;-1:-1:-1;;;;;84221:398:1;;;;;;;;;;;;;84310:12;;84336:10;;84360:34;;84408;;84456:24;;84589:20;84221:398;;;;;;;;;;83834:792;;;;;:::o;142791:2233::-;143038:25;143066:14;;;;;;;;;;;;;;;;;;;;;;;143038:42;;143124:202;143158:9;:24;;;143196:9;:22;;;143232:10;:23;;;143269:18;:24;;;:47;;;143124:20;:202::i;:::-;143370:25;;;;143409:23;;143446:22;;143482:23;;:46;;;143336:202;;143370:25;143409:23;143446:22;143336:20;:202::i;:::-;143548:189;143582:9;:24;;;143620:9;:22;;;143656:12;143682:18;:45;;;143548:20;:189::i;:::-;143770:185;143804:12;143830:9;:22;;;143866:9;:29;;;143909:18;:23;;;:36;;;143770:20;:185::i;:::-;143965:188;143999:12;144025:10;:23;;;144062:10;:30;;;144106:18;:24;;;:37;;;143965:20;:188::i;:::-;144223:10;:30;;;-1:-1:-1;;;;;144190:63:1;:9;:29;;;-1:-1:-1;;;;;144190:63:1;;144186:832;;;144269:301;144307:12;144337;144367:9;:29;;;144414:142;144443:18;:23;;;:36;;;144501:18;:24;;;:37;;;144414:7;:142::i;:::-;144269:20;:301::i;:::-;144186:832;;;144601:195;144639:12;144669;144699:9;:29;;;144746:18;:23;;;:36;;;144601:20;:195::i;:::-;144810:197;144848:12;144878;144908:10;:30;;;144956:18;:24;;;:37;;;144810:20;:197::i;38824:10099::-;42844:4;42838:11;;43134:66;43127:4;43104:28;;;43097:104;;;;39012:30;43258:4;43235:28;;44257:59;;;44583:19;;43549:26;;;44563:40;;;44696:23;;;44690:30;44666:22;;;44659:62;44792:23;;;44786:30;44762:22;;;44755:62;44895:23;;;44889:30;44865:22;;;44858:62;45010:4;44992:23;;44986:30;44962:22;;;44955:62;45110:4;45092:23;;45086:30;45062:22;;;45055:62;45210:4;45192:23;;45186:30;45162:22;;;45155:62;45308:4;45290:23;;45284:30;45260:22;;;45253:62;45407:5;45389:24;;45383:31;45358:23;;;45351:64;45512:5;45494:24;;45488:31;45463:23;;;45456:64;45600:5;45582:24;;45576:31;;45551:23;;;45544:64;;;45708:5;45690:24;;45684:31;45659:23;;;45652:64;45792:5;45919:74;;46081:24;46153:19;;45775:23;;;46357:34;;;42838:11;;43235:28;;;;44349:27;;;;43549:26;;46419:22;;;;46201:23;;;;46277:4;46258:24;;46254:35;44003:1;46511:237;46534:13;46531:1;46528:20;46511:237;;;46604:19;;46584:40;;46673:4;46656:22;;;;46711:23;;;;46562:1;46555:9;46511:237;;;-1:-1:-1;;;;46858:31:1;;;46842:13;46823:33;;;46816:74;;;;46984:17;;46978:24;47050:19;;47254:34;;;46850:4;47316:22;;;;47098:23;;;;47174:4;47155:24;;47151:35;47423:1;47409:237;47432:13;47429:1;47426:20;47409:237;;;47502:19;;47482:40;;47571:4;47554:22;;;;47609:23;;;;47460:1;47453:9;47409:237;;;-1:-1:-1;;;47715:46:1;;;-1:-1:-1;47946:33:1;;;47816:4;47794:27;;;47921:59;;;48094:19;;48285:34;;;47794:27;;48347:22;;;;48142:23;;;;48094:19;48218:4;48199:24;;48195:35;-1:-1:-1;48426:237:1;48449:13;48446:1;48443:20;48426:237;;;48519:19;;48499:40;;48588:4;48571:22;;;;48626:23;;;;48477:1;48470:9;48426:237;;;-1:-1:-1;;;;;48741:46:1;;;;48715:73;;-1:-1:-1;48854:4:1;48847:25;-1:-1:-1;;;;;38824:10099:1;;;;;:::o;83259:332::-;83377:26;;:::i;:::-;83406:19;83419:5;83406:12;:19::i;:::-;83377:48;;83464:35;83482:5;83489:9;83464:17;:35::i;:::-;83536:48;83557:5;83564:9;:19;;;83536:20;:48::i;120088:513::-;120268:30;;:::i;:::-;120328:103;120359:5;120378:20;120412:9;120328:17;:103::i;:::-;120462:34;;;;120314:117;;-1:-1:-1;120462:58:1;;120441:125;;;;-1:-1:-1;;;;;120441:125:1;;;;;;;;19876:208;19962:7;20006:6;;;;19985:70;;;;-1:-1:-1;;;;;19985:70:1;;;;;;;;;-1:-1:-1;20072:5:1;;;19876:208;;;;;:::o;8282:448::-;8366:13;8427:1;8416;:8;:12;8395:92;;;;;;-1:-1:-1;;;;;8395:92:1;;;;;;;;;8537:8;;8535:1;;-1:-1:-1;;8537:12:1;;;8535:15;;;;;;;;;;8649:8;;-1:-1:-1;;8645:16:1;8674:17;;;-1:-1:-1;;;;8535:15:1;;;;;;8282:448::o;13247:490::-;13368:14;13431:5;13439:2;13431:10;13419:1;:8;:22;;13398:107;;;;;;-1:-1:-1;;;;;13398:107:1;;;;;;;;;-1:-1:-1;13684:13:1;13586:2;13684:13;13678:20;;13247:490::o;100591:1482::-;100806:135;;100754:12;;100782:21;;100842:48;;100806:135;;100904:4;;100922:9;;100806:135;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;100806:135:1;;;49:4:-1;25:18;;;61:17;;100806:135:1;182:15:-1;-1:-1;;;;;;100806:135:1;;;179:29:-1;;;;160:49;;101242:15:1;;100806:135;;-1:-1:-1;49:4;25:18;;;101115:13:1;101062:3;101034:380;101435:7;101455:422;;;;101895:1;101890:143;;;;101428:605;;101455:422;-1:-1:-1;;;;;101542:1:1;101535:77;101640:66;101636:2;101629:78;101735:66;101731:2;101724:78;101830:1;101826:2;101819:13;101859:3;101856:1;101849:14;101890:143;-1:-1:-1;;102005:14:1;;100591:1482;-1:-1:-1;;;;;100591:1482:1:o;8925:482::-;9012:14;9075:2;9063:1;:8;:14;;9042:99;;;;;;-1:-1:-1;;;;;9042:99:1;;;;;;;;;9193:29;9205:1;9219:2;9208:1;:8;:13;9193:11;:29::i;:::-;9325:8;;-1:-1:-1;;9321:17:1;9351;;;-1:-1:-1;9184:38:1;8925:482::o;102512:1561::-;102764:165;;102712:12;;102740:21;;102800:51;;102764:165;;102865:4;;102811:13;;102910:9;;102764:165;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;102764:165:1;;;49:4:-1;25:18;;;61:17;;102764:165:1;182:15:-1;-1:-1;;;;;;102764:165:1;;;179:29:-1;;;;160:49;;103236:15:1;;102764:165;;-1:-1:-1;49:4;25:18;;;103104:16:1;103050:3;103022:389;103432:7;103452:425;;;;103895:1;103890:143;;;;103425:608;;103452:425;-1:-1:-1;;;;;103542:1:1;103535:77;103640:66;103636:2;103629:78;103735:66;103731:2;103724:78;103830:1;103826:2;103819:13;103859:3;103856:1;103849:14;103890:143;104011:7;104005:14;103994:25;;103425:608;-1:-1:-1;;;102512:1561:1;;;;;;;:::o;28283:425::-;28447:21;28505:15;;;28484:78;;;;-1:-1:-1;;;;;28484:78:1;;;;;;;;;28589:82;28610:26;28618:9;28629:6;28610:7;:26::i;:::-;28650:11;28589:7;:82::i;:::-;28573:98;28283:425;-1:-1:-1;;;;28283:425:1:o;123024:1222::-;73256:146;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;73256:146:1;;;;;;;;73246:157;;123188:14;;;;;;73256:146;;;;73246:157;;;;73256:146;73246:157;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;73246:157:1;;;;;;;;;;;123305:15;;73246:157;;-1:-1:-1;123305:15:1;;-1:-1:-1;73246:157:1;;-1:-1:-1;73246:157:1;;123305:15;;;-1:-1:-1;123305:15:1;73246:157;123305:15;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;123305:15:1;;;;;;;;;;;;123683:26;;;123809:15;;123802:29;;;;-1:-1:-1;;;;;;123935:62:1;;;;123918:15;;;123911:87;;;;-1:-1:-1;;124048:2:1;124036:15;;124029:33;-1:-1:-1;;124203:3:1;124185:22;;;;123024:1222;-1:-1:-1;123024:1222:1:o;23137:920::-;23288:18;;23596:2;23590:9;23628:66;23613:82;;23745:1;23733:14;;23726:40;;;;23863:2;23851:15;;23844:35;;;;24015:2;23997:21;;;23137:920::o;36479:202::-;36568:17;36613:35;36631:16;36641:5;36631:9;:16::i;20745:135::-;20830:7;20864:1;20860;:5;:13;;20872:1;20860:13;;;-1:-1:-1;20868:1:1;;20853:20;-1:-1:-1;20745:135:1:o;91044:887::-;91195:30;;:::i;:::-;91290:34;;;:59;;;91471:22;;;;91507;;;;91396:143;;91327:22;;91396:25;:143::i;:::-;91359:180;;;91663:22;;;;91699:14;;;;91576:147;;91359:180;91663:22;91576:25;:147::i;:::-;91549:24;;;:174;91835:22;;;;91871:14;;;;91760:135;;91799:22;;91760:25;:135::i;:::-;91733:24;;;:162;91044:887;;;;:::o;92241:932::-;92448:14;;;92420:25;92448:14;;;;;;;;;;;;;;;;;;;;92506:20;;;;92540:18;;92598:34;;92472:170;;92506:20;92540:18;92572:12;;92472:20;:170::i;:::-;92652;92686:5;:20;;;92720:12;92746:5;:18;;;92778:11;:34;;;92652:20;:170::i;:::-;92832:165;92866:12;92892:5;:18;;;92924:5;:25;;;92963:11;:24;;;92832:20;:165::i;:::-;93007:159;93041:12;93067;93093:5;:25;;;93132:11;:24;;;93007:20;:159::i;20090:230::-;20176:7;20211:5;;;20247:6;;;;20226:69;;;;-1:-1:-1;;;;;20226:69:1;;;;;;;;;20312:1;20305:8;;20090:230;;;;;;:::o;19425:288::-;19511:7;;19538:6;;19534:45;;;19567:1;19560:8;;;;19534:45;-1:-1:-1;19600:5:1;;;19604:1;19600;:5;19636;;;;;;;;:10;19615:73;;;;-1:-1:-1;;;;;19615:73:1;;;;;;;;26188:616;26356:21;26414:15;;;26393:78;;;;-1:-1:-1;;;;;26393:78:1;;;;;;;;;26504:114;26542:9;26569:11;26598:6;26504:20;:114::i;:::-;26503:115;26482:176;;;;-1:-1:-1;;;;;26482:176:1;;;;;;;;27127:881;27294:21;27352:15;;;27331:78;;;;-1:-1:-1;;;;;27331:78:1;;;;;;;;;27442:113;27479:9;27506:11;27535:6;27442:19;:113::i;:::-;27441:114;27420:175;;;;-1:-1:-1;;;;;27420:175:1;;;;;;;;;27809:162;27830:106;27855:26;27863:9;27874:6;27855:7;:26::i;:::-;27899:23;27907:11;27920:1;27899:7;:23::i;:::-;27830:7;:106::i;126738:5072::-;127275:19;127534:18;126974:1;126965:6;:10;:24;;;;;126987:2;-1:-1:-1;;;;;126979:10:1;:4;-1:-1:-1;;;;;126979:10:1;;;126965:24;126961:4843;;;127078:16;;127097:1;-1:-1:-1;127053:109:1;;;;-1:-1:-1;;;;;127053:109:1;;;;;;;;;-1:-1:-1;;127397:2:1;127382:18;;;127355:46;-1:-1:-1;;;;;;127351:156:1;127555:26;;;;:12;:26;;;;;;;;-1:-1:-1;;;;;127555:26:1;127666:24;;;127641:109;;;;-1:-1:-1;;;;;127641:109:1;;;;;;;;;129154:2;129148:9;129470:15;129465:2;129453:9;129447:16;129443:25;129439:47;129623:14;129618:3;129614:24;129605:7;129601:38;129891:66;129882:7;129875:83;130359:3;130355:1;130346:7;130342:15;130335:28;-1:-1:-1;;;;;130409:4:1;130405:53;130400:2;130391:7;130387:16;130380:79;-1:-1:-1;;;;;130505:2:1;130501:51;130496:2;130487:7;130483:16;130476:77;130596:6;130590:3;130581:7;130577:17;130570:33;130746:3;130737:7;130733:17;130828:206;130848:5;130838:8;130835:19;130828:206;;;130897:16;;130880:34;;130961:2;130998:18;;;;130947:17;130828:206;;;131598:3;131527:7;131475;131468:5;131464:19;131391:7;131325:1;131250:10;131187:3;131161:510;131698:7;131691:15;131688:2;;;131745:16;131736:7;131729:33;131688:2;128955:2839;;;;;;126738:5072;;;;;;:::o;89957:816::-;90221:21;;90613:20;;90221:52;;90252:20;90221:52;90200:115;;;;-1:-1:-1;;;;;90200:115:1;;;;;;;;;90389:19;;;;-1:-1:-1;;;;;90389:33:1;;90385:170;;90463:19;;;;-1:-1:-1;;;;;90463:33:1;90486:10;90463:33;90438:106;;;;-1:-1:-1;;;;;90438:106:1;;;;;;;;;90636:26;:24;:26::i;:::-;90693:18;;90613:49;;-1:-1:-1;;;;;;90693:34:1;;;;;;90672:94;;;;-1:-1:-1;;;;;90672:94:1;;;;;;;;;89957:816;;;:::o;84928:422::-;85076:20;;;;:9;:20;;;;;;;:27;;-1:-1:-1;;85076:27:1;85099:4;85076:27;;;85193:25;;;;85161:18;;85279:20;;;;85313;;;;85141:202;;85086:9;;-1:-1:-1;;;;;85141:202:1;;;;;;;;;;;;;85232:10;;85313:20;85141:202;;;;;;;;;;84928:422;;:::o;10237:886::-;10358:14;10421:5;10429:2;10421:10;10409:1;:8;:22;;10388:135;;;;;;-1:-1:-1;;;;;10388:135:1;;;;;;;;;-1:-1:-1;11025:13:1;10770:2;11025:13;11019:20;-1:-1:-1;;;;;11015:69:1;;10237:886::o;19719:151::-;19805:7;19828:9;19844:1;19840;:5;;;;;;;;;19719:151;-1:-1:-1;;;;19719:151:1:o;36821:1654::-;33098:457;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;33098:457:1;;;;;;;;33088:468;;36907:14;;;;;;;;33098:457;;;;;33088:468;;;;33098:457;33088:468;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;33088:468:1;;;;;;;;;;;37031:20;;;;37021:31;;33088:468;;-1:-1:-1;37031:20:1;-1:-1:-1;33088:468:1;;-1:-1:-1;33088:468:1;;37021:31;;;-1:-1:-1;37021:31:1;33088:468;37021:31;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;37021:31:1;;;;;;;;;;;37101:20;;;;37091:31;;37021;;-1:-1:-1;37101:20:1;-1:-1:-1;37021:31:1;;-1:-1:-1;37021:31:1;;37091;;;-1:-1:-1;37091:31:1;37021;37091;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;37091:31:1;;;;;;;;;;-1:-1:-1;;37888:14:1;;38031:11;;37938:3;37927:15;;38068:11;;37978:3;37967:15;;;38105:11;;38159:24;;;38196:32;;;38241;;;38312:3;38296:20;;38353:19;;38385;;;-1:-1:-1;;;38417:19:1;;;-1:-1:-1;38296:20:1;;36821:1654;-1:-1:-1;36821:1654:1:o;29931:1852::-;30094:12;;30143:15;;;30122:78;;;;-1:-1:-1;;;;;30122:78:1;;;;;;;;;31011:11;;;:29;;-1:-1:-1;31026:14:1;;31011:29;31007:72;;;31063:5;31056:12;;;;31007:72;31657:11;31594:84;;;;;;;31634:9;31614:6;31594:84;31574:104;;31726:26;31734:9;31745:6;31726:7;:26::i;:::-;31698:24;31706:4;31712:9;31698:7;:24::i;:::-;:54;;;29931:1852;-1:-1:-1;;;;;29931:1852:1:o;32040:910::-;32202:12;;32251:15;;;32230:78;;;;-1:-1:-1;;;;;32230:78:1;;;;;;;;;32373:11;;;:29;;-1:-1:-1;32388:14:1;;32373:29;32369:257;;;32610:5;32603:12;;;;32369:257;32757:11;32694:84;;;;;;;32734:9;32714:6;32694:84;32674:104;;32834:11;32800:31;32808:11;32821:9;32800:7;:31::i;:::-;:45;;;;;;;;32788:57;;32893:26;32901:9;32912:6;32893:7;:26::i;145063:514::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;145063:514:1;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;146:693;;261:4;249:17;;245:27;-1:-1;235:2;;286:1;283;276:12;235:2;323:6;310:20;345:85;360:69;422:6;360:69;;;345:85;;;458:21;;;502:4;490:17;;;;336:94;;-1:-1;515:14;;490:17;610:1;595:238;620:6;617:1;614:13;595:238;;;703:3;690:17;682:6;678:30;727:42;765:3;753:10;727:42;;;715:55;;-1:-1;793:4;784:14;;;;812;;;;;642:1;635:9;595:238;;;599:14;228:611;;;;;;;;879:735;;1008:4;996:17;;992:27;-1:-1;982:2;;1033:1;1030;1023:12;982:2;1070:6;1057:20;1092:99;1107:83;1183:6;1107:83;;1092:99;1219:21;;;1263:4;1251:17;;;;1083:108;;-1:-1;1276:14;;1251:17;1371:1;1356:252;1381:6;1378:1;1375:13;1356:252;;;1464:3;1451:17;1443:6;1439:30;1488:56;1540:3;1528:10;1488:56;;;1476:69;;-1:-1;1568:4;1559:14;;;;1587;;;;;1403:1;1396:9;1356:252;;1640:707;;1750:4;1738:17;;1734:27;-1:-1;1724:2;;1775:1;1772;1765:12;1724:2;1812:6;1799:20;1834:80;1849:64;1906:6;1849:64;;1834:80;1825:89;;1931:5;1956:6;1949:5;1942:21;1986:4;1978:6;1974:17;1964:27;;2008:4;2003:3;1999:14;1992:21;;2061:6;2108:3;2100:4;2092:6;2088:17;2083:3;2079:27;2076:36;2073:2;;;2125:1;2122;2115:12;2073:2;2150:1;2135:206;2160:6;2157:1;2154:13;2135:206;;;2218:3;2240:37;2273:3;2261:10;2240:37;;;2228:50;;-1:-1;2301:4;2292:14;;;;2320;;;;;2182:1;2175:9;2135:206;;2355:112;;2419:43;2454:6;2441:20;2419:43;;2474:118;;2541:46;2579:6;2566:20;2541:46;;2599:116;;2665:45;2702:6;2689:20;2665:45;;2722:120;;2799:38;2829:6;2823:13;2799:38;;2863:335;;;2970:4;2958:17;;2954:27;-1:-1;2944:2;;2995:1;2992;2985:12;2944:2;-1:-1;3015:20;;3055:18;3044:30;;3041:2;;;3087:1;3084;3077:12;3041:2;3121:4;3113:6;3109:17;3097:29;;3171:3;3164;3156:6;3152:16;3142:8;3138:31;3135:40;3132:2;;;3188:1;3185;3178:12;3132:2;2937:261;;;;;;3207:432;;3297:4;3285:17;;3281:27;-1:-1;3271:2;;3322:1;3319;3312:12;3271:2;3359:6;3346:20;3381:60;3396:44;3433:6;3396:44;;3381:60;3372:69;;3461:6;3454:5;3447:21;3497:4;3489:6;3485:17;3530:4;3523:5;3519:16;3565:3;3556:6;3551:3;3547:16;3544:25;3541:2;;;3582:1;3579;3572:12;3541:2;3592:41;3626:6;3621:3;3616;3592:41;;;3264:375;;;;;;;;4124:2205;;4232:5;4220:9;4215:3;4211:19;4207:31;4204:2;;;4251:1;4248;4241:12;4204:2;4269:21;4284:5;4269:21;;;4260:30;-1:-1;4348:1;4379:49;4424:3;4404:9;4379:49;;;4355:74;;-1:-1;4498:2;4531:49;4576:3;4552:22;;;4531:49;;;4524:4;4517:5;4513:16;4506:75;4450:142;4657:2;4690:49;4735:3;4726:6;4715:9;4711:22;4690:49;;;4683:4;4676:5;4672:16;4665:75;4602:149;4810:2;4843:49;4888:3;4879:6;4868:9;4864:22;4843:49;;;4836:4;4829:5;4825:16;4818:75;4761:143;4966:3;5000:49;5045:3;5036:6;5025:9;5021:22;5000:49;;;4993:4;4986:5;4982:16;4975:75;4914:147;5123:3;5157:49;5202:3;5193:6;5182:9;5178:22;5157:49;;;5150:4;5143:5;5139:16;5132:75;5071:147;5272:3;5306:49;5351:3;5342:6;5331:9;5327:22;5306:49;;;5299:4;5292:5;5288:16;5281:75;5228:139;5421:3;5455:49;5500:3;5491:6;5480:9;5476:22;5455:49;;;5448:4;5441:5;5437:16;5430:75;5377:139;5583:3;5618:49;5663:3;5654:6;5643:9;5639:22;5618:49;;;5610:5;5603;5599:17;5592:76;5526:153;5729:3;5764:49;5809:3;5800:6;5789:9;5785:22;5764:49;;;5756:5;5749;5745:17;5738:76;5689:136;5913:3;5902:9;5898:19;5885:33;5938:18;5930:6;5927:30;5924:2;;;5970:1;5967;5960:12;5924:2;6006:54;6056:3;6047:6;6036:9;6032:22;6006:54;;;5998:5;5991;5987:17;5980:81;5835:237;6160:3;6149:9;6145:19;6132:33;6185:18;6177:6;6174:30;6171:2;;;6217:1;6214;6207:12;6171:2;6253:54;6303:3;6294:6;6283:9;6279:22;6253:54;;;6245:5;6238;6234:17;6227:81;6082:237;4198:2131;;;;;8705:241;;8809:2;8797:9;8788:7;8784:23;8780:32;8777:2;;;8825:1;8822;8815:12;8777:2;8860:1;8877:53;8922:7;8902:9;8877:53;;8953:366;;;9074:2;9062:9;9053:7;9049:23;9045:32;9042:2;;;9090:1;9087;9080:12;9042:2;9125:1;9142:53;9187:7;9167:9;9142:53;;;9132:63;;9104:97;9232:2;9250:53;9295:7;9286:6;9275:9;9271:22;9250:53;;;9240:63;;9211:98;9036:283;;;;;;9326:360;;;9444:2;9432:9;9423:7;9419:23;9415:32;9412:2;;;9460:1;9457;9450:12;9412:2;9495:1;9512:53;9557:7;9537:9;9512:53;;;9502:63;;9474:97;9602:2;9620:50;9662:7;9653:6;9642:9;9638:22;9620:50;;9693:415;;9841:2;9829:9;9820:7;9816:23;9812:32;9809:2;;;9857:1;9854;9847:12;9809:2;9892:31;;9943:18;9932:30;;9929:2;;;9975:1;9972;9965:12;9929:2;9995:97;10084:7;10075:6;10064:9;10060:22;9995:97;;10115:947;;;;10352:2;10340:9;10331:7;10327:23;10323:32;10320:2;;;10368:1;10365;10358:12;10320:2;10403:31;;10454:18;10443:30;;10440:2;;;10486:1;10483;10476:12;10440:2;10506:97;10595:7;10586:6;10575:9;10571:22;10506:97;;;10496:107;;10382:227;10668:2;10657:9;10653:18;10640:32;10692:18;10684:6;10681:30;10678:2;;;10724:1;10721;10714:12;10678:2;10744:78;10814:7;10805:6;10794:9;10790:22;10744:78;;;10734:88;;10619:209;10887:2;10876:9;10872:18;10859:32;10911:18;10903:6;10900:30;10897:2;;;10943:1;10940;10933:12;10897:2;10963:83;11038:7;11029:6;11018:9;11014:22;10963:83;;;10953:93;;10838:214;10314:748;;;;;;11069:811;;;;11281:2;11269:9;11260:7;11256:23;11252:32;11249:2;;;11297:1;11294;11287:12;11249:2;11332:31;;11383:18;11372:30;;11369:2;;;11415:1;11412;11405:12;11369:2;11435:97;11524:7;11515:6;11504:9;11500:22;11435:97;;;11425:107;;11311:227;11569:2;11587:53;11632:7;11623:6;11612:9;11608:22;11587:53;;11887:241;;11991:2;11979:9;11970:7;11966:23;11962:32;11959:2;;;12007:1;12004;11997:12;11959:2;12042:1;12059:53;12104:7;12084:9;12059:53;;12135:366;;;12256:2;12244:9;12235:7;12231:23;12227:32;12224:2;;;12272:1;12269;12262:12;12224:2;12307:1;12324:53;12369:7;12349:9;12324:53;;12508:615;;;;;12665:2;12653:9;12644:7;12640:23;12636:32;12633:2;;;12681:1;12678;12671:12;12633:2;12716:1;12733:53;12778:7;12758:9;12733:53;;;12723:63;;12695:97;12823:2;12841:53;12886:7;12877:6;12866:9;12862:22;12841:53;;;12831:63;;12802:98;12959:2;12948:9;12944:18;12931:32;12983:18;12975:6;12972:30;12969:2;;;13015:1;13012;13005:12;12969:2;13043:64;13099:7;13090:6;13079:9;13075:22;13043:64;;;12627:496;;;;-1:-1;13025:82;-1:-1;;;;12627:496;13130:595;;;;13277:2;13265:9;13256:7;13252:23;13248:32;13245:2;;;13293:1;13290;13283:12;13245:2;13328:1;13345:53;13390:7;13370:9;13345:53;;;13335:63;;13307:97;13435:2;13453:53;13498:7;13489:6;13478:9;13474:22;13453:53;;;13443:63;;13414:98;13571:2;13560:9;13556:18;13543:32;13595:18;13587:6;13584:30;13581:2;;;13627:1;13624;13617:12;13581:2;13647:62;13701:7;13692:6;13681:9;13677:22;13647:62;;13732:239;;13835:2;13823:9;13814:7;13810:23;13806:32;13803:2;;;13851:1;13848;13841:12;13803:2;13886:1;13903:52;13947:7;13927:9;13903:52;;13978:261;;14092:2;14080:9;14071:7;14067:23;14063:32;14060:2;;;14108:1;14105;14098:12;14060:2;14143:1;14160:63;14215:7;14195:9;14160:63;;14246:373;;14373:2;14361:9;14352:7;14348:23;14344:32;14341:2;;;14389:1;14386;14379:12;14341:2;14424:31;;14475:18;14464:30;;14461:2;;;14507:1;14504;14497:12;14461:2;14527:76;14595:7;14586:6;14575:9;14571:22;14527:76;;14626:1089;;;;;14845:3;14833:9;14824:7;14820:23;14816:33;14813:2;;;14862:1;14859;14852:12;14813:2;14897:31;;14948:18;14937:30;;14934:2;;;14980:1;14977;14970:12;14934:2;15000:76;15068:7;15059:6;15048:9;15044:22;15000:76;;;14990:86;;14876:206;15141:2;15130:9;15126:18;15113:32;15165:18;15157:6;15154:30;15151:2;;;15197:1;15194;15187:12;15151:2;15217:76;15285:7;15276:6;15265:9;15261:22;15217:76;;;15207:86;;15092:207;15358:2;15347:9;15343:18;15330:32;15382:18;15374:6;15371:30;15368:2;;;15414:1;15411;15404:12;15368:2;15434:62;15488:7;15479:6;15468:9;15464:22;15434:62;;;15424:72;;15309:193;15561:2;15550:9;15546:18;15533:32;15585:18;15577:6;15574:30;15571:2;;;15617:1;15614;15607:12;15571:2;15637:62;15691:7;15682:6;15671:9;15667:22;15637:62;;;15627:72;;15512:193;14807:908;;;;;;;;15722:727;;;;15892:2;15880:9;15871:7;15867:23;15863:32;15860:2;;;15908:1;15905;15898:12;15860:2;15943:31;;15994:18;15983:30;;15980:2;;;16026:1;16023;16016:12;15980:2;16046:76;16114:7;16105:6;16094:9;16090:22;16046:76;;;16036:86;;15922:206;16159:2;16177:53;16222:7;16213:6;16202:9;16198:22;16177:53;;16704:865;;;;;;;16897:3;16885:9;16876:7;16872:23;16868:33;16865:2;;;16914:1;16911;16904:12;16865:2;16949:1;16966:53;17011:7;16991:9;16966:53;;;16956:63;;16928:97;17056:2;17074:53;17119:7;17110:6;17099:9;17095:22;17074:53;;;17064:63;;17035:98;17192:2;17181:9;17177:18;17164:32;17216:18;17208:6;17205:30;17202:2;;;17248:1;17245;17238:12;17202:2;17276:64;17332:7;17323:6;17312:9;17308:22;17276:64;;;17258:82;;;;17143:203;17405:2;17394:9;17390:18;17377:32;17429:18;17421:6;17418:30;17415:2;;;17461:1;17458;17451:12;17415:2;17489:64;17545:7;17536:6;17525:9;17521:22;17489:64;;;17471:82;;;;17356:203;16859:710;;;;;;;;;17576:110;17649:31;17674:5;17649:31;;;17644:3;17637:44;17631:55;;;17760:755;;17941:77;18012:5;17941:77;;;18036:6;18031:3;18024:19;18060:4;18055:3;18051:14;18044:21;;18105:79;18178:5;18105:79;;;18205:1;18190:303;18215:6;18212:1;18209:13;18190:303;;;18255:103;18354:3;18345:6;18339:13;18255:103;;;18375:83;18451:6;18375:83;;;18481:4;18472:14;;;;;18365:93;-1:-1;18237:1;18230:9;18190:303;;;-1:-1;18506:3;;17920:595;-1:-1;;;;17920:595;18523:101;18590:28;18612:5;18590:28;;18631:110;18704:31;18729:5;18704:31;;18748:107;18819:30;18843:5;18819:30;;18862:297;;18962:38;18994:5;18962:38;;;19017:6;19012:3;19005:19;19029:63;19085:6;19078:4;19073:3;19069:14;19062:4;19055:5;19051:16;19029:63;;;19124:29;19146:6;19124:29;;;19104:50;;;19117:4;19104:50;;18942:217;-1:-1;;;18942:217;19462:156;19555:57;19606:5;19555:57;;19925:296;20080:2;20068:15;;20117:66;20112:2;20103:12;;20096:88;20212:2;20203:12;;20061:160;20230:296;20385:2;20373:15;;20422:66;20417:2;20408:12;;20401:88;20517:2;20508:12;;20366:160;20535:296;20690:2;20678:15;;20727:66;20722:2;20713:12;;20706:88;20822:2;20813:12;;20671:160;20840:296;20995:2;20983:15;;21032:66;21027:2;21018:12;;21011:88;21127:2;21118:12;;20976:160;21145:296;21300:2;21288:15;;21337:66;21332:2;21323:12;;21316:88;21432:2;21423:12;;21281:160;21450:397;21605:2;21593:15;;21642:66;21637:2;21628:12;;21621:88;21743:66;21738:2;21729:12;;21722:88;21838:2;21829:12;;21586:261;21856:296;22011:2;21999:15;;22048:66;22043:2;22034:12;;22027:88;22143:2;22134:12;;21992:160;22161:296;22316:2;22304:15;;22353:66;22348:2;22339:12;;22332:88;22448:2;22439:12;;22297:160;22466:296;22621:2;22609:15;;22658:66;22653:2;22644:12;;22637:88;22753:2;22744:12;;22602:160;22771:296;22926:2;22914:15;;22963:66;22958:2;22949:12;;22942:88;23058:2;23049:12;;22907:160;23076:296;23231:2;23219:15;;23268:66;23263:2;23254:12;;23247:88;23363:2;23354:12;;23212:160;23381:296;23536:2;23524:15;;23573:66;23568:2;23559:12;;23552:88;23668:2;23659:12;;23517:160;23686:296;23841:2;23829:15;;23878:66;23873:2;23864:12;;23857:88;23973:2;23964:12;;23822:160;23991:296;24146:2;24134:15;;24183:66;24178:2;24169:12;;24162:88;24278:2;24269:12;;24127:160;24296:296;24451:2;24439:15;;24488:66;24483:2;24474:12;;24467:88;24583:2;24574:12;;24432:160;24601:296;24756:2;24744:15;;24793:66;24788:2;24779:12;;24772:88;24888:2;24879:12;;24737:160;24906:296;25061:2;25049:15;;25098:66;25093:2;25084:12;;25077:88;25193:2;25184:12;;25042:160;25211:296;25366:2;25354:15;;25403:66;25398:2;25389:12;;25382:88;25498:2;25489:12;;25347:160;25516:397;25671:2;25659:15;;25708:66;25703:2;25694:12;;25687:88;25809:66;25804:2;25795:12;;25788:88;25904:2;25895:12;;25652:261;25922:296;26077:2;26065:15;;26114:66;26109:2;26100:12;;26093:88;26209:2;26200:12;;26058:160;26227:296;26382:2;26370:15;;26419:66;26414:2;26405:12;;26398:88;26514:2;26505:12;;26363:160;26532:296;26687:2;26675:15;;26724:66;26719:2;26710:12;;26703:88;26819:2;26810:12;;26668:160;26837:296;26992:2;26980:15;;27029:66;27024:2;27015:12;;27008:88;27124:2;27115:12;;26973:160;27142:296;27297:2;27285:15;;27334:66;27329:2;27320:12;;27313:88;27429:2;27420:12;;27278:160;27447:296;27602:2;27590:15;;27639:66;27634:2;27625:12;;27618:88;27734:2;27725:12;;27583:160;27752:296;27907:2;27895:15;;27944:66;27939:2;27930:12;;27923:88;28039:2;28030:12;;27888:160;28057:296;28212:2;28200:15;;28249:66;28244:2;28235:12;;28228:88;28344:2;28335:12;;28193:160;28362:397;28517:2;28505:15;;28554:66;28549:2;28540:12;;28533:88;28655:66;28650:2;28641:12;;28634:88;28750:2;28741:12;;28498:261;28768:296;28923:2;28911:15;;28960:66;28955:2;28946:12;;28939:88;29055:2;29046:12;;28904:160;29073:296;29228:2;29216:15;;29265:66;29260:2;29251:12;;29244:88;29360:2;29351:12;;29209:160;29378:296;29533:2;29521:15;;29570:66;29565:2;29556:12;;29549:88;29665:2;29656:12;;29514:160;29683:296;29838:2;29826:15;;29875:66;29870:2;29861:12;;29854:88;29970:2;29961:12;;29819:160;29988:296;30143:2;30131:15;;30180:66;30175:2;30166:12;;30159:88;30275:2;30266:12;;30124:160;30369:888;30597:22;;30510:4;30501:14;;;30631:61;30505:3;30597:22;30631:61;;;30530:174;30798:4;30791:5;30787:16;30781:23;30816:62;30872:4;30867:3;30863:14;30850:11;30816:62;;;30714:176;30974:4;30967:5;30963:16;30957:23;30992:62;31048:4;31043:3;31039:14;31026:11;30992:62;;;30900:166;31150:4;31143:5;31139:16;31133:23;31168:62;31224:4;31219:3;31215:14;31202:11;31168:62;;32323:815;32548:22;;32478:5;32469:15;;;32582:115;32473:3;32548:22;32582:115;;;32499:210;32786:4;32779:5;32775:16;32769:23;32804:116;32914:4;32909:3;32905:14;32892:11;32804:116;;;32719:213;33030:4;33023:5;33019:16;33013:23;33048:63;33104:5;33099:3;33095:15;33082:11;33048:63;;33206:695;33419:22;;33343:4;33334:14;;;33453:57;33338:3;33419:22;33453:57;;;33363:159;33603:4;33596:5;33592:16;33586:23;33621:62;33677:4;33672:3;33668:14;33655:11;33621:62;;;33532:163;33794:4;33787:5;33783:16;33777:23;33812:62;33868:4;33863:3;33859:14;33846:11;33812:62;;34784:104;34853:29;34876:5;34853:29;;34895:193;35003:2;34988:18;;35017:61;34992:9;35051:6;35017:61;;35095:1057;35427:3;35412:19;;35442:61;35416:9;35476:6;35442:61;;;35514:62;35572:2;35561:9;35557:18;35548:6;35514:62;;;35587;35645:2;35634:9;35630:18;35621:6;35587:62;;;35660;35718:2;35707:9;35703:18;35694:6;35660:62;;;35733:63;35791:3;35780:9;35776:19;35767:6;35733:63;;;35807;35865:3;35854:9;35850:19;35841:6;35807:63;;;35919:9;35913:4;35909:20;35903:3;35892:9;35888:19;35881:49;35944:62;36001:4;35992:6;35944:62;;;35936:70;;36055:9;36049:4;36045:20;36039:3;36028:9;36024:19;36017:49;36080:62;36137:4;36128:6;36080:62;;;36072:70;35398:754;-1:-1;;;;;;;;;;35398:754;36159:547;36351:2;36336:18;;36365:61;36340:9;36399:6;36365:61;;;36474:9;36468:4;36464:20;36459:2;36448:9;36444:18;36437:48;36499:62;36556:4;36547:6;36499:62;;;36491:70;;36609:9;36603:4;36599:20;36594:2;36583:9;36579:18;36572:48;36634:62;36691:4;36682:6;36634:62;;;36626:70;36322:384;-1:-1;;;;;36322:384;36713:433;36917:2;36931:47;;;36902:18;;36992:144;36902:18;37122:6;36992:144;;37153:181;37255:2;37240:18;;37269:55;37244:9;37297:6;37269:55;;37341:193;37449:2;37434:18;;37463:61;37438:9;37497:6;37463:61;;37541:479;37723:2;37708:18;;37737:61;37712:9;37771:6;37737:61;;;37809:62;37867:2;37856:9;37852:18;37843:6;37809:62;;;37919:9;37913:4;37909:20;37904:2;37893:9;37889:18;37882:48;37944:66;38005:4;37996:6;37944:66;;38027:378;38181:2;38166:18;;38195:61;38170:9;38229:6;38195:61;;;38304:9;38298:4;38294:20;38289:2;38278:9;38274:18;38267:48;38329:66;38390:4;38381:6;38329:66;;38412:489;38600:3;38585:19;;38615:61;38589:9;38649:6;38615:61;;;38687:58;38741:2;38730:9;38726:18;38717:6;38687:58;;;38756:62;38814:2;38803:9;38799:18;38790:6;38756:62;;;38829;38887:2;38876:9;38872:18;38863:6;38829:62;;38908:290;39042:2;39027:18;;39056:59;39031:9;39088:6;39056:59;;;39126:62;39184:2;39173:9;39169:18;39160:6;39126:62;;39205:269;39327:2;39341:47;;;39312:18;;39402:62;39312:18;39450:6;39402:62;;39481:233;39609:2;39594:18;;39623:81;39598:9;39677:6;39623:81;;40001:387;40182:2;40196:47;;;40167:18;;40257:121;40167:18;40257:121;;40395:387;40576:2;40590:47;;;40561:18;;40651:121;40561:18;40651:121;;40789:387;40970:2;40984:47;;;40955:18;;41045:121;40955:18;41045:121;;41183:387;41364:2;41378:47;;;41349:18;;41439:121;41349:18;41439:121;;41577:387;41758:2;41772:47;;;41743:18;;41833:121;41743:18;41833:121;;41971:387;42152:2;42166:47;;;42137:18;;42227:121;42137:18;42227:121;;42365:387;42546:2;42560:47;;;42531:18;;42621:121;42531:18;42621:121;;42759:387;42940:2;42954:47;;;42925:18;;43015:121;42925:18;43015:121;;43153:387;43334:2;43348:47;;;43319:18;;43409:121;43319:18;43409:121;;43547:387;43728:2;43742:47;;;43713:18;;43803:121;43713:18;43803:121;;43941:387;44122:2;44136:47;;;44107:18;;44197:121;44107:18;44197:121;;44335:387;44516:2;44530:47;;;44501:18;;44591:121;44501:18;44591:121;;44729:387;44910:2;44924:47;;;44895:18;;44985:121;44895:18;44985:121;;45123:387;45304:2;45318:47;;;45289:18;;45379:121;45289:18;45379:121;;45517:387;45698:2;45712:47;;;45683:18;;45773:121;45683:18;45773:121;;45911:387;46092:2;46106:47;;;46077:18;;46167:121;46077:18;46167:121;;46305:387;46486:2;46500:47;;;46471:18;;46561:121;46471:18;46561:121;;46699:387;46880:2;46894:47;;;46865:18;;46955:121;46865:18;46955:121;;47093:387;47274:2;47288:47;;;47259:18;;47349:121;47259:18;47349:121;;47487:387;47668:2;47682:47;;;47653:18;;47743:121;47653:18;47743:121;;47881:387;48062:2;48076:47;;;48047:18;;48137:121;48047:18;48137:121;;48275:387;48456:2;48470:47;;;48441:18;;48531:121;48441:18;48531:121;;48669:387;48850:2;48864:47;;;48835:18;;48925:121;48835:18;48925:121;;49063:387;49244:2;49258:47;;;49229:18;;49319:121;49229:18;49319:121;;49457:387;49638:2;49652:47;;;49623:18;;49713:121;49623:18;49713:121;;49851:387;50032:2;50046:47;;;50017:18;;50107:121;50017:18;50107:121;;50245:387;50426:2;50440:47;;;50411:18;;50501:121;50411:18;50501:121;;50639:387;50820:2;50834:47;;;50805:18;;50895:121;50805:18;50895:121;;51033:387;51214:2;51228:47;;;51199:18;;51289:121;51199:18;51289:121;;51427:387;51608:2;51622:47;;;51593:18;;51683:121;51593:18;51683:121;;51821:387;52002:2;52016:47;;;51987:18;;52077:121;51987:18;52077:121;;52215:387;52396:2;52410:47;;;52381:18;;52471:121;52381:18;52471:121;;52609:387;52790:2;52804:47;;;52775:18;;52865:121;52775:18;52865:121;;53003:310;53169:3;53154:19;;53184:119;53158:9;53276:6;53184:119;;53320:338;53500:3;53485:19;;53515:133;53489:9;53621:6;53515:133;;53665:301;53827:2;53812:18;;53841:115;53816:9;53929:6;53841:115;;54173:256;54235:2;54229:9;54261:17;;;54336:18;54321:34;;54357:22;;;54318:62;54315:2;;;54393:1;54390;54383:12;54315:2;54409;54402:22;54213:216;;-1:-1;54213:216;54436:263;;54600:18;54592:6;54589:30;54586:2;;;54632:1;54629;54622:12;54586:2;-1:-1;54661:4;54649:17;;;54679:15;;54523:176;55255:254;;55394:18;55386:6;55383:30;55380:2;;;55426:1;55423;55416:12;55380:2;-1:-1;55499:4;55470;55447:17;;;;-1:-1;;55443:33;55489:15;;55317:192;55783:144;55915:4;55903:17;;55884:43;55936:130;56049:12;;56033:33;56514:128;-1:-1;;;;;56583:54;;56566:76;56649:92;56722:13;56715:21;;56698:43;56748:79;56817:5;56800:27;56834:151;-1:-1;;;;;;56902:78;;56885:100;57078:88;57156:4;57145:16;;57128:38;57737:135;;57836:31;57861:5;57836:31;;57880:145;57961:6;57956:3;57951;57938:30;-1:-1;58017:1;57999:16;;57992:27;57931:94;58034:268;58099:1;58106:101;58120:6;58117:1;58114:13;58106:101;;;58187:11;;;58181:18;58168:11;;;58161:39;58142:2;58135:10;58106:101;;;58222:6;58219:1;58216:13;58213:2;;;-1:-1;;58287:1;58269:16;;58262:27;58083:219;58310:97;58398:2;58378:14;-1:-1;;58374:28;;58358:49"
			}
		}
	},
	"sourceTreeHashHex": "0x865cd00c08be8c510cbfc8e5209fc65449723b8b5c4dc39d57fe75392f34b4d9",
	"sources": {
		"./Exchange.sol": {
			"id": 1,
			"content": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n\ncontract ReentrancyGuard {\n\n    // Locked state of mutex\n    bool private locked = false;\n\n    /// @dev Functions with this modifer cannot be reentered. The mutex will be locked\n    ///      before function execution and unlocked after.\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(\n            !locked,\n            \"REENTRANCY_ILLEGAL\"\n        );\n\n        // Lock mutex before function call\n        locked = true;\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        locked = false;\n    }\n}\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n\n// solhint-disable max-line-length\ncontract LibConstants {\n\n    // Asset data for ZRX token. Used for fee transfers.\n\n    // The proxyId for ZRX_ASSET_DATA is bytes4(keccak256(\"ERC20Token(address)\")) = 0xf47261b0\n\n    // Kovan ZRX address is 0x6ff6c0ff1d68b964901f986d4c9fa3ac68346570.\n    // The ABI encoded proxyId and address is 0xf47261b00000000000000000000000006ff6c0ff1d68b964901f986d4c9fa3ac68346570\n    // bytes constant public ZRX_ASSET_DATA = \"\\xf4\\x72\\x61\\xb0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x6f\\xf6\\xc0\\xff\\x1d\\x68\\xb9\\x64\\x90\\x1f\\x98\\x6d\\x4c\\x9f\\xa3\\xac\\x68\\x34\\x65\\x70\";\n\n    // Mainnet ZRX address is 0xe41d2489571d322189246dafa5ebde1f4699f498.\n    // The ABI encoded proxyId and address is 0xf47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498\n    bytes constant public ZRX_ASSET_DATA = \"\\xf4\\x72\\x61\\xb0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xe4\\x1d\\x24\\x89\\x57\\x1d\\x32\\x21\\x89\\x24\\x6d\\xaf\\xa5\\xeb\\xde\\x1f\\x46\\x99\\xf4\\x98\";\n}\n// solhint-enable max-line-length\n\ncontract LibEIP712 {\n\n    // EIP191 header for EIP712 prefix\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            bytes32(address(this))\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n\ncontract LibFillResults is\n    SafeMath\n{\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n\ncontract LibMath is\n    SafeMath\n{\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        require(\n            !isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n            ),\n            \"ROUNDING_ERROR\"\n        );\n\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        require(\n            !isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n            ),\n            \"ROUNDING_ERROR\"\n        );\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = safeDiv(\n            safeAdd(\n                safeMul(numerator, target),\n                safeSub(denominator, 1)\n            ),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = safeDiv(\n            safeAdd(\n                safeMul(numerator, target),\n                safeSub(denominator, 1)\n            ),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = safeSub(denominator, remainder) % denominator;\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\n        return isError;\n    }\n}\n\ncontract LibOrder is\n    LibEIP712\n{\n    // Hash for the EIP712 Order Schema\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     bytes32(order.makerAddress),\n        //     bytes32(order.takerAddress),\n        //     bytes32(order.feeRecipientAddress),\n        //     bytes32(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData)\n        // ));\n\n        assembly {\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, makerAssetDataHash)\n            mstore(pos3, takerAssetDataHash)\n            result := keccak256(pos1, 416)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n        }\n        return result;\n    }\n}\n\ncontract LibAbiEncoder {\n\n    /// @dev ABI encodes calldata for `fillOrder`.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return ABI encoded calldata for `fillOrder`.\n    function abiEncodeFillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory fillOrderCalldata)\n    {\n        // We need to call MExchangeCore.fillOrder using a delegatecall in\n        // assembly so that we can intercept a call that throws. For this, we\n        // need the input encoded in memory in the Ethereum ABIv2 format [1].\n\n        // | Area     | Offset | Length  | Contents                                    |\n        // | -------- |--------|---------|-------------------------------------------- |\n        // | Header   | 0x00   | 4       | function selector                           |\n        // | Params   |        | 3 * 32  | function parameters:                        |\n        // |          | 0x00   |         |   1. offset to order (*)                    |\n        // |          | 0x20   |         |   2. takerAssetFillAmount                   |\n        // |          | 0x40   |         |   3. offset to signature (*)                |\n        // | Data     |        | 12 * 32 | order:                                      |\n        // |          | 0x000  |         |   1.  senderAddress                         |\n        // |          | 0x020  |         |   2.  makerAddress                          |\n        // |          | 0x040  |         |   3.  takerAddress                          |\n        // |          | 0x060  |         |   4.  feeRecipientAddress                   |\n        // |          | 0x080  |         |   5.  makerAssetAmount                      |\n        // |          | 0x0A0  |         |   6.  takerAssetAmount                      |\n        // |          | 0x0C0  |         |   7.  makerFeeAmount                        |\n        // |          | 0x0E0  |         |   8.  takerFeeAmount                        |\n        // |          | 0x100  |         |   9.  expirationTimeSeconds                 |\n        // |          | 0x120  |         |   10. salt                                  |\n        // |          | 0x140  |         |   11. Offset to makerAssetData (*)          |\n        // |          | 0x160  |         |   12. Offset to takerAssetData (*)          |\n        // |          | 0x180  | 32      | makerAssetData Length                       |\n        // |          | 0x1A0  | **      | makerAssetData Contents                     |\n        // |          | 0x1C0  | 32      | takerAssetData Length                       |\n        // |          | 0x1E0  | **      | takerAssetData Contents                     |\n        // |          | 0x200  | 32      | signature Length                            |\n        // |          | 0x220  | **      | signature Contents                          |\n\n        // * Offsets are calculated from the beginning of the current area: Header, Params, Data:\n        //     An offset stored in the Params area is calculated from the beginning of the Params section.\n        //     An offset stored in the Data area is calculated from the beginning of the Data section.\n\n        // ** The length of dynamic array contents are stored in the field immediately preceeding the contents.\n\n        // [1]: https://solidity.readthedocs.io/en/develop/abi-spec.html\n\n        assembly {\n\n            // Areas below may use the following variables:\n            //   1. <area>Start   -- Start of this area in memory\n            //   2. <area>End     -- End of this area in memory. This value may\n            //                       be precomputed (before writing contents),\n            //                       or it may be computed as contents are written.\n            //   3. <area>Offset  -- Current offset into area. If an area's End\n            //                       is precomputed, this variable tracks the\n            //                       offsets of contents as they are written.\n\n            /////// Setup Header Area ///////\n            // Load free memory pointer\n            fillOrderCalldata := mload(0x40)\n            // bytes4(keccak256(\"fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)\"))\n            // = 0xb4be83d5\n            // Leave 0x20 bytes to store the length\n            mstore(add(fillOrderCalldata, 0x20), 0xb4be83d500000000000000000000000000000000000000000000000000000000)\n            let headerAreaEnd := add(fillOrderCalldata, 0x24)\n\n            /////// Setup Params Area ///////\n            // This area is preallocated and written to later.\n            // This is because we need to fill in offsets that have not yet been calculated.\n            let paramsAreaStart := headerAreaEnd\n            let paramsAreaEnd := add(paramsAreaStart, 0x60)\n            let paramsAreaOffset := paramsAreaStart\n\n            /////// Setup Data Area ///////\n            let dataAreaStart := paramsAreaEnd\n            let dataAreaEnd := dataAreaStart\n\n            // Offset from the source data we're reading from\n            let sourceOffset := order\n            // arrayLenBytes and arrayLenWords track the length of a dynamically-allocated bytes array.\n            let arrayLenBytes := 0\n            let arrayLenWords := 0\n\n            /////// Write order Struct ///////\n            // Write memory location of Order, relative to the start of the\n            // parameter list, then increment the paramsAreaOffset respectively.\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            // Write values for each field in the order\n            // It would be nice to use a loop, but we save on gas by writing\n            // the stores sequentially.\n            mstore(dataAreaEnd, mload(sourceOffset))                            // makerAddress\n            mstore(add(dataAreaEnd, 0x20), mload(add(sourceOffset, 0x20)))      // takerAddress\n            mstore(add(dataAreaEnd, 0x40), mload(add(sourceOffset, 0x40)))      // feeRecipientAddress\n            mstore(add(dataAreaEnd, 0x60), mload(add(sourceOffset, 0x60)))      // senderAddress\n            mstore(add(dataAreaEnd, 0x80), mload(add(sourceOffset, 0x80)))      // makerAssetAmount\n            mstore(add(dataAreaEnd, 0xA0), mload(add(sourceOffset, 0xA0)))      // takerAssetAmount\n            mstore(add(dataAreaEnd, 0xC0), mload(add(sourceOffset, 0xC0)))      // makerFeeAmount\n            mstore(add(dataAreaEnd, 0xE0), mload(add(sourceOffset, 0xE0)))      // takerFeeAmount\n            mstore(add(dataAreaEnd, 0x100), mload(add(sourceOffset, 0x100)))    // expirationTimeSeconds\n            mstore(add(dataAreaEnd, 0x120), mload(add(sourceOffset, 0x120)))    // salt\n            mstore(add(dataAreaEnd, 0x140), mload(add(sourceOffset, 0x140)))    // Offset to makerAssetData\n            mstore(add(dataAreaEnd, 0x160), mload(add(sourceOffset, 0x160)))    // Offset to takerAssetData\n            dataAreaEnd := add(dataAreaEnd, 0x180)\n            sourceOffset := add(sourceOffset, 0x180)\n\n            // Write offset to <order.makerAssetData>\n            mstore(add(dataAreaStart, mul(10, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.makerAssetData>\n            sourceOffset := mload(add(order, 0x140)) // makerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.makerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of <order.makerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Write offset to <order.takerAssetData>\n            mstore(add(dataAreaStart, mul(11, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.takerAssetData>\n            sourceOffset := mload(add(order, 0x160)) // takerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.takerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of  <order.takerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            /////// Write takerAssetFillAmount ///////\n            mstore(paramsAreaOffset, takerAssetFillAmount)\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            /////// Write signature ///////\n            // Write offset to paramsArea\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n\n            // Calculate length of signature\n            sourceOffset := signature\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of signature\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of signature\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Set length of calldata\n            mstore(fillOrderCalldata, sub(dataAreaEnd, add(fillOrderCalldata, 0x20)))\n\n            // Increment free memory pointer\n            mstore(0x40, dataAreaEnd)\n        }\n\n        return fillOrderCalldata;\n    }\n}\n\ncontract IOwnable {\n\n    function transferOwnership(address newOwner)\n        public;\n}\n\ncontract IAuthorizable is\n    IOwnable\n{\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory);\n}\n\ncontract IAssetProxy is\n    IAuthorizable\n{\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4);\n}\n\ncontract IValidator {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n\ncontract IWallet {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        external;\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes data,\n        bytes signature\n    )\n        external;\n}\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public;\n\n    /// @dev Fetches information for all passed in orders\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory);\n}\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    IWrapperFunctions\n{}\n\ncontract MExchangeCore is\n    IExchangeCore\n{\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that received fees.\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker.\n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of ZRX paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of ZRX paid to feeRecipient by taker.\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getOrderHash).\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData                  // Encoded data specific to takerAsset.\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getOrderHash).\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData                  // Encoded data specific to takerAsset.\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed senderAddress,        // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders with specified makerAddress and senderAddress with a salt less than this value are considered cancelled.\n    );\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderInternal(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrderInternal(LibOrder.Order memory order)\n        internal;\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function updateFilledState(\n        LibOrder.Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal;\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        LibOrder.Order memory order,\n        bytes32 orderHash\n    )\n        internal;\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertFillableOrder(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo,\n        address takerAddress,\n        bytes memory signature\n    )\n        internal\n        view;\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo Status, orderHash, and amount already filled of order.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param makerAssetFilledAmount Amount of makerAsset that will be transfered.\n    function assertValidFill(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo,\n        uint256 takerAssetFillAmount,\n        uint256 takerAssetFilledAmount,\n        uint256 makerAssetFilledAmount\n    )\n        internal\n        view;\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo\n    )\n        internal\n        view;\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.FillResults memory fillResults);\n\n}\n\ncontract MAssetProxyDispatcher is\n    IAssetProxyDispatcher\n{\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the asset.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal;\n}\n\ncontract MMatchOrders is\n    IMatchOrders\n{\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure;\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n\n}\n\ncontract MSignatureValidator is\n    ISignatureValidator\n{\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool approved                      // Approval or disapproval of validator contract.\n    );\n\n    // Allowed signature types.\n    enum SignatureType {\n        Illegal,         // 0x00, default value\n        Invalid,         // 0x01\n        EIP712,          // 0x02\n        EthSign,         // 0x03\n        Wallet,          // 0x04\n        Validator,       // 0x05\n        PreSigned,       // 0x06\n        NSignatureTypes  // 0x07, number of signature types. Always leave at end.\n    }\n\n    /// @dev Verifies signature using logic defined by Wallet contract.\n    /// @param hash Any 32 byte hash.\n    /// @param walletAddress Address that should have signed the given hash\n    ///                      and defines its own signature verification method.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidWalletSignature(\n        bytes32 hash,\n        address walletAddress,\n        bytes signature\n    )\n        internal\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies signature using logic defined by Validator contract.\n    /// @param validatorAddress Address of validator contract.\n    /// @param hash Any 32 byte hash.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidValidatorSignature(\n        address validatorAddress,\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        internal\n        view\n        returns (bool isValid);\n}\n\ncontract MTransactions is\n    ITransactions\n{\n    // Hash for the EIP712 ZeroEx Transaction Schema\n    bytes32 constant internal EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"ZeroExTransaction(\",\n        \"uint256 salt,\",\n        \"address signerAddress,\",\n        \"bytes data\",\n        \")\"\n    ));\n\n    /// @dev Calculates EIP712 hash of the Transaction.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @return EIP712 hash of the Transaction.\n    function hashZeroExTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes memory data\n    )\n        internal\n        pure\n        returns (bytes32 result);\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n\ncontract MWrapperFunctions is\n    IWrapperFunctions\n{\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrderInternal(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (LibFillResults.FillResults memory fillResults);\n}\n\ncontract Ownable is\n    IOwnable\n{\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"ONLY_CONTRACT_OWNER\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\ncontract MixinExchangeCore is\n    ReentrancyGuard,\n    LibConstants,\n    LibMath,\n    LibOrder,\n    LibFillResults,\n    MAssetProxyDispatcher,\n    MExchangeCore,\n    MSignatureValidator,\n    MTransactions\n{\n    // Mapping of orderHash => amount of takerAsset already bought by maker\n    mapping (bytes32 => uint256) public filled;\n\n    // Mapping of orderHash => cancelled\n    mapping (bytes32 => bool) public cancelled;\n\n    // Mapping of makerAddress => senderAddress => lowest salt an order can have in order to be fillable\n    // Orders with specified senderAddress and with a salt less than their epoch are considered cancelled\n    mapping (address => mapping (address => uint256)) public orderEpoch;\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n        nonReentrant\n    {\n        address makerAddress = getCurrentContextAddress();\n        // If this function is called via `executeTransaction`, we only update the orderEpoch for the makerAddress/msg.sender combination.\n        // This allows external filter contracts to add rules to how orders are cancelled via this function.\n        address senderAddress = makerAddress == msg.sender ? address(0) : msg.sender;\n\n        // orderEpoch is initialized to 0, so to cancelUpTo we need salt + 1\n        uint256 newOrderEpoch = targetOrderEpoch + 1;\n        uint256 oldOrderEpoch = orderEpoch[makerAddress][senderAddress];\n\n        // Ensure orderEpoch is monotonically increasing\n        require(\n            newOrderEpoch > oldOrderEpoch,\n            \"INVALID_NEW_ORDER_EPOCH\"\n        );\n\n        // Update orderEpoch\n        orderEpoch[makerAddress][senderAddress] = newOrderEpoch;\n        emit CancelUpTo(\n            makerAddress,\n            senderAddress,\n            newOrderEpoch\n        );\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        nonReentrant\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrderInternal(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }\n\n    /// @dev After calling, the order can not be filled anymore.\n    ///      Throws if order is invalid or sender does not have permission to cancel.\n    /// @param order Order to cancel. Order must be OrderStatus.FILLABLE.\n    function cancelOrder(Order memory order)\n        public\n        nonReentrant\n    {\n        cancelOrderInternal(order);\n    }\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///         See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(Order memory order)\n        public\n        view\n        returns (OrderInfo memory orderInfo)\n    {\n        // Compute the order hash\n        orderInfo.orderHash = getOrderHash(order);\n\n        // Fetch filled amount\n        orderInfo.orderTakerAssetFilledAmount = filled[orderInfo.orderHash];\n\n        // If order.makerAssetAmount is zero, we also reject the order.\n        // While the Exchange contract handles them correctly, they create\n        // edge cases in the supporting infrastructure because they have\n        // an 'infinite' price when computed by a simple division.\n        if (order.makerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_MAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // If order.takerAssetAmount is zero, then the order will always\n        // be considered filled because 0 == takerAssetAmount == orderTakerAssetFilledAmount\n        // Instead of distinguishing between unfilled and filled zero taker\n        // amount orders, we choose not to support them.\n        if (order.takerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_TAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // Validate order availability\n        if (orderInfo.orderTakerAssetFilledAmount >= order.takerAssetAmount) {\n            orderInfo.orderStatus = uint8(OrderStatus.FULLY_FILLED);\n            return orderInfo;\n        }\n\n        // Validate order expiration\n        // solhint-disable-next-line not-rely-on-time\n        if (block.timestamp >= order.expirationTimeSeconds) {\n            orderInfo.orderStatus = uint8(OrderStatus.EXPIRED);\n            return orderInfo;\n        }\n\n        // Check if order has been cancelled\n        if (cancelled[orderInfo.orderHash]) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n        if (orderEpoch[order.makerAddress][order.senderAddress] > order.salt) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n\n        // All other statuses are ruled out: order is Fillable\n        orderInfo.orderStatus = uint8(OrderStatus.FILLABLE);\n        return orderInfo;\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderInternal(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (FillResults memory fillResults)\n    {\n        // Fetch order info\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Assert that the order is fillable by taker\n        assertFillableOrder(\n            order,\n            orderInfo,\n            takerAddress,\n            signature\n        );\n\n        // Get amount of takerAsset to fill\n        uint256 remainingTakerAssetAmount = safeSub(order.takerAssetAmount, orderInfo.orderTakerAssetFilledAmount);\n        uint256 takerAssetFilledAmount = min256(takerAssetFillAmount, remainingTakerAssetAmount);\n\n        // Validate context\n        assertValidFill(\n            order,\n            orderInfo,\n            takerAssetFillAmount,\n            takerAssetFilledAmount,\n            fillResults.makerAssetFilledAmount\n        );\n\n        // Compute proportional fill amounts\n        fillResults = calculateFillResults(order, takerAssetFilledAmount);\n\n        // Update exchange internal state\n        updateFilledState(\n            order,\n            takerAddress,\n            orderInfo.orderHash,\n            orderInfo.orderTakerAssetFilledAmount,\n            fillResults\n        );\n\n        // Settle order\n        settleOrder(\n            order,\n            takerAddress,\n            fillResults\n        );\n\n        return fillResults;\n    }\n\n    /// @dev After calling, the order can not be filled anymore.\n    ///      Throws if order is invalid or sender does not have permission to cancel.\n    /// @param order Order to cancel. Order must be OrderStatus.FILLABLE.\n    function cancelOrderInternal(Order memory order)\n        internal\n    {\n        // Fetch current order status\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Validate context\n        assertValidCancel(order, orderInfo);\n\n        // Perform cancel\n        updateCancelledState(order, orderInfo.orderHash);\n    }\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    function updateFilledState(\n        Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        FillResults memory fillResults\n    )\n        internal\n    {\n        // Update state\n        filled[orderHash] = safeAdd(orderTakerAssetFilledAmount, fillResults.takerAssetFilledAmount);\n\n        // Log order\n        emit Fill(\n            order.makerAddress,\n            order.feeRecipientAddress,\n            takerAddress,\n            msg.sender,\n            fillResults.makerAssetFilledAmount,\n            fillResults.takerAssetFilledAmount,\n            fillResults.makerFeePaid,\n            fillResults.takerFeePaid,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        Order memory order,\n        bytes32 orderHash\n    )\n        internal\n    {\n        // Perform cancel\n        cancelled[orderHash] = true;\n\n        // Log cancel\n        emit Cancel(\n            order.makerAddress,\n            order.feeRecipientAddress,\n            msg.sender,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertFillableOrder(\n        Order memory order,\n        OrderInfo memory orderInfo,\n        address takerAddress,\n        bytes memory signature\n    )\n        internal\n        view\n    {\n        // An order can only be filled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            \"ORDER_UNFILLABLE\"\n        );\n\n        // Validate sender is allowed to fill this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                \"INVALID_SENDER\"\n            );\n        }\n\n        // Validate taker is allowed to fill this order\n        if (order.takerAddress != address(0)) {\n            require(\n                order.takerAddress == takerAddress,\n                \"INVALID_TAKER\"\n            );\n        }\n\n        // Validate Maker signature (check only if first time seen)\n        if (orderInfo.orderTakerAssetFilledAmount == 0) {\n            require(\n                isValidSignature(\n                    orderInfo.orderHash,\n                    order.makerAddress,\n                    signature\n                ),\n                \"INVALID_ORDER_SIGNATURE\"\n            );\n        }\n    }\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param makerAssetFilledAmount Amount of makerAsset that will be transfered.\n    function assertValidFill(\n        Order memory order,\n        OrderInfo memory orderInfo,\n        uint256 takerAssetFillAmount,  // TODO: use FillResults\n        uint256 takerAssetFilledAmount,\n        uint256 makerAssetFilledAmount\n    )\n        internal\n        view\n    {\n        // Revert if fill amount is invalid\n        // TODO: reconsider necessity for v2.1\n        require(\n            takerAssetFillAmount != 0,\n            \"INVALID_TAKER_AMOUNT\"\n        );\n\n        // Make sure taker does not pay more than desired amount\n        // NOTE: This assertion should never fail, it is here\n        //       as an extra defence against potential bugs.\n        require(\n            takerAssetFilledAmount <= takerAssetFillAmount,\n            \"TAKER_OVERPAY\"\n        );\n\n        // Make sure order is not overfilled\n        // NOTE: This assertion should never fail, it is here\n        //       as an extra defence against potential bugs.\n        require(\n            safeAdd(orderInfo.orderTakerAssetFilledAmount, takerAssetFilledAmount) <= order.takerAssetAmount,\n            \"ORDER_OVERFILL\"\n        );\n\n        // Make sure order is filled at acceptable price.\n        // The order has an implied price from the makers perspective:\n        //    order price = order.makerAssetAmount / order.takerAssetAmount\n        // i.e. the number of makerAsset maker is paying per takerAsset. The\n        // maker is guaranteed to get this price or a better (lower) one. The\n        // actual price maker is getting in this fill is:\n        //    fill price = makerAssetFilledAmount / takerAssetFilledAmount\n        // We need `fill price <= order price` for the fill to be fair to maker.\n        // This amounts to:\n        //     makerAssetFilledAmount        order.makerAssetAmount\n        //    ------------------------  <=  -----------------------\n        //     takerAssetFilledAmount        order.takerAssetAmount\n        // or, equivalently:\n        //     makerAssetFilledAmount * order.takerAssetAmount <=\n        //     order.makerAssetAmount * takerAssetFilledAmount\n        // NOTE: This assertion should never fail, it is here\n        //       as an extra defence against potential bugs.\n        require(\n            safeMul(makerAssetFilledAmount, order.takerAssetAmount)\n            <=\n            safeMul(order.makerAssetAmount, takerAssetFilledAmount),\n            \"INVALID_FILL_PRICE\"\n        );\n    }\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        Order memory order,\n        OrderInfo memory orderInfo\n    )\n        internal\n        view\n    {\n        // Ensure order is valid\n        // An order can only be cancelled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            \"ORDER_UNFILLABLE\"\n        );\n\n        // Validate sender is allowed to cancel this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                \"INVALID_SENDER\"\n            );\n        }\n\n        // Validate transaction signed by maker\n        address makerAddress = getCurrentContextAddress();\n        require(\n            order.makerAddress == makerAddress,\n            \"INVALID_MAKER\"\n        );\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = safeGetPartialAmountFloor(\n            fillResults.makerAssetFilledAmount,\n            order.makerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        return fillResults;\n    }\n\n    /// @dev Settles an order by transferring assets between counterparties.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAddress Address selling takerAsset and buying makerAsset.\n    /// @param fillResults Amounts to be filled and fees paid by maker and taker.\n    function settleOrder(\n        LibOrder.Order memory order,\n        address takerAddress,\n        LibFillResults.FillResults memory fillResults\n    )\n        private\n    {\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        dispatchTransferFrom(\n            order.makerAssetData,\n            order.makerAddress,\n            takerAddress,\n            fillResults.makerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            order.takerAssetData,\n            takerAddress,\n            order.makerAddress,\n            fillResults.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            order.makerAddress,\n            order.feeRecipientAddress,\n            fillResults.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            takerAddress,\n            order.feeRecipientAddress,\n            fillResults.takerFeePaid\n        );\n    }\n}\n\ncontract MixinSignatureValidator is\n    ReentrancyGuard,\n    MSignatureValidator,\n    MTransactions\n{\n    using LibBytes for bytes;\n\n    // Mapping of hash => signer => signed\n    mapping (bytes32 => mapping (address => bool)) public preSigned;\n\n    // Mapping of signer => validator => approved\n    mapping (address => mapping (address => bool)) public allowedValidators;\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        external\n    {\n        if (signerAddress != msg.sender) {\n            require(\n                isValidSignature(\n                    hash,\n                    signerAddress,\n                    signature\n                ),\n                \"INVALID_SIGNATURE\"\n            );\n        }\n        preSigned[hash][signerAddress] = true;\n    }\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n        nonReentrant\n    {\n        address signerAddress = getCurrentContextAddress();\n        allowedValidators[signerAddress][validatorAddress] = approval;\n        emit SignatureValidatorApproval(\n            signerAddress,\n            validatorAddress,\n            approval\n        );\n    }\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32 byte hash.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid)\n    {\n        require(\n            signature.length > 0,\n            \"LENGTH_GREATER_THAN_0_REQUIRED\"\n        );\n\n        // Pop last byte off of signature byte array.\n        uint8 signatureTypeRaw = uint8(signature.popLastByte());\n\n        // Ensure signature is supported\n        require(\n            signatureTypeRaw < uint8(SignatureType.NSignatureTypes),\n            \"SIGNATURE_UNSUPPORTED\"\n        );\n\n        SignatureType signatureType = SignatureType(signatureTypeRaw);\n\n        // Variables are not scoped in Solidity.\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        address recovered;\n\n        // Always illegal signature.\n        // This is always an implicit option since a signer can create a\n        // signature array with invalid type or length. We may as well make\n        // it an explicit option. This aids testing and analysis. It is\n        // also the initialization value for the enum type.\n        if (signatureType == SignatureType.Illegal) {\n            revert(\"SIGNATURE_ILLEGAL\");\n\n        // Always invalid signature.\n        // Like Illegal, this is always implicitly available and therefore\n        // offered explicitly. It can be implicitly created by providing\n        // a correctly formatted but incorrect signature.\n        } else if (signatureType == SignatureType.Invalid) {\n            require(\n                signature.length == 0,\n                \"LENGTH_0_REQUIRED\"\n            );\n            isValid = false;\n            return isValid;\n\n        // Signature using EIP712\n        } else if (signatureType == SignatureType.EIP712) {\n            require(\n                signature.length == 65,\n                \"LENGTH_65_REQUIRED\"\n            );\n            v = uint8(signature[0]);\n            r = signature.readBytes32(1);\n            s = signature.readBytes32(33);\n            recovered = ecrecover(\n                hash,\n                v,\n                r,\n                s\n            );\n            isValid = signerAddress == recovered;\n            return isValid;\n\n        // Signed using web3.eth_sign\n        } else if (signatureType == SignatureType.EthSign) {\n            require(\n                signature.length == 65,\n                \"LENGTH_65_REQUIRED\"\n            );\n            v = uint8(signature[0]);\n            r = signature.readBytes32(1);\n            s = signature.readBytes32(33);\n            recovered = ecrecover(\n                keccak256(abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    hash\n                )),\n                v,\n                r,\n                s\n            );\n            isValid = signerAddress == recovered;\n            return isValid;\n\n        // Signature verified by wallet contract.\n        // If used with an order, the maker of the order is the wallet contract.\n        } else if (signatureType == SignatureType.Wallet) {\n            isValid = isValidWalletSignature(\n                hash,\n                signerAddress,\n                signature\n            );\n            return isValid;\n\n        // Signature verified by validator contract.\n        // If used with an order, the maker of the order can still be an EOA.\n        // A signature using this type should be encoded as:\n        // | Offset   | Length | Contents                        |\n        // | 0x00     | x      | Signature to validate           |\n        // | 0x00 + x | 20     | Address of validator contract   |\n        // | 0x14 + x | 1      | Signature type is always \"\\x06\" |\n        } else if (signatureType == SignatureType.Validator) {\n            // Pop last 20 bytes off of signature byte array.\n            address validatorAddress = signature.popLast20Bytes();\n\n            // Ensure signer has approved validator.\n            if (!allowedValidators[signerAddress][validatorAddress]) {\n                return false;\n            }\n            isValid = isValidValidatorSignature(\n                validatorAddress,\n                hash,\n                signerAddress,\n                signature\n            );\n            return isValid;\n\n        // Signer signed hash previously using the preSign function.\n        } else if (signatureType == SignatureType.PreSigned) {\n            isValid = preSigned[hash][signerAddress];\n            return isValid;\n        }\n\n        // Anything else is illegal (We do not return false because\n        // the signature may actually be valid, just not in a format\n        // that we currently support. In this case returning false\n        // may lead the caller to incorrectly believe that the\n        // signature was invalid.)\n        revert(\"SIGNATURE_UNSUPPORTED\");\n    }\n\n    /// @dev Verifies signature using logic defined by Wallet contract.\n    /// @param hash Any 32 byte hash.\n    /// @param walletAddress Address that should have signed the given hash\n    ///                      and defines its own signature verification method.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if signature is valid for given wallet..\n    function isValidWalletSignature(\n        bytes32 hash,\n        address walletAddress,\n        bytes signature\n    )\n        internal\n        view\n        returns (bool isValid)\n    {\n        bytes memory calldata = abi.encodeWithSelector(\n            IWallet(walletAddress).isValidSignature.selector,\n            hash,\n            signature\n        );\n        assembly {\n            let cdStart := add(calldata, 32)\n            let success := staticcall(\n                gas,              // forward all gas\n                walletAddress,    // address of Wallet contract\n                cdStart,          // pointer to start of input\n                mload(calldata),  // length of input\n                cdStart,          // write output over input\n                32                // output size is 32 bytes\n            )\n\n            switch success\n            case 0 {\n                // Revert with `Error(\"WALLET_ERROR\")`\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000000c57414c4c45545f4552524f5200000000000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n            case 1 {\n                // Signature is valid if call did not revert and returned true\n                isValid := mload(cdStart)\n            }\n        }\n        return isValid;\n    }\n\n    /// @dev Verifies signature using logic defined by Validator contract.\n    /// @param validatorAddress Address of validator contract.\n    /// @param hash Any 32 byte hash.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidValidatorSignature(\n        address validatorAddress,\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        internal\n        view\n        returns (bool isValid)\n    {\n        bytes memory calldata = abi.encodeWithSelector(\n            IValidator(signerAddress).isValidSignature.selector,\n            hash,\n            signerAddress,\n            signature\n        );\n        assembly {\n            let cdStart := add(calldata, 32)\n            let success := staticcall(\n                gas,               // forward all gas\n                validatorAddress,  // address of Validator contract\n                cdStart,           // pointer to start of input\n                mload(calldata),   // length of input\n                cdStart,           // write output over input\n                32                 // output size is 32 bytes\n            )\n\n            switch success\n            case 0 {\n                // Revert with `Error(\"VALIDATOR_ERROR\")`\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000000f56414c494441544f525f4552524f5200000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n            case 1 {\n                // Signature is valid if call did not revert and returned true\n                isValid := mload(cdStart)\n            }\n        }\n        return isValid;\n    }\n}\n\ncontract MixinWrapperFunctions is\n    ReentrancyGuard,\n    LibMath,\n    LibFillResults,\n    LibAbiEncoder,\n    MExchangeCore,\n    MWrapperFunctions\n{\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        nonReentrant\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrKillOrderInternal(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }\n\n    /// @dev Fills the input order.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        // ABI encode calldata for `fillOrder`\n        bytes memory fillOrderCalldata = abiEncodeFillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n\n        // Delegate to `fillOrder` and handle any exceptions gracefully\n        assembly {\n            let success := delegatecall(\n                gas,                                // forward all gas\n                address,                            // call address of this contract\n                add(fillOrderCalldata, 32),         // pointer to start of input (skip array length in first 32 bytes)\n                mload(fillOrderCalldata),           // length of input\n                fillOrderCalldata,                  // write output over input\n                128                                 // output size is 128 bytes\n            )\n            if success {\n                mstore(fillResults, mload(fillOrderCalldata))\n                mstore(add(fillResults, 32), mload(add(fillOrderCalldata, 32)))\n                mstore(add(fillResults, 64), mload(add(fillOrderCalldata, 64)))\n                mstore(add(fillResults, 96), mload(add(fillOrderCalldata, 96)))\n            }\n        }\n        // fillResults values will be 0 by default if call was unsuccessful\n        return fillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            FillResults memory singleFillResults = fillOrderInternal(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            FillResults memory singleFillResults = fillOrKillOrderInternal(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderInternal(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount >= takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount >= takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmountFloor(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderInternal(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount >= makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmountFloor(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount >= makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        nonReentrant\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            cancelOrderInternal(orders[i]);\n        }\n    }\n\n    /// @dev Fetches information for all passed in orders.\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory)\n    {\n        uint256 ordersLength = orders.length;\n        LibOrder.OrderInfo[] memory ordersInfo = new LibOrder.OrderInfo[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            ordersInfo[i] = getOrderInfo(orders[i]);\n        }\n        return ordersInfo;\n    }\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrderInternal(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrderInternal(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        require(\n            fillResults.takerAssetFilledAmount == takerAssetFillAmount,\n            \"COMPLETE_FILL_FAILED\"\n        );\n        return fillResults;\n    }\n}\n\ncontract MixinTransactions is\n    LibEIP712,\n    MSignatureValidator,\n    MTransactions\n{\n    // Mapping of transaction hash => executed\n    // This prevents transactions from being executed more than once.\n    mapping (bytes32 => bool) public transactions;\n\n    // Address of current transaction signer\n    address public currentContextAddress;\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes data,\n        bytes signature\n    )\n        external\n    {\n        // Prevent reentrancy\n        require(\n            currentContextAddress == address(0),\n            \"REENTRANCY_ILLEGAL\"\n        );\n\n        bytes32 transactionHash = hashEIP712Message(hashZeroExTransaction(\n            salt,\n            signerAddress,\n            data\n        ));\n\n        // Validate transaction has not been executed\n        require(\n            !transactions[transactionHash],\n            \"INVALID_TX_HASH\"\n        );\n\n        // Transaction always valid if signer is sender of transaction\n        if (signerAddress != msg.sender) {\n            // Validate signature\n            require(\n                isValidSignature(\n                    transactionHash,\n                    signerAddress,\n                    signature\n                ),\n                \"INVALID_TX_SIGNATURE\"\n            );\n\n            // Set the current transaction signer\n            currentContextAddress = signerAddress;\n        }\n\n        // Execute transaction\n        transactions[transactionHash] = true;\n        require(\n            address(this).delegatecall(data),\n            \"FAILED_EXECUTION\"\n        );\n\n        // Reset current transaction signer if it was previously updated\n        if (signerAddress != msg.sender) {\n            currentContextAddress = address(0);\n        }\n    }\n\n    /// @dev Calculates EIP712 hash of the Transaction.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @return EIP712 hash of the Transaction.\n    function hashZeroExTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes memory data\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes32 dataHash = keccak256(data);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH,\n        //     salt,\n        //     bytes32(signerAddress),\n        //     keccak256(data)\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                               // hash of schema\n            mstore(add(memPtr, 32), salt)                                                            // salt\n            mstore(add(memPtr, 64), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 96), dataHash)                                                        // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 128)\n        }\n        return result;\n    }\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address)\n    {\n        address currentContextAddress_ = currentContextAddress;\n        address contextAddress = currentContextAddress_ == address(0) ? msg.sender : currentContextAddress_;\n        return contextAddress;\n    }\n}\n\ncontract MixinAssetProxyDispatcher is\n    Ownable,\n    MAssetProxyDispatcher\n{\n    // Mapping from Asset Proxy Id's to their respective Asset Proxy\n    mapping (bytes4 => IAssetProxy) public assetProxies;\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external\n        onlyOwner\n    {\n        IAssetProxy assetProxyContract = IAssetProxy(assetProxy);\n\n        // Ensure that no asset proxy exists with current id.\n        bytes4 assetProxyId = assetProxyContract.getProxyId();\n        address currentAssetProxy = assetProxies[assetProxyId];\n        require(\n            currentAssetProxy == address(0),\n            \"ASSET_PROXY_ALREADY_EXISTS\"\n        );\n\n        // Add asset proxy and log registration.\n        assetProxies[assetProxyId] = assetProxyContract;\n        emit AssetProxyRegistered(\n            assetProxyId,\n            assetProxy\n        );\n    }\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address)\n    {\n        return assetProxies[assetProxyId];\n    }\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the asset.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Do nothing if no amount should be transferred.\n        if (amount > 0 && from != to) {\n            // Ensure assetData length is valid\n            require(\n                assetData.length > 3,\n                \"LENGTH_GREATER_THAN_3_REQUIRED\"\n            );\n\n            // Lookup assetProxy. We do not use `LibBytes.readBytes4` for gas efficiency reasons.\n            bytes4 assetProxyId;\n            assembly {\n                assetProxyId := and(mload(\n                    add(assetData, 32)),\n                    0xFFFFFFFF00000000000000000000000000000000000000000000000000000000\n                )\n            }\n            address assetProxy = assetProxies[assetProxyId];\n\n            // Ensure that assetProxy exists\n            require(\n                assetProxy != address(0),\n                \"ASSET_PROXY_DOES_NOT_EXIST\"\n            );\n\n            // We construct calldata for the `assetProxy.transferFrom` ABI.\n            // The layout of this calldata is in the table below.\n            //\n            // | Area     | Offset | Length  | Contents                                    |\n            // | -------- |--------|---------|-------------------------------------------- |\n            // | Header   | 0      | 4       | function selector                           |\n            // | Params   |        | 4 * 32  | function parameters:                        |\n            // |          | 4      |         |   1. offset to assetData (*)                |\n            // |          | 36     |         |   2. from                                   |\n            // |          | 68     |         |   3. to                                     |\n            // |          | 100    |         |   4. amount                                 |\n            // | Data     |        |         | assetData:                                  |\n            // |          | 132    | 32      | assetData Length                            |\n            // |          | 164    | **      | assetData Contents                          |\n\n            assembly {\n                /////// Setup State ///////\n                // `cdStart` is the start of the calldata for `assetProxy.transferFrom` (equal to free memory ptr).\n                let cdStart := mload(64)\n                // `dataAreaLength` is the total number of words needed to store `assetData`\n                //  As-per the ABI spec, this value is padded up to the nearest multiple of 32,\n                //  and includes 32-bytes for length.\n                let dataAreaLength := and(add(mload(assetData), 63), 0xFFFFFFFFFFFE0)\n                // `cdEnd` is the end of the calldata for `assetProxy.transferFrom`.\n                let cdEnd := add(cdStart, add(132, dataAreaLength))\n\n\n                /////// Setup Header Area ///////\n                // This area holds the 4-byte `transferFromSelector`.\n                // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n                mstore(cdStart, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n\n                /////// Setup Params Area ///////\n                // Each parameter is padded to 32-bytes. The entire Params Area is 128 bytes.\n                // Notes:\n                //   1. The offset to `assetData` is the length of the Params Area (128 bytes).\n                //   2. A 20-byte mask is applied to addresses to zero-out the unused bytes.\n                mstore(add(cdStart, 4), 128)\n                mstore(add(cdStart, 36), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 68), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 100), amount)\n\n                /////// Setup Data Area ///////\n                // This area holds `assetData`.\n                let dataArea := add(cdStart, 132)\n                // solhint-disable-next-line no-empty-blocks\n                for {} lt(dataArea, cdEnd) {} {\n                    mstore(dataArea, mload(assetData))\n                    dataArea := add(dataArea, 32)\n                    assetData := add(assetData, 32)\n                }\n\n                /////// Call `assetProxy.transferFrom` using the constructed calldata ///////\n                let success := call(\n                    gas,                    // forward all gas\n                    assetProxy,             // call address of asset proxy\n                    0,                      // don't send any ETH\n                    cdStart,                // pointer to start of input\n                    sub(cdEnd, cdStart),    // length of input\n                    cdStart,                // write output over input\n                    512                     // reserve 512 bytes for output\n                )\n                if iszero(success) {\n                    revert(cdStart, returndatasize())\n                }\n            }\n        }\n    }\n}\n\ncontract MixinMatchOrders is\n    ReentrancyGuard,\n    LibConstants,\n    LibMath,\n    MAssetProxyDispatcher,\n    MExchangeCore,\n    MMatchOrders,\n    MTransactions\n{\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        nonReentrant\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // We assume that rightOrder.takerAssetData == leftOrder.makerAssetData and rightOrder.makerAssetData == leftOrder.takerAssetData.\n        // If this assumption isn't true, the match will fail at signature validation.\n        rightOrder.makerAssetData = leftOrder.takerAssetData;\n        rightOrder.takerAssetData = leftOrder.makerAssetData;\n\n        // Get left & right order info\n        LibOrder.OrderInfo memory leftOrderInfo = getOrderInfo(leftOrder);\n        LibOrder.OrderInfo memory rightOrderInfo = getOrderInfo(rightOrder);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Either our context is valid or we revert\n        assertFillableOrder(\n            leftOrder,\n            leftOrderInfo,\n            takerAddress,\n            leftSignature\n        );\n        assertFillableOrder(\n            rightOrder,\n            rightOrderInfo,\n            takerAddress,\n            rightSignature\n        );\n        assertValidMatch(leftOrder, rightOrder);\n\n        // Compute proportional fill amounts\n        matchedFillResults = calculateMatchedFillResults(\n            leftOrder,\n            rightOrder,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            rightOrderInfo.orderTakerAssetFilledAmount\n        );\n\n        // Validate fill contexts\n        assertValidFill(\n            leftOrder,\n            leftOrderInfo,\n            matchedFillResults.left.takerAssetFilledAmount,\n            matchedFillResults.left.takerAssetFilledAmount,\n            matchedFillResults.left.makerAssetFilledAmount\n        );\n        assertValidFill(\n            rightOrder,\n            rightOrderInfo,\n            matchedFillResults.right.takerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount,\n            matchedFillResults.right.makerAssetFilledAmount\n        );\n\n        // Update exchange state\n        updateFilledState(\n            leftOrder,\n            takerAddress,\n            leftOrderInfo.orderHash,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.left\n        );\n        updateFilledState(\n            rightOrder,\n            takerAddress,\n            rightOrderInfo.orderHash,\n            rightOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.right\n        );\n\n        // Settle matched orders. Succeeds or throws.\n        settleMatchedOrders(\n            leftOrder,\n            rightOrder,\n            takerAddress,\n            matchedFillResults\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure\n    {\n        // Make sure there is a profitable spread.\n        // There is a profitable spread iff the cost per unit bought (OrderA.MakerAmount/OrderA.TakerAmount) for each order is greater\n        // than the profit per unit sold of the matched order (OrderB.TakerAmount/OrderB.MakerAmount).\n        // This is satisfied by the equations below:\n        // <leftOrder.makerAssetAmount> / <leftOrder.takerAssetAmount> >= <rightOrder.takerAssetAmount> / <rightOrder.makerAssetAmount>\n        // AND\n        // <rightOrder.makerAssetAmount> / <rightOrder.takerAssetAmount> >= <leftOrder.takerAssetAmount> / <leftOrder.makerAssetAmount>\n        // These equations can be combined to get the following:\n        require(\n            safeMul(leftOrder.makerAssetAmount, rightOrder.makerAssetAmount) >=\n            safeMul(leftOrder.takerAssetAmount, rightOrder.takerAssetAmount),\n            \"NEGATIVE_SPREAD_REQUIRED\"\n        );\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // Derive maker asset amounts for left & right orders, given store taker assert amounts\n        uint256 leftTakerAssetAmountRemaining = safeSub(leftOrder.takerAssetAmount, leftOrderTakerAssetFilledAmount);\n        uint256 leftMakerAssetAmountRemaining = safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            leftTakerAssetAmountRemaining\n        );\n        uint256 rightTakerAssetAmountRemaining = safeSub(rightOrder.takerAssetAmount, rightOrderTakerAssetFilledAmount);\n        uint256 rightMakerAssetAmountRemaining = safeGetPartialAmountFloor(\n            rightOrder.makerAssetAmount,\n            rightOrder.takerAssetAmount,\n            rightTakerAssetAmountRemaining\n        );\n\n        // Calculate fill results for maker and taker assets: at least one order will be fully filled.\n        // The maximum amount the left maker can buy is `leftTakerAssetAmountRemaining`\n        // The maximum amount the right maker can sell is `rightMakerAssetAmountRemaining`\n        // We have two distinct cases for calculating the fill results:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        //   If the left maker can buy exactly what the right maker can sell, then both orders are fully filled.\n        // Case 2.\n        //   If the left maker cannot buy more than the right maker can sell, then only the left order is fully filled.\n        if (leftTakerAssetAmountRemaining >= rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled\n            matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n            matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = matchedFillResults.right.makerAssetFilledAmount;\n            // Round down to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.left.makerAssetFilledAmount = safeGetPartialAmountFloor(\n                leftOrder.makerAssetAmount,\n                leftOrder.takerAssetAmount,\n                matchedFillResults.left.takerAssetFilledAmount\n            );\n        } else {\n            // Case 2: Left order is fully filled\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            matchedFillResults.right.makerAssetFilledAmount = matchedFillResults.left.takerAssetFilledAmount;\n            // Round up to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.right.takerAssetFilledAmount = safeGetPartialAmountCeil(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                matchedFillResults.right.makerAssetFilledAmount\n            );\n        }\n\n        // Calculate amount given to taker\n        matchedFillResults.leftMakerAssetSpreadAmount = safeSub(\n            matchedFillResults.left.makerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        // Compute fees for left order\n        matchedFillResults.left.makerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.left.makerAssetFilledAmount,\n            leftOrder.makerAssetAmount,\n            leftOrder.makerFee\n        );\n        matchedFillResults.left.takerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftOrder.takerAssetAmount,\n            leftOrder.takerFee\n        );\n\n        // Compute fees for right order\n        matchedFillResults.right.makerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.right.makerAssetFilledAmount,\n            rightOrder.makerAssetAmount,\n            rightOrder.makerFee\n        );\n        matchedFillResults.right.takerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightOrder.takerAssetAmount,\n            rightOrder.takerFee\n        );\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Settles matched order by transferring appropriate funds between order makers, taker, and fee recipient.\n    /// @param leftOrder First matched order.\n    /// @param rightOrder Second matched order.\n    /// @param takerAddress Address that matched the orders. The taker receives the spread between orders as profit.\n    /// @param matchedFillResults Struct holding amounts to transfer between makers, taker, and fee recipients.\n    function settleMatchedOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        address takerAddress,\n        LibFillResults.MatchedFillResults memory matchedFillResults\n    )\n        private\n    {\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        // Order makers and taker\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftOrder.makerAddress,\n            rightOrder.makerAddress,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            rightOrder.makerAssetData,\n            rightOrder.makerAddress,\n            leftOrder.makerAddress,\n            matchedFillResults.left.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftOrder.makerAddress,\n            takerAddress,\n            matchedFillResults.leftMakerAssetSpreadAmount\n        );\n\n        // Maker fees\n        dispatchTransferFrom(\n            zrxAssetData,\n            leftOrder.makerAddress,\n            leftOrder.feeRecipientAddress,\n            matchedFillResults.left.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            rightOrder.makerAddress,\n            rightOrder.feeRecipientAddress,\n            matchedFillResults.right.makerFeePaid\n        );\n\n        // Taker fees\n        if (leftOrder.feeRecipientAddress == rightOrder.feeRecipientAddress) {\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                safeAdd(\n                    matchedFillResults.left.takerFeePaid,\n                    matchedFillResults.right.takerFeePaid\n                )\n            );\n        } else {\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                matchedFillResults.left.takerFeePaid\n            );\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                rightOrder.feeRecipientAddress,\n                matchedFillResults.right.takerFeePaid\n            );\n        }\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract Exchange is\n    MixinExchangeCore,\n    MixinMatchOrders,\n    MixinSignatureValidator,\n    MixinTransactions,\n    MixinAssetProxyDispatcher,\n    MixinWrapperFunctions\n{\n    string constant public VERSION = \"2.0.0\";\n\n    // Mixins are instantiated in the order they are inherited\n    constructor ()\n        public\n        MixinExchangeCore()\n        MixinMatchOrders()\n        MixinSignatureValidator()\n        MixinTransactions()\n        MixinAssetProxyDispatcher()\n        MixinWrapperFunctions()\n    {}\n}\n"
		}
	},
	"sourceCodes": {
		"./Exchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.4.24;\npragma experimental ABIEncoderV2;\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to < b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n\ncontract ReentrancyGuard {\n\n    // Locked state of mutex\n    bool private locked = false;\n\n    /// @dev Functions with this modifer cannot be reentered. The mutex will be locked\n    ///      before function execution and unlocked after.\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(\n            !locked,\n            \"REENTRANCY_ILLEGAL\"\n        );\n\n        // Lock mutex before function call\n        locked = true;\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        locked = false;\n    }\n}\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n\n// solhint-disable max-line-length\ncontract LibConstants {\n\n    // Asset data for ZRX token. Used for fee transfers.\n\n    // The proxyId for ZRX_ASSET_DATA is bytes4(keccak256(\"ERC20Token(address)\")) = 0xf47261b0\n\n    // Kovan ZRX address is 0x6ff6c0ff1d68b964901f986d4c9fa3ac68346570.\n    // The ABI encoded proxyId and address is 0xf47261b00000000000000000000000006ff6c0ff1d68b964901f986d4c9fa3ac68346570\n    // bytes constant public ZRX_ASSET_DATA = \"\\xf4\\x72\\x61\\xb0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x6f\\xf6\\xc0\\xff\\x1d\\x68\\xb9\\x64\\x90\\x1f\\x98\\x6d\\x4c\\x9f\\xa3\\xac\\x68\\x34\\x65\\x70\";\n\n    // Mainnet ZRX address is 0xe41d2489571d322189246dafa5ebde1f4699f498.\n    // The ABI encoded proxyId and address is 0xf47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498\n    bytes constant public ZRX_ASSET_DATA = \"\\xf4\\x72\\x61\\xb0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xe4\\x1d\\x24\\x89\\x57\\x1d\\x32\\x21\\x89\\x24\\x6d\\xaf\\xa5\\xeb\\xde\\x1f\\x46\\x99\\xf4\\x98\";\n}\n// solhint-enable max-line-length\n\ncontract LibEIP712 {\n\n    // EIP191 header for EIP712 prefix\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            bytes32(address(this))\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n\ncontract LibFillResults is\n    SafeMath\n{\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n\ncontract LibMath is\n    SafeMath\n{\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        require(\n            !isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n            ),\n            \"ROUNDING_ERROR\"\n        );\n\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        require(\n            !isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n            ),\n            \"ROUNDING_ERROR\"\n        );\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = safeDiv(\n            safeAdd(\n                safeMul(numerator, target),\n                safeSub(denominator, 1)\n            ),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = safeDiv(\n            safeAdd(\n                safeMul(numerator, target),\n                safeSub(denominator, 1)\n            ),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = safeSub(denominator, remainder) % denominator;\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\n        return isError;\n    }\n}\n\ncontract LibOrder is\n    LibEIP712\n{\n    // Hash for the EIP712 Order Schema\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     bytes32(order.makerAddress),\n        //     bytes32(order.takerAddress),\n        //     bytes32(order.feeRecipientAddress),\n        //     bytes32(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData)\n        // ));\n\n        assembly {\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, makerAssetDataHash)\n            mstore(pos3, takerAssetDataHash)\n            result := keccak256(pos1, 416)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n        }\n        return result;\n    }\n}\n\ncontract LibAbiEncoder {\n\n    /// @dev ABI encodes calldata for `fillOrder`.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return ABI encoded calldata for `fillOrder`.\n    function abiEncodeFillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory fillOrderCalldata)\n    {\n        // We need to call MExchangeCore.fillOrder using a delegatecall in\n        // assembly so that we can intercept a call that throws. For this, we\n        // need the input encoded in memory in the Ethereum ABIv2 format [1].\n\n        // | Area     | Offset | Length  | Contents                                    |\n        // | -------- |--------|---------|-------------------------------------------- |\n        // | Header   | 0x00   | 4       | function selector                           |\n        // | Params   |        | 3 * 32  | function parameters:                        |\n        // |          | 0x00   |         |   1. offset to order (*)                    |\n        // |          | 0x20   |         |   2. takerAssetFillAmount                   |\n        // |          | 0x40   |         |   3. offset to signature (*)                |\n        // | Data     |        | 12 * 32 | order:                                      |\n        // |          | 0x000  |         |   1.  senderAddress                         |\n        // |          | 0x020  |         |   2.  makerAddress                          |\n        // |          | 0x040  |         |   3.  takerAddress                          |\n        // |          | 0x060  |         |   4.  feeRecipientAddress                   |\n        // |          | 0x080  |         |   5.  makerAssetAmount                      |\n        // |          | 0x0A0  |         |   6.  takerAssetAmount                      |\n        // |          | 0x0C0  |         |   7.  makerFeeAmount                        |\n        // |          | 0x0E0  |         |   8.  takerFeeAmount                        |\n        // |          | 0x100  |         |   9.  expirationTimeSeconds                 |\n        // |          | 0x120  |         |   10. salt                                  |\n        // |          | 0x140  |         |   11. Offset to makerAssetData (*)          |\n        // |          | 0x160  |         |   12. Offset to takerAssetData (*)          |\n        // |          | 0x180  | 32      | makerAssetData Length                       |\n        // |          | 0x1A0  | **      | makerAssetData Contents                     |\n        // |          | 0x1C0  | 32      | takerAssetData Length                       |\n        // |          | 0x1E0  | **      | takerAssetData Contents                     |\n        // |          | 0x200  | 32      | signature Length                            |\n        // |          | 0x220  | **      | signature Contents                          |\n\n        // * Offsets are calculated from the beginning of the current area: Header, Params, Data:\n        //     An offset stored in the Params area is calculated from the beginning of the Params section.\n        //     An offset stored in the Data area is calculated from the beginning of the Data section.\n\n        // ** The length of dynamic array contents are stored in the field immediately preceeding the contents.\n\n        // [1]: https://solidity.readthedocs.io/en/develop/abi-spec.html\n\n        assembly {\n\n            // Areas below may use the following variables:\n            //   1. <area>Start   -- Start of this area in memory\n            //   2. <area>End     -- End of this area in memory. This value may\n            //                       be precomputed (before writing contents),\n            //                       or it may be computed as contents are written.\n            //   3. <area>Offset  -- Current offset into area. If an area's End\n            //                       is precomputed, this variable tracks the\n            //                       offsets of contents as they are written.\n\n            /////// Setup Header Area ///////\n            // Load free memory pointer\n            fillOrderCalldata := mload(0x40)\n            // bytes4(keccak256(\"fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)\"))\n            // = 0xb4be83d5\n            // Leave 0x20 bytes to store the length\n            mstore(add(fillOrderCalldata, 0x20), 0xb4be83d500000000000000000000000000000000000000000000000000000000)\n            let headerAreaEnd := add(fillOrderCalldata, 0x24)\n\n            /////// Setup Params Area ///////\n            // This area is preallocated and written to later.\n            // This is because we need to fill in offsets that have not yet been calculated.\n            let paramsAreaStart := headerAreaEnd\n            let paramsAreaEnd := add(paramsAreaStart, 0x60)\n            let paramsAreaOffset := paramsAreaStart\n\n            /////// Setup Data Area ///////\n            let dataAreaStart := paramsAreaEnd\n            let dataAreaEnd := dataAreaStart\n\n            // Offset from the source data we're reading from\n            let sourceOffset := order\n            // arrayLenBytes and arrayLenWords track the length of a dynamically-allocated bytes array.\n            let arrayLenBytes := 0\n            let arrayLenWords := 0\n\n            /////// Write order Struct ///////\n            // Write memory location of Order, relative to the start of the\n            // parameter list, then increment the paramsAreaOffset respectively.\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            // Write values for each field in the order\n            // It would be nice to use a loop, but we save on gas by writing\n            // the stores sequentially.\n            mstore(dataAreaEnd, mload(sourceOffset))                            // makerAddress\n            mstore(add(dataAreaEnd, 0x20), mload(add(sourceOffset, 0x20)))      // takerAddress\n            mstore(add(dataAreaEnd, 0x40), mload(add(sourceOffset, 0x40)))      // feeRecipientAddress\n            mstore(add(dataAreaEnd, 0x60), mload(add(sourceOffset, 0x60)))      // senderAddress\n            mstore(add(dataAreaEnd, 0x80), mload(add(sourceOffset, 0x80)))      // makerAssetAmount\n            mstore(add(dataAreaEnd, 0xA0), mload(add(sourceOffset, 0xA0)))      // takerAssetAmount\n            mstore(add(dataAreaEnd, 0xC0), mload(add(sourceOffset, 0xC0)))      // makerFeeAmount\n            mstore(add(dataAreaEnd, 0xE0), mload(add(sourceOffset, 0xE0)))      // takerFeeAmount\n            mstore(add(dataAreaEnd, 0x100), mload(add(sourceOffset, 0x100)))    // expirationTimeSeconds\n            mstore(add(dataAreaEnd, 0x120), mload(add(sourceOffset, 0x120)))    // salt\n            mstore(add(dataAreaEnd, 0x140), mload(add(sourceOffset, 0x140)))    // Offset to makerAssetData\n            mstore(add(dataAreaEnd, 0x160), mload(add(sourceOffset, 0x160)))    // Offset to takerAssetData\n            dataAreaEnd := add(dataAreaEnd, 0x180)\n            sourceOffset := add(sourceOffset, 0x180)\n\n            // Write offset to <order.makerAssetData>\n            mstore(add(dataAreaStart, mul(10, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.makerAssetData>\n            sourceOffset := mload(add(order, 0x140)) // makerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.makerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of <order.makerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Write offset to <order.takerAssetData>\n            mstore(add(dataAreaStart, mul(11, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.takerAssetData>\n            sourceOffset := mload(add(order, 0x160)) // takerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.takerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of  <order.takerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            /////// Write takerAssetFillAmount ///////\n            mstore(paramsAreaOffset, takerAssetFillAmount)\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            /////// Write signature ///////\n            // Write offset to paramsArea\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n\n            // Calculate length of signature\n            sourceOffset := signature\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of signature\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of signature\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Set length of calldata\n            mstore(fillOrderCalldata, sub(dataAreaEnd, add(fillOrderCalldata, 0x20)))\n\n            // Increment free memory pointer\n            mstore(0x40, dataAreaEnd)\n        }\n\n        return fillOrderCalldata;\n    }\n}\n\ncontract IOwnable {\n\n    function transferOwnership(address newOwner)\n        public;\n}\n\ncontract IAuthorizable is\n    IOwnable\n{\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory);\n}\n\ncontract IAssetProxy is\n    IAuthorizable\n{\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4);\n}\n\ncontract IValidator {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n\ncontract IWallet {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        bytes signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        external;\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes data,\n        bytes signature\n    )\n        external;\n}\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public;\n\n    /// @dev Fetches information for all passed in orders\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory);\n}\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    IWrapperFunctions\n{}\n\ncontract MExchangeCore is\n    IExchangeCore\n{\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that received fees.\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker.\n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of ZRX paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of ZRX paid to feeRecipient by taker.\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getOrderHash).\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData                  // Encoded data specific to takerAsset.\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getOrderHash).\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData                  // Encoded data specific to takerAsset.\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed senderAddress,        // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders with specified makerAddress and senderAddress with a salt less than this value are considered cancelled.\n    );\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderInternal(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrderInternal(LibOrder.Order memory order)\n        internal;\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function updateFilledState(\n        LibOrder.Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal;\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        LibOrder.Order memory order,\n        bytes32 orderHash\n    )\n        internal;\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertFillableOrder(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo,\n        address takerAddress,\n        bytes memory signature\n    )\n        internal\n        view;\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo Status, orderHash, and amount already filled of order.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param makerAssetFilledAmount Amount of makerAsset that will be transfered.\n    function assertValidFill(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo,\n        uint256 takerAssetFillAmount,\n        uint256 takerAssetFilledAmount,\n        uint256 makerAssetFilledAmount\n    )\n        internal\n        view;\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo\n    )\n        internal\n        view;\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.FillResults memory fillResults);\n\n}\n\ncontract MAssetProxyDispatcher is\n    IAssetProxyDispatcher\n{\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the asset.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal;\n}\n\ncontract MMatchOrders is\n    IMatchOrders\n{\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure;\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n\n}\n\ncontract MSignatureValidator is\n    ISignatureValidator\n{\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool approved                      // Approval or disapproval of validator contract.\n    );\n\n    // Allowed signature types.\n    enum SignatureType {\n        Illegal,         // 0x00, default value\n        Invalid,         // 0x01\n        EIP712,          // 0x02\n        EthSign,         // 0x03\n        Wallet,          // 0x04\n        Validator,       // 0x05\n        PreSigned,       // 0x06\n        NSignatureTypes  // 0x07, number of signature types. Always leave at end.\n    }\n\n    /// @dev Verifies signature using logic defined by Wallet contract.\n    /// @param hash Any 32 byte hash.\n    /// @param walletAddress Address that should have signed the given hash\n    ///                      and defines its own signature verification method.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidWalletSignature(\n        bytes32 hash,\n        address walletAddress,\n        bytes signature\n    )\n        internal\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies signature using logic defined by Validator contract.\n    /// @param validatorAddress Address of validator contract.\n    /// @param hash Any 32 byte hash.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidValidatorSignature(\n        address validatorAddress,\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        internal\n        view\n        returns (bool isValid);\n}\n\ncontract MTransactions is\n    ITransactions\n{\n    // Hash for the EIP712 ZeroEx Transaction Schema\n    bytes32 constant internal EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"ZeroExTransaction(\",\n        \"uint256 salt,\",\n        \"address signerAddress,\",\n        \"bytes data\",\n        \")\"\n    ));\n\n    /// @dev Calculates EIP712 hash of the Transaction.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @return EIP712 hash of the Transaction.\n    function hashZeroExTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes memory data\n    )\n        internal\n        pure\n        returns (bytes32 result);\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n\ncontract MWrapperFunctions is\n    IWrapperFunctions\n{\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrderInternal(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (LibFillResults.FillResults memory fillResults);\n}\n\ncontract Ownable is\n    IOwnable\n{\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"ONLY_CONTRACT_OWNER\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\ncontract MixinExchangeCore is\n    ReentrancyGuard,\n    LibConstants,\n    LibMath,\n    LibOrder,\n    LibFillResults,\n    MAssetProxyDispatcher,\n    MExchangeCore,\n    MSignatureValidator,\n    MTransactions\n{\n    // Mapping of orderHash => amount of takerAsset already bought by maker\n    mapping (bytes32 => uint256) public filled;\n\n    // Mapping of orderHash => cancelled\n    mapping (bytes32 => bool) public cancelled;\n\n    // Mapping of makerAddress => senderAddress => lowest salt an order can have in order to be fillable\n    // Orders with specified senderAddress and with a salt less than their epoch are considered cancelled\n    mapping (address => mapping (address => uint256)) public orderEpoch;\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n        nonReentrant\n    {\n        address makerAddress = getCurrentContextAddress();\n        // If this function is called via `executeTransaction`, we only update the orderEpoch for the makerAddress/msg.sender combination.\n        // This allows external filter contracts to add rules to how orders are cancelled via this function.\n        address senderAddress = makerAddress == msg.sender ? address(0) : msg.sender;\n\n        // orderEpoch is initialized to 0, so to cancelUpTo we need salt + 1\n        uint256 newOrderEpoch = targetOrderEpoch + 1;\n        uint256 oldOrderEpoch = orderEpoch[makerAddress][senderAddress];\n\n        // Ensure orderEpoch is monotonically increasing\n        require(\n            newOrderEpoch > oldOrderEpoch,\n            \"INVALID_NEW_ORDER_EPOCH\"\n        );\n\n        // Update orderEpoch\n        orderEpoch[makerAddress][senderAddress] = newOrderEpoch;\n        emit CancelUpTo(\n            makerAddress,\n            senderAddress,\n            newOrderEpoch\n        );\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        nonReentrant\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrderInternal(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }\n\n    /// @dev After calling, the order can not be filled anymore.\n    ///      Throws if order is invalid or sender does not have permission to cancel.\n    /// @param order Order to cancel. Order must be OrderStatus.FILLABLE.\n    function cancelOrder(Order memory order)\n        public\n        nonReentrant\n    {\n        cancelOrderInternal(order);\n    }\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///         See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(Order memory order)\n        public\n        view\n        returns (OrderInfo memory orderInfo)\n    {\n        // Compute the order hash\n        orderInfo.orderHash = getOrderHash(order);\n\n        // Fetch filled amount\n        orderInfo.orderTakerAssetFilledAmount = filled[orderInfo.orderHash];\n\n        // If order.makerAssetAmount is zero, we also reject the order.\n        // While the Exchange contract handles them correctly, they create\n        // edge cases in the supporting infrastructure because they have\n        // an 'infinite' price when computed by a simple division.\n        if (order.makerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_MAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // If order.takerAssetAmount is zero, then the order will always\n        // be considered filled because 0 == takerAssetAmount == orderTakerAssetFilledAmount\n        // Instead of distinguishing between unfilled and filled zero taker\n        // amount orders, we choose not to support them.\n        if (order.takerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_TAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // Validate order availability\n        if (orderInfo.orderTakerAssetFilledAmount >= order.takerAssetAmount) {\n            orderInfo.orderStatus = uint8(OrderStatus.FULLY_FILLED);\n            return orderInfo;\n        }\n\n        // Validate order expiration\n        // solhint-disable-next-line not-rely-on-time\n        if (block.timestamp >= order.expirationTimeSeconds) {\n            orderInfo.orderStatus = uint8(OrderStatus.EXPIRED);\n            return orderInfo;\n        }\n\n        // Check if order has been cancelled\n        if (cancelled[orderInfo.orderHash]) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n        if (orderEpoch[order.makerAddress][order.senderAddress] > order.salt) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n\n        // All other statuses are ruled out: order is Fillable\n        orderInfo.orderStatus = uint8(OrderStatus.FILLABLE);\n        return orderInfo;\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderInternal(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (FillResults memory fillResults)\n    {\n        // Fetch order info\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Assert that the order is fillable by taker\n        assertFillableOrder(\n            order,\n            orderInfo,\n            takerAddress,\n            signature\n        );\n\n        // Get amount of takerAsset to fill\n        uint256 remainingTakerAssetAmount = safeSub(order.takerAssetAmount, orderInfo.orderTakerAssetFilledAmount);\n        uint256 takerAssetFilledAmount = min256(takerAssetFillAmount, remainingTakerAssetAmount);\n\n        // Validate context\n        assertValidFill(\n            order,\n            orderInfo,\n            takerAssetFillAmount,\n            takerAssetFilledAmount,\n            fillResults.makerAssetFilledAmount\n        );\n\n        // Compute proportional fill amounts\n        fillResults = calculateFillResults(order, takerAssetFilledAmount);\n\n        // Update exchange internal state\n        updateFilledState(\n            order,\n            takerAddress,\n            orderInfo.orderHash,\n            orderInfo.orderTakerAssetFilledAmount,\n            fillResults\n        );\n\n        // Settle order\n        settleOrder(\n            order,\n            takerAddress,\n            fillResults\n        );\n\n        return fillResults;\n    }\n\n    /// @dev After calling, the order can not be filled anymore.\n    ///      Throws if order is invalid or sender does not have permission to cancel.\n    /// @param order Order to cancel. Order must be OrderStatus.FILLABLE.\n    function cancelOrderInternal(Order memory order)\n        internal\n    {\n        // Fetch current order status\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Validate context\n        assertValidCancel(order, orderInfo);\n\n        // Perform cancel\n        updateCancelledState(order, orderInfo.orderHash);\n    }\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    function updateFilledState(\n        Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        FillResults memory fillResults\n    )\n        internal\n    {\n        // Update state\n        filled[orderHash] = safeAdd(orderTakerAssetFilledAmount, fillResults.takerAssetFilledAmount);\n\n        // Log order\n        emit Fill(\n            order.makerAddress,\n            order.feeRecipientAddress,\n            takerAddress,\n            msg.sender,\n            fillResults.makerAssetFilledAmount,\n            fillResults.takerAssetFilledAmount,\n            fillResults.makerFeePaid,\n            fillResults.takerFeePaid,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        Order memory order,\n        bytes32 orderHash\n    )\n        internal\n    {\n        // Perform cancel\n        cancelled[orderHash] = true;\n\n        // Log cancel\n        emit Cancel(\n            order.makerAddress,\n            order.feeRecipientAddress,\n            msg.sender,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertFillableOrder(\n        Order memory order,\n        OrderInfo memory orderInfo,\n        address takerAddress,\n        bytes memory signature\n    )\n        internal\n        view\n    {\n        // An order can only be filled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            \"ORDER_UNFILLABLE\"\n        );\n\n        // Validate sender is allowed to fill this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                \"INVALID_SENDER\"\n            );\n        }\n\n        // Validate taker is allowed to fill this order\n        if (order.takerAddress != address(0)) {\n            require(\n                order.takerAddress == takerAddress,\n                \"INVALID_TAKER\"\n            );\n        }\n\n        // Validate Maker signature (check only if first time seen)\n        if (orderInfo.orderTakerAssetFilledAmount == 0) {\n            require(\n                isValidSignature(\n                    orderInfo.orderHash,\n                    order.makerAddress,\n                    signature\n                ),\n                \"INVALID_ORDER_SIGNATURE\"\n            );\n        }\n    }\n\n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param makerAssetFilledAmount Amount of makerAsset that will be transfered.\n    function assertValidFill(\n        Order memory order,\n        OrderInfo memory orderInfo,\n        uint256 takerAssetFillAmount,  // TODO: use FillResults\n        uint256 takerAssetFilledAmount,\n        uint256 makerAssetFilledAmount\n    )\n        internal\n        view\n    {\n        // Revert if fill amount is invalid\n        // TODO: reconsider necessity for v2.1\n        require(\n            takerAssetFillAmount != 0,\n            \"INVALID_TAKER_AMOUNT\"\n        );\n\n        // Make sure taker does not pay more than desired amount\n        // NOTE: This assertion should never fail, it is here\n        //       as an extra defence against potential bugs.\n        require(\n            takerAssetFilledAmount <= takerAssetFillAmount,\n            \"TAKER_OVERPAY\"\n        );\n\n        // Make sure order is not overfilled\n        // NOTE: This assertion should never fail, it is here\n        //       as an extra defence against potential bugs.\n        require(\n            safeAdd(orderInfo.orderTakerAssetFilledAmount, takerAssetFilledAmount) <= order.takerAssetAmount,\n            \"ORDER_OVERFILL\"\n        );\n\n        // Make sure order is filled at acceptable price.\n        // The order has an implied price from the makers perspective:\n        //    order price = order.makerAssetAmount / order.takerAssetAmount\n        // i.e. the number of makerAsset maker is paying per takerAsset. The\n        // maker is guaranteed to get this price or a better (lower) one. The\n        // actual price maker is getting in this fill is:\n        //    fill price = makerAssetFilledAmount / takerAssetFilledAmount\n        // We need `fill price <= order price` for the fill to be fair to maker.\n        // This amounts to:\n        //     makerAssetFilledAmount        order.makerAssetAmount\n        //    ------------------------  <=  -----------------------\n        //     takerAssetFilledAmount        order.takerAssetAmount\n        // or, equivalently:\n        //     makerAssetFilledAmount * order.takerAssetAmount <=\n        //     order.makerAssetAmount * takerAssetFilledAmount\n        // NOTE: This assertion should never fail, it is here\n        //       as an extra defence against potential bugs.\n        require(\n            safeMul(makerAssetFilledAmount, order.takerAssetAmount)\n            <=\n            safeMul(order.makerAssetAmount, takerAssetFilledAmount),\n            \"INVALID_FILL_PRICE\"\n        );\n    }\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        Order memory order,\n        OrderInfo memory orderInfo\n    )\n        internal\n        view\n    {\n        // Ensure order is valid\n        // An order can only be cancelled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            \"ORDER_UNFILLABLE\"\n        );\n\n        // Validate sender is allowed to cancel this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                \"INVALID_SENDER\"\n            );\n        }\n\n        // Validate transaction signed by maker\n        address makerAddress = getCurrentContextAddress();\n        require(\n            order.makerAddress == makerAddress,\n            \"INVALID_MAKER\"\n        );\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = safeGetPartialAmountFloor(\n            fillResults.makerAssetFilledAmount,\n            order.makerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        return fillResults;\n    }\n\n    /// @dev Settles an order by transferring assets between counterparties.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAddress Address selling takerAsset and buying makerAsset.\n    /// @param fillResults Amounts to be filled and fees paid by maker and taker.\n    function settleOrder(\n        LibOrder.Order memory order,\n        address takerAddress,\n        LibFillResults.FillResults memory fillResults\n    )\n        private\n    {\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        dispatchTransferFrom(\n            order.makerAssetData,\n            order.makerAddress,\n            takerAddress,\n            fillResults.makerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            order.takerAssetData,\n            takerAddress,\n            order.makerAddress,\n            fillResults.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            order.makerAddress,\n            order.feeRecipientAddress,\n            fillResults.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            takerAddress,\n            order.feeRecipientAddress,\n            fillResults.takerFeePaid\n        );\n    }\n}\n\ncontract MixinSignatureValidator is\n    ReentrancyGuard,\n    MSignatureValidator,\n    MTransactions\n{\n    using LibBytes for bytes;\n\n    // Mapping of hash => signer => signed\n    mapping (bytes32 => mapping (address => bool)) public preSigned;\n\n    // Mapping of signer => validator => approved\n    mapping (address => mapping (address => bool)) public allowedValidators;\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        external\n    {\n        if (signerAddress != msg.sender) {\n            require(\n                isValidSignature(\n                    hash,\n                    signerAddress,\n                    signature\n                ),\n                \"INVALID_SIGNATURE\"\n            );\n        }\n        preSigned[hash][signerAddress] = true;\n    }\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n        nonReentrant\n    {\n        address signerAddress = getCurrentContextAddress();\n        allowedValidators[signerAddress][validatorAddress] = approval;\n        emit SignatureValidatorApproval(\n            signerAddress,\n            validatorAddress,\n            approval\n        );\n    }\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32 byte hash.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid)\n    {\n        require(\n            signature.length > 0,\n            \"LENGTH_GREATER_THAN_0_REQUIRED\"\n        );\n\n        // Pop last byte off of signature byte array.\n        uint8 signatureTypeRaw = uint8(signature.popLastByte());\n\n        // Ensure signature is supported\n        require(\n            signatureTypeRaw < uint8(SignatureType.NSignatureTypes),\n            \"SIGNATURE_UNSUPPORTED\"\n        );\n\n        SignatureType signatureType = SignatureType(signatureTypeRaw);\n\n        // Variables are not scoped in Solidity.\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        address recovered;\n\n        // Always illegal signature.\n        // This is always an implicit option since a signer can create a\n        // signature array with invalid type or length. We may as well make\n        // it an explicit option. This aids testing and analysis. It is\n        // also the initialization value for the enum type.\n        if (signatureType == SignatureType.Illegal) {\n            revert(\"SIGNATURE_ILLEGAL\");\n\n        // Always invalid signature.\n        // Like Illegal, this is always implicitly available and therefore\n        // offered explicitly. It can be implicitly created by providing\n        // a correctly formatted but incorrect signature.\n        } else if (signatureType == SignatureType.Invalid) {\n            require(\n                signature.length == 0,\n                \"LENGTH_0_REQUIRED\"\n            );\n            isValid = false;\n            return isValid;\n\n        // Signature using EIP712\n        } else if (signatureType == SignatureType.EIP712) {\n            require(\n                signature.length == 65,\n                \"LENGTH_65_REQUIRED\"\n            );\n            v = uint8(signature[0]);\n            r = signature.readBytes32(1);\n            s = signature.readBytes32(33);\n            recovered = ecrecover(\n                hash,\n                v,\n                r,\n                s\n            );\n            isValid = signerAddress == recovered;\n            return isValid;\n\n        // Signed using web3.eth_sign\n        } else if (signatureType == SignatureType.EthSign) {\n            require(\n                signature.length == 65,\n                \"LENGTH_65_REQUIRED\"\n            );\n            v = uint8(signature[0]);\n            r = signature.readBytes32(1);\n            s = signature.readBytes32(33);\n            recovered = ecrecover(\n                keccak256(abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    hash\n                )),\n                v,\n                r,\n                s\n            );\n            isValid = signerAddress == recovered;\n            return isValid;\n\n        // Signature verified by wallet contract.\n        // If used with an order, the maker of the order is the wallet contract.\n        } else if (signatureType == SignatureType.Wallet) {\n            isValid = isValidWalletSignature(\n                hash,\n                signerAddress,\n                signature\n            );\n            return isValid;\n\n        // Signature verified by validator contract.\n        // If used with an order, the maker of the order can still be an EOA.\n        // A signature using this type should be encoded as:\n        // | Offset   | Length | Contents                        |\n        // | 0x00     | x      | Signature to validate           |\n        // | 0x00 + x | 20     | Address of validator contract   |\n        // | 0x14 + x | 1      | Signature type is always \"\\x06\" |\n        } else if (signatureType == SignatureType.Validator) {\n            // Pop last 20 bytes off of signature byte array.\n            address validatorAddress = signature.popLast20Bytes();\n\n            // Ensure signer has approved validator.\n            if (!allowedValidators[signerAddress][validatorAddress]) {\n                return false;\n            }\n            isValid = isValidValidatorSignature(\n                validatorAddress,\n                hash,\n                signerAddress,\n                signature\n            );\n            return isValid;\n\n        // Signer signed hash previously using the preSign function.\n        } else if (signatureType == SignatureType.PreSigned) {\n            isValid = preSigned[hash][signerAddress];\n            return isValid;\n        }\n\n        // Anything else is illegal (We do not return false because\n        // the signature may actually be valid, just not in a format\n        // that we currently support. In this case returning false\n        // may lead the caller to incorrectly believe that the\n        // signature was invalid.)\n        revert(\"SIGNATURE_UNSUPPORTED\");\n    }\n\n    /// @dev Verifies signature using logic defined by Wallet contract.\n    /// @param hash Any 32 byte hash.\n    /// @param walletAddress Address that should have signed the given hash\n    ///                      and defines its own signature verification method.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if signature is valid for given wallet..\n    function isValidWalletSignature(\n        bytes32 hash,\n        address walletAddress,\n        bytes signature\n    )\n        internal\n        view\n        returns (bool isValid)\n    {\n        bytes memory calldata = abi.encodeWithSelector(\n            IWallet(walletAddress).isValidSignature.selector,\n            hash,\n            signature\n        );\n        assembly {\n            let cdStart := add(calldata, 32)\n            let success := staticcall(\n                gas,              // forward all gas\n                walletAddress,    // address of Wallet contract\n                cdStart,          // pointer to start of input\n                mload(calldata),  // length of input\n                cdStart,          // write output over input\n                32                // output size is 32 bytes\n            )\n\n            switch success\n            case 0 {\n                // Revert with `Error(\"WALLET_ERROR\")`\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000000c57414c4c45545f4552524f5200000000000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n            case 1 {\n                // Signature is valid if call did not revert and returned true\n                isValid := mload(cdStart)\n            }\n        }\n        return isValid;\n    }\n\n    /// @dev Verifies signature using logic defined by Validator contract.\n    /// @param validatorAddress Address of validator contract.\n    /// @param hash Any 32 byte hash.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidValidatorSignature(\n        address validatorAddress,\n        bytes32 hash,\n        address signerAddress,\n        bytes signature\n    )\n        internal\n        view\n        returns (bool isValid)\n    {\n        bytes memory calldata = abi.encodeWithSelector(\n            IValidator(signerAddress).isValidSignature.selector,\n            hash,\n            signerAddress,\n            signature\n        );\n        assembly {\n            let cdStart := add(calldata, 32)\n            let success := staticcall(\n                gas,               // forward all gas\n                validatorAddress,  // address of Validator contract\n                cdStart,           // pointer to start of input\n                mload(calldata),   // length of input\n                cdStart,           // write output over input\n                32                 // output size is 32 bytes\n            )\n\n            switch success\n            case 0 {\n                // Revert with `Error(\"VALIDATOR_ERROR\")`\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000000f56414c494441544f525f4552524f5200000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n            case 1 {\n                // Signature is valid if call did not revert and returned true\n                isValid := mload(cdStart)\n            }\n        }\n        return isValid;\n    }\n}\n\ncontract MixinWrapperFunctions is\n    ReentrancyGuard,\n    LibMath,\n    LibFillResults,\n    LibAbiEncoder,\n    MExchangeCore,\n    MWrapperFunctions\n{\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        nonReentrant\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrKillOrderInternal(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }\n\n    /// @dev Fills the input order.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        // ABI encode calldata for `fillOrder`\n        bytes memory fillOrderCalldata = abiEncodeFillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n\n        // Delegate to `fillOrder` and handle any exceptions gracefully\n        assembly {\n            let success := delegatecall(\n                gas,                                // forward all gas\n                address,                            // call address of this contract\n                add(fillOrderCalldata, 32),         // pointer to start of input (skip array length in first 32 bytes)\n                mload(fillOrderCalldata),           // length of input\n                fillOrderCalldata,                  // write output over input\n                128                                 // output size is 128 bytes\n            )\n            if success {\n                mstore(fillResults, mload(fillOrderCalldata))\n                mstore(add(fillResults, 32), mload(add(fillOrderCalldata, 32)))\n                mstore(add(fillResults, 64), mload(add(fillOrderCalldata, 64)))\n                mstore(add(fillResults, 96), mload(add(fillOrderCalldata, 96)))\n            }\n        }\n        // fillResults values will be 0 by default if call was unsuccessful\n        return fillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            FillResults memory singleFillResults = fillOrderInternal(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            FillResults memory singleFillResults = fillOrKillOrderInternal(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderInternal(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount >= takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount >= takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmountFloor(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderInternal(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount >= makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmountFloor(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount >= makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        nonReentrant\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            cancelOrderInternal(orders[i]);\n        }\n    }\n\n    /// @dev Fetches information for all passed in orders.\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory)\n    {\n        uint256 ordersLength = orders.length;\n        LibOrder.OrderInfo[] memory ordersInfo = new LibOrder.OrderInfo[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            ordersInfo[i] = getOrderInfo(orders[i]);\n        }\n        return ordersInfo;\n    }\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrderInternal(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrderInternal(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        require(\n            fillResults.takerAssetFilledAmount == takerAssetFillAmount,\n            \"COMPLETE_FILL_FAILED\"\n        );\n        return fillResults;\n    }\n}\n\ncontract MixinTransactions is\n    LibEIP712,\n    MSignatureValidator,\n    MTransactions\n{\n    // Mapping of transaction hash => executed\n    // This prevents transactions from being executed more than once.\n    mapping (bytes32 => bool) public transactions;\n\n    // Address of current transaction signer\n    address public currentContextAddress;\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes data,\n        bytes signature\n    )\n        external\n    {\n        // Prevent reentrancy\n        require(\n            currentContextAddress == address(0),\n            \"REENTRANCY_ILLEGAL\"\n        );\n\n        bytes32 transactionHash = hashEIP712Message(hashZeroExTransaction(\n            salt,\n            signerAddress,\n            data\n        ));\n\n        // Validate transaction has not been executed\n        require(\n            !transactions[transactionHash],\n            \"INVALID_TX_HASH\"\n        );\n\n        // Transaction always valid if signer is sender of transaction\n        if (signerAddress != msg.sender) {\n            // Validate signature\n            require(\n                isValidSignature(\n                    transactionHash,\n                    signerAddress,\n                    signature\n                ),\n                \"INVALID_TX_SIGNATURE\"\n            );\n\n            // Set the current transaction signer\n            currentContextAddress = signerAddress;\n        }\n\n        // Execute transaction\n        transactions[transactionHash] = true;\n        require(\n            address(this).delegatecall(data),\n            \"FAILED_EXECUTION\"\n        );\n\n        // Reset current transaction signer if it was previously updated\n        if (signerAddress != msg.sender) {\n            currentContextAddress = address(0);\n        }\n    }\n\n    /// @dev Calculates EIP712 hash of the Transaction.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @return EIP712 hash of the Transaction.\n    function hashZeroExTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes memory data\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes32 dataHash = keccak256(data);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH,\n        //     salt,\n        //     bytes32(signerAddress),\n        //     keccak256(data)\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                               // hash of schema\n            mstore(add(memPtr, 32), salt)                                                            // salt\n            mstore(add(memPtr, 64), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 96), dataHash)                                                        // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 128)\n        }\n        return result;\n    }\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address)\n    {\n        address currentContextAddress_ = currentContextAddress;\n        address contextAddress = currentContextAddress_ == address(0) ? msg.sender : currentContextAddress_;\n        return contextAddress;\n    }\n}\n\ncontract MixinAssetProxyDispatcher is\n    Ownable,\n    MAssetProxyDispatcher\n{\n    // Mapping from Asset Proxy Id's to their respective Asset Proxy\n    mapping (bytes4 => IAssetProxy) public assetProxies;\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external\n        onlyOwner\n    {\n        IAssetProxy assetProxyContract = IAssetProxy(assetProxy);\n\n        // Ensure that no asset proxy exists with current id.\n        bytes4 assetProxyId = assetProxyContract.getProxyId();\n        address currentAssetProxy = assetProxies[assetProxyId];\n        require(\n            currentAssetProxy == address(0),\n            \"ASSET_PROXY_ALREADY_EXISTS\"\n        );\n\n        // Add asset proxy and log registration.\n        assetProxies[assetProxyId] = assetProxyContract;\n        emit AssetProxyRegistered(\n            assetProxyId,\n            assetProxy\n        );\n    }\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address)\n    {\n        return assetProxies[assetProxyId];\n    }\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the asset.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Do nothing if no amount should be transferred.\n        if (amount > 0 && from != to) {\n            // Ensure assetData length is valid\n            require(\n                assetData.length > 3,\n                \"LENGTH_GREATER_THAN_3_REQUIRED\"\n            );\n\n            // Lookup assetProxy. We do not use `LibBytes.readBytes4` for gas efficiency reasons.\n            bytes4 assetProxyId;\n            assembly {\n                assetProxyId := and(mload(\n                    add(assetData, 32)),\n                    0xFFFFFFFF00000000000000000000000000000000000000000000000000000000\n                )\n            }\n            address assetProxy = assetProxies[assetProxyId];\n\n            // Ensure that assetProxy exists\n            require(\n                assetProxy != address(0),\n                \"ASSET_PROXY_DOES_NOT_EXIST\"\n            );\n\n            // We construct calldata for the `assetProxy.transferFrom` ABI.\n            // The layout of this calldata is in the table below.\n            //\n            // | Area     | Offset | Length  | Contents                                    |\n            // | -------- |--------|---------|-------------------------------------------- |\n            // | Header   | 0      | 4       | function selector                           |\n            // | Params   |        | 4 * 32  | function parameters:                        |\n            // |          | 4      |         |   1. offset to assetData (*)                |\n            // |          | 36     |         |   2. from                                   |\n            // |          | 68     |         |   3. to                                     |\n            // |          | 100    |         |   4. amount                                 |\n            // | Data     |        |         | assetData:                                  |\n            // |          | 132    | 32      | assetData Length                            |\n            // |          | 164    | **      | assetData Contents                          |\n\n            assembly {\n                /////// Setup State ///////\n                // `cdStart` is the start of the calldata for `assetProxy.transferFrom` (equal to free memory ptr).\n                let cdStart := mload(64)\n                // `dataAreaLength` is the total number of words needed to store `assetData`\n                //  As-per the ABI spec, this value is padded up to the nearest multiple of 32,\n                //  and includes 32-bytes for length.\n                let dataAreaLength := and(add(mload(assetData), 63), 0xFFFFFFFFFFFE0)\n                // `cdEnd` is the end of the calldata for `assetProxy.transferFrom`.\n                let cdEnd := add(cdStart, add(132, dataAreaLength))\n\n\n                /////// Setup Header Area ///////\n                // This area holds the 4-byte `transferFromSelector`.\n                // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n                mstore(cdStart, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n\n                /////// Setup Params Area ///////\n                // Each parameter is padded to 32-bytes. The entire Params Area is 128 bytes.\n                // Notes:\n                //   1. The offset to `assetData` is the length of the Params Area (128 bytes).\n                //   2. A 20-byte mask is applied to addresses to zero-out the unused bytes.\n                mstore(add(cdStart, 4), 128)\n                mstore(add(cdStart, 36), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 68), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 100), amount)\n\n                /////// Setup Data Area ///////\n                // This area holds `assetData`.\n                let dataArea := add(cdStart, 132)\n                // solhint-disable-next-line no-empty-blocks\n                for {} lt(dataArea, cdEnd) {} {\n                    mstore(dataArea, mload(assetData))\n                    dataArea := add(dataArea, 32)\n                    assetData := add(assetData, 32)\n                }\n\n                /////// Call `assetProxy.transferFrom` using the constructed calldata ///////\n                let success := call(\n                    gas,                    // forward all gas\n                    assetProxy,             // call address of asset proxy\n                    0,                      // don't send any ETH\n                    cdStart,                // pointer to start of input\n                    sub(cdEnd, cdStart),    // length of input\n                    cdStart,                // write output over input\n                    512                     // reserve 512 bytes for output\n                )\n                if iszero(success) {\n                    revert(cdStart, returndatasize())\n                }\n            }\n        }\n    }\n}\n\ncontract MixinMatchOrders is\n    ReentrancyGuard,\n    LibConstants,\n    LibMath,\n    MAssetProxyDispatcher,\n    MExchangeCore,\n    MMatchOrders,\n    MTransactions\n{\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        nonReentrant\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // We assume that rightOrder.takerAssetData == leftOrder.makerAssetData and rightOrder.makerAssetData == leftOrder.takerAssetData.\n        // If this assumption isn't true, the match will fail at signature validation.\n        rightOrder.makerAssetData = leftOrder.takerAssetData;\n        rightOrder.takerAssetData = leftOrder.makerAssetData;\n\n        // Get left & right order info\n        LibOrder.OrderInfo memory leftOrderInfo = getOrderInfo(leftOrder);\n        LibOrder.OrderInfo memory rightOrderInfo = getOrderInfo(rightOrder);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n\n        // Either our context is valid or we revert\n        assertFillableOrder(\n            leftOrder,\n            leftOrderInfo,\n            takerAddress,\n            leftSignature\n        );\n        assertFillableOrder(\n            rightOrder,\n            rightOrderInfo,\n            takerAddress,\n            rightSignature\n        );\n        assertValidMatch(leftOrder, rightOrder);\n\n        // Compute proportional fill amounts\n        matchedFillResults = calculateMatchedFillResults(\n            leftOrder,\n            rightOrder,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            rightOrderInfo.orderTakerAssetFilledAmount\n        );\n\n        // Validate fill contexts\n        assertValidFill(\n            leftOrder,\n            leftOrderInfo,\n            matchedFillResults.left.takerAssetFilledAmount,\n            matchedFillResults.left.takerAssetFilledAmount,\n            matchedFillResults.left.makerAssetFilledAmount\n        );\n        assertValidFill(\n            rightOrder,\n            rightOrderInfo,\n            matchedFillResults.right.takerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount,\n            matchedFillResults.right.makerAssetFilledAmount\n        );\n\n        // Update exchange state\n        updateFilledState(\n            leftOrder,\n            takerAddress,\n            leftOrderInfo.orderHash,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.left\n        );\n        updateFilledState(\n            rightOrder,\n            takerAddress,\n            rightOrderInfo.orderHash,\n            rightOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.right\n        );\n\n        // Settle matched orders. Succeeds or throws.\n        settleMatchedOrders(\n            leftOrder,\n            rightOrder,\n            takerAddress,\n            matchedFillResults\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure\n    {\n        // Make sure there is a profitable spread.\n        // There is a profitable spread iff the cost per unit bought (OrderA.MakerAmount/OrderA.TakerAmount) for each order is greater\n        // than the profit per unit sold of the matched order (OrderB.TakerAmount/OrderB.MakerAmount).\n        // This is satisfied by the equations below:\n        // <leftOrder.makerAssetAmount> / <leftOrder.takerAssetAmount> >= <rightOrder.takerAssetAmount> / <rightOrder.makerAssetAmount>\n        // AND\n        // <rightOrder.makerAssetAmount> / <rightOrder.takerAssetAmount> >= <leftOrder.takerAssetAmount> / <leftOrder.makerAssetAmount>\n        // These equations can be combined to get the following:\n        require(\n            safeMul(leftOrder.makerAssetAmount, rightOrder.makerAssetAmount) >=\n            safeMul(leftOrder.takerAssetAmount, rightOrder.takerAssetAmount),\n            \"NEGATIVE_SPREAD_REQUIRED\"\n        );\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // Derive maker asset amounts for left & right orders, given store taker assert amounts\n        uint256 leftTakerAssetAmountRemaining = safeSub(leftOrder.takerAssetAmount, leftOrderTakerAssetFilledAmount);\n        uint256 leftMakerAssetAmountRemaining = safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            leftTakerAssetAmountRemaining\n        );\n        uint256 rightTakerAssetAmountRemaining = safeSub(rightOrder.takerAssetAmount, rightOrderTakerAssetFilledAmount);\n        uint256 rightMakerAssetAmountRemaining = safeGetPartialAmountFloor(\n            rightOrder.makerAssetAmount,\n            rightOrder.takerAssetAmount,\n            rightTakerAssetAmountRemaining\n        );\n\n        // Calculate fill results for maker and taker assets: at least one order will be fully filled.\n        // The maximum amount the left maker can buy is `leftTakerAssetAmountRemaining`\n        // The maximum amount the right maker can sell is `rightMakerAssetAmountRemaining`\n        // We have two distinct cases for calculating the fill results:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        //   If the left maker can buy exactly what the right maker can sell, then both orders are fully filled.\n        // Case 2.\n        //   If the left maker cannot buy more than the right maker can sell, then only the left order is fully filled.\n        if (leftTakerAssetAmountRemaining >= rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled\n            matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n            matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = matchedFillResults.right.makerAssetFilledAmount;\n            // Round down to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.left.makerAssetFilledAmount = safeGetPartialAmountFloor(\n                leftOrder.makerAssetAmount,\n                leftOrder.takerAssetAmount,\n                matchedFillResults.left.takerAssetFilledAmount\n            );\n        } else {\n            // Case 2: Left order is fully filled\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            matchedFillResults.right.makerAssetFilledAmount = matchedFillResults.left.takerAssetFilledAmount;\n            // Round up to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.right.takerAssetFilledAmount = safeGetPartialAmountCeil(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                matchedFillResults.right.makerAssetFilledAmount\n            );\n        }\n\n        // Calculate amount given to taker\n        matchedFillResults.leftMakerAssetSpreadAmount = safeSub(\n            matchedFillResults.left.makerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        // Compute fees for left order\n        matchedFillResults.left.makerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.left.makerAssetFilledAmount,\n            leftOrder.makerAssetAmount,\n            leftOrder.makerFee\n        );\n        matchedFillResults.left.takerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftOrder.takerAssetAmount,\n            leftOrder.takerFee\n        );\n\n        // Compute fees for right order\n        matchedFillResults.right.makerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.right.makerAssetFilledAmount,\n            rightOrder.makerAssetAmount,\n            rightOrder.makerFee\n        );\n        matchedFillResults.right.takerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightOrder.takerAssetAmount,\n            rightOrder.takerFee\n        );\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Settles matched order by transferring appropriate funds between order makers, taker, and fee recipient.\n    /// @param leftOrder First matched order.\n    /// @param rightOrder Second matched order.\n    /// @param takerAddress Address that matched the orders. The taker receives the spread between orders as profit.\n    /// @param matchedFillResults Struct holding amounts to transfer between makers, taker, and fee recipients.\n    function settleMatchedOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        address takerAddress,\n        LibFillResults.MatchedFillResults memory matchedFillResults\n    )\n        private\n    {\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        // Order makers and taker\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftOrder.makerAddress,\n            rightOrder.makerAddress,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            rightOrder.makerAssetData,\n            rightOrder.makerAddress,\n            leftOrder.makerAddress,\n            matchedFillResults.left.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftOrder.makerAddress,\n            takerAddress,\n            matchedFillResults.leftMakerAssetSpreadAmount\n        );\n\n        // Maker fees\n        dispatchTransferFrom(\n            zrxAssetData,\n            leftOrder.makerAddress,\n            leftOrder.feeRecipientAddress,\n            matchedFillResults.left.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            rightOrder.makerAddress,\n            rightOrder.feeRecipientAddress,\n            matchedFillResults.right.makerFeePaid\n        );\n\n        // Taker fees\n        if (leftOrder.feeRecipientAddress == rightOrder.feeRecipientAddress) {\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                safeAdd(\n                    matchedFillResults.left.takerFeePaid,\n                    matchedFillResults.right.takerFeePaid\n                )\n            );\n        } else {\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                matchedFillResults.left.takerFeePaid\n            );\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                rightOrder.feeRecipientAddress,\n                matchedFillResults.right.takerFeePaid\n            );\n        }\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract Exchange is\n    MixinExchangeCore,\n    MixinMatchOrders,\n    MixinSignatureValidator,\n    MixinTransactions,\n    MixinAssetProxyDispatcher,\n    MixinWrapperFunctions\n{\n    string constant public VERSION = \"2.0.0\";\n\n    // Mixins are instantiated in the order they are inherited\n    constructor ()\n        public\n        MixinExchangeCore()\n        MixinMatchOrders()\n        MixinSignatureValidator()\n        MixinTransactions()\n        MixinAssetProxyDispatcher()\n        MixinWrapperFunctions()\n    {}\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.4.24+commit.e67f0147",
		"settings": {
			"remappings": [],
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}