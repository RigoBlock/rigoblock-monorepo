{
	"schemaVersion": "2.0.0",
	"contractName": "AbiEncoder",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "makerAddress",
						"type": "address"
					},
					{
						"name": "takerAddress",
						"type": "address"
					},
					{
						"name": "feeRecipientAddress",
						"type": "address"
					},
					{
						"name": "senderAddress",
						"type": "address"
					},
					{
						"name": "makerAssetAmount",
						"type": "uint256"
					},
					{
						"name": "takerAssetAmount",
						"type": "uint256"
					},
					{
						"name": "makerFee",
						"type": "uint256"
					},
					{
						"name": "takerFee",
						"type": "uint256"
					},
					{
						"name": "expirationTimeSeconds",
						"type": "uint256"
					},
					{
						"name": "takerAssetData",
						"type": "bytes"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "abiEncodeZeroExOrder",
				"outputs": [
					{
						"name": "encodedOrder",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Gabriele Rigo - <gab@rigoblock.com>",
			"methods": {},
			"title": "ABI Encoder - return an array of encoded parameters."
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b5061031e806100206000396000f3fe6080604052600436106100405763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166343f114a98114610045575b600080fd5b34801561005157600080fd5b5061015d600480360361016081101561006957600080fd5b600160a060020a038235811692602081013582169260408201358316926060830135169160808101359160a08201359160c08101359160e0820135916101008101359181019061014081016101208201356401000000008111156100cc57600080fd5b8201836020820111156100de57600080fd5b8035906020019184600183028401116401000000008311171561010057600080fd5b91939092909160208101903564010000000081111561011e57600080fd5b82018360208201111561013057600080fd5b8035906020019184600183028401116401000000008311171561015257600080fd5b5090925090506101d2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019757818101518382015260200161017f565b50505050905090810190601f1680156101c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608d8d8d8d8d8d8d8d8d8d8d8d8d604051602001808e600160a060020a0316600160a060020a031681526020018d600160a060020a0316600160a060020a031681526020018c600160a060020a0316600160a060020a031681526020018b600160a060020a0316600160a060020a031681526020018a815260200189815260200188815260200187815260200186815260200180602001806020018381038352878782818152602001925080828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f8201169050808301925050509f5050505050505050505050505050505060405160208183030381529060405290508090509d9c5050505050505050505050505056fea165627a7a72305820efcdd060d360f7c038cf6a42e177ead932fee3cc922de7b1cd605f61c60ee7380029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x31E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x43F114A9 DUP2 EQ PUSH2 0x45 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP4 AND SWAP3 PUSH1 0x60 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 DUP3 ADD CALLDATALOAD SWAP2 PUSH2 0x100 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH2 0x140 DUP2 ADD PUSH2 0x120 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 PUSH1 0x20 DUP2 ADD SWAP1 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x1D2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x197 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1C4 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP15 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP8 DUP8 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD DUP5 DUP2 SUB DUP4 MSTORE DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 POP DUP6 DUP6 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP16 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 SWAP1 POP SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xef 0xcd 0xd0 PUSH1 0xD3 PUSH1 0xF7 0xc0 CODESIZE 0xcf PUSH11 0x42E177EAD932FEE3CC922D 0xe7 0xb1 0xcd PUSH1 0x5F PUSH2 0xC60E 0xe7 CODESIZE STOP 0x29 ",
				"sourceMap": "706:9194:33:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;706:9194:33;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100405763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166343f114a98114610045575b600080fd5b34801561005157600080fd5b5061015d600480360361016081101561006957600080fd5b600160a060020a038235811692602081013582169260408201358316926060830135169160808101359160a08201359160c08101359160e0820135916101008101359181019061014081016101208201356401000000008111156100cc57600080fd5b8201836020820111156100de57600080fd5b8035906020019184600183028401116401000000008311171561010057600080fd5b91939092909160208101903564010000000081111561011e57600080fd5b82018360208201111561013057600080fd5b8035906020019184600183028401116401000000008311171561015257600080fd5b5090925090506101d2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019757818101518382015260200161017f565b50505050905090810190601f1680156101c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608d8d8d8d8d8d8d8d8d8d8d8d8d604051602001808e600160a060020a0316600160a060020a031681526020018d600160a060020a0316600160a060020a031681526020018c600160a060020a0316600160a060020a031681526020018b600160a060020a0316600160a060020a031681526020018a815260200189815260200188815260200187815260200186815260200180602001806020018381038352878782818152602001925080828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f8201169050808301925050509f5050505050505050505050505050505060405160208183030381529060405290508090509d9c5050505050505050505050505056fea165627a7a72305820efcdd060d360f7c038cf6a42e177ead932fee3cc922de7b1cd605f61c60ee7380029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x43F114A9 DUP2 EQ PUSH2 0x45 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP4 AND SWAP3 PUSH1 0x60 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 DUP3 ADD CALLDATALOAD SWAP2 PUSH2 0x100 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH2 0x140 DUP2 ADD PUSH2 0x120 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 PUSH1 0x20 DUP2 ADD SWAP1 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x1D2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x197 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1C4 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP15 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP8 DUP8 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD DUP5 DUP2 SUB DUP4 MSTORE DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 POP DUP6 DUP6 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP16 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 SWAP1 POP SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xef 0xcd 0xd0 PUSH1 0xD3 PUSH1 0xF7 0xc0 CODESIZE 0xcf PUSH11 0x42E177EAD932FEE3CC922D 0xe7 0xb1 0xcd PUSH1 0x5F PUSH2 0xC60E 0xe7 CODESIZE STOP 0x29 ",
				"sourceMap": "706:9194:33:-;;;;;;;;;;;;;;;;;;;;;;;3752:990;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3752:990:33;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;3752:990:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;3752:990:33;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3752:990:33;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3752:990:33;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;3752:990:33;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3752:990:33;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;3752:990:33;;-1:-1:-1;3752:990:33;-1:-1:-1;3752:990:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3752:990:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4248:25;4339:12;4369;4399:19;4436:13;4467:16;4501;4535:8;4561;4587:21;4684:14;;4716:9;;4311:424;;;;;;-1:-1:-1;;;;;4311:424:33;-1:-1:-1;;;;;4311:424:33;;;;;;-1:-1:-1;;;;;4311:424:33;-1:-1:-1;;;;;4311:424:33;;;;;;-1:-1:-1;;;;;4311:424:33;-1:-1:-1;;;;;4311:424:33;;;;;;-1:-1:-1;;;;;4311:424:33;-1:-1:-1;;;;;4311:424:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;;74:27;137:4;117:14;-1:-1;;113:30;157:16;;;4311:424:33;;;;;;;;;;;-1:-1:-1;4311:424:33;;;;;1:33:-1;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;4311:424:33;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4311:424:33;;;4296:439;;;4289:446;;3752:990;;;;;;;;;;;;;;;:::o"
			}
		}
	},
	"sourceTreeHashHex": "0x3b5262442b87bb9c99a3514031ee327e79d0482561dd8ea3c8031a09cb586977",
	"sources": {
		"./AbiEncoder.sol": {
			"id": 33
		}
	},
	"sourceCodes": {
		"./AbiEncoder.sol": "/*\n\n Copyright 2019 RigoBlock.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title ABI Encoder - return an array of encoded parameters.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\ncontract AbiEncoder {\n\n    struct HandlerMockOrder {\n        uint256 orderAmount;\n    }\n\n    struct ZeroExOrder {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n        bytes signature;\n    }\n\n    struct TotleOrder {\n        address exchangeHandler;\n        bytes genericPayload;\n    }\n\n    struct TotleTrade {\n        bool isSell;\n        address tokenAddress;\n        uint256 tokenAmount;\n        bool optionalTrade;\n        uint256 minimumExchangeRate;\n        uint256 minimumAcceptableTokenAmount;\n        TotleOrder[] orders;\n    }\n\n/*\n    /// @dev Gets the Abi encoded bytes array of an integer.\n    /// @param orderAmount integer of amount.\n    /// @return Byte array of the ABI encoded struct.\n    function abiEncodeHandlerMockOrder(uint256 orderAmount)\n        external\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        HandlerMockOrder memory order;\n        order.orderAmount = orderAmount;\n        encodedOrder = abi.encode(order);\n        return encodedOrder;\n    }\n*/\n\n/*\n    // @notice: following structs not supported yet\n    // @notice: pragma ABIEncoderV2 prompts stack-too-deep error\n    function abiEncodePackedHandlerMockOrder(uint256 orderAmount)\n        external\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        HandlerMockOrder memory order;\n        order.orderAmount = orderAmount;\n        encodedOrder = abi.encodePacked(order);\n        return encodedOrder;\n    }\n*/\n\n    function abiEncodeZeroExOrder(\n        address makerAddress,\n        address takerAddress,\n        address feeRecipientAddress,\n        address senderAddress,\n        uint256 makerAssetAmount,\n        uint256 takerAssetAmount,\n        uint256 makerFee,\n        uint256 takerFee,\n        uint256 expirationTimeSeconds,\n        // uint256 salt,\n        // bytes makerAssetData,\n        bytes calldata takerAssetData,\n        bytes calldata signature)\n        external\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        return encodedOrder = abi.encode(\n                makerAddress,\n                takerAddress,\n                feeRecipientAddress,\n                senderAddress,\n                makerAssetAmount,\n                takerAssetAmount,\n                makerFee,\n                takerFee,\n                expirationTimeSeconds,\n                //salt,\n                //makerAssetData,\n                takerAssetData,\n                signature\n        );\n    }\n/*\n    function abiEncodePackedZeroExOrder(\n        address makerAddress,\n        address takerAddress,\n        address feeRecipientAddress,\n        address senderAddress,\n        uint256 makerAssetAmount,\n        uint256 takerAssetAmount,\n        uint256 makerFee,\n        uint256 takerFee,\n        uint256 expirationTimeSeconds,\n        uint256 salt,\n        bytes memory makerAssetData,\n        bytes memory takerAssetData)\n        public\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        ZeroExOrder memory order;\n        order.makerAddress = makerAddress;\n        order.takerAddress = takerAddress;\n        order.feeRecipientAddress = feeRecipientAddress;\n        order.senderAddress = senderAddress;\n        order.makerAssetAmount = makerAssetAmount;\n        order.takerAssetAmount = takerAssetAmount;\n        order.makerFee = makerFee;\n        order.takerFee = takerFee;\n        order.expirationTimeSeconds = expirationTimeSeconds;\n        order.salt = salt;\n        order.makerAssetData = makerAssetData;\n        order.takerAssetData = takerAssetData;\n        encodedOrder = abi.encodePacked(\n            \"ZeroExOrder(\",\n                \"address makerAddress,\",\n                \"address takerAddress,\",\n                \"address feeRecipientAddress,\",\n                \"address senderAddress,\",\n                \"uint256 makerAssetAmount,\",\n                \"uint256 takerAssetAmount,\",\n                \"uint256 makerFee,\",\n                \"uint256 takerFee,\",\n                \"uint256 expirationTimeSeconds,\",\n                \"uint256 salt,\",\n                \"bytes makerAssetData,\",\n                \"bytes takerAssetData\",\n            \")\"\n        );\n        return encodedOrder;\n    }\n\n    function abiEncodeTotleOrder(\n        address exchangeHandler,\n        bytes memory genericPayload)\n        public\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        TotleOrder memory order;\n        order.exchangeHandler = exchangeHandler;\n        order.genericPayload = genericPayload;\n        encodedOrder = abi.encodePacked(\n            \"TotleOrder(\",\n                \"address exchangeHandler,\",\n                \"bytes genericPayload,\",\n            \")\"\n        );\n    }\n\n    function abiEncodePackedTotleOrder(\n        address exchangeHandler,\n        bytes memory genericPayload)\n        public\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        TotleOrder memory order;\n        order.exchangeHandler = exchangeHandler;\n        order.genericPayload = genericPayload;\n        encodedOrder = abi.encodePacked(\n            \"TotleOrder(\",\n                \"address exchangeHandler,\",\n                \"bytes genericPayload,\",\n            \")\"\n        );\n        return encodedOrder;\n    }\n\n    // @notice the following two functions require ABIencoderV2, which is not optimized\n    // @notice switch to ABIencoderV2 results in stack-too-deep error\n    function abiEncodeTotleTrade(\n        bool isSell,\n        address tokenAddress,\n        uint256 tokenAmount,\n        bool optionalTrade,\n        uint256 minimumExchangeRate,\n        uint256 minimumAcceptableTokenAmount,\n        TotleOrder[] memory orders)\n        public\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        TotleTrade memory order;\n        order.isSell = isSell;\n        order.tokenAddress = tokenAddress;\n        order.tokenAmount = tokenAmount;\n        order.optionalTrade = optionalTrade;\n        order.minimumExchangeRate = minimumExchangeRate;\n        order.minimumAcceptableTokenAmount = minimumAcceptableTokenAmount;\n        order.orders = orders;\n        encodedOrder = abi.encodePacked(\n            \"TotleTrade(\",\n                \"bool isSell,\",\n                \"address tokenAddress,\",\n                \"uint256 tokenAmount,\",\n                \"bool optionalTrade,\",\n                \"uint256 minimumExchangeRate,\",\n                \"uint256 minimumAcceptableTokenAmount,\",\n                \"TotleOrder[] orders,\",\n            \")\"\n        );\n        return encodedOrder;\n    }\n\n    function abiEncodePackedTotleTrade(\n        bool isSell,\n        address tokenAddress,\n        uint256 tokenAmount,\n        bool optionalTrade,\n        uint256 minimumExchangeRate,\n        uint256 minimumAcceptableTokenAmount,\n        TotleOrder[] memory orders)\n        public\n        pure\n        returns (bytes memory encodedOrder)\n    {\n        TotleTrade memory order;\n        order.isSell = isSell;\n        order.tokenAddress = tokenAddress;\n        order.tokenAmount = tokenAmount;\n        order.optionalTrade = optionalTrade;\n        order.minimumExchangeRate = minimumExchangeRate;\n        order.minimumAcceptableTokenAmount = minimumAcceptableTokenAmount;\n        order.orders = orders;\n        encodedOrder = abi.encodePacked(\n            \"TotleTrade(\",\n                \"bool isSell,\",\n                \"address tokenAddress,\",\n                \"uint256 tokenAmount,\",\n                \"bool optionalTrade,\",\n                \"uint256 minimumExchangeRate,\",\n                \"uint256 minimumAcceptableTokenAmount,\",\n                \"TotleOrder[] orders,\",\n            \")\"\n        );\n        return encodedOrder;\n    }\n*/\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.5.0+commit.1d4f565a",
		"settings": {
			"remappings": [],
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}