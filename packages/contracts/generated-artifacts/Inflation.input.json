{
	"language": "Solidity",
	"sources": {
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/rigoToken/Inflation/Inflation.sol": {
			"content": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.4;\n\nimport { Owned } from \"../../utils/Owned/Owned.sol\";\nimport { AuthorityFace as Authority } from \"../../protocol/authorities/Authority/AuthorityFace.sol\";\nimport { SafeMath } from \"../../utils/SafeMath/SafeMath.sol\";\nimport { InflationFace } from \"./InflationFace.sol\";\n\ninterface RigoToken {\n\n    function mintToken(address _recipient, uint256 _amount) external;\n    function changeMintingAddress(address _newAddress) external;\n    function changeRigoblockAddress(address _newAddress) external;\n\n    function balanceOf(address _who) external view returns (uint256);\n}\n\n/// @title Inflation - Allows ProofOfPerformance to mint tokens.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract Inflation is\n    SafeMath,\n    InflationFace\n{\n    address public RIGOTOKENADDRESS;\n\n    uint256 public period = 1 days;\n    uint256 public minimumGRG = 100 * 10**18;\n    address public proofOfPerformance;\n    address public authority;\n    address public rigoblockDao;\n\n    mapping(address => Performer) performers;\n    mapping(address => Group) groups;\n\n    struct Performer {\n        uint256 claimedTokens;\n        mapping(uint256 => bool) claim;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 epoch;\n    }\n\n    struct Group {\n        uint256 epochReward;\n    }\n\n    /// @notice in order to qualify for PoP user has to hold minimum rigo token\n    modifier minimumRigo(address _ofPool) {\n        RigoToken rigoToken = RigoToken(RIGOTOKENADDRESS);\n        require(\n            rigoToken.balanceOf(getPoolOwner(_ofPool)) >= minimumGRG,\n            \"BELOW_MINIMUM_GRG\"\n        );\n        _;\n    }\n\n    modifier onlyRigoblockDao {\n        require(\n            msg.sender == rigoblockDao,\n            \"ONLY_RIGOBLOCK_DAO\"\n        );\n        _;\n    }\n\n    modifier onlyProofOfPerformance {\n        require(\n            msg.sender == proofOfPerformance,\n            \"ONLY_POP_CONTRACT\"\n        );\n        _;\n    }\n\n    modifier isApprovedFactory(address _factory) {\n        Authority auth = Authority(authority);\n        require(\n            auth.isWhitelistedFactory(_factory),\n            \"NOT_APPROVED_AUTHORITY\"\n        );\n        _;\n    }\n\n    modifier timeAtLeast(address _thePool) {\n        require(\n            block.timestamp >= performers[_thePool].endTime,\n            \"TIME_NOT_ENOUGH\"\n        );\n        _;\n    }\n\n    constructor(\n        address _rigoTokenAddress,\n        address _proofOfPerformance,\n        address _authority)\n        public\n    {\n        RIGOTOKENADDRESS = _rigoTokenAddress;\n        rigoblockDao = msg.sender;\n        proofOfPerformance = _proofOfPerformance;\n        authority = _authority;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows ProofOfPerformance to mint rewards\n    /// @param _thePool Address of the target pool\n    /// @param _reward Number of reward in Rigo tokens\n    /// @return Bool the transaction executed correctly\n    function mintInflation(address _thePool, uint256 _reward)\n        external\n        onlyProofOfPerformance\n        minimumRigo(_thePool)\n        timeAtLeast(_thePool)\n        returns (bool)\n    {\n        performers[_thePool].startTime = block.timestamp;\n        performers[_thePool].endTime = block.timestamp + period;\n        ++performers[_thePool].epoch;\n        uint256 reward = _reward * 95 / 100; //5% royalty to rigoblock dao\n        uint256 rigoblockReward = safeSub(_reward, reward);\n        RigoToken rigoToken = RigoToken(RIGOTOKENADDRESS);\n        // TODO: amend logic as staking contract receives reward\n        rigoToken.mintToken(getPoolOwner(_thePool), reward);\n        rigoToken.mintToken(rigoblockDao, rigoblockReward);\n        return true;\n    }\n\n    /// @dev Allows rigoblock dao to set the inflation factor for a group\n    /// @param _group Address of the group/factory\n    /// @param _inflationFactor Value of the reward factor\n    function setInflationFactor(address _group, uint256 _inflationFactor)\n        external\n        onlyRigoblockDao\n        isApprovedFactory(_group)\n    {\n        groups[_group].epochReward = _inflationFactor;\n    }\n\n    /// @dev Allows rigoblock dao to set the minimum number of required tokens\n    /// @param _minimum Number of minimum tokens\n    function setMinimumRigo(uint256 _minimum)\n        external\n        onlyRigoblockDao\n    {\n        require(\n            _minimum >= 100 * 10**18,\n            \"MINIMUM_GRG_BELOW_100_ERROR\"\n        );\n        minimumGRG = _minimum;\n    }\n\n    /// @dev Allows rigoblock dao to upgrade its address\n    /// @param _newRigoblock Address of the new rigoblock dao\n    function setRigoblock(address _newRigoblock)\n        external\n        onlyRigoblockDao\n    {\n        rigoblockDao = _newRigoblock;\n    }\n\n    /// @dev Allows rigoblock dao to update the authority\n    /// @param _authority Address of the authority\n    function setAuthority(address _authority)\n        external\n        onlyRigoblockDao\n    {\n        authority = _authority;\n    }\n\n    /// @dev Allows rigoblock dao to update proof of performance\n    /// @param _pop Address of the Proof of Performance contract\n    function setProofOfPerformance(address _pop)\n        external\n        onlyRigoblockDao\n    {\n        proofOfPerformance = _pop;\n    }\n\n    /// @dev Allows rigoblock dao to set the minimum time between reward collection\n    /// @param _newPeriod Number of seconds between 2 rewards\n    /// @notice set period on shorter subsets of time for testing\n    function setPeriod(uint256 _newPeriod)\n        external\n        onlyRigoblockDao\n    {\n        require(\n            _newPeriod >= 1 days && _newPeriod <= 365 days,\n            \"PERIOD_TOO_LONG_OR_TOO_SHORT_ERROR\"\n        );\n        period = _newPeriod;\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Returns whether a wizard can claim reward tokens\n    /// @param _thePool Address of the target pool\n    /// @return Bool the wizard can claim\n    function canWithdraw(address _thePool)\n        external\n        view\n        returns (bool)\n    {\n        if (block.timestamp >= performers[_thePool].endTime) {\n            return true;\n        }\n    }\n\n    /// @dev Returns how much time needed until next claim\n    /// @param _thePool Address of the target pool\n    /// @return Number in seconds\n    function timeUntilClaim(address _thePool)\n        external\n        view\n        returns (uint256)\n    {\n        if (block.timestamp < performers[_thePool].endTime) {\n            return (performers[_thePool].endTime);\n        }\n    }\n\n    /// @dev Return the reward factor for a group\n    /// @param _group Address of the group\n    /// @return Value of the reward factor\n    function getInflationFactor(address _group)\n        external\n        view\n        returns (uint256)\n    {\n        return groups[_group].epochReward;\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Returns the address of the pool owner\n    /// @param _ofPool Number of the registered pool\n    /// @return Address of the pool owner\n    function getPoolOwner(address _ofPool)\n        internal\n        view\n        returns (address)\n    {\n        return Owned(_ofPool).owner();\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/Owned/Owned.sol": {
			"content": "pragma solidity >=0.4.22 <0.6.0;\n\ncontract Owned {\n\n    address public owner;\n\n    event NewOwner(address indexed old, address indexed current);\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address _new)\n        public\n        onlyOwner\n    {\n        require(_new != address(0));\n        owner = _new;\n        emit NewOwner(owner, _new);\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/protocol/authorities/Authority/AuthorityFace.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/// @title Authority Interface - Allows interaction with the Authority contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface AuthorityFace {\n\n    /*\n     * EVENTS\n     */\n    event AuthoritySet(address indexed authority);\n    event WhitelisterSet(address indexed whitelister);\n    event WhitelistedUser(address indexed target, bool approved);\n    event WhitelistedRegistry(address indexed registry, bool approved);\n    event WhitelistedFactory(address indexed factory, bool approved);\n    event WhitelistedVault(address indexed vault, bool approved);\n    event WhitelistedDrago(address indexed drago, bool isWhitelisted);\n    event NewDragoEventful(address indexed dragoEventful);\n    event NewVaultEventful(address indexed vaultEventful);\n    event NewNavVerifier(address indexed navVerifier);\n    event NewExchangesAuthority(address indexed exchangesAuthority);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function setAuthority(address _authority, bool _isWhitelisted) external;\n    function setWhitelister(address _whitelister, bool _isWhitelisted) external;\n    function whitelistUser(address _target, bool _isWhitelisted) external;\n    function whitelistDrago(address _drago, bool _isWhitelisted) external;\n    function whitelistVault(address _vault, bool _isWhitelisted) external;\n    function whitelistRegistry(address _registry, bool _isWhitelisted) external;\n    function whitelistFactory(address _factory, bool _isWhitelisted) external;\n    function setDragoEventful(address _dragoEventful) external;\n    function setVaultEventful(address _vaultEventful) external;\n    function setNavVerifier(address _navVerifier) external;\n    function setExchangesAuthority(address _exchangesAuthority) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function isWhitelistedUser(address _target) external view returns (bool);\n    function isAuthority(address _authority) external view returns (bool);\n    function isWhitelistedRegistry(address _registry) external view returns (bool);\n    function isWhitelistedDrago(address _drago) external view returns (bool);\n    function isWhitelistedVault(address _vault) external view returns (bool);\n    function isWhitelistedFactory(address _factory) external view returns (bool);\n    function getDragoEventful() external view returns (address);\n    function getVaultEventful() external view returns (address);\n    function getNavVerifier() external view returns (address);\n    function getExchangesAuthority() external view returns (address);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/SafeMath/SafeMath.sol": {
			"content": "pragma solidity >=0.4.22 <0.6.0;\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/rigoToken/Inflation/InflationFace.sol": {
			"content": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/// @title Inflation Interface - Allows interaction with the Inflation contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface InflationFace {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function mintInflation(address _thePool, uint256 _reward) external returns (bool);\n    function setInflationFactor(address _group, uint256 _inflationFactor) external;\n    function setMinimumRigo(uint256 _minimum) external;\n    function setRigoblock(address _newRigoblock) external;\n    function setAuthority(address _authority) external;\n    function setProofOfPerformance(address _pop) external;\n    function setPeriod(uint256 _newPeriod) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function canWithdraw(address _thePool) external view returns (bool);\n    function timeUntilClaim(address _thePool) external view returns (uint256);\n    function getInflationFactor(address _group) external view returns (uint256);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/rigoToken/ProofOfPerformance/ProofOfPerformance.sol": {
			"content": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.4;\n\nimport { Pool } from \"../../utils/Pool/Pool.sol\";\nimport { ReentrancyGuard } from \"../../utils/ReentrancyGuard/ReentrancyGuard.sol\";\nimport { SafeMath } from \"../../utils/SafeMath/SafeMath.sol\";\nimport { ProofOfPerformanceFace } from \"./ProofOfPerformanceFace.sol\";\n\ncontract Inflation {\n    \n    uint256 public period;\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function mintInflation(address _thePool, uint256 _reward) external returns (bool);\n    function setInflationFactor(address _group, uint256 _inflationFactor) external;\n    function setMinimumRigo(uint256 _minimum) external;\n    function setRigoblock(address _newRigoblock) external;\n    function setAuthority(address _authority) external;\n    function setProofOfPerformance(address _pop) external;\n    function setPeriod(uint256 _newPeriod) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function canWithdraw(address _thePool) external view returns (bool);\n    function timeUntilClaim(address _thePool) external view returns (uint256);\n    function getInflationFactor(address _group) external view returns (uint256);\n}\n\ncontract RigoToken {\n    address public minter;\n    uint256 public totalSupply;\n\n    function balanceOf(address _who) external view returns (uint256);\n}\n\ninterface DragoRegistry {\n\n    //EVENTS\n\n    event Registered(string name, string symbol, uint256 id, address indexed drago, address indexed owner, address indexed group);\n    event Unregistered(string indexed name, string indexed symbol, uint256 indexed id);\n    event MetaChanged(uint256 indexed id, bytes32 indexed key, bytes32 value);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function register(address _drago, string calldata _name, string calldata _symbol, uint256 _dragoId, address _owner) external payable returns (bool);\n    function unregister(uint256 _id) external;\n    function setMeta(uint256 _id, bytes32 _key, bytes32 _value) external;\n    function addGroup(address _group) external;\n    function setFee(uint256 _fee) external;\n    function updateOwner(uint256 _id) external;\n    function updateOwners(uint256[] calldata _id) external;\n    function upgrade(address _newAddress) external payable; //payable as there is a transfer of value, otherwise opcode might throw an error\n    function setUpgraded(uint256 _version) external;\n    function drain() external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function dragoCount() external view returns (uint256);\n    function fromId(uint256 _id) external view returns (address drago, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromAddress(address _drago) external view returns (uint256 id, string memory name, string memory symbol, uint256 dragoId, address owner, address group);\n    function fromName(string calldata _name) external view returns (uint256 id, address drago, string memory symbol, uint256 dragoId, address owner, address group);\n    function getNameFromAddress(address _pool) external view returns (string memory);\n    function getSymbolFromAddress(address _pool) external view returns (string memory);\n    function meta(uint256 _id, bytes32 _key) external view returns (bytes32);\n    function getGroups() external view returns (address[] memory);\n    function getFee() external view returns (uint256);\n}\n\n/// @title Proof of Performance - Controls parameters of inflation.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract ProofOfPerformance is\n    SafeMath,\n    ReentrancyGuard,\n    ProofOfPerformanceFace\n{\n    address public RIGOTOKENADDRESS;\n\n    address public dragoRegistry;\n    address public rigoblockDao;\n\n    mapping (uint256 => PoolPrice) poolPrice;\n    mapping (address => Group) groups;\n\n    struct PoolPrice {\n        uint256 highwatermark;\n    }\n\n    struct Group {\n        uint256 rewardRatio;\n    }\n\n    modifier onlyRigoblockDao() {\n        require(\n            msg.sender == rigoblockDao,\n            \"ONLY_RIGOBLOCK_DAO\"\n        );\n        _;\n    }\n\n    constructor(\n        address _rigoTokenAddress,\n        address _rigoblockDao,\n        address _dragoRegistry)\n        public\n    {\n        RIGOTOKENADDRESS = _rigoTokenAddress;\n        rigoblockDao = _rigoblockDao;\n        dragoRegistry = _dragoRegistry;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows anyone to allocate the pop reward to pool wizards.\n    /// @param _ofPool Number of pool id in registry.\n    function claimPop(uint256 _ofPool)\n        external\n        nonReentrant\n    {\n        DragoRegistry registry = DragoRegistry(dragoRegistry);\n        address poolAddress;\n        (poolAddress, , , , , ) = registry.fromId(_ofPool);\n        (uint256 pop, ) = proofOfPerformanceInternal(_ofPool);\n        require(\n            pop > 0,\n            \"POP_REWARD_IS_NULL\"\n        );\n        uint256 price = Pool(poolAddress).calcSharePrice();\n        poolPrice[_ofPool].highwatermark = price;\n        require(\n            Inflation(getMinter()).mintInflation(poolAddress, pop),\n            \"MINT_INFLATION_ERROR\"\n        );\n    }\n\n    /// @dev Allows RigoBlock Dao to update the pools registry.\n    /// @param _dragoRegistry Address of new registry.\n    function setRegistry(address _dragoRegistry)\n        external\n        onlyRigoblockDao\n    {\n        dragoRegistry = _dragoRegistry;\n    }\n\n    /// @dev Allows RigoBlock Dao to update its address.\n    /// @param _rigoblockDao Address of new dao.\n    function setRigoblockDao(address _rigoblockDao)\n        external\n        onlyRigoblockDao\n    {\n        rigoblockDao = _rigoblockDao;\n    }\n\n    /// @dev Allows RigoBlock Dao to set the ratio between assets and performance reward for a group.\n    /// @param _ofGroup Id of the pool.\n    /// @param _ratio Id of the pool.\n    /// @notice onlyRigoblockDao can set ratio.\n    function setRatio(\n        address _ofGroup,\n        uint256 _ratio)\n        external\n        onlyRigoblockDao\n    {\n        require(\n            _ratio <= 10000,\n            \"RATIO_BIGGER_THAN_10000\"\n        ); //(from 0 to 10000)\n        groups[_ofGroup].rewardRatio = _ratio;\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Gets data of a pool.\n    /// @param _ofPool Id of the pool.\n    /// @return Bool the pool is active.\n    /// @return address of the pool.\n    /// @return address of the pool factory.\n    /// @return price of the pool in wei.\n    /// @return total supply of the pool in units.\n    /// @return total value of the pool in wei.\n    /// @return value of the reward factor or said pool.\n    /// @return ratio of assets/performance reward (from 0 to 10000).\n    /// @return value of the pop reward to be claimed in GRGs.\n    function getPoolData(uint256 _ofPool)\n        external\n        view\n        returns (\n            bool active,\n            address thePoolAddress,\n            address thePoolGroup,\n            uint256 thePoolPrice,\n            uint256 thePoolSupply,\n            uint256 poolValue,\n            uint256 epochReward,\n            uint256 ratio,\n            uint256 pop\n        )\n    {\n        active = isActiveInternal(_ofPool);\n        (thePoolAddress, thePoolGroup) = addressFromIdInternal(_ofPool);\n        (thePoolPrice, thePoolSupply, poolValue) = getPoolPriceAndValueInternal(_ofPool);\n        (epochReward, , ratio) = getInflationParameters(_ofPool);\n        (pop, ) = proofOfPerformanceInternal(_ofPool);\n        return(\n            active,\n            thePoolAddress,\n            thePoolGroup,\n            thePoolPrice,\n            thePoolSupply,\n            poolValue,\n            epochReward,\n            ratio,\n            pop\n        );\n    }\n\n    /// @dev Returns the highwatermark of a pool.\n    /// @param _ofPool Id of the pool.\n    /// @return Value of the all-time-high pool nav.\n    function getHwm(uint256 _ofPool)\n        external\n        view\n        returns (uint256)\n    {\n        return (getHwmInternal(_ofPool));\n    }\n\n    /// @dev Returns the reward factor for a pool.\n    /// @param _ofPool Id of the pool.\n    /// @return Value of the reward factor.\n    function getEpochReward(uint256 _ofPool)\n        external\n        view\n        returns (uint256)\n    {\n        (uint256 epochReward, , ) = getInflationParameters(_ofPool);\n        return epochReward;\n    }\n\n    /// @dev Returns the split ratio of asset and performance reward.\n    /// @param _ofPool Id of the pool.\n    /// @return Value of the ratio from 1 to 100.\n    function getRatio(uint256 _ofPool)\n        external\n        view\n        returns (uint256)\n    {\n        ( , , uint256 ratio) = getInflationParameters(_ofPool);\n        return ratio;\n    }\n\n    /// @dev Returns the proof of performance reward for a pool.\n    /// @param _ofPool Id of the pool.\n    /// @return popReward Value of the pop reward in Rigo tokens.\n    /// @return performanceReward Split of the performance reward in Rigo tokens.\n    /// @notice epoch reward should be big enough that it.\n    /// @notice can be decreased if number of funds increases.\n    /// @notice should be at least 10^6 (just as pool base) to start with.\n    /// @notice rigo token has 10^18 decimals.\n    function proofOfPerformance(uint256 _ofPool)\n        external\n        view\n        returns (uint256 popReward, uint256 performanceReward)\n    {\n        return proofOfPerformanceInternal(_ofPool);\n    }\n\n    /// @dev Checks whether a pool is registered and active.\n    /// @param _ofPool Id of the pool.\n    /// @return Bool the pool is active.\n    function isActive(uint256 _ofPool)\n        external\n        view\n        returns (bool)\n    {\n        return isActiveInternal(_ofPool);\n    }\n\n    /// @dev Returns the address and the group of a pool from its id.\n    /// @param _ofPool Id of the pool.\n    /// @return Address of the target pool.\n    /// @return Address of the pool's group.\n    function addressFromId(uint256 _ofPool)\n        external\n        view\n        returns (\n            address pool,\n            address group\n        )\n    {\n        return (addressFromIdInternal(_ofPool));\n    }\n\n    /// @dev Returns the price a pool from its id.\n    /// @param _ofPool Id of the pool.\n    /// @return Price of the pool in wei.\n    /// @return Number of tokens of a pool (totalSupply).\n    function getPoolPrice(uint256 _ofPool)\n        external\n        view\n        returns (\n            uint256 thePoolPrice,\n            uint256 totalTokens\n        )\n    {\n        (thePoolPrice, totalTokens, ) = getPoolPriceAndValueInternal(_ofPool);\n    }\n\n    /// @dev Returns the address and the group of a pool from its id.\n    /// @param _ofPool Id of the pool.\n    /// @return Address of the target pool.\n    /// @return Address of the pool's group.\n    function calcPoolValue(uint256 _ofPool)\n        external\n        view\n        returns (\n            uint256 aum\n        )\n    {\n        ( , , aum) = getPoolPriceAndValueInternal(_ofPool);\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n    /// @dev Returns the split ratio of asset and performance reward.\n    /// @param _ofPool Id of the pool.\n    /// @return Value of the reward factor.\n    /// @return Value of epoch time.\n    /// @return Value of the ratio from 1 to 100.\n    function getInflationParameters(uint256 _ofPool)\n        internal\n        view\n        returns (\n            uint256 epochReward,\n            uint256 epochTime,\n            uint256 ratio\n        )\n    {\n        ( , address group) = addressFromIdInternal(_ofPool);\n        epochReward = Inflation(getMinter()).getInflationFactor(group);\n        epochTime = Inflation(getMinter()).period();\n        ratio = groups[group].rewardRatio;\n    }\n\n    /// @dev Returns the address of the Inflation contract.\n    /// @return Address of the minter/inflation.\n    function getMinter()\n        internal\n        view\n        returns (address)\n    {\n        RigoToken token = RigoToken(RIGOTOKENADDRESS);\n        return token.minter();\n    }\n\n    /// @dev Returns the proof of performance reward for a pool.\n    /// @param _ofPool Id of the pool.\n    /// @return popReward Value of the pop reward in Rigo tokens.\n    /// @return performanceReward Split of the performance reward in Rigo tokens.\n    /// @notice epoch reward should be big enough that it  can be decreased when number of funds increases\n    /// @notice should be at least 10^6 (just as pool base) to start with.\n    function proofOfPerformanceInternal(uint256 _ofPool)\n        internal\n        view\n        returns (uint256 popReward, uint256 performanceReward)\n    {\n        uint256 highwatermark= getHwmInternal(_ofPool);\n        (uint256 newPrice, uint256 tokenSupply, uint256 poolValue) = getPoolPriceAndValueInternal(_ofPool);\n        require (\n            newPrice >= highwatermark,\n            \"PRICE_LOWER_THAN_HWM_ERROR\"\n        );\n        (address thePoolAddress, ) = addressFromIdInternal(_ofPool);\n        (uint256 epochReward, uint256 epochTime, uint256 rewardRatio) = getInflationParameters(_ofPool);\n\n        uint256 assetsComponent = safeMul(\n            poolValue,\n            epochReward\n        ) * epochTime / 1 days; // proportional to epoch time\n\n        uint256 performanceComponent = safeMul(\n            safeMul(\n                (newPrice - highwatermark),\n                tokenSupply\n            ) / 1000000, // Pool(thePoolAddress).BASE(),\n            epochReward\n        ) * 365 days / 1 days;\n\n        uint256 assetsReward = (\n            safeMul(\n                assetsComponent,\n                safeSub(10000, rewardRatio) // 100000 = 100%\n            ) / 10000 ether\n        ) * ethBalanceAdjustmentInternal(thePoolAddress, poolValue) / 1 ether; // reward inversly proportional to Eth in pool\n\n        performanceReward = safeDiv(\n            safeMul(performanceComponent, rewardRatio),\n            10000 ether\n        ) * ethBalanceAdjustmentInternal(thePoolAddress, poolValue) / 1 ether;\n\n        popReward = grgBalanceRewardSlashInternal(thePoolAddress, safeAdd(performanceReward, assetsReward));\n\n        if (popReward > 10 ** 25 / 10000) {\n            popReward = 10 ** 25 / 10000; // max single reward 0.01% of total supply\n        }\n    }\n\n    /// @dev Returns the high-watermark of the pool.\n    /// @param _ofPool Number of the pool in registry.\n    /// @return Number high-watermark.\n    function getHwmInternal(uint256 _ofPool) \n        internal\n        view\n        returns (uint256)\n    {\n        if (poolPrice[_ofPool].highwatermark == 0) {\n            return (1 ether);\n\n        } else {\n            return poolPrice[_ofPool].highwatermark;\n        }\n    }\n\n    /// @dev Returns the non-linear rewards adjustment by eth.\n    /// @param thePoolAddress Address of the pool.\n    /// @param poolValue Number of value of the pool in wei.\n    /// @return Number non-linear adjustment.\n    function ethBalanceAdjustmentInternal(\n        address thePoolAddress,\n        uint256 poolValue)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 poolEthBalance = address(Pool(thePoolAddress)).balance;\n        require(\n            poolEthBalance <= poolValue && poolEthBalance >= 1 finney, // prevent dust from small pools\n            \"ETH_BALANCE_HIGHER_THAN_AUM_OR_TOO_SMALL_ERROR\"\n        );\n\n        // non-linear progression series with decay factor 18%\n        // y = (1-decay factor)*k^[(1-decay factor)^(n-1)]\n        if (1 ether * poolEthBalance / poolValue >= 800 finney) {\n            return (1 ether * poolEthBalance / poolValue);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 600 finney) {\n            return (1 ether * poolEthBalance / poolValue * 820 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 400 finney) {\n            return (1 ether * poolEthBalance / poolValue * 201 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 200 finney) {\n            return (1 ether * poolEthBalance / poolValue * 29 / 1000);\n\n        } else if (1 ether * poolEthBalance / poolValue >= 100 finney) {\n            return (1 ether * poolEthBalance / poolValue * 5 / 1000);\n\n        } else { // reward is 0 for any pool not backed by < 10% eth\n            revert('ETH_BELOW_10_PERCENT_AUM_ERROR');\n        }\n    }\n\n    /// @dev Returns the non-linear rewards adjustment by grg operator balance.\n    /// @param thePoolAddress Address of the pool.\n    /// @param pop Number of preliminary reward.\n    /// @return Number non-linear adjustment.\n    function grgBalanceRewardSlashInternal(\n        address thePoolAddress,\n        uint256 pop)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 operatorGrgBalance = RigoToken(RIGOTOKENADDRESS).balanceOf(Pool(thePoolAddress).owner());\n        uint256 grgTotalSupply = RigoToken(RIGOTOKENADDRESS).totalSupply();\n\n        // non-linear progression series with decay factor 18%\n        // y = (1-decay factor)*k^[(1-decay factor)^(n-1)]\n        if (10 ether * operatorGrgBalance / grgTotalSupply >= 5 finney) {\n            return (pop);\n\n        } else if (10 ether * operatorGrgBalance / grgTotalSupply >= 4 finney) {\n            return (pop * 820 / 1000);\n\n        } else if (10 ether * operatorGrgBalance / grgTotalSupply >= 3 finney) {\n            return (pop * 201 / 1000);\n\n        } else if (10 ether * operatorGrgBalance / grgTotalSupply >= 2 finney) {\n            return (pop * 29 / 1000);\n\n        } else if (10 ether * operatorGrgBalance / grgTotalSupply >= 1 finney) {\n            return (pop * 5 / 1000);\n\n        } else {\n            return (pop * 2 / 1000);\n        }\n    }\n\n    /// @dev Checks whether a pool is registered and active.\n    /// @param _ofPool Id of the pool.\n    /// @return Bool the pool is active.\n    function isActiveInternal(uint256 _ofPool)\n        internal view\n        returns (bool)\n    {\n        DragoRegistry registry = DragoRegistry(dragoRegistry);\n        (address thePool, , , , , ) = registry.fromId(_ofPool);\n        if (thePool != address(0)) {\n            return true;\n        }\n    }\n\n    /// @dev Returns the address and the group of a pool from its id.\n    /// @param _ofPool Id of the pool.\n    /// @return Address of the target pool.\n    /// @return Address of the pool's group.\n    function addressFromIdInternal(uint256 _ofPool)\n        internal\n        view\n        returns (\n            address pool,\n            address group\n        )\n    {\n        DragoRegistry registry = DragoRegistry(dragoRegistry);\n        (pool, , , , , group) = registry.fromId(_ofPool);\n        return (pool, group);\n    }\n\n    /// @dev Returns price, supply, aum and boolean of a pool from its id.\n    /// @param _ofPool Id of the pool.\n    /// @return Price of the pool in wei.\n    /// @return Number of tokens of a pool (totalSupply).\n    /// @return Address of the target pool.\n    /// @return Address of the pool's group.\n    function getPoolPriceAndValueInternal(uint256 _ofPool)\n        internal\n        view\n        returns (\n            uint256 thePoolPrice,\n            uint256 totalTokens,\n            uint256 aum\n        )\n    {\n        (address poolAddress, ) = addressFromIdInternal(_ofPool);\n        Pool pool = Pool(poolAddress);\n        thePoolPrice = pool.calcSharePrice();\n        totalTokens = pool.totalSupply();\n        require(\n            thePoolPrice != uint256(0) && totalTokens != uint256(0),\n            \"POOL_PRICE_OR_TOTAL_SUPPLY_NULL_ERROR\"\n        );\n        aum = safeMul(thePoolPrice, totalTokens) / 1000000; // pool.BASE();\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/Pool/Pool.sol": {
			"content": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/// @title Pool Interface Contract - Interface of pool standard functions.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n/// @notice used in order to access public variable\ncontract Pool {\n\n    address public owner;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function balanceOf(address _who) external view returns (uint256);\n    function totalSupply() external view returns (uint256 totaSupply);\n    function getEventful() external view returns (address);\n    function getData() external view returns (string memory name, string memory symbol, uint256 sellPrice, uint256 buyPrice);\n    function calcSharePrice() external view returns (uint256);\n    function getAdminData() external view returns (address, address feeCollector, address dragodAO, uint256 ratio, uint256 transactionFee, uint32 minPeriod);\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/utils/ReentrancyGuard/ReentrancyGuard.sol": {
			"content": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ncontract ReentrancyGuard {\n\n    // Locked state of mutex\n    bool private locked = false;\n\n    /// @dev Functions with this modifer cannot be reentered. The mutex will be locked\n    ///      before function execution and unlocked after.\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(\n            !locked,\n            \"REENTRANCY_ILLEGAL\"\n        );\n\n        // Lock mutex before function call\n        locked = true;\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        locked = false;\n    }\n}\n"
		},
		"/home/gabriele/rigoblock-monorepo/packages/contracts/src/rigoToken/ProofOfPerformance/ProofOfPerformanceFace.sol": {
			"content": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/// @title Proof of Performance Interface - Allows interaction with the PoP contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface ProofOfPerformanceFace {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows anyone to allocate the pop reward to pool wizards.\n    /// @param poolId Number of pool id in registry.\n    function claimPop(uint256 poolId) external;\n\n    /// @dev Allows RigoBlock Dao to update the pools registry.\n    /// @param _dragoRegistry Address of new registry.\n    function setRegistry(address _dragoRegistry) external;\n\n    /// @dev Allows RigoBlock Dao to update its address.\n    /// @param _rigoblockDao Address of new dao.\n    function setRigoblockDao(address _rigoblockDao) external;\n\n    /// @dev Allows RigoBlock Dao to set the ratio between assets and performance reward for a group.\n    /// @param _ofGroup Id of the pool.\n    /// @param _ratio Id of the pool.\n    /// @notice onlyRigoblockDao can set ratio.\n    function setRatio(address _ofGroup, uint256 _ratio) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Gets data of a pool.\n    /// @param poolId Id of the pool.\n    /// @return active Bool the pool is active.\n    /// @return thePoolAddress address of the pool.\n    /// @return thePoolGroup address of the pool factory.\n    /// @return thePoolPrice price of the pool in wei.\n    /// @return thePoolSupply total supply of the pool in units.\n    /// @return poolValue total value of the pool in wei.\n    /// @return epochReward value of the reward factor or said pool.\n    /// @return ratio of assets/performance reward (from 0 to 10000).\n    /// @return pop value of the pop reward to be claimed in GRGs.\n    function getPoolData(uint256 poolId)\n        external\n        view\n        returns (\n            bool active,\n            address thePoolAddress,\n            address thePoolGroup,\n            uint256 thePoolPrice,\n            uint256 thePoolSupply,\n            uint256 poolValue,\n            uint256 epochReward,\n            uint256 ratio,\n            uint256 pop\n        );\n\n    /// @dev Returns the highwatermark of a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the all-time-high pool nav.\n    function getHwm(uint256 poolId) external view returns (uint256);\n\n    /// @dev Returns the reward factor for a pool.\n    /// @param poolId Id of the pool.\n    /// @return Value of the reward factor.\n    function getEpochReward(uint256 poolId)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the split ratio of asset and performance reward.\n    /// @param poolId Id of the pool.\n    /// @return Value of the ratio from 1 to 100.\n    function getRatio(uint256 poolId)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the proof of performance reward for a pool.\n    /// @param poolId Id of the pool.\n    /// @return popReward Value of the pop reward in Rigo tokens.\n    /// @return performanceReward Split of the performance reward in Rigo tokens.\n    /// @notice epoch reward should be big enough that it.\n    /// @notice can be decreased if number of funds increases.\n    /// @notice should be at least 10^6 (just as pool base) to start with.\n    /// @notice rigo token has 10^18 decimals.\n    function proofOfPerformance(uint256 poolId)\n        external\n        view\n        returns (uint256 popReward, uint256 performanceReward);\n\n    /// @dev Checks whether a pool is registered and active.\n    /// @param poolId Id of the pool.\n    /// @return Bool the pool is active.\n    function isActive(uint256 poolId)\n        external\n        view\n        returns (bool);\n\n    /// @dev Returns the address and the group of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return pool Address of the target pool.\n    /// @return group Address of the pool's group.\n    function addressFromId(uint256 poolId)\n        external\n        view\n        returns (\n            address pool,\n            address group\n        );\n\n    /// @dev Returns the price a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return thePoolPrice Price of the pool in wei.\n    /// @return totalTokens Number of tokens of a pool (totalSupply).\n    function getPoolPrice(uint256 poolId)\n        external\n        view\n        returns (\n            uint256 thePoolPrice,\n            uint256 totalTokens\n        );\n\n    /// @dev Returns the value of a pool from its id.\n    /// @param poolId Id of the pool.\n    /// @return aum Total value of the pool in ETH.\n    function calcPoolValue(uint256 poolId)\n        external\n        view\n        returns (\n            uint256 aum\n        );\n}\n"
		}
	},
	"settings": {
		"remappings": [],
		"optimizer": {
			"enabled": true,
			"runs": 1000000
		},
		"outputSelection": {
			"*": {
				"*": [
					"abi",
					"devdoc",
					"evm.bytecode.object",
					"evm.bytecode.sourceMap",
					"evm.deployedBytecode.object",
					"evm.deployedBytecode.sourceMap"
				]
			}
		},
		"version": "0.5.4+commit.9549d8ff"
	}
}