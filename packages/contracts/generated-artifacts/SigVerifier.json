{
	"schemaVersion": "2.0.0",
	"contractName": "SigVerifier",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "hash",
						"type": "bytes32"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "isValidSignature",
				"outputs": [
					{
						"name": "isValid",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "hash",
						"type": "bytes32"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "returnRecoveredEIP712",
				"outputs": [
					{
						"name": "recovered",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "GRGTokenAddress",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "hash",
						"type": "bytes32"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "returnRecoveredETHSIGN",
				"outputs": [
					{
						"name": "recovered",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_GRGTokenAddress",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"devdoc": {
			"author": "Gabriele Rigo - <gab@rigoblock.com>",
			"methods": {
				"isValidSignature(bytes32,bytes)": {
					"details": "Verifies that a signature is valid.",
					"params": {
						"hash": "Message hash that is signed.",
						"signature": "Proof of signing."
					},
					"return": "Validity of order signature."
				}
			},
			"title": "SigVerifier - Allows verify whether a transaction has been signed correctly."
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50604051602080610ff08339810180604052602081101561003057600080fd5b505160008054600160a060020a03909216600160a060020a0319909216919091179055610f8e806100626000396000f3fe6080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631626ba7e8114610066578063a1c29ff5146100fe578063fdde841f146101ab578063ff772b95146101c0575b600080fd5b34801561007257600080fd5b506100ea6004803603604081101561008957600080fd5b813591908101906040810160208201356401000000008111156100ab57600080fd5b8201836020820111156100bd57600080fd5b803590602001918460018302840111640100000000831117156100df57600080fd5b509092509050610244565b604080519115158252519081900360200190f35b34801561010a57600080fd5b506101826004803603604081101561012157600080fd5b8135919081019060408101602082013564010000000081111561014357600080fd5b82018360208201111561015557600080fd5b8035906020019184600183028401116401000000008311171561017757600080fd5b509092509050610c05565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101b757600080fd5b50610182610c4f565b3480156101cc57600080fd5b50610182600480360360408110156101e357600080fd5b8135919081019060408101602082013564010000000081111561020557600080fd5b82018360208201111561021757600080fd5b8035906020019184600183028401116401000000008311171561023957600080fd5b509092509050610c6b565b6000806102878585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cad92505050565b905060006102cb8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610da792505050565b905073ffffffffffffffffffffffffffffffffffffffff821615610738573373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561034b57600080fd5b505afa15801561035f573d6000803e3d6000fd5b505050506040513d602081101561037557600080fd5b505173ffffffffffffffffffffffffffffffffffffffff83811691161492508261040057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4549503731325f5349474e45525f494e56414c49440000000000000000000000604482015290519081900360640190fd5b600054604080517f8da5cb5b000000000000000000000000000000000000000000000000000000008152905168056bc75e2d631000009273ffffffffffffffffffffffffffffffffffffffff16916370a08231913391638da5cb5b916004808301926020929190829003018186803b15801561047b57600080fd5b505afa15801561048f573d6000803e3d6000fd5b505050506040513d60208110156104a557600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815273ffffffffffffffffffffffffffffffffffffffff9092166004830152516024808301926020929190829003018186803b15801561051057600080fd5b505afa158015610524573d6000803e3d6000fd5b505050506040513d602081101561053a57600080fd5b50511061054a5760019250610733565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1663c112c7136040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156105c457600080fd5b505afa1580156105d8573d6000803e3d6000fd5b505050506040513d60208110156105ee57600080fd5b5051604080517f485ff697000000000000000000000000000000000000000000000000000000008152326004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163485ff69791602480820192602092909190829003018186803b15801561065e57600080fd5b505afa158015610672573d6000803e3d6000fd5b505050506040513d602081101561068857600080fd5b505173ffffffffffffffffffffffffffffffffffffffff16141561073357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f56414c49445f4549503731325f4255545f4f524947494e5f4e4f545f5748495460448201527f454c495354454400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610b9e565b73ffffffffffffffffffffffffffffffffffffffff811615610b9e573373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156107b657600080fd5b505afa1580156107ca573d6000803e3d6000fd5b505050506040513d60208110156107e057600080fd5b505173ffffffffffffffffffffffffffffffffffffffff82811691161492508261086b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4549503731325f5349474e45525f494e56414c49440000000000000000000000604482015290519081900360640190fd5b600054604080517f8da5cb5b000000000000000000000000000000000000000000000000000000008152905168056bc75e2d631000009273ffffffffffffffffffffffffffffffffffffffff16916370a08231913391638da5cb5b916004808301926020929190829003018186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d602081101561091057600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815273ffffffffffffffffffffffffffffffffffffffff9092166004830152516024808301926020929190829003018186803b15801561097b57600080fd5b505afa15801561098f573d6000803e3d6000fd5b505050506040513d60208110156109a557600080fd5b5051106109b55760019250610b9e565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1663c112c7136040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d6020811015610a5957600080fd5b5051604080517f485ff697000000000000000000000000000000000000000000000000000000008152326004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163485ff69791602480820192602092909190829003018186803b158015610ac957600080fd5b505afa158015610add573d6000803e3d6000fd5b505050506040513d6020811015610af357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161415610b9e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f56414c49445f4554485349474e5f4255545f4f524947494e5f4e4f545f57484960448201527f54454c4953544544000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5349474e41545552455f494e56414c4944320000000000000000000000000000604482015290519081900360640190fd5b6000610c478484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cad92505050565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c478484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610da792505050565b600080600080846000815181101515610cc257fe5b01602001517f0100000000000000000000000000000000000000000000000000000000000000908190048102049250610d0285600163ffffffff610ebc16565b9150610d1585602163ffffffff610ebc16565b905060018684848460405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610d74573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b600080600080846000815181101515610dbc57fe5b01602001517f0100000000000000000000000000000000000000000000000000000000000000908190048102049250610dfc85600163ffffffff610ebc16565b9150610e0f85602163ffffffff610ebc16565b905060018660405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c018281526020019150506040516020818303038152906040528051906020012084848460405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610d74573d6000803e3d6000fd5b600081602001835110151515610f5957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560448201527f5155495245440000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5001602001519056fea165627a7a72305820dcf3c959e217a18a52ee8425c5cc0fefe288caaec726334934224b8c303426d40029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 PUSH2 0xFF0 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xF8E DUP1 PUSH2 0x62 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x61 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x1626BA7E DUP2 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0xA1C29FF5 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xFDDE841F EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0xFF772B95 EQ PUSH2 0x1C0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x244 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x121 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xC05 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH2 0xC4F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xC6B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x287 DUP6 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xCAD SWAP3 POP POP POP JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2CB DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xDA7 SWAP3 POP POP POP JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x738 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x375 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 AND EQ SWAP3 POP DUP3 PUSH2 0x400 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4549503731325F5349474E45525F494E56414C49440000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8DA5CB5B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH9 0x56BC75E2D63100000 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0x70A08231 SWAP2 CALLER SWAP2 PUSH4 0x8DA5CB5B SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x48F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x524 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT PUSH2 0x54A JUMPI PUSH1 0x1 SWAP3 POP PUSH2 0x733 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC112C713 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x485FF69700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ORIGIN PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x485FF697 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x672 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x688 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x733 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x56414C49445F4549503731325F4255545F4F524947494E5F4E4F545F57484954 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x454C495354454400000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH2 0xB9E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xB9E JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ SWAP3 POP DUP3 PUSH2 0x86B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4549503731325F5349474E45525F494E56414C49440000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8DA5CB5B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH9 0x56BC75E2D63100000 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0x70A08231 SWAP2 CALLER SWAP2 PUSH4 0x8DA5CB5B SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x910 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x97B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x98F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT PUSH2 0x9B5 JUMPI PUSH1 0x1 SWAP3 POP PUSH2 0xB9E JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC112C713 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA43 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x485FF69700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ORIGIN PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x485FF697 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xADD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB9E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x56414C49445F4554485349474E5F4255545F4F524947494E5F4E4F545F574849 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x54454C4953544544000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5349474E41545552455F494E56414C4944320000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC47 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xCAD SWAP3 POP POP POP JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC47 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xDA7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCC2 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP3 POP PUSH2 0xD02 DUP6 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0xEBC AND JUMP JUMPDEST SWAP2 POP PUSH2 0xD15 DUP6 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0xEBC AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP7 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD74 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xDBC JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP3 POP PUSH2 0xDFC DUP6 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0xEBC AND JUMP JUMPDEST SWAP2 POP PUSH2 0xE0F DUP6 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0xEBC AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP PUSH1 0x1C ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD74 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0xF59 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xdc RETURN 0xc9 MSIZE 0xe2 OR LOG1 DUP11 MSTORE 0xee DUP5 0x25 0xc5 0xcc 0xf 0xef 0xe2 DUP9 0xca 0xae 0xc7 0x26 CALLER 0x49 CALLVALUE 0x22 0x4b DUP13 ADDRESS CALLVALUE 0x26 0xd4 STOP 0x29 ",
				"sourceMap": "1096:4091:6:-;;;1192:117;8:9:-1;5:2;;;30:1;27;20:12;5:2;1192:117:6;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1192:117:6;1268:15;:34;;-1:-1:-1;;;;;1268:34:6;;;-1:-1:-1;;;;;;1268:34:6;;;;;;;;;1096:4091;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631626ba7e8114610066578063a1c29ff5146100fe578063fdde841f146101ab578063ff772b95146101c0575b600080fd5b34801561007257600080fd5b506100ea6004803603604081101561008957600080fd5b813591908101906040810160208201356401000000008111156100ab57600080fd5b8201836020820111156100bd57600080fd5b803590602001918460018302840111640100000000831117156100df57600080fd5b509092509050610244565b604080519115158252519081900360200190f35b34801561010a57600080fd5b506101826004803603604081101561012157600080fd5b8135919081019060408101602082013564010000000081111561014357600080fd5b82018360208201111561015557600080fd5b8035906020019184600183028401116401000000008311171561017757600080fd5b509092509050610c05565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101b757600080fd5b50610182610c4f565b3480156101cc57600080fd5b50610182600480360360408110156101e357600080fd5b8135919081019060408101602082013564010000000081111561020557600080fd5b82018360208201111561021757600080fd5b8035906020019184600183028401116401000000008311171561023957600080fd5b509092509050610c6b565b6000806102878585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cad92505050565b905060006102cb8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610da792505050565b905073ffffffffffffffffffffffffffffffffffffffff821615610738573373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561034b57600080fd5b505afa15801561035f573d6000803e3d6000fd5b505050506040513d602081101561037557600080fd5b505173ffffffffffffffffffffffffffffffffffffffff83811691161492508261040057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4549503731325f5349474e45525f494e56414c49440000000000000000000000604482015290519081900360640190fd5b600054604080517f8da5cb5b000000000000000000000000000000000000000000000000000000008152905168056bc75e2d631000009273ffffffffffffffffffffffffffffffffffffffff16916370a08231913391638da5cb5b916004808301926020929190829003018186803b15801561047b57600080fd5b505afa15801561048f573d6000803e3d6000fd5b505050506040513d60208110156104a557600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815273ffffffffffffffffffffffffffffffffffffffff9092166004830152516024808301926020929190829003018186803b15801561051057600080fd5b505afa158015610524573d6000803e3d6000fd5b505050506040513d602081101561053a57600080fd5b50511061054a5760019250610733565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1663c112c7136040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156105c457600080fd5b505afa1580156105d8573d6000803e3d6000fd5b505050506040513d60208110156105ee57600080fd5b5051604080517f485ff697000000000000000000000000000000000000000000000000000000008152326004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163485ff69791602480820192602092909190829003018186803b15801561065e57600080fd5b505afa158015610672573d6000803e3d6000fd5b505050506040513d602081101561068857600080fd5b505173ffffffffffffffffffffffffffffffffffffffff16141561073357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f56414c49445f4549503731325f4255545f4f524947494e5f4e4f545f5748495460448201527f454c495354454400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610b9e565b73ffffffffffffffffffffffffffffffffffffffff811615610b9e573373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156107b657600080fd5b505afa1580156107ca573d6000803e3d6000fd5b505050506040513d60208110156107e057600080fd5b505173ffffffffffffffffffffffffffffffffffffffff82811691161492508261086b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4549503731325f5349474e45525f494e56414c49440000000000000000000000604482015290519081900360640190fd5b600054604080517f8da5cb5b000000000000000000000000000000000000000000000000000000008152905168056bc75e2d631000009273ffffffffffffffffffffffffffffffffffffffff16916370a08231913391638da5cb5b916004808301926020929190829003018186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d602081101561091057600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815273ffffffffffffffffffffffffffffffffffffffff9092166004830152516024808301926020929190829003018186803b15801561097b57600080fd5b505afa15801561098f573d6000803e3d6000fd5b505050506040513d60208110156109a557600080fd5b5051106109b55760019250610b9e565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1663c112c7136040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d6020811015610a5957600080fd5b5051604080517f485ff697000000000000000000000000000000000000000000000000000000008152326004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163485ff69791602480820192602092909190829003018186803b158015610ac957600080fd5b505afa158015610add573d6000803e3d6000fd5b505050506040513d6020811015610af357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161415610b9e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f56414c49445f4554485349474e5f4255545f4f524947494e5f4e4f545f57484960448201527f54454c4953544544000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5349474e41545552455f494e56414c4944320000000000000000000000000000604482015290519081900360640190fd5b6000610c478484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cad92505050565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c478484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610da792505050565b600080600080846000815181101515610cc257fe5b01602001517f0100000000000000000000000000000000000000000000000000000000000000908190048102049250610d0285600163ffffffff610ebc16565b9150610d1585602163ffffffff610ebc16565b905060018684848460405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610d74573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151979650505050505050565b600080600080846000815181101515610dbc57fe5b01602001517f0100000000000000000000000000000000000000000000000000000000000000908190048102049250610dfc85600163ffffffff610ebc16565b9150610e0f85602163ffffffff610ebc16565b905060018660405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c018281526020019150506040516020818303038152906040528051906020012084848460405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610d74573d6000803e3d6000fd5b600081602001835110151515610f5957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560448201527f5155495245440000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5001602001519056fea165627a7a72305820dcf3c959e217a18a52ee8425c5cc0fefe288caaec726334934224b8c303426d40029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x61 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x1626BA7E DUP2 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0xA1C29FF5 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xFDDE841F EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0xFF772B95 EQ PUSH2 0x1C0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x244 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x121 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xC05 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH2 0xC4F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xC6B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x287 DUP6 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xCAD SWAP3 POP POP POP JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2CB DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xDA7 SWAP3 POP POP POP JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x738 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x375 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 AND EQ SWAP3 POP DUP3 PUSH2 0x400 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4549503731325F5349474E45525F494E56414C49440000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8DA5CB5B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH9 0x56BC75E2D63100000 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0x70A08231 SWAP2 CALLER SWAP2 PUSH4 0x8DA5CB5B SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x48F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x524 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT PUSH2 0x54A JUMPI PUSH1 0x1 SWAP3 POP PUSH2 0x733 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC112C713 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x485FF69700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ORIGIN PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x485FF697 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x672 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x688 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x733 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x56414C49445F4549503731325F4255545F4F524947494E5F4E4F545F57484954 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x454C495354454400000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH2 0xB9E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xB9E JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ SWAP3 POP DUP3 PUSH2 0x86B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4549503731325F5349474E45525F494E56414C49440000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8DA5CB5B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH9 0x56BC75E2D63100000 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0x70A08231 SWAP2 CALLER SWAP2 PUSH4 0x8DA5CB5B SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x910 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE MLOAD PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x97B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x98F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT PUSH2 0x9B5 JUMPI PUSH1 0x1 SWAP3 POP PUSH2 0xB9E JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC112C713 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA43 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x485FF69700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ORIGIN PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x485FF697 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xADD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB9E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x56414C49445F4554485349474E5F4255545F4F524947494E5F4E4F545F574849 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x54454C4953544544000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5349474E41545552455F494E56414C4944320000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC47 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xCAD SWAP3 POP POP POP JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC47 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xDA7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xCC2 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP3 POP PUSH2 0xD02 DUP6 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0xEBC AND JUMP JUMPDEST SWAP2 POP PUSH2 0xD15 DUP6 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0xEBC AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP7 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD74 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0xDBC JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP3 POP PUSH2 0xDFC DUP6 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0xEBC AND JUMP JUMPDEST SWAP2 POP PUSH2 0xE0F DUP6 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0xEBC AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP PUSH1 0x1C ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD74 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0xF59 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xdc RETURN 0xc9 MSIZE 0xe2 OR LOG1 DUP11 MSTORE 0xee DUP5 0x25 0xc5 0xcc 0xf 0xef 0xe2 DUP9 0xca 0xae 0xc7 0x26 CALLER 0x49 CALLVALUE 0x22 0x4b DUP13 ADDRESS CALLVALUE 0x26 0xd4 STOP 0x29 ",
				"sourceMap": "1096:4091:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1551:2025;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1551:2025:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1551:2025:6;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;1551:2025:6;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1551:2025:6;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;1551:2025:6;;-1:-1:-1;1551:2025:6;-1:-1:-1;1551:2025:6;;;;;;;;;;;;;;;;;;;;3582:228;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3582:228:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3582:228:6;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;3582:228:6;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3582:228:6;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;3582:228:6;;-1:-1:-1;3582:228:6;-1:-1:-1;3582:228:6;;;;;;;;;;;;;;;;;;;;;1155:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1155:30:6;;;;3816:230;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3816:230:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3816:230:6;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;3816:230:6;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3816:230:6;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;3816:230:6;;-1:-1:-1;3816:230:6;-1:-1:-1;3816:230:6;;1551:2025;1746:12;1774:23;1800:46;1830:4;1836:9;;1800:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;1800:29:6;;-1:-1:-1;;;1800:46:6:i;:::-;1774:72;;1856:24;1883:47;1914:4;1920:9;;1883:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;1883:30:6;;-1:-1:-1;;;1883:47:6:i;:::-;1856:74;-1:-1:-1;1945:29:6;;;;1941:1590;;2058:10;2044:32;;;:34;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2044:34:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2044:34:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2044:34:6;2025:53;;;;;;;;-1:-1:-1;2025:53:6;1990:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2257:15;;2284:34;;;;;;;;2323:14;;2257:15;;;2247:36;;2298:10;;2284:32;;:34;;;;;;;;;;;;;;2298:10;2284:34;;;5:2:-1;;;;30:1;27;20:12;5:2;2284:34:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2284:34:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2284:34:6;2247:72;;;;;;;;;;;;;;;;;;;;;;;;2284:34;;2247:72;;;;;;;;;;;5:2:-1;;;;30:1;27;20:12;5:2;2247:72:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2247:72:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2247:72:6;:90;2243:478;;2367:4;2357:14;;2243:478;;;2623:1;2440:185;;2498:10;2484:43;;;:45;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2484:45:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2484:45:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2484:45:6;2440:171;;;;;;2600:9;2440:171;;;;;;:151;;;;;;;:171;;;;;2484:45;;2440:171;;;;;;;;:151;:171;;;5:2:-1;;;;30:1;27;20:12;5:2;2440:171:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2440:171:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2440:171:6;:185;;;;2411:295;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1941:1590;;;2742:30;;;;2738:793;;2857:10;2843:32;;;:34;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2843:34:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2843:34:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2843:34:6;2823:54;;;;;;;;-1:-1:-1;2823:54:6;2788:144;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3056:15;;3083:34;;;;;;;;3122:14;;3056:15;;;3046:36;;3097:10;;3083:32;;:34;;;;;;;;;;;;;;3097:10;3083:34;;;5:2:-1;;;;30:1;27;20:12;5:2;3083:34:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3083:34:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3083:34:6;3046:72;;;;;;;;;;;;;;;;;;;;;;;;3083:34;;3046:72;;;;;;;;;;;5:2:-1;;;;30:1;27;20:12;5:2;3046:72:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3046:72:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3046:72:6;:90;3042:479;;3166:4;3156:14;;3042:479;;;3422:1;3239:185;;3297:10;3283:43;;;:45;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3283:45:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3283:45:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3283:45:6;3239:171;;;;;;3399:9;3239:171;;;;;;:151;;;;;;;:171;;;;;3283:45;;3239:171;;;;;;;;:151;:171;;;5:2:-1;;;;30:1;27;20:12;5:2;3239:171:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3239:171:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3239:171:6;:185;;;;3210:296;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3541:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3582:228;3717:17;3757:46;3787:4;3793:9;;3757:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3757:29:6;;-1:-1:-1;;;3757:46:6:i;:::-;3750:53;3582:228;-1:-1:-1;;;;3582:228:6:o;1155:30::-;;;;;;:::o;3816:230::-;3952:17;3992:47;4023:4;4029:9;;3992:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3992:30:6;;-1:-1:-1;;;3992:47:6:i;4079:488::-;4220:17;4253:7;4270:9;4289;4319;4329:1;4319:12;;;;;;;;;;;;;;;;;;;;;4313:19;;-1:-1:-1;4346:24:6;:9;4368:1;4346:24;:21;:24;:::i;:::-;4342:28;-1:-1:-1;4384:25:6;:9;4406:2;4384:25;:21;:25;:::i;:::-;4380:29;;4432:102;4459:4;4481:1;4500;4519;4432:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;4432:102:6;;;;;;4079:488;-1:-1:-1;;;;;;;4079:488:6:o;4573:612::-;4715:17;4748:7;4765:9;4784;4814;4824:1;4814:12;;;;;;;;;;;;;;;;;;;;;4808:19;;-1:-1:-1;4841:24:6;:9;4863:1;4841:24;:21;:24;:::i;:::-;4837:28;-1:-1:-1;4879:25:6;:9;4901:2;4879:25;:21;:25;:::i;:::-;4875:29;;4927:225;5058:4;4964:116;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4964:116:6;;;4954:127;;;;;;5099:1;5118;5137;4927:225;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;13218:490:12;13339:14;13402:5;13410:2;13402:10;13390:1;:8;:22;;13369:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13655:13:12;13557:2;13655:13;13649:20;;13218:490::o"
			}
		}
	},
	"sourceTreeHashHex": "0xae8fadf908d3ead5e4c3b026f6e826e0ee8333259ec05afcd24933562ea89ddf",
	"sources": {
		"./SigVerifier.sol": {
			"id": 6
		},
		"../../../utils/LibBytes/LibBytes.sol": {
			"id": 12
		},
		"../../../tokens/ERC20/ERC20.sol": {
			"id": 9
		},
		"../../../tokens/ERC20/ERC20Face.sol": {
			"id": 10
		},
		"../../Drago/Drago.sol": {
			"id": 0
		},
		"../../authorities/Authority/AuthorityFace.sol": {
			"id": 3
		},
		"../../authorities/ExchangesAuthority/ExchangesAuthorityFace.sol": {
			"id": 4
		},
		"./SigVerifierFace.sol": {
			"id": 7
		},
		"../NavVerifier/NavVerifierFace.sol": {
			"id": 5
		},
		"../../Kyc/KycFace.sol": {
			"id": 2
		},
		"../../DragoEventful/DragoEventfulFace.sol": {
			"id": 1
		},
		"../../../utils/ReentrancyGuard/ReentrancyGuard.sol": {
			"id": 15
		},
		"../../../utils/Owned/OwnedUninitialized.sol": {
			"id": 14
		},
		"../../../utils/SafeMath/SafeMathLight.sol": {
			"id": 17
		},
		"../../../utils/LibFindMethod/LibFindMethod.sol": {
			"id": 13
		}
	},
	"sourceCodes": {
		"./SigVerifier.sol": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport { LibBytes } from \"../../../utils/LibBytes/LibBytes.sol\";\nimport { ERC20Face as RigoToken } from \"../../../tokens/ERC20/ERC20.sol\";\nimport { Drago } from \"../../Drago/Drago.sol\";\nimport { ExchangesAuthorityFace as ExchangesAuthority } from \"../../authorities/ExchangesAuthority/ExchangesAuthorityFace.sol\";\n\n/// @title SigVerifier - Allows verify whether a transaction has been signed correctly.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract SigVerifier {\n\n    using LibBytes for bytes;\n\n    address public GRGTokenAddress;\n\n    constructor(\n        address _GRGTokenAddress)\n        public\n    {\n        GRGTokenAddress = _GRGTokenAddress;\n    }\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    /// @notice mock function whici returns false\n    function isValidSignature(\n        /* solhint-disable */\n        bytes32 hash,\n        bytes calldata signature\n        /* solhint-disable */\n    )\n        external\n        view\n        returns (bool isValid)\n    {\n        address recoveredEIP712 = returnRecoveredEIP712Internal(hash, signature);\n        address recoveredETHSIGN = returnRecoveredETHSIGNInternal(hash, signature);\n\n        if (recoveredEIP712 != address(0)) {\n            require(\n                isValid = recoveredEIP712 == Drago(address(msg.sender)).owner(),\n                \"EIP712_SIGNER_INVALID\"\n            );\n\n            // if operator holds at least 100 GRG, valid, otherwise require whitelisted signer\n            if (RigoToken(GRGTokenAddress).balanceOf(Drago(address(msg.sender)).owner()) >= 100 * 10 ** 18) {\n                isValid = true;\n\n            } else {\n                require(\n                    ExchangesAuthority(\n                        Drago(address(msg.sender)).getExchangesAuth()\n                    )\n                    .getExchangeAdapter(address(tx.origin)) != address(0),\n                    \"VALID_EIP712_BUT_ORIGIN_NOT_WHITELISTED\"\n                );\n            }\n\n        } else if (recoveredETHSIGN != address(0)) {\n            require(\n                isValid = recoveredETHSIGN == Drago(address(msg.sender)).owner(),\n                \"EIP712_SIGNER_INVALID\"\n            );\n\n            // if operator holds at least 100 GRG, valid, otherwise require whitelisted signer\n            if (RigoToken(GRGTokenAddress).balanceOf(Drago(address(msg.sender)).owner()) >= 100 * 10 ** 18) {\n                isValid = true;\n\n            } else {\n                require(\n                    ExchangesAuthority(\n                        Drago(address(msg.sender)).getExchangesAuth()\n                    )\n                    .getExchangeAdapter(address(tx.origin)) != address(0),\n                    \"VALID_ETHSIGN_BUT_ORIGIN_NOT_WHITELISTED\"\n                );\n            }\n        }\n\n        revert(\"SIGNATURE_INVALID2\");\n    }\n\n    function returnRecoveredEIP712(\n        bytes32 hash,\n        bytes calldata signature)\n        external\n        pure\n        returns (address recovered)\n    {\n        return returnRecoveredEIP712Internal(hash, signature);\n    }\n\n    function returnRecoveredETHSIGN(\n        bytes32 hash,\n        bytes calldata signature)\n        external\n        pure\n        returns (address recovered)\n    {\n        return returnRecoveredETHSIGNInternal(hash, signature);\n    }\n\n    // INTERNAL FUNCTIONS\n\n    function returnRecoveredEIP712Internal(\n        bytes32 hash,\n        bytes memory signature)\n        internal\n        pure\n        returns (address recovered)\n    {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n\n        v = uint8(signature[0]);\n        r = signature.readBytes32(1);\n        s = signature.readBytes32(33);\n\n        recovered = ecrecover(\n                hash,\n                v,\n                r,\n                s\n            );\n        return recovered;\n    }\n\n    function returnRecoveredETHSIGNInternal(\n        bytes32 hash,\n        bytes memory signature)\n        internal\n        pure\n        returns (address recovered)\n    {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n\n        v = uint8(signature[0]);\n        r = signature.readBytes32(1);\n        s = signature.readBytes32(33);\n\n        recovered = ecrecover(\n                keccak256(abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    hash\n                )),\n                v,\n                r,\n                s\n            );\n        return recovered;\n    }\n}\n",
		"../../../utils/LibBytes/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.4.25;\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to <= b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to <= b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n",
		"../../../tokens/ERC20/ERC20.sol": "pragma solidity >=0.5.0 <0.6.0;\n\nimport { ERC20Face } from \"./ERC20Face.sol\";\n\ncontract ERC20 is ERC20Face {\n\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool success)\n    {\n        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        external\n        returns (bool success)\n    {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool success)\n    {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256)\n    {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    uint256 public totalSupply;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n",
		"../../../tokens/ERC20/ERC20Face.sol": "pragma solidity >=0.5.0;\n\ninterface ERC20Face {\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function balanceOf(address _who) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n}\n",
		"../../Drago/Drago.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\npragma experimental ABIEncoderV2;\n\nimport { AuthorityFace as Authority } from \"../authorities/Authority/AuthorityFace.sol\";\nimport { ExchangesAuthorityFace as ExchangesAuthority } from \"../authorities/ExchangesAuthority/ExchangesAuthorityFace.sol\";\nimport { SigVerifierFace as SigVerifier } from \"../extensions/SigVerifier/SigVerifierFace.sol\";\nimport { NavVerifierFace as NavVerifier } from \"../extensions/NavVerifier/NavVerifierFace.sol\";\nimport { KycFace as Kyc } from \"../Kyc/KycFace.sol\";\nimport { DragoEventfulFace as DragoEventful } from \"../DragoEventful/DragoEventfulFace.sol\";\nimport { ERC20Face as Token } from \"../../tokens/ERC20/ERC20Face.sol\";\nimport { ReentrancyGuard } from \"../../utils/ReentrancyGuard//ReentrancyGuard.sol\";\nimport { OwnedUninitialized as Owned } from \"../../utils/Owned/OwnedUninitialized.sol\";\nimport { SafeMathLight as SafeMath } from \"../../utils/SafeMath/SafeMathLight.sol\";\nimport { LibFindMethod } from \"../../utils/LibFindMethod/LibFindMethod.sol\";\n\n/// @title Drago - A set of rules for a drago.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract Drago is Owned, SafeMath, ReentrancyGuard {\n\n    using LibFindMethod for *;\n\n    string constant VERSION = 'HF 0.5.2';\n    uint256 constant BASE = 1000000; // tokens are divisible by 1 million\n\n    mapping (address => Account) accounts;\n\n    DragoData data;\n    Admin admin;\n\n    struct Receipt {\n        uint256 units;\n        uint32 activation;\n    }\n\n    struct Account {\n        uint256 balance;\n        Receipt receipt;\n        mapping(address => address[]) approvedAccount;\n    }\n\n    struct Transaction {\n        bytes assembledData;\n    }\n\n    struct DragoData {\n        string name;\n        string symbol;\n        uint256 dragoId;\n        uint256 totalSupply;\n        uint256 sellPrice;\n        uint256 buyPrice;\n        uint256 transactionFee; // in basis points 1 = 0.01%\n        uint32 minPeriod;\n    }\n\n    struct Admin {\n        address authority;\n        address dragoDao;\n        address feeCollector;\n        address kycProvider;\n        bool kycEnforced;\n        uint256 minOrder; // minimum stake to avoid dust clogging things up\n        uint256 ratio; // ratio is 80%\n    }\n\n    modifier onlyDragoDao() {\n        require(msg.sender == admin.dragoDao);\n        _;\n    }\n\n    modifier onlyOwnerOrAuthority() {\n        Authority auth = Authority(admin.authority);\n        require(auth.isAuthority(msg.sender) || msg.sender == owner);\n        _;\n    }\n\n    modifier whenApprovedExchangeOrWrapper(address _target) {\n        bool approvedExchange = ExchangesAuthority(getExchangesAuthority())\n            .isWhitelistedExchange(_target);\n        bool approvedWrapper = ExchangesAuthority(getExchangesAuthority())\n            .isWhitelistedWrapper(_target);\n        require(approvedWrapper || approvedExchange);\n        _;\n    }\n\n    modifier whenApprovedProxy(address _proxy) {\n        bool approved = ExchangesAuthority(getExchangesAuthority())\n            .isWhitelistedProxy(_proxy);\n        require(approved);\n        _;\n    }\n\n    modifier minimumStake(uint256 amount) {\n        require (amount >= admin.minOrder);\n        _;\n    }\n\n    modifier hasEnough(uint256 _amount) {\n        require(accounts[msg.sender].balance >= _amount);\n        _;\n    }\n\n    modifier positiveAmount(uint256 _amount) {\n        require(accounts[msg.sender].balance + _amount > accounts[msg.sender].balance);\n        _;\n    }\n\n    modifier minimumPeriodPast() {\n        require(block.timestamp >= accounts[msg.sender].receipt.activation);\n        _;\n    }\n\n    modifier buyPriceHigherOrEqual(uint256 _sellPrice, uint256 _buyPrice) {\n        require(_sellPrice <= _buyPrice);\n        _;\n    }\n\n    modifier notPriceError(uint256 _sellPrice, uint256 _buyPrice) {\n        if (_sellPrice <= data.sellPrice / 10 || _buyPrice >= data.buyPrice * 10) return;\n        _;\n    }\n\n    constructor(\n        string memory _dragoName,\n        string memory _dragoSymbol,\n        uint256 _dragoId,\n        address _owner,\n        address _authority)\n        public\n    {\n        data.name = _dragoName;\n        data.symbol = _dragoSymbol;\n        data.dragoId = _dragoId;\n        data.sellPrice = 1 ether;\n        data.buyPrice = 1 ether;\n        owner = _owner;\n        admin.authority = _authority;\n        admin.dragoDao = msg.sender;\n        admin.minOrder = 1 finney;\n        admin.feeCollector = _owner;\n        admin.ratio = 80;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows Ether to be received.\n    /// @notice Used for settlements and withdrawals.\n    function()\n        external\n        payable\n    {\n        require(msg.value != 0);\n    }\n\n    /// @dev Allows a user to buy into a drago.\n    /// @return Bool the function executed correctly.\n    function buyDrago()\n        external\n        payable\n        minimumStake(msg.value)\n        returns (bool success)\n    {\n        require(buyDragoInternal(msg.sender));\n        return true;\n    }\n\n    /// @dev Allows a user to buy into a drago on behalf of an address.\n    /// @param _hodler Address of the target user.\n    /// @return Bool the function executed correctly.\n    function buyDragoOnBehalf(address _hodler)\n        external\n        payable\n        minimumStake(msg.value)\n        returns (bool success)\n    {\n        require(buyDragoInternal(_hodler));\n        return true;\n    }\n\n    /// @dev Allows a user to sell from a drago.\n    /// @param _amount Number of shares to sell.\n    /// @return Bool the function executed correctly.\n    function sellDrago(uint256 _amount)\n        external\n        nonReentrant\n        hasEnough(_amount)\n        positiveAmount(_amount)\n        minimumPeriodPast\n        returns (bool success)\n    {\n        uint256 feeDrago;\n        uint256 feeDragoDao;\n        uint256 netAmount;\n        uint256 netRevenue;\n        (feeDrago, feeDragoDao, netAmount, netRevenue) = getSaleAmounts(_amount);\n        addSaleLog(_amount, netRevenue);\n        allocateSaleTokens(msg.sender, _amount, feeDrago, feeDragoDao);\n        data.totalSupply = safeSub(data.totalSupply, netAmount);\n        msg.sender.transfer(netRevenue);\n        return true;\n    }\n\n    /// @dev Allows drago owner or authority to set the price for a drago.\n    /// @param _newSellPrice Price in wei.\n    /// @param _newBuyPrice Price in wei.\n    /// @param _signaturevaliduntilBlock Number of blocks till expiry of new data.\n    /// @param _hash Bytes32 of the transaction hash.\n    /// @param _signedData Bytes of extradata and signature.\n    function setPrices(\n        uint256 _newSellPrice,\n        uint256 _newBuyPrice,\n        uint256 _signaturevaliduntilBlock,\n        bytes32 _hash,\n        bytes calldata _signedData)\n        external\n        nonReentrant\n        onlyOwnerOrAuthority\n        buyPriceHigherOrEqual(_newSellPrice, _newBuyPrice)\n        notPriceError(_newSellPrice, _newBuyPrice)\n    {\n        require(\n            isValidNav(\n                _newSellPrice,\n                _newBuyPrice,\n                _signaturevaliduntilBlock,\n                _hash,\n                _signedData\n            )\n        );\n        DragoEventful events = DragoEventful(getDragoEventful());\n        require(events.setDragoPrice(msg.sender, address(this), _newSellPrice, _newBuyPrice));\n        data.sellPrice = _newSellPrice;\n        data.buyPrice = _newBuyPrice;\n    }\n\n    /// @dev Allows drago dao/factory to change fee split ratio.\n    /// @param _ratio Number of ratio for wizard, from 0 to 100.\n    function changeRatio(uint256 _ratio)\n        external\n        onlyDragoDao\n    {\n        DragoEventful events = DragoEventful(getDragoEventful());\n        require(events.changeRatio(msg.sender, address(this), _ratio));\n        admin.ratio = _ratio;\n    }\n\n    /// @dev Allows drago owner to set the transaction fee.\n    /// @param _transactionFee Value of the transaction fee in basis points.\n    function setTransactionFee(uint256 _transactionFee)\n        external\n        onlyOwner\n    {\n        require(_transactionFee <= 100); //fee cannot be higher than 1%\n        DragoEventful events = DragoEventful(getDragoEventful());\n        require(events.setTransactionFee(msg.sender, address(this), _transactionFee));\n        data.transactionFee = _transactionFee;\n    }\n\n    /// @dev Allows owner to decide where to receive the fee.\n    /// @param _feeCollector Address of the fee receiver.\n    function changeFeeCollector(address _feeCollector)\n        external\n        onlyOwner\n    {\n        DragoEventful events = DragoEventful(getDragoEventful());\n        events.changeFeeCollector(msg.sender, address(this), _feeCollector);\n        admin.feeCollector = _feeCollector;\n    }\n\n    /// @dev Allows drago dao/factory to upgrade its address.\n    /// @param _dragoDao Address of the new drago dao.\n    function changeDragoDao(address _dragoDao)\n        external\n        onlyDragoDao\n    {\n        DragoEventful events = DragoEventful(getDragoEventful());\n        require(events.changeDragoDao(msg.sender, address(this), _dragoDao));\n        admin.dragoDao = _dragoDao;\n    }\n\n    /// @dev Allows drago dao/factory to change the minimum holding period.\n    /// @param _minPeriod Time in seconds.\n    function changeMinPeriod(uint32 _minPeriod)\n        external\n        onlyDragoDao\n    {\n        data.minPeriod = _minPeriod;\n    }\n\n    function enforceKyc(\n        bool _enforced,\n        address _kycProvider)\n        external\n        onlyOwner\n    {\n        admin.kycEnforced = _enforced;\n        admin.kycProvider = _kycProvider;\n    }\n\n    /// @dev Allows owner to set an allowance to an approved token transfer proxy.\n    /// @param _tokenTransferProxy Address of the proxy to be approved.\n    /// @param _token Address of the token to receive allowance for.\n    /// @param _amount Number of tokens approved for spending.\n    function setAllowance(\n        address _tokenTransferProxy,\n        address _token,\n        uint256 _amount)\n        external\n        onlyOwner\n        whenApprovedProxy(_tokenTransferProxy)\n    {\n        require(setAllowancesInternal(_tokenTransferProxy, _token, _amount));\n    }\n\n    /// @dev Allows owner to set allowances to multiple approved tokens with one call.\n    /// @param _tokenTransferProxy Address of the proxy to be approved.\n    /// @param _tokens Address of the token to receive allowance for.\n    /// @param _amounts Array of number of tokens to be approved.\n    function setMultipleAllowances(\n        address _tokenTransferProxy,\n        address[] calldata _tokens,\n        uint256[] calldata _amounts)\n        external\n    {\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            if (!setAllowancesInternal(_tokenTransferProxy, _tokens[i], _amounts[i])) continue;\n        }\n    }\n\n    /// @dev Allows owner to operate on exchange through extension.\n    /// @param _exchange Address of the target exchange.\n    /// @param transaction ABIencoded transaction.\n    function operateOnExchange(\n        address _exchange,\n        Transaction memory transaction)\n        public\n        onlyOwner\n        nonReentrant\n        whenApprovedExchangeOrWrapper(_exchange)\n        returns (bool success)\n    {\n        address adapter = getExchangeAdapter(_exchange);\n        bytes memory transactionData = transaction.assembledData;\n        require(\n            methodAllowedOnExchange(\n                findMethod(transactionData),\n                adapter\n            )\n        );\n\n        bytes memory response;\n        bool failed = true;\n\n        assembly {\n\n            let succeeded := delegatecall(\n                sub(gas, 5000),\n                adapter,\n                add(transactionData, 0x20),\n                mload(transactionData),\n                0,\n                32) // 0x0\n\n            // load delegatecall output\n            response := mload(0)\n            failed := iszero(succeeded)\n\n            switch failed\n            case 1 {\n                // throw if delegatecall failed\n                revert(0, 0)\n            }\n        }\n\n        return (success = true);\n    }\n\n    /// @dev Allows owner or approved exchange to send a transaction to exchange\n    /// @dev With data of signed/unsigned transaction\n    /// @param _exchange Address of the exchange\n    /// @param transactions Array of ABI encoded transactions\n    function batchOperateOnExchange(\n        address _exchange,\n        Transaction[] memory transactions)\n        public\n        onlyOwner\n        nonReentrant\n        whenApprovedExchangeOrWrapper(_exchange)\n    {\n        for (uint256 i = 0; i < transactions.length; i++) {\n            if (!operateOnExchange(_exchange, transactions[i])) continue;\n        }\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Calculates how many shares a user holds.\n    /// @param _who Address of the target account.\n    /// @return Number of shares.\n    function balanceOf(address _who)\n        external\n        view\n        returns (uint256)\n    {\n        return accounts[_who].balance;\n    }\n\n    /// @dev Gets the address of the logger contract.\n    /// @return Address of the logger contrac.\n    function getEventful()\n        external\n        view\n        returns (address)\n    {\n        Authority auth = Authority(admin.authority);\n        return auth.getDragoEventful();\n    }\n\n    /// @dev Finds details of a drago pool.\n    /// @return String name of a drago.\n    /// @return String symbol of a drago.\n    /// @return Value of the share price in wei.\n    /// @return Value of the share price in wei.\n    function getData()\n        external\n        view\n        returns (\n            string memory name,\n            string memory symbol,\n            uint256 sellPrice,\n            uint256 buyPrice\n        )\n    {\n        name = data.name;\n        symbol = data.symbol;\n        sellPrice = data.sellPrice;\n        buyPrice = data.buyPrice;\n    }\n\n    /// @dev Returns the price of a pool.\n    /// @return Value of the share price in wei.\n    function calcSharePrice()\n        external\n        view\n        returns (uint256)\n    {\n        return data.sellPrice;\n    }\n\n    /// @dev Finds the administrative data of the pool.\n    /// @return Address of the account where a user collects fees.\n    /// @return Address of the drago dao/factory.\n    /// @return Number of the fee split ratio.\n    /// @return Value of the transaction fee in basis points.\n    /// @return Number of the minimum holding period for shares.\n    function getAdminData()\n        external\n        view\n        returns (\n            address, //owner\n            address feeCollector,\n            address dragoDao,\n            uint256 ratio,\n            uint256 transactionFee,\n            uint32 minPeriod\n        )\n    {\n        return (\n            owner,\n            admin.feeCollector,\n            admin.dragoDao,\n            admin.ratio,\n            data.transactionFee,\n            data.minPeriod\n        );\n    }\n\n    function getKycProvider()\n        external\n        view\n        returns (address)\n    {\n        if(admin.kycEnforced) {\n            return admin.kycProvider;\n        }\n    }\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid)\n    {\n        isValid = SigVerifier(getSigVerifier())\n            .isValidSignature(hash, signature);\n        return isValid;\n    }\n\n    /// @dev Finds the exchanges authority.\n    /// @return Address of the exchanges authority.\n    function getExchangesAuth()\n        external\n        view\n        returns (address)\n    {\n        return getExchangesAuthority();\n    }\n\n    /// @dev Returns the total amount of issued tokens for this drago.\n    /// @return Number of shares.\n    function totalSupply()\n        external view\n        returns (uint256)\n    {\n        return data.totalSupply;\n    }\n\n    /*\n     * INTERNAL FUNCTIONS\n     */\n\n    /// @dev Executes the pool purchase.\n    /// @param _hodler Address of the target user.\n    /// @return Bool the function executed correctly.\n    function buyDragoInternal(address _hodler)\n        internal\n        returns (bool success)\n    {\n        if (admin.kycProvider != address(0)) {\n            require(Kyc(admin.kycProvider).isWhitelistedUser(_hodler));\n        }\n        uint256 grossAmount;\n        uint256 feeDrago;\n        uint256 feeDragoDao;\n        uint256 amount;\n        (grossAmount, feeDrago, feeDragoDao, amount) = getPurchaseAmounts();\n        addPurchaseLog(amount);\n        allocatePurchaseTokens(_hodler, amount, feeDrago, feeDragoDao);\n        data.totalSupply = safeAdd(data.totalSupply, grossAmount);\n        return true;\n    }\n\n    /// @dev Allocates tokens to buyer, splits fee in tokens to wizard and dao.\n    /// @param _hodler Address of the buyer.\n    /// @param _amount Value of issued tokens.\n    /// @param _feeDrago Number of shares as fee.\n    /// @param _feeDragoDao Number of shares as fee to dao.\n    function allocatePurchaseTokens(\n        address _hodler,\n        uint256 _amount,\n        uint256 _feeDrago,\n        uint256 _feeDragoDao)\n        internal\n    {\n        accounts[_hodler].balance = safeAdd(accounts[_hodler].balance, _amount);\n        accounts[admin.feeCollector].balance = safeAdd(accounts[admin.feeCollector].balance, _feeDrago);\n        accounts[admin.dragoDao].balance = safeAdd(accounts[admin.dragoDao].balance, _feeDragoDao);\n        accounts[_hodler].receipt.activation = uint32(now) + data.minPeriod;\n    }\n\n    /// @dev Destroys tokens of seller, splits fee in tokens to wizard and dao.\n    /// @param _hodler Address of the seller.\n    /// @param _amount Value of burnt tokens.\n    /// @param _feeDrago Number of shares as fee.\n    /// @param _feeDragoDao Number of shares as fee to dao.\n    function allocateSaleTokens(\n        address _hodler,\n        uint256 _amount,\n        uint256 _feeDrago,\n        uint256 _feeDragoDao)\n        internal\n    {\n        accounts[_hodler].balance = safeSub(accounts[_hodler].balance, _amount);\n        accounts[admin.feeCollector].balance = safeAdd(accounts[admin.feeCollector].balance, _feeDrago);\n        accounts[admin.dragoDao].balance = safeAdd(accounts[admin.dragoDao].balance, _feeDragoDao);\n    }\n\n    /// @dev Sends a buy log to the eventful contract.\n    /// @param _amount Number of purchased shares.\n    function addPurchaseLog(uint256 _amount)\n        internal\n    {\n        bytes memory name = bytes(data.name);\n        bytes memory symbol = bytes(data.symbol);\n        Authority auth = Authority(admin.authority);\n        DragoEventful events = DragoEventful(auth.getDragoEventful());\n        require(events.buyDrago(msg.sender, address(this), msg.value, _amount, name, symbol));\n    }\n\n    /// @dev Sends a sell log to the eventful contract.\n    /// @param _amount Number of sold shares.\n    /// @param _netRevenue Value of sale for hodler.\n    function addSaleLog(uint256 _amount, uint256 _netRevenue)\n        internal\n    {\n        bytes memory name = bytes(data.name);\n        bytes memory symbol = bytes(data.symbol);\n        Authority auth = Authority(admin.authority);\n        DragoEventful events = DragoEventful(auth.getDragoEventful());\n        require(events.sellDrago(msg.sender, address(this), _amount, _netRevenue, name, symbol));\n    }\n\n    /// @dev Allows owner to set an infinite allowance to an approved exchange.\n    /// @param _tokenTransferProxy Address of the proxy to be approved.\n    /// @param _token Address of the token to receive allowance for.\n    function setAllowancesInternal(\n        address _tokenTransferProxy,\n        address _token,\n        uint256 _amount)\n        internal\n        returns (bool)\n    {\n        require(Token(_token)\n            .approve(_tokenTransferProxy, _amount));\n        return true;\n    }\n\n    /// @dev Calculates the correct purchase amounts.\n    /// @return Number of new shares.\n    /// @return Value of fee in shares.\n    /// @return Value of fee in shares to dao.\n    /// @return Value of net purchased shares.\n    function getPurchaseAmounts()\n        internal\n        view\n        returns (\n            uint256 grossAmount,\n            uint256 feeDrago,\n            uint256 feeDragoDao,\n            uint256 amount\n        )\n    {\n        grossAmount = safeDiv(msg.value * BASE, data.buyPrice);\n        uint256 fee = safeMul(grossAmount, data.transactionFee) / 10000; //fee is in basis points\n        return (\n            grossAmount,\n            feeDrago = safeMul(fee , admin.ratio) / 100,\n            feeDragoDao = safeSub(fee, feeDrago),\n            amount = safeSub(grossAmount, fee)\n        );\n    }\n\n    /// @dev Calculates the correct sale amounts.\n    /// @return Value of fee in shares.\n    /// @return Value of fee in shares to dao.\n    /// @return Value of net sold shares.\n    /// @return Value of sale amount for hodler.\n    function getSaleAmounts(uint256 _amount)\n        internal\n        view\n        returns (\n            uint256 feeDrago,\n            uint256 feeDragoDao,\n            uint256 netAmount,\n            uint256 netRevenue\n        )\n    {\n        uint256 fee = safeMul(_amount, data.transactionFee) / 10000; //fee is in basis points\n        return (\n            feeDrago = safeMul(fee, admin.ratio) / 100,\n            feeDragoDao = safeSub(fee, feeDragoDao),\n            netAmount = safeSub(_amount, fee),\n            netRevenue = (safeMul(netAmount, data.sellPrice) / BASE)\n        );\n    }\n\n    /// @dev Gets the address of the logger contract.\n    /// @return Address of the logger contrac.\n    function getDragoEventful()\n        internal\n        view\n        returns (address)\n    {\n        Authority auth = Authority(admin.authority);\n        return auth.getDragoEventful();\n    }\n\n    /// @dev Returns the address of the signature verifier.\n    /// @return Address of the verifier contract.\n    function getSigVerifier()\n        internal\n        view\n        returns (address)\n    {\n        return ExchangesAuthority(\n            Authority(admin.authority)\n            .getExchangesAuthority())\n            .getSigVerifier();\n    }\n\n    /// @dev Returns the address of the price verifier.\n    /// @return Address of the verifier contract.\n    function getNavVerifier()\n        internal\n        view\n        returns (address)\n    {\n        return Authority(admin.authority)\n            .getNavVerifier();\n    }\n\n    /// @dev Verifies that a signature is valid.\n    /// @param sellPrice Price in wei.\n    /// @param buyPrice Price in wei.\n    /// @param signaturevaliduntilBlock Number of blocks till price expiry.\n    /// @param hash Message hash that is signed.\n    /// @param signedData Proof of nav validity.\n    /// @return Bool validity of signed price update.\n    function isValidNav(\n        uint256 sellPrice,\n        uint256 buyPrice,\n        uint256 signaturevaliduntilBlock,\n        bytes32 hash,\n        bytes memory signedData)\n        internal\n        view\n        returns (bool isValid)\n    {\n        isValid = NavVerifier(getNavVerifier()).isValidNav(\n            sellPrice,\n            buyPrice,\n            signaturevaliduntilBlock,\n            hash,\n            signedData\n        );\n        return isValid;\n    }\n\n    /// @dev Finds the exchanges authority.\n    /// @return Address of the exchanges authority.\n    function getExchangesAuthority()\n        internal\n        view\n        returns (address)\n    {\n        return Authority(admin.authority).getExchangesAuthority();\n    }\n\n    /// @dev Returns the address of the exchange adapter.\n    /// @param _exchange Address of the target exchange.\n    /// @return Address of the exchange adapter.\n    function getExchangeAdapter(address _exchange)\n        internal\n        view\n        returns (address)\n    {\n        return ExchangesAuthority(\n            Authority(admin.authority)\n            .getExchangesAuthority())\n            .getExchangeAdapter(_exchange);\n    }\n\n    /// @dev Returns the method of a call.\n    /// @param assembledData Bytes of the encoded transaction.\n    /// @return Bytes4 function signature.\n    function findMethod(bytes memory assembledData)\n        internal\n        pure\n        returns (bytes4 method)\n    {\n        return method = LibFindMethod.findMethod(assembledData);\n    }\n\n    /// @dev Finds if a method is allowed on an exchange.\n    /// @param _adapter Address of the target exchange.\n    /// @return Bool the method is allowed.\n    function methodAllowedOnExchange(\n        bytes4 _method,\n        address _adapter)\n        internal\n        view\n        returns (bool)\n    {\n        return ExchangesAuthority(\n            Authority(admin.authority)\n            .getExchangesAuthority())\n            .isMethodAllowed(_method, _adapter);\n    }\n}\n",
		"../../authorities/Authority/AuthorityFace.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/// @title Authority Interface - Allows interaction with the Authority contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface AuthorityFace {\n\n    /*\n     * EVENTS\n     */\n    event AuthoritySet(address indexed authority);\n    event WhitelisterSet(address indexed whitelister);\n    event WhitelistedUser(address indexed target, bool approved);\n    event WhitelistedRegistry(address indexed registry, bool approved);\n    event WhitelistedFactory(address indexed factory, bool approved);\n    event WhitelistedVault(address indexed vault, bool approved);\n    event WhitelistedDrago(address indexed drago, bool isWhitelisted);\n    event NewDragoEventful(address indexed dragoEventful);\n    event NewVaultEventful(address indexed vaultEventful);\n    event NewNavVerifier(address indexed navVerifier);\n    event NewExchangesAuthority(address indexed exchangesAuthority);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function setAuthority(address _authority, bool _isWhitelisted) external;\n    function setWhitelister(address _whitelister, bool _isWhitelisted) external;\n    function whitelistUser(address _target, bool _isWhitelisted) external;\n    function whitelistDrago(address _drago, bool _isWhitelisted) external;\n    function whitelistVault(address _vault, bool _isWhitelisted) external;\n    function whitelistRegistry(address _registry, bool _isWhitelisted) external;\n    function whitelistFactory(address _factory, bool _isWhitelisted) external;\n    function setDragoEventful(address _dragoEventful) external;\n    function setVaultEventful(address _vaultEventful) external;\n    function setNavVerifier(address _navVerifier) external;\n    function setExchangesAuthority(address _exchangesAuthority) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function isWhitelistedUser(address _target) external view returns (bool);\n    function isAuthority(address _authority) external view returns (bool);\n    function isWhitelistedRegistry(address _registry) external view returns (bool);\n    function isWhitelistedDrago(address _drago) external view returns (bool);\n    function isWhitelistedVault(address _vault) external view returns (bool);\n    function isWhitelistedFactory(address _factory) external view returns (bool);\n    function getDragoEventful() external view returns (address);\n    function getVaultEventful() external view returns (address);\n    function getNavVerifier() external view returns (address);\n    function getExchangesAuthority() external view returns (address);\n}\n",
		"../../authorities/ExchangesAuthority/ExchangesAuthorityFace.sol": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Exchange Authority Interface - A helper contract for the exchange adapters.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface ExchangesAuthorityFace {\n\n    /*\n     * EVENTS\n     */\n    event AuthoritySet(address indexed authority);\n    event WhitelisterSet(address indexed whitelister);\n    event WhitelistedAsset(address indexed asset, bool approved);\n    event WhitelistedExchange(address indexed exchange, bool approved);\n    event WhitelistedWrapper(address indexed wrapper, bool approved);\n    event WhitelistedProxy(address indexed proxy, bool approved);\n    event WhitelistedMethod(bytes4 indexed method, address indexed exchange, bool approved);\n    event NewSigVerifier(address indexed sigVerifier);\n    event NewExchangeEventful(address indexed exchangeEventful);\n    event NewCasper(address indexed casper);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows the owner to whitelist an authority\n    /// @param _authority Address of the authority\n    /// @param _isWhitelisted Bool whitelisted\n    function setAuthority(address _authority, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows the owner to whitelist a whitelister\n    /// @param _whitelister Address of the whitelister\n    /// @param _isWhitelisted Bool whitelisted\n    function setWhitelister(address _whitelister, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to whitelist an asset\n    /// @param _asset Address of the token\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistAsset(address _asset, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to whitelist an exchange\n    /// @param _exchange Address of the target exchange\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistExchange(address _exchange, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to whitelist an token wrapper\n    /// @param _wrapper Address of the target token wrapper\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistWrapper(address _wrapper, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to whitelist a tokenTransferProxy\n    /// @param _tokenTransferProxy Address of the proxy\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistTokenTransferProxy(\n        address _tokenTransferProxy, bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to enable trading on a particular exchange\n    /// @param _asset Address of the token\n    /// @param _exchange Address of the exchange\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistAssetOnExchange(\n        address _asset,\n        address _exchange,\n        bool _isWhitelisted)\n        external;\n\n    /// @dev Allows a whitelister to enable assiciate wrappers to a token\n    /// @param _token Address of the token\n    /// @param _wrapper Address of the exchange\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistTokenOnWrapper(\n        address _token,\n        address _wrapper,\n        bool _isWhitelisted)\n        external;\n\n    /// @dev Allows an admin to whitelist a factory\n    /// @param _method Hex of the function ABI\n    /// @param _isWhitelisted Bool whitelisted\n    function whitelistMethod(\n        bytes4 _method,\n        address _adapter,\n        bool _isWhitelisted)\n        external;\n\n    /// @dev Allows the owner to set the signature verifier\n    /// @param _sigVerifier Address of the logs contract\n    function setSignatureVerifier(address _sigVerifier)\n        external;\n\n    /// @dev Allows the owner to set the exchange eventful\n    /// @param _exchangeEventful Address of the exchange logs contract\n    function setExchangeEventful(address _exchangeEventful)\n        external;\n\n    /// @dev Allows the owner to associate an exchange to its adapter\n    /// @param _exchange Address of the exchange\n    /// @param _adapter Address of the adapter\n    function setExchangeAdapter(address _exchange, address _adapter)\n        external;\n\n    /// @dev Allows the owner to set the casper contract\n    /// @param _casper Address of the casper contract\n    function setCasper(address _casper)\n        external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Provides whether an address is an authority\n    /// @param _authority Address of the target authority\n    /// @return Bool is whitelisted\n    function isAuthority(address _authority)\n        external view\n        returns (bool);\n\n    /// @dev Provides whether an asset is whitelisted\n    /// @param _asset Address of the target asset\n    /// @return Bool is whitelisted\n    function isWhitelistedAsset(address _asset)\n        external view\n        returns (bool);\n\n    /// @dev Provides whether an exchange is whitelisted\n    /// @param _exchange Address of the target exchange\n    /// @return Bool is whitelisted\n    function isWhitelistedExchange(address _exchange)\n        external view\n        returns (bool);\n\n    /// @dev Provides whether a token wrapper is whitelisted\n    /// @param _wrapper Address of the target exchange\n    /// @return Bool is whitelisted\n    function isWhitelistedWrapper(address _wrapper)\n        external view\n        returns (bool);\n\n    /// @dev Provides whether a proxy is whitelisted\n    /// @param _tokenTransferProxy Address of the proxy\n    /// @return Bool is whitelisted\n    function isWhitelistedProxy(address _tokenTransferProxy)\n        external view\n        returns (bool);\n\n    /// @dev Provides the address of the exchange adapter\n    /// @param _exchange Address of the exchange\n    /// @return Address of the adapter\n    function getExchangeAdapter(address _exchange)\n        external view\n        returns (address);\n\n    /// @dev Provides the address of the signature verifier\n    /// @return Address of the verifier\n    function getSigVerifier()\n        external view\n        returns (address);\n\n    /// @dev Checkes whether a token is allowed on an exchange\n    /// @param _token Address of the token\n    /// @param _exchange Address of the exchange\n    /// @return Bool the token is whitelisted on the exchange\n    function canTradeTokenOnExchange(address _token, address _exchange)\n        external view\n        returns (bool);\n\n    /// @dev Checkes whether a token is allowed on a wrapper\n    /// @param _token Address of the token\n    /// @return Bool the token is whitelisted on the exchange\n    function canWrapTokenOnWrapper(address _token, address _wrapper)\n        external view\n        returns (bool);\n\n    /// @dev Checkes whether a method is allowed on an exchange\n    function isMethodAllowed(bytes4 _method, address _exchange)\n        external view\n        returns (bool);\n\n    /// @dev Checkes whether casper has been inizialized\n    /// @return Bool the casper contract has been initialized\n    function isCasperInitialized()\n        external view\n        returns (bool);\n\n    /// @dev Provides the address of the casper contract\n    /// @return Address of the casper contract\n    function getCasper()\n        external view\n        returns (address);\n}\n",
		"./SigVerifierFace.sol": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl, ZeroEx Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.25;\n\n/// @title SigVerifier Interface - Allows interaction with the signature verifier contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface SigVerifierFace {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
		"../NavVerifier/NavVerifierFace.sol": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.25;\n\n/// @title Nav Verifier Interface - Allows to check if new NAV comes from approved authority.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface NavVerifierFace {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param sellPrice Price in wei\n    /// @param buyPrice Price in wei\n    /// @param signaturevaliduntilBlock Number of blocks till price expiry\n    /// @param hash Message hash that is signed.\n    /// @param signedData Proof of nav validity.\n    /// @notice mock function which returns true\n    function isValidNav(\n        uint256 sellPrice,\n        uint256 buyPrice,\n        uint256 signaturevaliduntilBlock,\n        bytes32 hash,\n        bytes calldata signedData)\n        external\n        view\n        returns (bool isValid);\n}\n",
		"../../Kyc/KycFace.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title KycFace - allows interaction with a Kyc provider.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface KycFace\n\n{\n    function isWhitelistedUser(address hodler) external view returns (bool);\n}\n",
		"../../DragoEventful/DragoEventfulFace.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Drago Eventful Interface contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface DragoEventfulFace {\n\n    /*\n     * EVENTS\n     */\n    event BuyDrago(address indexed drago, address indexed from, address indexed to, uint256 amount, uint256 revenue, bytes name, bytes symbol);\n    event SellDrago(address indexed drago, address indexed from, address indexed to, uint256 amount, uint256 revenue, bytes name, bytes symbol);\n    event NewRatio(address indexed drago, address indexed from, uint256 newRatio);\n    event NewNAV(address indexed drago, address indexed from, address indexed to, uint256 sellPrice, uint256 buyPrice);\n    event NewFee(address indexed drago, address indexed group, address indexed who, uint256 transactionFee);\n    event NewCollector( address indexed drago, address indexed group, address indexed who, address feeCollector);\n    event DragoDao(address indexed drago, address indexed from, address indexed to, address dragoDao);\n    event DepositExchange(address indexed drago, address indexed exchange, address indexed token, uint256 value, uint256 amount);\n    event WithdrawExchange(address indexed drago, address indexed exchange, address indexed token, uint256 value, uint256 amount);\n    event OrderExchange(address indexed drago, address indexed exchange, address indexed cfd, uint256 value, uint256 revenue);\n    event TradeExchange(address indexed drago, address indexed exchange, address tokenGet, address tokenGive, uint256 amountGet, uint256 amountGive, address get);\n    event CancelOrder(address indexed drago, address indexed exchange, address indexed cfd, uint256 value, uint256 id);\n    event DealFinalized(address indexed drago, address indexed exchange, address indexed cfd, uint256 value, uint256 id);\n    event CustomDragoLog(bytes4 indexed methodHash, bytes encodedParams);\n    event CustomDragoLog2(bytes4 indexed methodHash,  bytes32 topic2, bytes32 topic3, bytes encodedParams);\n    event DragoCreated(address indexed drago, address indexed group, address indexed owner, uint256 dragoId, string name, string symbol);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function buyDrago(address _who, address _targetDrago, uint256 _value, uint256 _amount, bytes calldata _name, bytes calldata _symbol) external returns (bool success);\n    function sellDrago(address _who, address _targetDrago, uint256 _amount, uint256 _revenue, bytes calldata _name, bytes calldata _symbol) external returns(bool success);\n    function changeRatio(address _who, address _targetDrago, uint256 _ratio) external returns(bool success);\n    function changeFeeCollector(address _who, address _targetDrago, address _feeCollector) external returns(bool success);\n    function changeDragoDao(address _who, address _targetDrago, address _dragoDao) external returns(bool success);\n    function setDragoPrice(address _who, address _targetDrago, uint256 _sellPrice, uint256 _buyPrice) external returns(bool success);\n    function setTransactionFee(address _who, address _targetDrago, uint256 _transactionFee) external returns(bool success);\n    function depositToExchange(address _who, address _targetDrago, address _exchange, address _token, uint256 _value) external returns(bool success);\n    function withdrawFromExchange(address _who, address _targetDrago, address _exchange, address _token, uint256 _value) external returns(bool success);\n    function customDragoLog(bytes4 _methodHash, bytes calldata _encodedParams) external returns (bool success);\n    function customDragoLog2(bytes4 _methodHash, bytes32 topic2, bytes32 topic3, bytes calldata _encodedParams) external returns (bool success);\n    function customExchangeLog(bytes4 _methodHash, bytes calldata _encodedParams) external returns (bool success);\n    function customExchangeLog2(bytes4 _methodHash, bytes32 topic2, bytes32 topic3,bytes calldata _encodedParams) external returns (bool success);\n    function createDrago(address _who, address _newDrago, string calldata _name, string calldata _symbol, uint256 _dragoId) external returns(bool success);\n}\n",
		"../../../utils/ReentrancyGuard/ReentrancyGuard.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ncontract ReentrancyGuard {\n\n    // Locked state of mutex\n    bool private locked = false;\n\n    /// @dev Functions with this modifer cannot be reentered. The mutex will be locked\n    ///      before function execution and unlocked after.\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(\n            !locked,\n            \"REENTRANCY_ILLEGAL\"\n        );\n\n        // Lock mutex before function call\n        locked = true;\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        locked = false;\n    }\n}\n",
		"../../../utils/Owned/OwnedUninitialized.sol": "pragma solidity >=0.4.22 <0.6.0;\n\ncontract OwnedUninitialized {\n\n    address public owner;\n\n    event NewOwner(address indexed old, address indexed current);\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setOwner(address _new) public onlyOwner {\n        require(_new != address(0));\n        owner = _new;\n        emit  NewOwner(owner, _new);\n    }\n}\n",
		"../../../utils/SafeMath/SafeMathLight.sol": "pragma solidity 0.5.0;\n\ncontract SafeMathLight {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n}\n",
		"../../../utils/LibFindMethod/LibFindMethod.sol": "/*\n\n Copyright 2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\n/// @title Find Method Library - library to find the method of a call.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\nlibrary LibFindMethod {\n\n    /// @dev Returns the method of an ABIencoded call\n    /// @param assembledData Bytes of the call data\n    /// @return Bytes4 of the function signature\n    function findMethod(bytes memory assembledData)\n        internal\n        pure\n        returns (bytes4 method)\n    {\n        // find the bytes4(keccak256('functionABI')) of the function\n        assembly {\n            // Load free memory pointer\n            method := mload(0x00)\n            let transaction := assembledData\n            method := mload(add(transaction, 0x20))\n        }\n        return method;\n    }\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.5.0+commit.1d4f565a",
		"settings": {
			"remappings": [],
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}