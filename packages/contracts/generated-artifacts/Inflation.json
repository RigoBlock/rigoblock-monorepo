{
	"schemaVersion": "2.0.0",
	"contractName": "Inflation",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_rigoTokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_stakingProxyAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_authorityAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "RIGOTOKENADDRESS",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "STAKINGPROXYADDRESS",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "authorityAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "stakingPoolId",
						"type": "bytes32"
					}
				],
				"name": "canWithdraw",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "groupAddress",
						"type": "address"
					}
				],
				"name": "getInflationFactor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "totalGrgDelegatedToPool",
						"type": "uint256"
					}
				],
				"name": "getMaxEpochReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "groups",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "epochReward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "stakingPoolId",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"name": "mintInflation",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "performers",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "claimedTokens",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rigoblockDaoAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newAuthorityAddress",
						"type": "address"
					}
				],
				"name": "setAuthority",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "groupAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "inflationFactor",
						"type": "uint256"
					}
				],
				"name": "setInflationFactor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newRigoblockDaoAddress",
						"type": "address"
					}
				],
				"name": "setRigoblock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "slot",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "stakingPoolId",
						"type": "bytes32"
					}
				],
				"name": "timeUntilClaim",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Gabriele Rigo - <gab@rigoblock.com>",
			"kind": "dev",
			"methods": {
				"canWithdraw(bytes32)": {
					"details": "Returns whether a staking pool's reward can be claimed.",
					"params": {
						"stakingPoolId": "Address of the target pool."
					},
					"returns": {
						"_0": "Bool the wizard can claim."
					}
				},
				"getInflationFactor(address)": {
					"details": "Return the reward factor for a group.",
					"params": {
						"groupAddress": "Address of the group."
					},
					"returns": {
						"_0": "Value of the reward factor."
					}
				},
				"getMaxEpochReward(uint256)": {
					"details": "Returns the max epoch reward of a pool.",
					"params": {
						"totalGrgDelegatedToPool": "Total amount of GRG delegated to the pool."
					},
					"returns": {
						"_0": "Value of the maximum pool reward."
					}
				},
				"mintInflation(bytes32,uint256)": {
					"details": "Allows ProofOfPerformance to mint rewards.",
					"params": {
						"reward": "Number of reward in Rigo tokens.",
						"stakingPoolId": "String of the staking pool."
					},
					"returns": {
						"_0": "Number of allocated reward."
					}
				},
				"setAuthority(address)": {
					"details": "Allows rigoblock dao to update the authority.",
					"params": {
						"newAuthorityAddress": "Address of the authority."
					}
				},
				"setInflationFactor(address,uint256)": {
					"details": "Allows rigoblock dao to set the inflation factor for a group.",
					"params": {
						"groupAddress": "Address of the group/factory.",
						"inflationFactor": "Value of the reward factor."
					}
				},
				"setRigoblock(address)": {
					"details": "Allows rigoblock dao to upgrade its address.",
					"params": {
						"newRigoblockDaoAddress": "Address of the new rigoblock dao."
					}
				},
				"timeUntilClaim(bytes32)": {
					"details": "Returns how much time needed until next claim.",
					"params": {
						"stakingPoolId": "Address of the target pool."
					},
					"returns": {
						"_0": "Number in seconds."
					}
				}
			},
			"title": "Inflation - Allows ProofOfPerformance to mint tokens.",
			"version": 1
		},
		"evm": {
			"bytecode": {
				"generatedSources": [
					{
						"ast": {
							"nodeType": "YulBlock",
							"src": "0:594:9",
							"statements": [
								{
									"nodeType": "YulBlock",
									"src": "6:3:9",
									"statements": []
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "76:117:9",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "86:22:9",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "101:6:9"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "95:5:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "95:13:9"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "86:5:9"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "171:16:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "180:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "183:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "173:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "173:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "173:12:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "130:5:9"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "141:5:9"
																		},
																		{
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "156:3:9",
																							"type": "",
																							"value": "160"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "161:1:9",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "152:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "152:11:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "165:1:9",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "sub",
																				"nodeType": "YulIdentifier",
																				"src": "148:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "148:19:9"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "137:3:9"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "137:31:9"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "127:2:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "127:42:9"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "120:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "120:50:9"
												},
												"nodeType": "YulIf",
												"src": "117:2:9"
											}
										]
									},
									"name": "abi_decode_t_address_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "55:6:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "66:5:9",
											"type": ""
										}
									],
									"src": "14:179:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "313:279:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "359:26:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "368:6:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "376:6:9"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "361:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "361:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "361:22:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "334:7:9"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "343:9:9"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "330:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "330:23:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "355:2:9",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "326:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "326:32:9"
												},
												"nodeType": "YulIf",
												"src": "323:2:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "394:52:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "436:9:9"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "404:31:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "404:42:9"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "394:6:9"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "455:61:9",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "501:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "512:2:9",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "497:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "497:18:9"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "465:31:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "465:51:9"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "455:6:9"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "525:61:9",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "571:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "582:2:9",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "567:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "567:18:9"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "535:31:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "535:51:9"
												},
												"variableNames": [
													{
														"name": "value2",
														"nodeType": "YulIdentifier",
														"src": "525:6:9"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_addresst_addresst_address_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "263:9:9",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "274:7:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "286:6:9",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "294:6:9",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "302:6:9",
											"type": ""
										}
									],
									"src": "198:394:9"
								}
							]
						},
						"contents": "{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_t_address_fromMemory(add(headStart, 64))\n    }\n}",
						"id": 9,
						"language": "Yul",
						"name": "#utility.yul"
					}
				],
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50604051610d9a380380610d9a83398101604081905261002f91610097565b600080546001600160a01b039485166001600160a01b031991821617909155600180549385169382169390931790925560048054831633179055600380549190931691161790556100d9565b80516001600160a01b038116811461009257600080fd5b919050565b6000806000606084860312156100ab578283fd5b6100b48461007b565b92506100c26020850161007b565b91506100d06040850161007b565b90509250925092565b610cb2806100e86000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636fb70c76116100975780637fa36e40116100665780637fa36e40146101d1578063a6c9c443146101e4578063d410e0c2146101ec578063d736d1eb146101ff576100f5565b80636fb70c76146101835780637802815c146101a35780637a9e5e4b146101b65780637f8be859146101c9576100f5565b806342a86d65116100d357806342a86d651461014257806357a15c031461015557806363d5e44d14610168578063663b64f71461017b576100f5565b8063020e0cdb146100fa5780631a88bc661461010f5780633c695d4e1461012d575b600080fd5b61010d610108366004610a5c565b610221565b005b61011761025d565b6040516101249190610bb8565b60405180910390f35b610135610263565b6040516101249190610b66565b610117610150366004610aa5565b61027f565b610117610163366004610aa5565b6102bc565b610117610176366004610a42565b61037c565b61013561038e565b610196610191366004610aa5565b6103aa565b6040516101249190610bad565b61010d6101b1366004610a42565b6103ca565b61010d6101c4366004610a42565b610419565b610135610468565b6101176101df366004610abd565b610484565b6101356106e2565b6101176101fa366004610a42565b6106fe565b61021261020d366004610aa5565b610726565b60405161012493929190610c66565b610229610747565b81610233816107a3565b5073ffffffffffffffffffffffffffffffffffffffff909116600090815260066020526040902055565b60025481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6000818152600560205260408120600301544210156102b357506000818152600560205260409020600301544290036102b7565b5060005b919050565b6000610376600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663634038016040518163ffffffff1660e01b815260040160206040518083038186803b15801561032957600080fd5b505afa15801561033d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103619190610b4e565b830261036b610882565b6301e13380026108bc565b92915050565b60066020526000908152604090205481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60008181526005602052604081206003015442106102b3575060016102b7565b6103d2610747565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610421610747565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b600061048e6108f2565b6000838152600560205260409020600301544210156104af57506000610376565b60006104ba84610943565b90506104c5816102bc565b8311156104d6576000915050610376565b6000848152600560209081526040918290204260029091015560015482517f63403801000000000000000000000000000000000000000000000000000000008152925173ffffffffffffffffffffffffffffffffffffffff909116926363403801926004808301939192829003018186803b15801561055457600080fd5b505afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190610b4e565b600085815260056020819052604082204293909301600390930192909255600280546001019055906064908502600054600480546040517f79c6506800000000000000000000000000000000000000000000000000000000815294909304945073ffffffffffffffffffffffffffffffffffffffff9182169384936379c650689361061c93911691879101610b87565b600060405180830381600087803b15801561063657600080fd5b505af115801561064a573d6000803e3d6000fd5b50506001546040517f79c6506800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80861694506379c6506893506106a69216908990600401610b87565b600060405180830381600087803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b509698975050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205490565b60056020526000908152604090208054600282015460039092015490919083565b60045473ffffffffffffffffffffffffffffffffffffffff1633146107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890610bf8565b60405180910390fd5b565b6003546040517fdcb7a3e000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063dcb7a3e0906107f9908490600401610b66565b60206040518083038186803b15801561081157600080fd5b505afa158015610825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108499190610a85565b61087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890610bc1565b50565b60006361b325204281111561089b5760019150506108b9565b806301dfe200014210156108b35760029150506108b9565b60049150505b90565b60008082116108c757fe5b60008284816108d257fe5b0490508284816108de57fe5b068184020184146108eb57fe5b9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890610c2f565b6001546040517f3e4ad73200000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff1690633e4ad7329061099a908590600401610bb8565b60606040518083038186803b1580156109b257600080fd5b505afa1580156109c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ea9190610ade565b602001516bffffffffffffffffffffffff1692915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102b757600080fd5b80516bffffffffffffffffffffffff811681146102b757600080fd5b600060208284031215610a53578081fd5b6108eb82610a02565b60008060408385031215610a6e578081fd5b610a7783610a02565b946020939093013593505050565b600060208284031215610a96578081fd5b815180151581146108eb578182fd5b600060208284031215610ab6578081fd5b5035919050565b60008060408385031215610acf578182fd5b50508035926020909101359150565b600060608284031215610aef578081fd5b6040516060810167ffffffffffffffff8282108183111715610b0d57fe5b81604052845191508082168214610b22578384fd5b508152610b3160208401610a26565b6020820152610b4260408401610a26565b60408201529392505050565b600060208284031215610b5f578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b90815260200190565b6020808252601c908201527f4e4f545f415050524f5645445f415554484f524954595f4552524f5200000000604082015260600190565b6020808252601e908201527f43414c4c45525f4e4f545f5249474f424c4f434b5f44414f5f4552524f520000604082015260600190565b6020808252601e908201527f43414c4c45525f4e4f545f5354414b494e475f50524f58595f4552524f520000604082015260600190565b928352602083019190915260408201526060019056fea2646970667358221220cc49eca3edadaa5be5593b28acc14e24290c80e13375214803102fb6f797f65164736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xD9A CODESIZE SUB DUP1 PUSH2 0xD9A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x97 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP4 DUP6 AND SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x4 DUP1 SLOAD DUP4 AND CALLER OR SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH2 0xD9 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAB JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xB4 DUP5 PUSH2 0x7B JUMP JUMPDEST SWAP3 POP PUSH2 0xC2 PUSH1 0x20 DUP6 ADD PUSH2 0x7B JUMP JUMPDEST SWAP2 POP PUSH2 0xD0 PUSH1 0x40 DUP6 ADD PUSH2 0x7B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xCB2 DUP1 PUSH2 0xE8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FB70C76 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0x7FA36E40 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x7FA36E40 EQ PUSH2 0x1D1 JUMPI DUP1 PUSH4 0xA6C9C443 EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0xD410E0C2 EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0xD736D1EB EQ PUSH2 0x1FF JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x6FB70C76 EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x7802815C EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x7A9E5E4B EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x7F8BE859 EQ PUSH2 0x1C9 JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x42A86D65 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x42A86D65 EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x57A15C03 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x63D5E44D EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x663B64F7 EQ PUSH2 0x17B JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x20E0CDB EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x1A88BC66 EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x3C695D4E EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5C JUMP JUMPDEST PUSH2 0x221 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x117 PUSH2 0x25D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x135 PUSH2 0x263 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xB66 JUMP JUMPDEST PUSH2 0x117 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x27F JUMP JUMPDEST PUSH2 0x117 PUSH2 0x163 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH2 0x117 PUSH2 0x176 CALLDATASIZE PUSH1 0x4 PUSH2 0xA42 JUMP JUMPDEST PUSH2 0x37C JUMP JUMPDEST PUSH2 0x135 PUSH2 0x38E JUMP JUMPDEST PUSH2 0x196 PUSH2 0x191 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x3AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xBAD JUMP JUMPDEST PUSH2 0x10D PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA42 JUMP JUMPDEST PUSH2 0x3CA JUMP JUMPDEST PUSH2 0x10D PUSH2 0x1C4 CALLDATASIZE PUSH1 0x4 PUSH2 0xA42 JUMP JUMPDEST PUSH2 0x419 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x468 JUMP JUMPDEST PUSH2 0x117 PUSH2 0x1DF CALLDATASIZE PUSH1 0x4 PUSH2 0xABD JUMP JUMPDEST PUSH2 0x484 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0x117 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xA42 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST PUSH2 0x212 PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x726 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC66 JUMP JUMPDEST PUSH2 0x229 PUSH2 0x747 JUMP JUMPDEST DUP2 PUSH2 0x233 DUP2 PUSH2 0x7A3 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0x2B3 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP SWAP1 SUB PUSH2 0x2B7 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x376 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x63403801 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x329 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x33D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x361 SWAP2 SWAP1 PUSH2 0xB4E JUMP JUMPDEST DUP4 MUL PUSH2 0x36B PUSH2 0x882 JUMP JUMPDEST PUSH4 0x1E13380 MUL PUSH2 0x8BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x2B3 JUMPI POP PUSH1 0x1 PUSH2 0x2B7 JUMP JUMPDEST PUSH2 0x3D2 PUSH2 0x747 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x421 PUSH2 0x747 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48E PUSH2 0x8F2 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0x4AF JUMPI POP PUSH1 0x0 PUSH2 0x376 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BA DUP5 PUSH2 0x943 JUMP JUMPDEST SWAP1 POP PUSH2 0x4C5 DUP2 PUSH2 0x2BC JUMP JUMPDEST DUP4 GT ISZERO PUSH2 0x4D6 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x376 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 TIMESTAMP PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE PUSH1 0x1 SLOAD DUP3 MLOAD PUSH32 0x6340380100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP3 PUSH4 0x63403801 SWAP3 PUSH1 0x4 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x568 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x58C SWAP2 SWAP1 PUSH2 0xB4E JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 TIMESTAMP SWAP4 SWAP1 SWAP4 ADD PUSH1 0x3 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE SWAP1 PUSH1 0x64 SWAP1 DUP6 MUL PUSH1 0x0 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x79C6506800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP5 SWAP1 SWAP4 DIV SWAP5 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP4 DUP5 SWAP4 PUSH4 0x79C65068 SWAP4 PUSH2 0x61C SWAP4 SWAP2 AND SWAP2 DUP8 SWAP2 ADD PUSH2 0xB87 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x636 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x64A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x79C6506800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND SWAP5 POP PUSH4 0x79C65068 SWAP4 POP PUSH2 0x6A6 SWAP3 AND SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xB87 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP7 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0xBF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0xDCB7A3E000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xDCB7A3E0 SWAP1 PUSH2 0x7F9 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0xB66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x825 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x849 SWAP2 SWAP1 PUSH2 0xA85 JUMP JUMPDEST PUSH2 0x87F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0xBC1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x61B32520 TIMESTAMP DUP2 GT ISZERO PUSH2 0x89B JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x8B9 JUMP JUMPDEST DUP1 PUSH4 0x1DFE200 ADD TIMESTAMP LT ISZERO PUSH2 0x8B3 JUMPI PUSH1 0x2 SWAP2 POP POP PUSH2 0x8B9 JUMP JUMPDEST PUSH1 0x4 SWAP2 POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x8C7 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x8D2 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP3 DUP5 DUP2 PUSH2 0x8DE JUMPI INVALID JUMPDEST MOD DUP2 DUP5 MUL ADD DUP5 EQ PUSH2 0x8EB JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x3E4AD73200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x3E4AD732 SWAP1 PUSH2 0x99A SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9EA SWAP2 SWAP1 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA53 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8EB DUP3 PUSH2 0xA02 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA6E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA77 DUP4 PUSH2 0xA02 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA96 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8EB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAB6 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xACF JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAEF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP3 DUP3 LT DUP2 DUP4 GT OR ISZERO PUSH2 0xB0D JUMPI INVALID JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP5 MLOAD SWAP2 POP DUP1 DUP3 AND DUP3 EQ PUSH2 0xB22 JUMPI DUP4 DUP5 REVERT JUMPDEST POP DUP2 MSTORE PUSH2 0xB31 PUSH1 0x20 DUP5 ADD PUSH2 0xA26 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xB42 PUSH1 0x40 DUP5 ADD PUSH2 0xA26 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB5F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F545F415050524F5645445F415554484F524954595F4552524F5200000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x43414C4C45525F4E4F545F5249474F424C4F434B5F44414F5F4552524F520000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x43414C4C45525F4E4F545F5354414B494E475F50524F58595F4552524F520000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0x49 0xEC LOG3 0xED 0xAD 0xAA JUMPDEST 0xE5 MSIZE EXTCODESIZE 0x28 0xAC 0xC1 0x4E 0x24 0x29 0xC DUP1 0xE1 CALLER PUSH22 0x214803102FB6F797F65164736F6C6343000704003300 ",
				"sourceMap": "2218:7861:2:-:0;;;3109:340;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3266:16;:36;;-1:-1:-1;;;;;3266:36:2;;;-1:-1:-1;;;;;;3266:36:2;;;;;;;;3312:42;;;;;;;;;;;;;;;3364:19;:32;;;;3386:10;3364:32;;;3406:16;:36;;;;;;;;;;;2218:7861;;14:179:9;95:13;;-1:-1:-1;;;;;137:31:9;;127:42;;117:2;;183:1;180;173:12;117:2;76:117;;;:::o;198:394::-;;;;355:2;343:9;334:7;330:23;326:32;323:2;;;376:6;368;361:22;323:2;404:42;436:9;404:42;:::i;:::-;394:52;;465:51;512:2;501:9;497:18;465:51;:::i;:::-;455:61;;535:51;582:2;571:9;567:18;535:51;:::i;:::-;525:61;;313:279;;;;;:::o;:::-;2218:7861:2;;;;;;"
			},
			"deployedBytecode": {
				"generatedSources": [
					{
						"ast": {
							"nodeType": "YulBlock",
							"src": "0:5261:9",
							"statements": [
								{
									"nodeType": "YulBlock",
									"src": "6:3:9",
									"statements": []
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "65:147:9",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "75:29:9",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "97:6:9"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "84:12:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "84:20:9"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "75:5:9"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "190:16:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "199:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "202:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "192:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "192:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "192:12:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "126:5:9"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "137:5:9"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "144:42:9",
																			"type": "",
																			"value": "0xffffffffffffffffffffffffffffffffffffffff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "133:3:9"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "133:54:9"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "123:2:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "123:65:9"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "116:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "116:73:9"
												},
												"nodeType": "YulIf",
												"src": "113:2:9"
											}
										]
									},
									"name": "abi_decode_t_address",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "44:6:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "55:5:9",
											"type": ""
										}
									],
									"src": "14:198:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "278:124:9",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "288:22:9",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "303:6:9"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "297:5:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "297:13:9"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "288:5:9"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "380:16:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "389:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "392:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "382:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "382:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "382:12:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "332:5:9"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "343:5:9"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "350:26:9",
																			"type": "",
																			"value": "0xffffffffffffffffffffffff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "339:3:9"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "339:38:9"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "329:2:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "329:49:9"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "322:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "322:57:9"
												},
												"nodeType": "YulIf",
												"src": "319:2:9"
											}
										]
									},
									"name": "abi_decode_t_uint96_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "257:6:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "268:5:9",
											"type": ""
										}
									],
									"src": "217:185:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "477:128:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "523:26:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "532:6:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "540:6:9"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "525:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "525:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "525:22:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "498:7:9"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "507:9:9"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "494:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "494:23:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "519:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "490:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "490:32:9"
												},
												"nodeType": "YulIf",
												"src": "487:2:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "558:41:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "589:9:9"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "568:20:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "568:31:9"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "558:6:9"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_address",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "443:9:9",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "454:7:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "466:6:9",
											"type": ""
										}
									],
									"src": "407:198:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "697:179:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "743:26:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "752:6:9"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "760:6:9"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "745:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "745:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "745:22:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "718:7:9"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "727:9:9"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "714:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "714:23:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "739:2:9",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "710:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "710:32:9"
												},
												"nodeType": "YulIf",
												"src": "707:2:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "778:41:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "809:9:9"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "788:20:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "788:31:9"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "778:6:9"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "828:42:9",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "855:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "866:2:9",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "851:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "851:18:9"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "838:12:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "838:32:9"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "828:6:9"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_addresst_uint256",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "655:9:9",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "666:7:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "678:6:9",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "686:6:9",
											"type": ""
										}
									],
									"src": "610:266:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "959:219:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1005:26:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1014:6:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1022:6:9"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1007:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1007:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1007:22:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "980:7:9"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "989:9:9"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "976:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "976:23:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1001:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "972:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "972:32:9"
												},
												"nodeType": "YulIf",
												"src": "969:2:9"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1040:29:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1059:9:9"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "1053:5:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "1053:16:9"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1044:5:9",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1122:26:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1131:6:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1139:6:9"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1124:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1124:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1124:22:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1091:5:9"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "1112:5:9"
																				}
																			],
																			"functionName": {
																				"name": "iszero",
																				"nodeType": "YulIdentifier",
																				"src": "1105:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1105:13:9"
																		}
																	],
																	"functionName": {
																		"name": "iszero",
																		"nodeType": "YulIdentifier",
																		"src": "1098:6:9"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1098:21:9"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "1088:2:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "1088:32:9"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "1081:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "1081:40:9"
												},
												"nodeType": "YulIf",
												"src": "1078:2:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1157:15:9",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1167:5:9"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1157:6:9"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_bool_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "925:9:9",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "936:7:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "948:6:9",
											"type": ""
										}
									],
									"src": "881:297:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1253:120:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1299:26:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1308:6:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1316:6:9"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1301:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1301:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1301:22:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "1274:7:9"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1283:9:9"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "1270:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "1270:23:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1295:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "1266:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "1266:32:9"
												},
												"nodeType": "YulIf",
												"src": "1263:2:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1334:33:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1357:9:9"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1344:12:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "1344:23:9"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1334:6:9"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_bytes32",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1219:9:9",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "1230:7:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "1242:6:9",
											"type": ""
										}
									],
									"src": "1183:190:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1465:171:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1511:26:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1520:6:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1528:6:9"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1513:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1513:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1513:22:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "1486:7:9"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1495:9:9"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "1482:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "1482:23:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1507:2:9",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "1478:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "1478:32:9"
												},
												"nodeType": "YulIf",
												"src": "1475:2:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1546:33:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1569:9:9"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1556:12:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "1556:23:9"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1546:6:9"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1588:42:9",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1615:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1626:2:9",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1611:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "1611:18:9"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1598:12:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "1598:32:9"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "1588:6:9"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_bytes32t_uint256",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1423:9:9",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "1434:7:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "1446:6:9",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "1454:6:9",
											"type": ""
										}
									],
									"src": "1378:258:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1752:625:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1798:26:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1807:6:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1815:6:9"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1800:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1800:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1800:22:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "1773:7:9"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1782:9:9"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "1769:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "1769:23:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1794:2:9",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "1765:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "1765:32:9"
												},
												"nodeType": "YulIf",
												"src": "1762:2:9"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1833:23:9",
												"value": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1853:2:9",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "1847:5:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "1847:9:9"
												},
												"variables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1837:6:9",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1865:33:9",
												"value": {
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "1887:6:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1895:2:9",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1883:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "1883:15:9"
												},
												"variables": [
													{
														"name": "newFreePtr",
														"nodeType": "YulTypedName",
														"src": "1869:10:9",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1907:28:9",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1917:18:9",
													"type": "",
													"value": "0xffffffffffffffff"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "1911:2:9",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1994:13:9",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "invalid",
																	"nodeType": "YulIdentifier",
																	"src": "1996:7:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1996:9:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1996:9:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulIdentifier",
																	"src": "1953:10:9"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "1965:2:9"
																}
															],
															"functionName": {
																"name": "gt",
																"nodeType": "YulIdentifier",
																"src": "1950:2:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "1950:18:9"
														},
														{
															"arguments": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulIdentifier",
																	"src": "1973:10:9"
																},
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1985:6:9"
																}
															],
															"functionName": {
																"name": "lt",
																"nodeType": "YulIdentifier",
																"src": "1970:2:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "1970:22:9"
														}
													],
													"functionName": {
														"name": "or",
														"nodeType": "YulIdentifier",
														"src": "1947:2:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "1947:46:9"
												},
												"nodeType": "YulIf",
												"src": "1944:2:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2023:2:9",
															"type": "",
															"value": "64"
														},
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "2027:10:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2016:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2016:22:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2016:22:9"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2047:29:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2066:9:9"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "2060:5:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2060:16:9"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2051:5:9",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2122:26:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2131:6:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2139:6:9"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2124:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2124:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2124:22:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2098:5:9"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "2109:5:9"
																		},
																		{
																			"name": "_1",
																			"nodeType": "YulIdentifier",
																			"src": "2116:2:9"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "2105:3:9"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "2105:14:9"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "2095:2:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "2095:25:9"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "2088:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2088:33:9"
												},
												"nodeType": "YulIf",
												"src": "2085:2:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "2164:6:9"
														},
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "2172:5:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2157:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2157:21:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2157:21:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "2198:6:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2206:2:9",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2194:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "2194:15:9"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "2246:9:9"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "2257:2:9",
																			"type": "",
																			"value": "32"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "2242:3:9"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "2242:18:9"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint96_fromMemory",
																"nodeType": "YulIdentifier",
																"src": "2211:30:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "2211:50:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2187:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2187:75:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2187:75:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "2282:6:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2290:2:9",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2278:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "2278:15:9"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "2330:9:9"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "2341:2:9",
																			"type": "",
																			"value": "64"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "2326:3:9"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "2326:18:9"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint96_fromMemory",
																"nodeType": "YulIdentifier",
																"src": "2295:30:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "2295:50:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2271:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2271:75:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2271:75:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2355:16:9",
												"value": {
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "2365:6:9"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "2355:6:9"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_struct$_StoredBalance_$363_memory_ptr_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1718:9:9",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "1729:7:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "1741:6:9",
											"type": ""
										}
									],
									"src": "1641:736:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2452:120:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2498:26:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2507:6:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2515:6:9"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2500:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2500:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2500:22:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "2473:7:9"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2482:9:9"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "2469:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "2469:23:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2494:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "2465:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2465:32:9"
												},
												"nodeType": "YulIf",
												"src": "2462:2:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2533:33:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2556:9:9"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "2543:12:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2543:23:9"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "2533:6:9"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_uint256",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "2418:9:9",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "2429:7:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "2441:6:9",
											"type": ""
										}
									],
									"src": "2382:190:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2658:113:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2704:26:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2713:6:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2721:6:9"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2706:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2706:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2706:22:9"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "2679:7:9"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2688:9:9"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "2675:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "2675:23:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2700:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "2671:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2671:32:9"
												},
												"nodeType": "YulIf",
												"src": "2668:2:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2739:26:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2755:9:9"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "2749:5:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2749:16:9"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "2739:6:9"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_uint256_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "2624:9:9",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "2635:7:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "2647:6:9",
											"type": ""
										}
									],
									"src": "2577:194:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2877:125:9",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "2887:26:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2899:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2910:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2895:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2895:18:9"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "2887:4:9"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2929:9:9"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2944:6:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2952:42:9",
																	"type": "",
																	"value": "0xffffffffffffffffffffffffffffffffffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "2940:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "2940:55:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2922:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "2922:74:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2922:74:9"
											}
										]
									},
									"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "2846:9:9",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "2857:6:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "2868:4:9",
											"type": ""
										}
									],
									"src": "2776:226:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "3136:168:9",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "3146:26:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3158:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3169:2:9",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3154:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "3154:18:9"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "3146:4:9"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3188:9:9"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3203:6:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3211:42:9",
																	"type": "",
																	"value": "0xffffffffffffffffffffffffffffffffffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "3199:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "3199:55:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3181:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "3181:74:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3181:74:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3275:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3286:2:9",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3271:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "3271:18:9"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "3291:6:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3264:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "3264:34:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3264:34:9"
											}
										]
									},
									"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "3097:9:9",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "3108:6:9",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "3116:6:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "3127:4:9",
											"type": ""
										}
									],
									"src": "3007:297:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "3404:92:9",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "3414:26:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3426:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3437:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3422:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "3422:18:9"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "3414:4:9"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3456:9:9"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3481:6:9"
																		}
																	],
																	"functionName": {
																		"name": "iszero",
																		"nodeType": "YulIdentifier",
																		"src": "3474:6:9"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3474:14:9"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "3467:6:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "3467:22:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3449:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "3449:41:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3449:41:9"
											}
										]
									},
									"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "3373:9:9",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "3384:6:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "3395:4:9",
											"type": ""
										}
									],
									"src": "3309:187:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "3602:76:9",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "3612:26:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3624:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3635:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3620:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "3620:18:9"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "3612:4:9"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3654:9:9"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "3665:6:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3647:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "3647:25:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3647:25:9"
											}
										]
									},
									"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "3571:9:9",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "3582:6:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "3593:4:9",
											"type": ""
										}
									],
									"src": "3501:177:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "3857:178:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3874:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3885:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3867:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "3867:21:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3867:21:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3908:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3919:2:9",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3904:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "3904:18:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3924:2:9",
															"type": "",
															"value": "28"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3897:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "3897:30:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3897:30:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3947:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3958:2:9",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3943:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "3943:18:9"
														},
														{
															"kind": "string",
															"nodeType": "YulLiteral",
															"src": "3963:30:9",
															"type": "",
															"value": "NOT_APPROVED_AUTHORITY_ERROR"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3936:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "3936:58:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3936:58:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4003:26:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4015:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4026:2:9",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4011:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "4011:18:9"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "4003:4:9"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_stringliteral_5cab10319b63decf21139e86f9f0bf4f47c28716025e33bf532b0e24caf4a311__to_t_string_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "3834:9:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "3848:4:9",
											"type": ""
										}
									],
									"src": "3683:352:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4214:180:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4231:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4242:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4224:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "4224:21:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4224:21:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4265:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4276:2:9",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4261:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "4261:18:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4281:2:9",
															"type": "",
															"value": "30"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4254:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "4254:30:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4254:30:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4304:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4315:2:9",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4300:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "4300:18:9"
														},
														{
															"kind": "string",
															"nodeType": "YulLiteral",
															"src": "4320:32:9",
															"type": "",
															"value": "CALLER_NOT_RIGOBLOCK_DAO_ERROR"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4293:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "4293:60:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4293:60:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4362:26:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4374:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4385:2:9",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4370:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "4370:18:9"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "4362:4:9"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_stringliteral_7388a6f00e4955b514ba544748d1bc8e7d1f4409285dc20fb5afb023240f4a85__to_t_string_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4191:9:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "4205:4:9",
											"type": ""
										}
									],
									"src": "4040:354:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4573:180:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4590:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4601:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4583:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "4583:21:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4583:21:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4624:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4635:2:9",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4620:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "4620:18:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4640:2:9",
															"type": "",
															"value": "30"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4613:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "4613:30:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4613:30:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4663:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4674:2:9",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4659:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "4659:18:9"
														},
														{
															"kind": "string",
															"nodeType": "YulLiteral",
															"src": "4679:32:9",
															"type": "",
															"value": "CALLER_NOT_STAKING_PROXY_ERROR"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4652:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "4652:60:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4652:60:9"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4721:26:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4733:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4744:2:9",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4729:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "4729:18:9"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "4721:4:9"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_stringliteral_c77871824eadc5a8cde3e6350853c2b87764cf994bedd70d86462ca349bb7dea__to_t_string_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4550:9:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "4564:4:9",
											"type": ""
										}
									],
									"src": "4399:354:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4859:76:9",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "4869:26:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4881:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4892:2:9",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4877:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "4877:18:9"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "4869:4:9"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4911:9:9"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "4922:6:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4904:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "4904:25:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4904:25:9"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4828:9:9",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "4839:6:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "4850:4:9",
											"type": ""
										}
									],
									"src": "4758:177:9"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "5097:162:9",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "5107:26:9",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5119:9:9"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5130:2:9",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5115:3:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "5115:18:9"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "5107:4:9"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5149:9:9"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "5160:6:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5142:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "5142:25:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5142:25:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5187:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5198:2:9",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5183:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "5183:18:9"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "5203:6:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5176:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "5176:34:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5176:34:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5230:9:9"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5241:2:9",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5226:3:9"
															},
															"nodeType": "YulFunctionCall",
															"src": "5226:18:9"
														},
														{
															"name": "value2",
															"nodeType": "YulIdentifier",
															"src": "5246:6:9"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5219:6:9"
													},
													"nodeType": "YulFunctionCall",
													"src": "5219:34:9"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5219:34:9"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "5050:9:9",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "5061:6:9",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "5069:6:9",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "5077:6:9",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "5088:4:9",
											"type": ""
										}
									],
									"src": "4940:319:9"
								}
							]
						},
						"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint96_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_struct$_StoredBalance_$363_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 96)\n        let _1 := 0xffffffffffffffff\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, _1))) { revert(value0, value0) }\n        mstore(memPtr, value)\n        mstore(add(memPtr, 32), abi_decode_t_uint96_fromMemory(add(headStart, 32)))\n        mstore(add(memPtr, 64), abi_decode_t_uint96_fromMemory(add(headStart, 64)))\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_5cab10319b63decf21139e86f9f0bf4f47c28716025e33bf532b0e24caf4a311__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"NOT_APPROVED_AUTHORITY_ERROR\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7388a6f00e4955b514ba544748d1bc8e7d1f4409285dc20fb5afb023240f4a85__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"CALLER_NOT_RIGOBLOCK_DAO_ERROR\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c77871824eadc5a8cde3e6350853c2b87764cf994bedd70d86462ca349bb7dea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"CALLER_NOT_STAKING_PROXY_ERROR\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n}",
						"id": 9,
						"language": "Yul",
						"name": "#utility.yul"
					}
				],
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80636fb70c76116100975780637fa36e40116100665780637fa36e40146101d1578063a6c9c443146101e4578063d410e0c2146101ec578063d736d1eb146101ff576100f5565b80636fb70c76146101835780637802815c146101a35780637a9e5e4b146101b65780637f8be859146101c9576100f5565b806342a86d65116100d357806342a86d651461014257806357a15c031461015557806363d5e44d14610168578063663b64f71461017b576100f5565b8063020e0cdb146100fa5780631a88bc661461010f5780633c695d4e1461012d575b600080fd5b61010d610108366004610a5c565b610221565b005b61011761025d565b6040516101249190610bb8565b60405180910390f35b610135610263565b6040516101249190610b66565b610117610150366004610aa5565b61027f565b610117610163366004610aa5565b6102bc565b610117610176366004610a42565b61037c565b61013561038e565b610196610191366004610aa5565b6103aa565b6040516101249190610bad565b61010d6101b1366004610a42565b6103ca565b61010d6101c4366004610a42565b610419565b610135610468565b6101176101df366004610abd565b610484565b6101356106e2565b6101176101fa366004610a42565b6106fe565b61021261020d366004610aa5565b610726565b60405161012493929190610c66565b610229610747565b81610233816107a3565b5073ffffffffffffffffffffffffffffffffffffffff909116600090815260066020526040902055565b60025481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6000818152600560205260408120600301544210156102b357506000818152600560205260409020600301544290036102b7565b5060005b919050565b6000610376600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663634038016040518163ffffffff1660e01b815260040160206040518083038186803b15801561032957600080fd5b505afa15801561033d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103619190610b4e565b830261036b610882565b6301e13380026108bc565b92915050565b60066020526000908152604090205481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60008181526005602052604081206003015442106102b3575060016102b7565b6103d2610747565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610421610747565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b600061048e6108f2565b6000838152600560205260409020600301544210156104af57506000610376565b60006104ba84610943565b90506104c5816102bc565b8311156104d6576000915050610376565b6000848152600560209081526040918290204260029091015560015482517f63403801000000000000000000000000000000000000000000000000000000008152925173ffffffffffffffffffffffffffffffffffffffff909116926363403801926004808301939192829003018186803b15801561055457600080fd5b505afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190610b4e565b600085815260056020819052604082204293909301600390930192909255600280546001019055906064908502600054600480546040517f79c6506800000000000000000000000000000000000000000000000000000000815294909304945073ffffffffffffffffffffffffffffffffffffffff9182169384936379c650689361061c93911691879101610b87565b600060405180830381600087803b15801561063657600080fd5b505af115801561064a573d6000803e3d6000fd5b50506001546040517f79c6506800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80861694506379c6506893506106a69216908990600401610b87565b600060405180830381600087803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b509698975050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205490565b60056020526000908152604090208054600282015460039092015490919083565b60045473ffffffffffffffffffffffffffffffffffffffff1633146107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890610bf8565b60405180910390fd5b565b6003546040517fdcb7a3e000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063dcb7a3e0906107f9908490600401610b66565b60206040518083038186803b15801561081157600080fd5b505afa158015610825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108499190610a85565b61087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890610bc1565b50565b60006361b325204281111561089b5760019150506108b9565b806301dfe200014210156108b35760029150506108b9565b60049150505b90565b60008082116108c757fe5b60008284816108d257fe5b0490508284816108de57fe5b068184020184146108eb57fe5b9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890610c2f565b6001546040517f3e4ad73200000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff1690633e4ad7329061099a908590600401610bb8565b60606040518083038186803b1580156109b257600080fd5b505afa1580156109c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ea9190610ade565b602001516bffffffffffffffffffffffff1692915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102b757600080fd5b80516bffffffffffffffffffffffff811681146102b757600080fd5b600060208284031215610a53578081fd5b6108eb82610a02565b60008060408385031215610a6e578081fd5b610a7783610a02565b946020939093013593505050565b600060208284031215610a96578081fd5b815180151581146108eb578182fd5b600060208284031215610ab6578081fd5b5035919050565b60008060408385031215610acf578182fd5b50508035926020909101359150565b600060608284031215610aef578081fd5b6040516060810167ffffffffffffffff8282108183111715610b0d57fe5b81604052845191508082168214610b22578384fd5b508152610b3160208401610a26565b6020820152610b4260408401610a26565b60408201529392505050565b600060208284031215610b5f578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b90815260200190565b6020808252601c908201527f4e4f545f415050524f5645445f415554484f524954595f4552524f5200000000604082015260600190565b6020808252601e908201527f43414c4c45525f4e4f545f5249474f424c4f434b5f44414f5f4552524f520000604082015260600190565b6020808252601e908201527f43414c4c45525f4e4f545f5354414b494e475f50524f58595f4552524f520000604082015260600190565b928352602083019190915260408201526060019056fea2646970667358221220cc49eca3edadaa5be5593b28acc14e24290c80e13375214803102fb6f797f65164736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FB70C76 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0x7FA36E40 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x7FA36E40 EQ PUSH2 0x1D1 JUMPI DUP1 PUSH4 0xA6C9C443 EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0xD410E0C2 EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0xD736D1EB EQ PUSH2 0x1FF JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x6FB70C76 EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x7802815C EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x7A9E5E4B EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x7F8BE859 EQ PUSH2 0x1C9 JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x42A86D65 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x42A86D65 EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x57A15C03 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x63D5E44D EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x663B64F7 EQ PUSH2 0x17B JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x20E0CDB EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x1A88BC66 EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x3C695D4E EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5C JUMP JUMPDEST PUSH2 0x221 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x117 PUSH2 0x25D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x135 PUSH2 0x263 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xB66 JUMP JUMPDEST PUSH2 0x117 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x27F JUMP JUMPDEST PUSH2 0x117 PUSH2 0x163 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH2 0x117 PUSH2 0x176 CALLDATASIZE PUSH1 0x4 PUSH2 0xA42 JUMP JUMPDEST PUSH2 0x37C JUMP JUMPDEST PUSH2 0x135 PUSH2 0x38E JUMP JUMPDEST PUSH2 0x196 PUSH2 0x191 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x3AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xBAD JUMP JUMPDEST PUSH2 0x10D PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA42 JUMP JUMPDEST PUSH2 0x3CA JUMP JUMPDEST PUSH2 0x10D PUSH2 0x1C4 CALLDATASIZE PUSH1 0x4 PUSH2 0xA42 JUMP JUMPDEST PUSH2 0x419 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x468 JUMP JUMPDEST PUSH2 0x117 PUSH2 0x1DF CALLDATASIZE PUSH1 0x4 PUSH2 0xABD JUMP JUMPDEST PUSH2 0x484 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0x117 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xA42 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST PUSH2 0x212 PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x726 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC66 JUMP JUMPDEST PUSH2 0x229 PUSH2 0x747 JUMP JUMPDEST DUP2 PUSH2 0x233 DUP2 PUSH2 0x7A3 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0x2B3 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP SWAP1 SUB PUSH2 0x2B7 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x376 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x63403801 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x329 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x33D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x361 SWAP2 SWAP1 PUSH2 0xB4E JUMP JUMPDEST DUP4 MUL PUSH2 0x36B PUSH2 0x882 JUMP JUMPDEST PUSH4 0x1E13380 MUL PUSH2 0x8BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x2B3 JUMPI POP PUSH1 0x1 PUSH2 0x2B7 JUMP JUMPDEST PUSH2 0x3D2 PUSH2 0x747 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x421 PUSH2 0x747 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48E PUSH2 0x8F2 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0x4AF JUMPI POP PUSH1 0x0 PUSH2 0x376 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BA DUP5 PUSH2 0x943 JUMP JUMPDEST SWAP1 POP PUSH2 0x4C5 DUP2 PUSH2 0x2BC JUMP JUMPDEST DUP4 GT ISZERO PUSH2 0x4D6 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x376 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 TIMESTAMP PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE PUSH1 0x1 SLOAD DUP3 MLOAD PUSH32 0x6340380100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP3 PUSH4 0x63403801 SWAP3 PUSH1 0x4 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x568 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x58C SWAP2 SWAP1 PUSH2 0xB4E JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 TIMESTAMP SWAP4 SWAP1 SWAP4 ADD PUSH1 0x3 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE SWAP1 PUSH1 0x64 SWAP1 DUP6 MUL PUSH1 0x0 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x79C6506800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP5 SWAP1 SWAP4 DIV SWAP5 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP4 DUP5 SWAP4 PUSH4 0x79C65068 SWAP4 PUSH2 0x61C SWAP4 SWAP2 AND SWAP2 DUP8 SWAP2 ADD PUSH2 0xB87 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x636 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x64A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x79C6506800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND SWAP5 POP PUSH4 0x79C65068 SWAP4 POP PUSH2 0x6A6 SWAP3 AND SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xB87 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP7 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0xBF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0xDCB7A3E000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xDCB7A3E0 SWAP1 PUSH2 0x7F9 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0xB66 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x825 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x849 SWAP2 SWAP1 PUSH2 0xA85 JUMP JUMPDEST PUSH2 0x87F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0xBC1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x61B32520 TIMESTAMP DUP2 GT ISZERO PUSH2 0x89B JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x8B9 JUMP JUMPDEST DUP1 PUSH4 0x1DFE200 ADD TIMESTAMP LT ISZERO PUSH2 0x8B3 JUMPI PUSH1 0x2 SWAP2 POP POP PUSH2 0x8B9 JUMP JUMPDEST PUSH1 0x4 SWAP2 POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x8C7 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x8D2 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP3 DUP5 DUP2 PUSH2 0x8DE JUMPI INVALID JUMPDEST MOD DUP2 DUP5 MUL ADD DUP5 EQ PUSH2 0x8EB JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x3E4AD73200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x3E4AD732 SWAP1 PUSH2 0x99A SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9EA SWAP2 SWAP1 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x20 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA53 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8EB DUP3 PUSH2 0xA02 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA6E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA77 DUP4 PUSH2 0xA02 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA96 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8EB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAB6 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xACF JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAEF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP3 DUP3 LT DUP2 DUP4 GT OR ISZERO PUSH2 0xB0D JUMPI INVALID JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP5 MLOAD SWAP2 POP DUP1 DUP3 AND DUP3 EQ PUSH2 0xB22 JUMPI DUP4 DUP5 REVERT JUMPDEST POP DUP2 MSTORE PUSH2 0xB31 PUSH1 0x20 DUP5 ADD PUSH2 0xA26 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xB42 PUSH1 0x40 DUP5 ADD PUSH2 0xA26 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB5F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F545F415050524F5645445F415554484F524954595F4552524F5200000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x43414C4C45525F4E4F545F5249474F424C4F434B5F44414F5F4552524F520000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x43414C4C45525F4E4F545F5354414B494E475F50524F58595F4552524F520000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0x49 0xEC LOG3 0xED 0xAD 0xAA JUMPDEST 0xE5 MSIZE EXTCODESIZE 0x28 0xAC 0xC1 0x4E 0x24 0x29 0xC DUP1 0xE1 CALLER PUSH22 0x214803102FB6F797F65164736F6C6343000704003300 ",
				"sourceMap": "2218:7861:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5316:245;;;;;;:::i;:::-;;:::i;:::-;;2408:19;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2433:31;;;:::i;:::-;;;;;;;:::i;6852:402::-;;;;;;:::i;:::-;;:::i;7783:376::-;;;;;;:::i;:::-;;:::i;2564:39::-;;;;;;:::i;:::-;;:::i;2341:34::-;;;:::i;6393:301::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5697:178::-;;;;;;:::i;:::-;;:::i;6001:169::-;;;;;;:::i;:::-;;:::i;2470:34::-;;;:::i;3704:1414::-;;;;;;:::i;:::-;;:::i;2304:31::-;;;:::i;7405:183::-;;;;;;:::i;:::-;;:::i;2511:47::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;5316:245::-;2854:29;:27;:29::i;:::-;5476:12:::1;3051:34;3076:8;3051:24;:34::i;:::-;-1:-1:-1::0;5504:20:2::2;::::0;;::::2;;::::0;;;:6:::2;:20;::::0;;;;:50;5316:245::o;2408:19::-;;;;:::o;2433:31::-;;;;;;:::o;6852:402::-;6963:7;7055:25;;;:10;:25;;;;;:33;;;7037:15;:51;7033:167;;;-1:-1:-1;7112:25:2;;;;:10;:25;;;;;:33;;;7148:15;7112:51;;7104:60;;7033:167;-1:-1:-1;7197:1:2;7033:167;6852:402;;;:::o;7783:376::-;7905:7;7935:217;7990:19;;;;;;;;;;;7982:51;;;:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7956:23;:79;8049:28;:26;:28::i;:::-;8080:8;8049:39;7935:7;:217::i;:::-;7928:224;7783:376;-1:-1:-1;;7783:376:2:o;2564:39::-;;;;;;;;;;;;;:::o;2341:34::-;;;;;;:::o;6393:301::-;6501:4;6598:25;;;:10;:25;;;;;:33;;;6579:15;:52;6575:112;;-1:-1:-1;6654:4:2;6647:11;;5697:178;2854:29;:27;:29::i;:::-;5824:19:::1;:44:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;5697:178::o;6001:169::-;2854:29;:27;:29::i;:::-;6125:16:::1;:38:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;6001:169::o;2470:34::-;;;;;;:::o;3704:1414::-;3842:7;2943:29;:27;:29::i;:::-;4144:25:::1;::::0;;;:10:::1;:25;::::0;;;;:33:::1;;::::0;4126:15:::1;:51;4122:99;;;-1:-1:-1::0;4208:1:2::1;4193:17;;4122:99;4260:31;4294:42;4322:13;4294:27;:42::i;:::-;4260:76;;4368:42;4386:23;4368:17;:42::i;:::-;4359:6;:51;4355:99;;;4441:1;4426:17;;;;;4355:99;4519:25;::::0;;;:10:::1;:25;::::0;;;;;;;;4557:15:::1;4519:35;::::0;;::::1;:53:::0;4644:19:::1;::::0;4636:53;;;;;;;4644:19:::1;::::0;;::::1;::::0;4636:51:::1;::::0;:53:::1;::::0;;::::1;::::0;4519:25;;4636:53;;;;;4644:19;4636:53;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4582:25;::::0;;;:10:::1;:25;::::0;;;;;;4618:15:::1;:71:::0;;;::::1;4582:33;::::0;;::::1;:107:::0;;;;4748:4:::1;4746:6:::0;;::::1;;::::0;;4582:25;4804:3:::1;::::0;4791:10;::::1;4847:23;4887:16:::0;4956:19:::1;::::0;;4936:60:::1;::::0;;;;4791:16;;;::::1;::::0;-1:-1:-1;4887:16:2::1;::::0;;::::1;::::0;;;4936:19:::1;::::0;:60:::1;::::0;4956:19;::::1;::::0;4791:16;;4936:60:::1;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;5039:19:2::1;::::0;5006:82:::1;::::0;;;;:19:::1;::::0;;::::1;::::0;-1:-1:-1;5006:19:2::1;::::0;-1:-1:-1;5006:82:2::1;::::0;5039:19:::1;::::0;5072:6;;5006:82:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;5105:6:2;;3704:1414;-1:-1:-1;;;;;;;;3704:1414:2:o;2304:31::-;;;;;;:::o;7405:183::-;7549:20;;7519:7;7549:20;;;:6;:20;;;;;:32;;7405:183::o;2511:47::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8690:193::-;8791:19;;;;8777:10;:33;8773:104;;8826:40;;;;;;;;;;:::i;:::-;;;;;;;;8773:104;8690:193::o;9271:239::-;9382:16;;9372:58;;;;;9382:16;;;;;9372:48;;:58;;9421:8;;9372:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9367:137;;9455:38;;;;;;;;;;:::i;9367:137::-;9271:239;:::o;9621:456::-;9682:7;9732:10;9831:15;:30;-1:-1:-1;9827:196:2;;;9892:1;9877:17;;;;;9827:196;9933:12;9948:8;9933:23;9915:15;:41;9911:112;;;9987:1;9972:17;;;;;9911:112;10021:1;10006:17;;;9621:456;;:::o;226:182:8:-;288:7;318:1;314;:5;307:13;;;;330:9;346:1;342;:5;;;;;;330:17;;381:1;377;:5;;;;;;373:1;369;:5;:13;364:1;:18;357:26;;;;400:1;226:182;-1:-1:-1;;;226:182:8:o;8952:193:2:-;9053:19;;;;9039:10;:33;9035:104;;9088:40;;;;;;;;;;:::i;8356:265::-;8494:19;;8486:85;;;;;8439:7;;8494:19;;;8486:70;;:85;;8557:13;;8486:85;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:118;;;8465:149;;;8356:265;-1:-1:-1;;8356:265:2:o;14:198:9:-;84:20;;144:42;133:54;;123:65;;113:2;;202:1;199;192:12;217:185;297:13;;350:26;339:38;;329:49;;319:2;;392:1;389;382:12;407:198;;519:2;507:9;498:7;494:23;490:32;487:2;;;540:6;532;525:22;487:2;568:31;589:9;568:31;:::i;610:266::-;;;739:2;727:9;718:7;714:23;710:32;707:2;;;760:6;752;745:22;707:2;788:31;809:9;788:31;:::i;:::-;778:41;866:2;851:18;;;;838:32;;-1:-1:-1;;;697:179:9:o;881:297::-;;1001:2;989:9;980:7;976:23;972:32;969:2;;;1022:6;1014;1007:22;969:2;1059:9;1053:16;1112:5;1105:13;1098:21;1091:5;1088:32;1078:2;;1139:6;1131;1124:22;1183:190;;1295:2;1283:9;1274:7;1270:23;1266:32;1263:2;;;1316:6;1308;1301:22;1263:2;-1:-1:-1;1344:23:9;;1253:120;-1:-1:-1;1253:120:9:o;1378:258::-;;;1507:2;1495:9;1486:7;1482:23;1478:32;1475:2;;;1528:6;1520;1513:22;1475:2;-1:-1:-1;;1556:23:9;;;1626:2;1611:18;;;1598:32;;-1:-1:-1;1465:171:9:o;1641:736::-;;1794:2;1782:9;1773:7;1769:23;1765:32;1762:2;;;1815:6;1807;1800:22;1762:2;1853;1847:9;1895:2;1887:6;1883:15;1917:18;1985:6;1973:10;1970:22;1965:2;1953:10;1950:18;1947:46;1944:2;;;1996:9;1944:2;2027:10;2023:2;2016:22;2066:9;2060:16;2047:29;;2116:2;2109:5;2105:14;2098:5;2095:25;2085:2;;2139:6;2131;2124:22;2085:2;-1:-1:-1;2157:21:9;;2211:50;2257:2;2242:18;;2211:50;:::i;:::-;2206:2;2198:6;2194:15;2187:75;2295:50;2341:2;2330:9;2326:18;2295:50;:::i;:::-;2290:2;2278:15;;2271:75;2282:6;1752:625;-1:-1:-1;;;1752:625:9:o;2577:194::-;;2700:2;2688:9;2679:7;2675:23;2671:32;2668:2;;;2721:6;2713;2706:22;2668:2;-1:-1:-1;2749:16:9;;2658:113;-1:-1:-1;2658:113:9:o;2776:226::-;2952:42;2940:55;;;;2922:74;;2910:2;2895:18;;2877:125::o;3007:297::-;3211:42;3199:55;;;;3181:74;;3286:2;3271:18;;3264:34;3169:2;3154:18;;3136:168::o;3309:187::-;3474:14;;3467:22;3449:41;;3437:2;3422:18;;3404:92::o;3501:177::-;3647:25;;;3635:2;3620:18;;3602:76::o;3683:352::-;3885:2;3867:21;;;3924:2;3904:18;;;3897:30;3963;3958:2;3943:18;;3936:58;4026:2;4011:18;;3857:178::o;4040:354::-;4242:2;4224:21;;;4281:2;4261:18;;;4254:30;4320:32;4315:2;4300:18;;4293:60;4385:2;4370:18;;4214:180::o;4399:354::-;4601:2;4583:21;;;4640:2;4620:18;;;4613:30;4679:32;4674:2;4659:18;;4652:60;4744:2;4729:18;;4573:180::o;4940:319::-;5142:25;;;5198:2;5183:18;;5176:34;;;;5241:2;5226:18;;5219:34;5130:2;5115:18;;5097:162::o"
			}
		}
	},
	"sourceTreeHashHex": "0x11a77a9ea7b0d30ba3cee6033bc471cfdea932d15b3de16f3ce99b5fc5da425b",
	"sources": {
		"./Inflation.sol": {
			"id": 2
		},
		"../../protocol/authorities/Authority/AuthorityFace.sol": {
			"id": 1
		},
		"../../utils/SafeMath/SafeMath.sol": {
			"id": 8
		},
		"./InflationFace.sol": {
			"id": 3
		},
		"../RigoToken/RigoTokenFace.sol": {
			"id": 6
		}
	},
	"sourceCodes": {
		"./Inflation.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\n// solhint-disable-next-line\npragma solidity 0.7.4;\npragma experimental ABIEncoderV2;\n\nimport { AuthorityFace as Authority } from \"../../protocol/authorities/Authority/AuthorityFace.sol\";\nimport { SafeMath } from \"../../utils/SafeMath/SafeMath.sol\";\nimport { InflationFace } from \"./InflationFace.sol\";\nimport { RigoTokenFace } from \"../RigoToken/RigoTokenFace.sol\";\n\n\ninterface IStructs {\n    /// @dev Encapsulates a balance for the current and next epochs.\n    /// Note that these balances may be stale if the current epoch\n    /// is greater than `currentEpoch`.\n    /// @param currentEpoch The current epoch\n    /// @param currentEpochBalance Balance in the current epoch.\n    /// @param nextEpochBalance Balance in `currentEpoch+1`.\n    struct StoredBalance {\n        uint64 currentEpoch;\n        uint96 currentEpochBalance;\n        uint96 nextEpochBalance;\n    }\n}\n\ninterface Staking {\n\n    /// @dev Returns the total stake delegated to a specific staking pool,\n    ///      across all members.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Total stake delegated to pool.\n    function getTotalStakeDelegatedToPool(bytes32 poolId)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n    \n    function minimumPoolStake()\n        external\n        view\n        returns (uint256);\n    \n    function epochDurationInSeconds()\n        external\n        view\n        returns (uint256);\n}\n\n/// @title Inflation - Allows ProofOfPerformance to mint tokens.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract Inflation is\n    SafeMath,\n    InflationFace\n{\n    /* solhint-disable */\n    address public RIGOTOKENADDRESS;\n    address public STAKINGPROXYADDRESS;\n    /* solhint-disable */\n\n    uint256 public slot;\n    address public authorityAddress;\n    address public rigoblockDaoAddress;\n\n    mapping(bytes32 => Performer) public performers;\n    mapping(address => Group) public groups;\n\n    struct Performer {\n        uint256 claimedTokens;\n        mapping(uint256 => bool) claim;\n        uint256 startTime;\n        uint256 endTime;\n    }\n\n    struct Group {\n        uint256 epochReward;\n    }\n\n    modifier onlyRigoblockDao {\n        _assertCallerIsRigoblockDao();\n        _;\n    }\n\n    modifier onlyStakingProxy {\n        _assertCallerIsStakingProxy();\n        _;\n    }\n\n    modifier isApprovedFactory(address _factory) {\n        _assertIsApprovedFactory(_factory);\n        _;\n    }\n\n    constructor(\n        address _rigoTokenAddress,\n        address _stakingProxyAddress,\n        address _authorityAddress\n    )\n        //public\n    {\n        RIGOTOKENADDRESS = _rigoTokenAddress;\n        STAKINGPROXYADDRESS = _stakingProxyAddress;\n        rigoblockDaoAddress = msg.sender;\n        authorityAddress = _authorityAddress;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows ProofOfPerformance to mint rewards.\n    /// @param stakingPoolId String of the staking pool.\n    /// @param reward Number of reward in Rigo tokens.\n    /// @return Number of allocated reward.\n    function mintInflation(bytes32 stakingPoolId, uint256 reward)\n        external\n        override\n        onlyStakingProxy\n        returns (uint256)\n    {\n        //TODO: test\n        // in case of staking parameters upgrade, the following conditions may be met\n        // parameters should be updated towards end of an epoch to prevent invalidating rewards\n        // solhint-disable-next-line not-rely-on-time\n        if (block.timestamp < performers[stakingPoolId].endTime) {\n            return uint256(0);\n        }\n        \n        //TODO: test\n        uint256 totalGrgDelegatedToPool = _getTotalGrgDelegatedToPool(stakingPoolId);\n        \n        if (reward > getMaxEpochReward(totalGrgDelegatedToPool)) {\n            return uint256(0);\n        }\n        \n        /* solhint-disable not-rely-on-time */\n        performers[stakingPoolId].startTime = block.timestamp;\n        performers[stakingPoolId].endTime = block.timestamp + Staking(STAKINGPROXYADDRESS).epochDurationInSeconds();\n        /* solhint-disable not-rely-on-time */\n        ++slot;\n        uint256 rigoblockDaoReward = reward * 5 / 100; //5% royalty to rigoblock dao\n        RigoTokenFace rigoToken = RigoTokenFace(RIGOTOKENADDRESS);\n        // TODO: test\n        rigoToken.mintToken(rigoblockDaoAddress, rigoblockDaoReward);\n        rigoToken.mintToken(\n            STAKINGPROXYADDRESS,\n            reward\n        );\n        return reward;\n    }\n\n    /// @dev Allows rigoblock dao to set the inflation factor for a group.\n    /// @param groupAddress Address of the group/factory.\n    /// @param inflationFactor Value of the reward factor.\n    function setInflationFactor(address groupAddress, uint256 inflationFactor)\n        external\n        override\n        onlyRigoblockDao\n        isApprovedFactory(groupAddress)\n    {\n        groups[groupAddress].epochReward = inflationFactor;\n    }\n\n    /// @dev Allows rigoblock dao to upgrade its address.\n    /// @param newRigoblockDaoAddress Address of the new rigoblock dao.\n    function setRigoblock(address newRigoblockDaoAddress)\n        external\n        override\n        onlyRigoblockDao\n    {\n        rigoblockDaoAddress = newRigoblockDaoAddress;\n    }\n\n    /// @dev Allows rigoblock dao to update the authority.\n    /// @param newAuthorityAddress Address of the authority.\n    function setAuthority(address newAuthorityAddress)\n        external\n        override\n        onlyRigoblockDao\n    {\n        authorityAddress = newAuthorityAddress;\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Returns whether a staking pool's reward can be claimed.\n    /// @param stakingPoolId Address of the target pool.\n    /// @return Bool the wizard can claim.\n    function canWithdraw(bytes32 stakingPoolId)\n        external\n        override\n        view\n        returns (bool)\n    {\n        // solhint-disable-next-line not-rely-on-time\n        if (block.timestamp >= performers[stakingPoolId].endTime) {\n            return true;\n        } else return false;\n    }\n\n    /// @dev Returns how much time needed until next claim.\n    /// @param stakingPoolId Address of the target pool.\n    /// @return Number in seconds.\n    function timeUntilClaim(bytes32 stakingPoolId)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        /* solhint-disable not-rely-on-time */\n        if (block.timestamp < performers[stakingPoolId].endTime) {\n            return (performers[stakingPoolId].endTime - block.timestamp);\n        } else return (uint256(0));\n        /* solhint-disable not-rely-on-time */\n    }\n\n    /// @dev Return the reward factor for a group.\n    /// @param groupAddress Address of the group.\n    /// @return Value of the reward factor.\n    function getInflationFactor(address groupAddress)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return groups[groupAddress].epochReward;\n    }\n    \n    /// @dev Returns the max epoch reward of a pool.\n    /// @param totalGrgDelegatedToPool Total amount of GRG delegated to the pool.\n    /// @return Value of the maximum pool reward.\n    function getMaxEpochReward(uint256 totalGrgDelegatedToPool)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return safeDiv(\n            totalGrgDelegatedToPool * Staking(STAKINGPROXYADDRESS).epochDurationInSeconds(),\n            _getDisinflationaryDivisor() * 365 days // multiply in order not to dividing in previous line\n        );\n    }\n    \n    /*\n     * INTERNAL METHODS\n     */\n    /// @dev Returns the amount of GRG staked to a pool.\n    /// @param stakingPoolId ID of the staking pool.\n    /// @return Amount of GRG staked.\n    function _getTotalGrgDelegatedToPool(bytes32 stakingPoolId) internal view returns (uint256) {\n        return uint256(\n            Staking(STAKINGPROXYADDRESS)\n            .getTotalStakeDelegatedToPool(stakingPoolId)\n            .currentEpochBalance\n        );\n    }\n    \n    /// @dev Asserts that the caller is the RigoBlock Dao.\n    function _assertCallerIsRigoblockDao()\n        internal\n        view\n    {\n        if (msg.sender != rigoblockDaoAddress) {\n            revert(\"CALLER_NOT_RIGOBLOCK_DAO_ERROR\");\n        }\n    }\n    \n    /// @dev Asserts that the caller is the Staking Proxy.\n    function _assertCallerIsStakingProxy()\n        internal\n        view\n    {\n        if (msg.sender != STAKINGPROXYADDRESS) {\n            revert(\"CALLER_NOT_STAKING_PROXY_ERROR\");\n        }\n    }\n    \n    /// @dev Asserts that an address is an approved factory.\n    /// @param _factory Address of the target factory.\n    function _assertIsApprovedFactory(address _factory)\n        internal\n        view\n    {\n        if (!Authority(authorityAddress).isWhitelistedFactory(_factory)) \n        {\n            revert(\"NOT_APPROVED_AUTHORITY_ERROR\");\n        }\n    }\n    \n    /// @dev Returns the value of the disinflationary divisor.\n    /// @return Value of the divisor.\n    function _getDisinflationaryDivisor() internal view returns (uint256) {\n        uint256 firstHalving = uint256(1639130400); // 10 Dec 2021 10:00pm UTC\n        /* solhint-disable not-rely-on-time */\n        if (block.timestamp < firstHalving) {\n            return uint256(1);\n        } else if (block.timestamp < firstHalving + 52 weeks) {\n            return uint256(2);\n        } else return uint256(4);\n        /* solhint-disable not-rely-on-time */\n    }\n}\n",
		"../../protocol/authorities/Authority/AuthorityFace.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.8.0;\n\n/// @title Authority Interface - Allows interaction with the Authority contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface AuthorityFace {\n\n    /*\n     * EVENTS\n     */\n    event AuthoritySet(address indexed authority);\n    event WhitelisterSet(address indexed whitelister);\n    event WhitelistedUser(address indexed target, bool approved);\n    event WhitelistedRegistry(address indexed registry, bool approved);\n    event WhitelistedFactory(address indexed factory, bool approved);\n    event WhitelistedVault(address indexed vault, bool approved);\n    event WhitelistedDrago(address indexed drago, bool isWhitelisted);\n    event NewDragoEventful(address indexed dragoEventful);\n    event NewVaultEventful(address indexed vaultEventful);\n    event NewNavVerifier(address indexed navVerifier);\n    event NewExchangesAuthority(address indexed exchangesAuthority);\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function setAuthority(address _authority, bool _isWhitelisted) external;\n    function setWhitelister(address _whitelister, bool _isWhitelisted) external;\n    function whitelistUser(address _target, bool _isWhitelisted) external;\n    function whitelistDrago(address _drago, bool _isWhitelisted) external;\n    function whitelistVault(address _vault, bool _isWhitelisted) external;\n    function whitelistRegistry(address _registry, bool _isWhitelisted) external;\n    function whitelistFactory(address _factory, bool _isWhitelisted) external;\n    function setDragoEventful(address _dragoEventful) external;\n    function setVaultEventful(address _vaultEventful) external;\n    function setNavVerifier(address _navVerifier) external;\n    function setExchangesAuthority(address _exchangesAuthority) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function isWhitelistedUser(address _target) external view returns (bool);\n    function isAuthority(address _authority) external view returns (bool);\n    function isWhitelistedRegistry(address _registry) external view returns (bool);\n    function isWhitelistedDrago(address _drago) external view returns (bool);\n    function isWhitelistedVault(address _vault) external view returns (bool);\n    function isWhitelistedFactory(address _factory) external view returns (bool);\n    function getDragoEventful() external view returns (address);\n    function getVaultEventful() external view returns (address);\n    function getNavVerifier() external view returns (address);\n    function getExchangesAuthority() external view returns (address);\n}\n",
		"../../utils/SafeMath/SafeMath.sol": "pragma solidity >=0.4.22 <0.8.0;\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n",
		"./InflationFace.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.8.0;\n\n/// @title Inflation Interface - Allows interaction with the Inflation contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface InflationFace {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    function mintInflation(bytes32 stakingPoolId, uint256 reward) external returns (uint256);\n    function setInflationFactor(address groupAddress, uint256 inflationFactor) external;\n    function setRigoblock(address newRigoblockDaoAddress) external;\n    function setAuthority(address newRigoblockDaoAddress) external;\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    function canWithdraw(bytes32 stakingPoolId) external view returns (bool);\n    function timeUntilClaim(bytes32 stakingPoolId) external view returns (uint256);\n    function getInflationFactor(address groupAddress) external view returns (uint256);\n    function getMaxEpochReward(uint256 totalGrgDelegatedToPool) external view returns (uint256);\n}\n",
		"../RigoToken/RigoTokenFace.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.5.0;\n\n/// @title Rigo Token Interface - Allows interaction with the Rigo token.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface RigoTokenFace {\n\n    function minter() external view returns (address);\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n\n    function mintToken(address _recipient, uint256 _amount) external;\n    function changeMintingAddress(address _newAddress) external;\n    function changeRigoblockAddress(address _newAddress) external;\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.7.4+commit.3f05b770",
		"settings": {
			"remappings": [],
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}