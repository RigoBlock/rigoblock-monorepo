{
	"schemaVersion": "2.0.0",
	"contractName": "Inflation",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_rigoTokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_stakingProxyAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "RIGO_TOKEN_ADDRESS",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "STAKING_PROXY_ADDRESS",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "epochEnded",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "epochLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getEpochInflation",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "mintInflation",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "mintedInflation",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "slot",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "timeUntilNextClaim",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Gabriele Rigo - <gab@rigoblock.com>",
			"kind": "dev",
			"methods": {
				"epochEnded()": {
					"details": "Returns whether an epoch has ended.",
					"returns": {
						"_0": "Bool the epoch has ended."
					}
				},
				"getEpochInflation()": {
					"details": "Returns the epoch inflation.",
					"returns": {
						"_0": "Value of units of GRG minted in an epoch."
					}
				},
				"mintInflation()": {
					"details": "Allows staking proxy to mint rewards.",
					"returns": {
						"mintedInflation": "Number of allocated tokens."
					}
				},
				"timeUntilNextClaim()": {
					"details": "Returns how long until next claim.",
					"returns": {
						"_0": "Number in seconds."
					}
				}
			},
			"title": "Inflation - Allows ProofOfPerformance to mint tokens.",
			"version": 1
		},
		"evm": {
			"bytecode": {
				"generatedSources": [
					{
						"ast": {
							"nodeType": "YulBlock",
							"src": "0:507:49",
							"statements": [
								{
									"nodeType": "YulBlock",
									"src": "6:3:49",
									"statements": []
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "76:117:49",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "86:22:49",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "101:6:49"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "95:5:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "95:13:49"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "86:5:49"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "171:16:49",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "180:1:49",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "183:1:49",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "173:6:49"
																},
																"nodeType": "YulFunctionCall",
																"src": "173:12:49"
															},
															"nodeType": "YulExpressionStatement",
															"src": "173:12:49"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "130:5:49"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "141:5:49"
																		},
																		{
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "156:3:49",
																							"type": "",
																							"value": "160"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "161:1:49",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "152:3:49"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "152:11:49"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "165:1:49",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "sub",
																				"nodeType": "YulIdentifier",
																				"src": "148:3:49"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "148:19:49"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "137:3:49"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "137:31:49"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "127:2:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "127:42:49"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "120:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "120:50:49"
												},
												"nodeType": "YulIf",
												"src": "117:2:49"
											}
										]
									},
									"name": "abi_decode_t_address_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "55:6:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "66:5:49",
											"type": ""
										}
									],
									"src": "14:179:49"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "296:209:49",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "342:26:49",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "351:6:49"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "359:6:49"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "344:6:49"
																},
																"nodeType": "YulFunctionCall",
																"src": "344:22:49"
															},
															"nodeType": "YulExpressionStatement",
															"src": "344:22:49"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "317:7:49"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "326:9:49"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "313:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "313:23:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "338:2:49",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "309:3:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "309:32:49"
												},
												"nodeType": "YulIf",
												"src": "306:2:49"
											},
											{
												"nodeType": "YulAssignment",
												"src": "377:52:49",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "419:9:49"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "387:31:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "387:42:49"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "377:6:49"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "438:61:49",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "484:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "495:2:49",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "480:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "480:18:49"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "448:31:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "448:51:49"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "438:6:49"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_addresst_address_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "254:9:49",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "265:7:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "277:6:49",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "285:6:49",
											"type": ""
										}
									],
									"src": "198:307:49"
								}
							]
						},
						"contents": "{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n    }\n}",
						"id": 49,
						"language": "Yul",
						"name": "#utility.yul"
					}
				],
				"linkReferences": {},
				"object": "0x610100604052613d0960e61b60c052614e2060e0526212750060015534801561002757600080fd5b5060405161089838038061089883398101604081905261004691610080565b6001600160601b0319606092831b8116608052911b1660a0526100b2565b80516001600160a01b038116811461007b57600080fd5b919050565b60008060408385031215610092578182fd5b61009b83610064565b91506100a960208401610064565b90509250929050565b60805160601c60a05160601c60c05160e01c60e051610790610108600039806104705250806104975250806101b2528061033e52806103a352806104e452508060ff528061031152806103cf52506107906000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636dd739441161005b5780636dd73944146100dd578063c551a2f9146100e5578063c9b185cc146100ed578063e9a0bae7146100f557610088565b80630846a5411461008d578063175db3c4146100ab5780631a88bc66146100c057806357d775f8146100d5575b600080fd5b6100956100fd565b6040516100a29190610634565b60405180910390f35b6100b3610121565b6040516100a2919061067b565b6100c861013b565b6040516100a29190610751565b6100c8610141565b6100c8610147565b6100c861015f565b6100956103a1565b6100c86103c5565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600254421061013457506001610138565b5060005b90565b60005481565b60015481565b60006002544210156101345742600254039050610138565b60006101696104cc565b6002544210156101ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590610686565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635e615a6b6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024e91906105de565b50505050905080600154146102ad576206978081108061027057506276a70081115b156102a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a5906106f4565b60018190555b60006102b76103c5565b905060015442016002819055506102d1600054600161053d565b6000556040517f79c6506800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906379c6506890610368907f0000000000000000000000000000000000000000000000000000000000000000908590600401610655565b600060405180830381600087803b15801561038257600080fd5b505af1158015610396573d6000803e3d6000fd5b509294505050505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006104c76104957f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043357600080fd5b505afa158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b91906105c6565b6001547f00000000000000000000000000000000000000000000000000000000000000000261055f565b7f00000000000000000000000000000000000000000000000000000000000000006301e133800263ffffffff1661057e565b905090565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461053b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a5906106bd565b565b60008282018381108015906105525750828110155b61055857fe5b9392505050565b600082820283158061055257508284828161057657fe5b041461055857fe5b600080821161058957fe5b600082848161059457fe5b0490508284816105a057fe5b0681840201841461055857fe5b805163ffffffff811681146105c157600080fd5b919050565b6000602082840312156105d7578081fd5b5051919050565b600080600080600060a086880312156105f5578081fd5b85519450610605602087016105ad565b93506040860151925061061a606087016105ad565b9150610628608087016105ad565b90509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b60208082526015908201527f4e4f545f454e4f5547485f54494d455f4552524f520000000000000000000000604082015260600190565b6020808252601e908201527f43414c4c45525f4e4f545f5354414b494e475f50524f58595f4552524f520000604082015260600190565b60208082526029908201527f5354414b494e475f45504f43485f54494d455f414e4f4d414c595f444554454360408201527f5445445f4552524f520000000000000000000000000000000000000000000000606082015260800190565b9081526020019056fea2646970667358221220025cec8c01326d99d31577bf8bc375151f492c0494126831e67bdbf8ce9a930d64736f6c63430007040033",
				"opcodes": "PUSH2 0x100 PUSH1 0x40 MSTORE PUSH2 0x3D09 PUSH1 0xE6 SHL PUSH1 0xC0 MSTORE PUSH2 0x4E20 PUSH1 0xE0 MSTORE PUSH3 0x127500 PUSH1 0x1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x898 CODESIZE SUB DUP1 PUSH2 0x898 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x46 SWAP2 PUSH2 0x80 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x80 MSTORE SWAP2 SHL AND PUSH1 0xA0 MSTORE PUSH2 0xB2 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x92 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9B DUP4 PUSH2 0x64 JUMP JUMPDEST SWAP2 POP PUSH2 0xA9 PUSH1 0x20 DUP5 ADD PUSH2 0x64 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0xE0 SHR PUSH1 0xE0 MLOAD PUSH2 0x790 PUSH2 0x108 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x470 MSTORE POP DUP1 PUSH2 0x497 MSTORE POP DUP1 PUSH2 0x1B2 MSTORE DUP1 PUSH2 0x33E MSTORE DUP1 PUSH2 0x3A3 MSTORE DUP1 PUSH2 0x4E4 MSTORE POP DUP1 PUSH1 0xFF MSTORE DUP1 PUSH2 0x311 MSTORE DUP1 PUSH2 0x3CF MSTORE POP PUSH2 0x790 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6DD73944 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6DD73944 EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0xC551A2F9 EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0xC9B185CC EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xE9A0BAE7 EQ PUSH2 0xF5 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x846A541 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x175DB3C4 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x1A88BC66 EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0x57D775F8 EQ PUSH2 0xD5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0xFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x634 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB3 PUSH2 0x121 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x67B JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x13B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x141 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x147 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x15F JUMP JUMPDEST PUSH2 0x95 PUSH2 0x3A1 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x3C5 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD TIMESTAMP LT PUSH2 0x134 JUMPI POP PUSH1 0x1 PUSH2 0x138 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD TIMESTAMP LT ISZERO PUSH2 0x134 JUMPI TIMESTAMP PUSH1 0x2 SLOAD SUB SWAP1 POP PUSH2 0x138 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x169 PUSH2 0x4CC JUMP JUMPDEST PUSH1 0x2 SLOAD TIMESTAMP LT ISZERO PUSH2 0x1AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x686 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5E615A6B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x24E SWAP2 SWAP1 PUSH2 0x5DE JUMP JUMPDEST POP POP POP POP SWAP1 POP DUP1 PUSH1 0x1 SLOAD EQ PUSH2 0x2AD JUMPI PUSH3 0x69780 DUP2 LT DUP1 PUSH2 0x270 JUMPI POP PUSH3 0x76A700 DUP2 GT JUMPDEST ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x6F4 JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE JUMPDEST PUSH1 0x0 PUSH2 0x2B7 PUSH2 0x3C5 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SLOAD TIMESTAMP ADD PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH2 0x2D1 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH2 0x53D JUMP JUMPDEST PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD PUSH32 0x79C6506800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x79C65068 SWAP1 PUSH2 0x368 SWAP1 PUSH32 0x0 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x655 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x396 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP3 SWAP5 POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C7 PUSH2 0x495 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x447 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x46B SWAP2 SWAP1 PUSH2 0x5C6 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH32 0x0 MUL PUSH2 0x55F JUMP JUMPDEST PUSH32 0x0 PUSH4 0x1E13380 MUL PUSH4 0xFFFFFFFF AND PUSH2 0x57E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x53B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x6BD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT DUP1 ISZERO SWAP1 PUSH2 0x552 JUMPI POP DUP3 DUP2 LT ISZERO JUMPDEST PUSH2 0x558 JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x552 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x576 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x558 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x589 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x594 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP3 DUP5 DUP2 PUSH2 0x5A0 JUMPI INVALID JUMPDEST MOD DUP2 DUP5 MUL ADD DUP5 EQ PUSH2 0x558 JUMPI INVALID JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5D7 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x5F5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 MLOAD SWAP5 POP PUSH2 0x605 PUSH1 0x20 DUP8 ADD PUSH2 0x5AD JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP3 POP PUSH2 0x61A PUSH1 0x60 DUP8 ADD PUSH2 0x5AD JUMP JUMPDEST SWAP2 POP PUSH2 0x628 PUSH1 0x80 DUP8 ADD PUSH2 0x5AD JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F545F454E4F5547485F54494D455F4552524F520000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x43414C4C45525F4E4F545F5354414B494E475F50524F58595F4552524F520000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5354414B494E475F45504F43485F54494D455F414E4F4D414C595F4445544543 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5445445F4552524F520000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0x5C 0xEC DUP13 ADD ORIGIN PUSH14 0x99D31577BF8BC375151F492C0494 SLT PUSH9 0x31E67BDBF8CE9A930D PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
				"sourceMap": "1129:3709:2:-:0;;;-1:-1:-1;;;1291:49:2;;1426:9;1291:49;1375:60;1519:7;1490:36;;1657:200;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;1758:38:2;;;;;;;;1806:44;;;;;1129:3709;;14:179:49;95:13;;-1:-1:-1;;;;;137:31:49;;127:42;;117:2;;183:1;180;173:12;117:2;76:117;;;:::o;198:307::-;;;338:2;326:9;317:7;313:23;309:32;306:2;;;359:6;351;344:22;306:2;387:42;419:9;387:42;:::i;:::-;377:52;;448:51;495:2;484:9;480:18;448:51;:::i;:::-;438:61;;296:209;;;;;:::o;:::-;1129:3709:2;;;;;;;;;;;;;;;;;;;;;;;;"
			},
			"deployedBytecode": {
				"generatedSources": [
					{
						"ast": {
							"nodeType": "YulBlock",
							"src": "0:2927:49",
							"statements": [
								{
									"nodeType": "YulBlock",
									"src": "6:3:49",
									"statements": []
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "75:108:49",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "85:22:49",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "100:6:49"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "94:5:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "94:13:49"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "85:5:49"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "161:16:49",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "170:1:49",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "173:1:49",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "163:6:49"
																},
																"nodeType": "YulFunctionCall",
																"src": "163:12:49"
															},
															"nodeType": "YulExpressionStatement",
															"src": "163:12:49"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "129:5:49"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "140:5:49"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "147:10:49",
																			"type": "",
																			"value": "0xffffffff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "136:3:49"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "136:22:49"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "126:2:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "126:33:49"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "119:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "119:41:49"
												},
												"nodeType": "YulIf",
												"src": "116:2:49"
											}
										]
									},
									"name": "abi_decode_t_uint32_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "54:6:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "65:5:49",
											"type": ""
										}
									],
									"src": "14:169:49"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "269:113:49",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "315:26:49",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "324:6:49"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "332:6:49"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "317:6:49"
																},
																"nodeType": "YulFunctionCall",
																"src": "317:22:49"
															},
															"nodeType": "YulExpressionStatement",
															"src": "317:22:49"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "290:7:49"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "299:9:49"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "286:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "286:23:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "311:2:49",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "282:3:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "282:32:49"
												},
												"nodeType": "YulIf",
												"src": "279:2:49"
											},
											{
												"nodeType": "YulAssignment",
												"src": "350:26:49",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "366:9:49"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "360:5:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "360:16:49"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "350:6:49"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_uint256_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "235:9:49",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "246:7:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "258:6:49",
											"type": ""
										}
									],
									"src": "188:194:49"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "533:366:49",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "580:26:49",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "589:6:49"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "597:6:49"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "582:6:49"
																},
																"nodeType": "YulFunctionCall",
																"src": "582:22:49"
															},
															"nodeType": "YulExpressionStatement",
															"src": "582:22:49"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "554:7:49"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "563:9:49"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "550:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "550:23:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "575:3:49",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "546:3:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "546:33:49"
												},
												"nodeType": "YulIf",
												"src": "543:2:49"
											},
											{
												"nodeType": "YulAssignment",
												"src": "615:26:49",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "631:9:49"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "625:5:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "625:16:49"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "615:6:49"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "650:60:49",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "695:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "706:2:49",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "691:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "691:18:49"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint32_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "660:30:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "660:50:49"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "650:6:49"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "719:35:49",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "739:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "750:2:49",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "735:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "735:18:49"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "729:5:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "729:25:49"
												},
												"variableNames": [
													{
														"name": "value2",
														"nodeType": "YulIdentifier",
														"src": "719:6:49"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "763:60:49",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "808:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "819:2:49",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "804:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "804:18:49"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint32_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "773:30:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "773:50:49"
												},
												"variableNames": [
													{
														"name": "value3",
														"nodeType": "YulIdentifier",
														"src": "763:6:49"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "832:61:49",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "877:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "888:3:49",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "873:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "873:19:49"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint32_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "842:30:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "842:51:49"
												},
												"variableNames": [
													{
														"name": "value4",
														"nodeType": "YulIdentifier",
														"src": "832:6:49"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_uint256t_uint32t_uint256t_uint32t_uint32_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "467:9:49",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "478:7:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "490:6:49",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "498:6:49",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "506:6:49",
											"type": ""
										},
										{
											"name": "value3",
											"nodeType": "YulTypedName",
											"src": "514:6:49",
											"type": ""
										},
										{
											"name": "value4",
											"nodeType": "YulTypedName",
											"src": "522:6:49",
											"type": ""
										}
									],
									"src": "387:512:49"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1005:125:49",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "1015:26:49",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1027:9:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1038:2:49",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1023:3:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "1023:18:49"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "1015:4:49"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1057:9:49"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1072:6:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1080:42:49",
																	"type": "",
																	"value": "0xffffffffffffffffffffffffffffffffffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "1068:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "1068:55:49"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "1050:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "1050:74:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1050:74:49"
											}
										]
									},
									"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "974:9:49",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "985:6:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "996:4:49",
											"type": ""
										}
									],
									"src": "904:226:49"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1264:168:49",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "1274:26:49",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1286:9:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1297:2:49",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1282:3:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "1282:18:49"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "1274:4:49"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1316:9:49"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1331:6:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1339:42:49",
																	"type": "",
																	"value": "0xffffffffffffffffffffffffffffffffffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "1327:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "1327:55:49"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "1309:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "1309:74:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1309:74:49"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1403:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1414:2:49",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1399:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "1399:18:49"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "1419:6:49"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "1392:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "1392:34:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1392:34:49"
											}
										]
									},
									"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1225:9:49",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "1236:6:49",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "1244:6:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "1255:4:49",
											"type": ""
										}
									],
									"src": "1135:297:49"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1532:92:49",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "1542:26:49",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1554:9:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1565:2:49",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1550:3:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "1550:18:49"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "1542:4:49"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1584:9:49"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1609:6:49"
																		}
																	],
																	"functionName": {
																		"name": "iszero",
																		"nodeType": "YulIdentifier",
																		"src": "1602:6:49"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1602:14:49"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "1595:6:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "1595:22:49"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "1577:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "1577:41:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1577:41:49"
											}
										]
									},
									"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1501:9:49",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "1512:6:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "1523:4:49",
											"type": ""
										}
									],
									"src": "1437:187:49"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1803:171:49",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1820:9:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1831:2:49",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "1813:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "1813:21:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1813:21:49"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1854:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1865:2:49",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1850:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "1850:18:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1870:2:49",
															"type": "",
															"value": "21"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "1843:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "1843:30:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1843:30:49"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1893:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1904:2:49",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1889:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "1889:18:49"
														},
														{
															"kind": "string",
															"nodeType": "YulLiteral",
															"src": "1909:23:49",
															"type": "",
															"value": "NOT_ENOUGH_TIME_ERROR"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "1882:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "1882:51:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1882:51:49"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1942:26:49",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1954:9:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1965:2:49",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1950:3:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "1950:18:49"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "1942:4:49"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_stringliteral_03d51df9c14cc8d9cd63cf0f9bd706d9709a721489386fe3d62214f85a188c08__to_t_string_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1780:9:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "1794:4:49",
											"type": ""
										}
									],
									"src": "1629:345:49"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2153:180:49",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2170:9:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2181:2:49",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2163:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "2163:21:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2163:21:49"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2204:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2215:2:49",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2200:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "2200:18:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2220:2:49",
															"type": "",
															"value": "30"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2193:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "2193:30:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2193:30:49"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2243:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2254:2:49",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2239:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "2239:18:49"
														},
														{
															"kind": "string",
															"nodeType": "YulLiteral",
															"src": "2259:32:49",
															"type": "",
															"value": "CALLER_NOT_STAKING_PROXY_ERROR"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2232:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "2232:60:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2232:60:49"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2301:26:49",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2313:9:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2324:2:49",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2309:3:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "2309:18:49"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "2301:4:49"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_stringliteral_c77871824eadc5a8cde3e6350853c2b87764cf994bedd70d86462ca349bb7dea__to_t_string_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "2130:9:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "2144:4:49",
											"type": ""
										}
									],
									"src": "1979:354:49"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2512:231:49",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2529:9:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2540:2:49",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2522:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "2522:21:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2522:21:49"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2563:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2574:2:49",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2559:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "2559:18:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2579:2:49",
															"type": "",
															"value": "41"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2552:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "2552:30:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2552:30:49"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2602:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2613:2:49",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2598:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "2598:18:49"
														},
														{
															"kind": "string",
															"nodeType": "YulLiteral",
															"src": "2618:34:49",
															"type": "",
															"value": "STAKING_EPOCH_TIME_ANOMALY_DETEC"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2591:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "2591:62:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2591:62:49"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2673:9:49"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2684:2:49",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2669:3:49"
															},
															"nodeType": "YulFunctionCall",
															"src": "2669:18:49"
														},
														{
															"kind": "string",
															"nodeType": "YulLiteral",
															"src": "2689:11:49",
															"type": "",
															"value": "TED_ERROR"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2662:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "2662:39:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2662:39:49"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2710:27:49",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2722:9:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2733:3:49",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2718:3:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "2718:19:49"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "2710:4:49"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_stringliteral_e310256dbc0a2f1ddfe062cef92963cee98833de44f553ac533f407e0b3f10c0__to_t_string_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "2489:9:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "2503:4:49",
											"type": ""
										}
									],
									"src": "2338:405:49"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2849:76:49",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "2859:26:49",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2871:9:49"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2882:2:49",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2867:3:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "2867:18:49"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "2859:4:49"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2901:9:49"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "2912:6:49"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2894:6:49"
													},
													"nodeType": "YulFunctionCall",
													"src": "2894:25:49"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2894:25:49"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "2818:9:49",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "2829:6:49",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "2840:4:49",
											"type": ""
										}
									],
									"src": "2748:177:49"
								}
							]
						},
						"contents": "{\n    { }\n    function abi_decode_t_uint32_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint32t_uint256t_uint32t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value4, value4) }\n        value0 := mload(headStart)\n        value1 := abi_decode_t_uint32_fromMemory(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := abi_decode_t_uint32_fromMemory(add(headStart, 96))\n        value4 := abi_decode_t_uint32_fromMemory(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_stringliteral_03d51df9c14cc8d9cd63cf0f9bd706d9709a721489386fe3d62214f85a188c08__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"NOT_ENOUGH_TIME_ERROR\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c77871824eadc5a8cde3e6350853c2b87764cf994bedd70d86462ca349bb7dea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"CALLER_NOT_STAKING_PROXY_ERROR\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e310256dbc0a2f1ddfe062cef92963cee98833de44f553ac533f407e0b3f10c0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"STAKING_EPOCH_TIME_ANOMALY_DETEC\")\n        mstore(add(headStart, 96), \"TED_ERROR\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
						"id": 49,
						"language": "Yul",
						"name": "#utility.yul"
					}
				],
				"immutableReferences": {
					"363": [
						{
							"length": 32,
							"start": 255
						},
						{
							"length": 32,
							"start": 785
						},
						{
							"length": 32,
							"start": 975
						}
					],
					"365": [
						{
							"length": 32,
							"start": 434
						},
						{
							"length": 32,
							"start": 830
						},
						{
							"length": 32,
							"start": 931
						},
						{
							"length": 32,
							"start": 1252
						}
					],
					"370": [
						{
							"length": 32,
							"start": 1175
						}
					],
					"377": [
						{
							"length": 32,
							"start": 1136
						}
					]
				},
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80636dd739441161005b5780636dd73944146100dd578063c551a2f9146100e5578063c9b185cc146100ed578063e9a0bae7146100f557610088565b80630846a5411461008d578063175db3c4146100ab5780631a88bc66146100c057806357d775f8146100d5575b600080fd5b6100956100fd565b6040516100a29190610634565b60405180910390f35b6100b3610121565b6040516100a2919061067b565b6100c861013b565b6040516100a29190610751565b6100c8610141565b6100c8610147565b6100c861015f565b6100956103a1565b6100c86103c5565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600254421061013457506001610138565b5060005b90565b60005481565b60015481565b60006002544210156101345742600254039050610138565b60006101696104cc565b6002544210156101ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a590610686565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635e615a6b6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024e91906105de565b50505050905080600154146102ad576206978081108061027057506276a70081115b156102a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a5906106f4565b60018190555b60006102b76103c5565b905060015442016002819055506102d1600054600161053d565b6000556040517f79c6506800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906379c6506890610368907f0000000000000000000000000000000000000000000000000000000000000000908590600401610655565b600060405180830381600087803b15801561038257600080fd5b505af1158015610396573d6000803e3d6000fd5b509294505050505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006104c76104957f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043357600080fd5b505afa158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b91906105c6565b6001547f00000000000000000000000000000000000000000000000000000000000000000261055f565b7f00000000000000000000000000000000000000000000000000000000000000006301e133800263ffffffff1661057e565b905090565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461053b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a5906106bd565b565b60008282018381108015906105525750828110155b61055857fe5b9392505050565b600082820283158061055257508284828161057657fe5b041461055857fe5b600080821161058957fe5b600082848161059457fe5b0490508284816105a057fe5b0681840201841461055857fe5b805163ffffffff811681146105c157600080fd5b919050565b6000602082840312156105d7578081fd5b5051919050565b600080600080600060a086880312156105f5578081fd5b85519450610605602087016105ad565b93506040860151925061061a606087016105ad565b9150610628608087016105ad565b90509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b60208082526015908201527f4e4f545f454e4f5547485f54494d455f4552524f520000000000000000000000604082015260600190565b6020808252601e908201527f43414c4c45525f4e4f545f5354414b494e475f50524f58595f4552524f520000604082015260600190565b60208082526029908201527f5354414b494e475f45504f43485f54494d455f414e4f4d414c595f444554454360408201527f5445445f4552524f520000000000000000000000000000000000000000000000606082015260800190565b9081526020019056fea2646970667358221220025cec8c01326d99d31577bf8bc375151f492c0494126831e67bdbf8ce9a930d64736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6DD73944 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6DD73944 EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0xC551A2F9 EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0xC9B185CC EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xE9A0BAE7 EQ PUSH2 0xF5 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x846A541 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x175DB3C4 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x1A88BC66 EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0x57D775F8 EQ PUSH2 0xD5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0xFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x634 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB3 PUSH2 0x121 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x67B JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x13B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x141 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x147 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x15F JUMP JUMPDEST PUSH2 0x95 PUSH2 0x3A1 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x3C5 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD TIMESTAMP LT PUSH2 0x134 JUMPI POP PUSH1 0x1 PUSH2 0x138 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD TIMESTAMP LT ISZERO PUSH2 0x134 JUMPI TIMESTAMP PUSH1 0x2 SLOAD SUB SWAP1 POP PUSH2 0x138 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x169 PUSH2 0x4CC JUMP JUMPDEST PUSH1 0x2 SLOAD TIMESTAMP LT ISZERO PUSH2 0x1AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x686 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5E615A6B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x24E SWAP2 SWAP1 PUSH2 0x5DE JUMP JUMPDEST POP POP POP POP SWAP1 POP DUP1 PUSH1 0x1 SLOAD EQ PUSH2 0x2AD JUMPI PUSH3 0x69780 DUP2 LT DUP1 PUSH2 0x270 JUMPI POP PUSH3 0x76A700 DUP2 GT JUMPDEST ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x6F4 JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE JUMPDEST PUSH1 0x0 PUSH2 0x2B7 PUSH2 0x3C5 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SLOAD TIMESTAMP ADD PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH2 0x2D1 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH2 0x53D JUMP JUMPDEST PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD PUSH32 0x79C6506800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x79C65068 SWAP1 PUSH2 0x368 SWAP1 PUSH32 0x0 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x655 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x396 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP3 SWAP5 POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C7 PUSH2 0x495 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x447 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x46B SWAP2 SWAP1 PUSH2 0x5C6 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH32 0x0 MUL PUSH2 0x55F JUMP JUMPDEST PUSH32 0x0 PUSH4 0x1E13380 MUL PUSH4 0xFFFFFFFF AND PUSH2 0x57E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x53B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP1 PUSH2 0x6BD JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT DUP1 ISZERO SWAP1 PUSH2 0x552 JUMPI POP DUP3 DUP2 LT ISZERO JUMPDEST PUSH2 0x558 JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 0x552 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x576 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x558 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x589 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x594 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP3 DUP5 DUP2 PUSH2 0x5A0 JUMPI INVALID JUMPDEST MOD DUP2 DUP5 MUL ADD DUP5 EQ PUSH2 0x558 JUMPI INVALID JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5D7 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x5F5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 MLOAD SWAP5 POP PUSH2 0x605 PUSH1 0x20 DUP8 ADD PUSH2 0x5AD JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP3 POP PUSH2 0x61A PUSH1 0x60 DUP8 ADD PUSH2 0x5AD JUMP JUMPDEST SWAP2 POP PUSH2 0x628 PUSH1 0x80 DUP8 ADD PUSH2 0x5AD JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E4F545F454E4F5547485F54494D455F4552524F520000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x43414C4C45525F4E4F545F5354414B494E475F50524F58595F4552524F520000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5354414B494E475F45504F43485F54494D455F414E4F4D414C595F4445544543 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5445445F4552524F520000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0x5C 0xEC DUP13 ADD ORIGIN PUSH14 0x99D31577BF8BC375151F492C0494 SLT PUSH9 0x31E67BDBF8CE9A930D PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
				"sourceMap": "1129:3709:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1189:43;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3379:258;;;:::i;:::-;;;;;;;:::i;1465:19::-;;;:::i;:::-;;;;;;;:::i;1490:36::-;;;:::i;3726:343::-;;;:::i;2011:1223::-;;;:::i;1238:46::-;;;:::i;4175:362::-;;;:::i;1189:43::-;;;:::o;3379:258::-;3465:4;3562:12;;3543:15;:31;3539:91;;-1:-1:-1;3597:4:2;3590:11;;3539:91;-1:-1:-1;3625:5:2;3539:91;3379:258;:::o;1465:19::-;;;;:::o;1490:36::-;;;;:::o;3726:343::-;3820:7;3912:12;;3894:15;:30;3890:125;;;3963:15;3948:12;;:30;3940:39;;;;2011:1223;2112:23;1604:29;:27;:29::i;:::-;2248:12:::1;;2230:15;:30;2226:92;;;2276:31;;;;;;;;;;:::i;:::-;;;;;;;;2226:92;2329:30;2380:21;2371:41;;;:43;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2328:86;;;;;;2506:22;2491:11;;:37;2487:299;;2573:6;2548:22;:31;:67;;;;2608:7;2583:22;:32;2548:67;2544:232;;;2635:51;;;;;;;;;;:::i;2544:232::-;2725:11;:36:::0;;;2544:232:::1;2817:22;2842:19;:17;:19::i;:::-;2817:44;;2959:11;;2941:15;:29;2926:12;:44;;;;2987:16;2995:4;;3001:1;2987:7;:16::i;:::-;2980:4;:23:::0;3060:116:::1;::::0;;;;:43:::1;3074:18;3060:43;::::0;::::1;::::0;:116:::1;::::0;3117:21:::1;::::0;3152:14;;3060:116:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;3212:14:2;;-1:-1:-1;;;;;2011:1223:2;:::o;1238:46::-;;;:::o;4175:362::-;4266:7;4318:212;4339:139;4378:18;4364:45;;;:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4453:11;;4429:21;:35;4339:7;:139::i;:::-;4493:15;4511:8;4493:26;4318:212;;:7;:212::i;:::-;4311:219;;4175:362;:::o;4641:195::-;4728:10;:35;4742:21;4728:35;;4724:106;;4779:40;;;;;;;;;;:::i;4724:106::-;4641:195::o;544:153:48:-;606:7;637:5;;;659:4;;;;;;:12;;;670:1;667;:4;;659:12;652:20;;;;689:1;544:153;-1:-1:-1;;;544:153:48:o;59:161::-;121:7;152:5;;;174:6;;;:20;;;193:1;188;184;:5;;;;;;:10;167:28;;;226:182;288:7;318:1;314;:5;307:13;;;;330:9;346:1;342;:5;;;;;;330:17;;381:1;377;:5;;;;;;373:1;369;:5;:13;364:1;:18;357:26;;;14:169:49;94:13;;147:10;136:22;;126:33;;116:2;;173:1;170;163:12;116:2;75:108;;;:::o;188:194::-;;311:2;299:9;290:7;286:23;282:32;279:2;;;332:6;324;317:22;279:2;-1:-1:-1;360:16:49;;269:113;-1:-1:-1;269:113:49:o;387:512::-;;;;;;575:3;563:9;554:7;550:23;546:33;543:2;;;597:6;589;582:22;543:2;631:9;625:16;615:26;;660:50;706:2;695:9;691:18;660:50;:::i;:::-;650:60;;750:2;739:9;735:18;729:25;719:35;;773:50;819:2;808:9;804:18;773:50;:::i;:::-;763:60;;842:51;888:3;877:9;873:19;842:51;:::i;:::-;832:61;;533:366;;;;;;;;:::o;904:226::-;1080:42;1068:55;;;;1050:74;;1038:2;1023:18;;1005:125::o;1135:297::-;1339:42;1327:55;;;;1309:74;;1414:2;1399:18;;1392:34;1297:2;1282:18;;1264:168::o;1437:187::-;1602:14;;1595:22;1577:41;;1565:2;1550:18;;1532:92::o;1629:345::-;1831:2;1813:21;;;1870:2;1850:18;;;1843:30;1909:23;1904:2;1889:18;;1882:51;1965:2;1950:18;;1803:171::o;1979:354::-;2181:2;2163:21;;;2220:2;2200:18;;;2193:30;2259:32;2254:2;2239:18;;2232:60;2324:2;2309:18;;2153:180::o;2338:405::-;2540:2;2522:21;;;2579:2;2559:18;;;2552:30;2618:34;2613:2;2598:18;;2591:62;2689:11;2684:2;2669:18;;2662:39;2733:3;2718:19;;2512:231::o;2748:177::-;2894:25;;;2882:2;2867:18;;2849:76::o"
			}
		}
	},
	"sourceTreeHashHex": "0xa73e92620d4242acc93fd9558c28ed0def2034905236e272e17c8a9b082b3a4e",
	"sources": {
		"./Inflation.sol": {
			"id": 2
		},
		"../../utils/SafeMath/SafeMath.sol": {
			"id": 48
		},
		"./InflationFace.sol": {
			"id": 3
		},
		"../RigoToken/RigoTokenFace.sol": {
			"id": 6
		},
		"../../staking/interfaces/IStaking.sol": {
			"id": 12
		},
		"../../utils/0xUtils/IEtherToken.sol": {
			"id": 35
		},
		"../../utils/0xUtils/IERC20Token.sol": {
			"id": 34
		},
		"../../staking/interfaces/IStructs.sol": {
			"id": 15
		},
		"../../staking/interfaces/IGrgVault.sol": {
			"id": 11
		}
	},
	"sourceCodes": {
		"./Inflation.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\n// solhint-disable-next-line\npragma solidity 0.7.4;\npragma experimental ABIEncoderV2;\n\nimport { SafeMath } from \"../../utils/SafeMath/SafeMath.sol\";\nimport { InflationFace } from \"./InflationFace.sol\";\nimport { RigoTokenFace } from \"../RigoToken/RigoTokenFace.sol\";\nimport { IStaking } from \"../../staking/interfaces/IStaking.sol\";\n\n\n/// @title Inflation - Allows ProofOfPerformance to mint tokens.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ncontract Inflation is\n    SafeMath,\n    InflationFace\n{\n    address public immutable RIGO_TOKEN_ADDRESS;\n    address public immutable STAKING_PROXY_ADDRESS;\n\n    uint32 internal immutable PPM_DENOMINATOR = 10**6; // 100% in parts-per-million\n    uint256 internal immutable ANNUAL_INFLATION_RATE = 2 * 10**4; // 2% annual inflation\n\n    uint256 public slot;\n    uint256 public epochLength = 14 days;\n\n    uint256 private epochEndTime;\n\n    modifier onlyStakingProxy {\n        _assertCallerIsStakingProxy();\n        _;\n    }\n\n    constructor(\n        address _rigoTokenAddress,\n        address _stakingProxyAddress\n    ) {\n        RIGO_TOKEN_ADDRESS = _rigoTokenAddress;\n        STAKING_PROXY_ADDRESS = _stakingProxyAddress;\n    }\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows staking proxy to mint rewards.\n    /// @return mintedInflation Number of allocated tokens.\n    function mintInflation()\n        external\n        override\n        onlyStakingProxy\n        returns (uint256 mintedInflation)\n    {\n        //TODO: test\n        // solhint-disable-next-line not-rely-on-time\n        if (block.timestamp < epochEndTime) {\n            revert(\"NOT_ENOUGH_TIME_ERROR\");\n        }\n\n        (uint256 epochDurationInSeconds, , , , ) = IStaking(STAKING_PROXY_ADDRESS).getParams();\n\n        // sanity check for epoch length queried from staking\n        if (epochLength != epochDurationInSeconds) {\n            if (epochDurationInSeconds < 5 days || epochDurationInSeconds > 90 days) {\n                revert(\"STAKING_EPOCH_TIME_ANOMALY_DETECTED_ERROR\");\n            } else {\n                epochLength = epochDurationInSeconds;\n            }\n        }\n\n        //TODO: test\n        uint256 epochInflation = getEpochInflation();\n\n        // solhint-disable-next-line not-rely-on-time\n        epochEndTime = block.timestamp + epochLength;\n        slot = safeAdd(slot, 1);\n\n        // TODO: test\n        // mint rewards\n        RigoTokenFace(RIGO_TOKEN_ADDRESS).mintToken(\n            STAKING_PROXY_ADDRESS,\n            epochInflation\n        );\n        return (mintedInflation = epochInflation);\n    }\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Returns whether an epoch has ended.\n    /// @return Bool the epoch has ended.\n    function epochEnded()\n        external\n        override\n        view\n        returns (bool)\n    {\n        // solhint-disable-next-line not-rely-on-time\n        if (block.timestamp >= epochEndTime) {\n            return true;\n        } else return false;\n    }\n\n    /// @dev Returns how long until next claim.\n    /// @return Number in seconds.\n    function timeUntilNextClaim()\n        external\n        view\n        override\n        returns (uint256)\n    {\n        /* solhint-disable not-rely-on-time */\n        if (block.timestamp < epochEndTime) {\n            return (epochEndTime - block.timestamp);\n        } else return (uint256(0));\n        /* solhint-disable not-rely-on-time */\n    }\n\n    /// @dev Returns the epoch inflation.\n    /// @return Value of units of GRG minted in an epoch.\n    function getEpochInflation()\n        public\n        view\n        override\n        returns (uint256)\n    {\n        // TODO: test\n        return safeDiv(\n            safeMul(\n                RigoTokenFace(RIGO_TOKEN_ADDRESS).totalSupply(),\n                ANNUAL_INFLATION_RATE * epochLength\n            ),\n            (PPM_DENOMINATOR * 365 days)\n        );\n    }\n\n    /*\n     * INTERNAL METHODS\n     */\n    /// @dev Asserts that the caller is the Staking Proxy.\n    function _assertCallerIsStakingProxy()\n        internal\n        view\n    {\n        if (msg.sender != STAKING_PROXY_ADDRESS) {\n            revert(\"CALLER_NOT_STAKING_PROXY_ERROR\");\n        }\n    }\n}\n",
		"../../utils/SafeMath/SafeMath.sol": "pragma solidity >=0.4.22 <0.8.0;\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n",
		"./InflationFace.sol": "/*\n\n Copyright 2017-2019 RigoBlock, Rigo Investment Sagl, 2020 Rigo Intl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.4.22 <0.8.0;\n\n/// @title Inflation Interface - Allows interaction with the Inflation contract.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface InflationFace {\n\n    /*\n     * CORE FUNCTIONS\n     */\n    /// @dev Allows staking proxy to mint rewards.\n    /// @return mintedInflation Number of allocated tokens.\n    function mintInflation() external returns (uint256 mintedInflation);\n\n    /*\n     * CONSTANT PUBLIC FUNCTIONS\n     */\n    /// @dev Returns whether an epoch has ended.\n    /// @return Bool the epoch has ended.\n    function epochEnded() external view returns (bool);\n    \n    /// @dev Returns how long until next claim.\n    /// @return Number in seconds.\n    function timeUntilNextClaim() external view returns (uint256);\n    \n    /// @dev Returns the epoch inflation.\n    /// @return Value of units of GRG minted in an epoch.\n    function getEpochInflation() external view returns (uint256);\n}\n",
		"../RigoToken/RigoTokenFace.sol": "/*\n\n Copyright 2017-2018 RigoBlock, Rigo Investment Sagl.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n*/\n\npragma solidity >=0.5.0;\n\n/// @title Rigo Token Interface - Allows interaction with the Rigo token.\n/// @author Gabriele Rigo - <gab@rigoblock.com>\n// solhint-disable-next-line\ninterface RigoTokenFace {\n\n    function minter() external view returns (address);\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n\n    function mintToken(address _recipient, uint256 _amount) external;\n    function changeMintingAddress(address _newAddress) external;\n    function changeRigoblockAddress(address _newAddress) external;\n}\n",
		"../../staking/interfaces/IStaking.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../../utils/0xUtils/IEtherToken.sol\";\nimport \"./IStructs.sol\";\nimport \"./IGrgVault.sol\";\n\n\ninterface IStaking {\n\n    /// @dev Adds a new proof_of_performance address.\n    /// @param addr Address of proof_of_performance contract to add.\n    function addPopAddress(address addr)\n        external;\n        \n    /// @dev Create a new staking pool. The sender will be the staking pal of this pool.\n    /// Note that a staking pal must be payable.\n    /// @param rigoblockPoolAddress Adds rigoblock pool to the created staking pool for convenience if non-null.\n    /// @return poolId The unique pool id generated for this pool.\n    function createStakingPool(address rigoblockPoolAddress)\n        external\n        returns (bytes32 poolId);\n    \n    /// @dev Allows the operator to update the staking pal address.\n    /// @param poolId Unique id of pool.\n    /// @param newStakingPalAddress Address of the new staking pal.\n    function setStakingPalAddress(bytes32 poolId, address newStakingPalAddress)\n        external;\n\n    /// @dev Decreases the operator share for the given pool (i.e. increases pool rewards for members).\n    /// @param poolId Unique Id of pool.\n    /// @param newOperatorShare The newly decreased percentage of any rewards owned by the operator.\n    function decreaseStakingPoolOperatorShare(bytes32 poolId, uint32 newOperatorShare)\n        external;\n\n    /// @dev Begins a new epoch, preparing the prior one for finalization.\n    ///      Throws if not enough time has passed between epochs or if the\n    ///      previous epoch was not fully finalized.\n    /// @return numPoolsToFinalize The number of unfinalized pools.\n    function endEpoch()\n        external\n        returns (uint256);\n\n    /// @dev Instantly finalizes a single pool that earned rewards in the previous\n    ///      epoch, crediting it rewards for members and withdrawing operator's\n    ///      rewards as WETH. This can be called by internal functions that need\n    ///      to finalize a pool immediately. Does nothing if the pool is already\n    ///      finalized or did not earn rewards in the previous epoch.\n    /// @param poolId The pool ID to finalize.\n    function finalizePool(bytes32 poolId)\n        external;\n\n    /// @dev Initialize storage owned by this contract.\n    ///      This function should not be called directly.\n    ///      The StakingProxy contract will call it in `attachStakingContract()`.\n    function init()\n        external;\n\n    /// @dev Allows caller to join a staking pool as a rigoblock pool id subaccount.\n    /// @param stakingPoolId Unique id of staking pool.\n    /// @param rigoblockPoolAccount Address of subaccount to be added to staking pool.\n    function joinStakingPoolAsRbPoolAccount(\n        bytes32 stakingPoolId,\n        address rigoblockPoolAccount)\n        external;\n\n    /// @dev Moves stake between statuses: 'undelegated' or 'delegated'.\n    ///      Delegated stake can also be moved between pools.\n    ///      This change comes into effect next epoch.\n    /// @param from status to move stake out of.\n    /// @param to status to move stake into.\n    /// @param amount of stake to move.\n    function moveStake(\n        IStructs.StakeInfo calldata from,\n        IStructs.StakeInfo calldata to,\n        uint256 amount\n    )\n        external;\n        \n    /// @dev Credits the value of a pool's pop reward.\n    ///      Only a known RigoBlock pop can call this method. See\n    ///      (MixinPopManager).\n    /// @param poolAccount The address of the rigoblock pool account.\n    /// @param popReward The pop reward.\n    function creditPopReward(\n        address poolAccount,\n        uint256 popReward\n    )\n        external\n        payable;\n\n    /// @dev Removes an existing proof_of_performance address.\n    /// @param addr Address of proof_of_performance contract to remove.\n    function removePopAddress(address addr)\n        external;\n\n    /// @dev Set all configurable parameters at once.\n    /// @param _epochDurationInSeconds Minimum seconds between epochs.\n    /// @param _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @param _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @param _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @param _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function setParams(\n        uint256 _epochDurationInSeconds,\n        uint32 _rewardDelegatedStakeWeight,\n        uint256 _minimumPoolStake,\n        uint32 _cobbDouglasAlphaNumerator,\n        uint32 _cobbDouglasAlphaDenominator\n    )\n        external;\n\n    /// @dev Stake GRG tokens. Tokens are deposited into the GRG Vault.\n    ///      Unstake to retrieve the GRG. Stake is in the 'Active' status.\n    /// @param amount of GRG to stake.\n    function stake(uint256 amount)\n        external;\n\n    /// @dev Unstake. Tokens are withdrawn from the GRG Vault and returned to\n    ///      the staker. Stake must be in the 'undelegated' status in both the\n    ///      current and next epoch in order to be unstaked.\n    /// @param amount of GRG to unstake.\n    function unstake(uint256 amount)\n        external;\n\n    /// @dev Withdraws the caller's WETH rewards that have accumulated\n    ///      until the last epoch.\n    /// @param poolId Unique id of pool.\n    function withdrawDelegatorRewards(bytes32 poolId)\n        external;\n\n    /// @dev Computes the reward balance in ETH of a specific member of a pool.\n    /// @param poolId Unique id of pool.\n    /// @param member The member of the pool.\n    /// @return reward Balance in ETH.\n    function computeRewardBalanceOfDelegator(bytes32 poolId, address member)\n        external\n        view\n        returns (uint256 reward);\n\n    /// @dev Computes the reward balance in ETH of the operator of a pool.\n    /// @param poolId Unique id of pool.\n    /// @return reward Balance in ETH.\n    function computeRewardBalanceOfOperator(bytes32 poolId)\n        external\n        view\n        returns (uint256 reward);\n\n    /// @dev Returns the earliest end time in seconds of this epoch.\n    ///      The next epoch can begin once this time is reached.\n    ///      Epoch period = [startTimeInSeconds..endTimeInSeconds)\n    /// @return Time in seconds.\n    function getCurrentEpochEarliestEndTimeInSeconds()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Gets global stake for a given status.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Global stake for given status.\n    function getGlobalStakeByStatus(IStructs.StakeStatus stakeStatus)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Gets an owner's stake balances by status.\n    /// @param staker Owner of stake.\n    /// @param stakeStatus UNDELEGATED or DELEGATED\n    /// @return balance Owner's stake balances for given status.\n    function getOwnerStakeByStatus(\n        address staker,\n        IStructs.StakeStatus stakeStatus\n    )\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Retrieves all configurable parameter values.\n    /// @return _epochDurationInSeconds Minimum seconds between epochs.\n    /// @return _rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm.\n    /// @return _minimumPoolStake Minimum amount of stake required in a pool to collect rewards.\n    /// @return _cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor.\n    /// @return _cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor.\n    function getParams()\n        external\n        view\n        returns (\n            uint256 _epochDurationInSeconds,\n            uint32 _rewardDelegatedStakeWeight,\n            uint256 _minimumPoolStake,\n            uint32 _cobbDouglasAlphaNumerator,\n            uint32 _cobbDouglasAlphaDenominator\n        );\n\n    /// @param staker of stake.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Stake delegated to pool by staker.\n    function getStakeDelegatedToPoolByOwner(address staker, bytes32 poolId)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev Returns a staking pool\n    /// @param poolId Unique id of pool.\n    function getStakingPool(bytes32 poolId)\n        external\n        view\n        returns (IStructs.Pool memory);\n\n    /// @dev Get stats on a staking pool in this epoch.\n    /// @param poolId Pool Id to query.\n    /// @return PoolStats struct for pool id.\n    function getStakingPoolStatsThisEpoch(bytes32 poolId)\n        external\n        view\n        returns (IStructs.PoolStats memory);\n\n    /// @dev Returns the total stake delegated to a specific staking pool,\n    ///      across all members.\n    /// @param poolId Unique Id of pool.\n    /// @return balance Total stake delegated to pool.\n    function getTotalStakeDelegatedToPool(bytes32 poolId)\n        external\n        view\n        returns (IStructs.StoredBalance memory balance);\n\n    /// @dev An overridable way to access the deployed grgVault.\n    ///      Must be view to allow overrides to access state.\n    /// @return grgVault The grgVault contract.\n    function getGrgVault()\n        external\n        view\n        returns (IGrgVault grgVault);\n}\n",
		"../../utils/0xUtils/IEtherToken.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >= 0.5.9;\n\nimport \"./IERC20Token.sol\";\n\n\nabstract contract IEtherToken is\n    IERC20Token\n{\n    function deposit()\n        public\n        virtual\n        payable;\n\n    function withdraw(uint256 amount)\n        public\n        virtual;\n}\n",
		"../../utils/0xUtils/IERC20Token.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nabstract contract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        virtual\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        virtual\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        virtual\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        virtual\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        virtual\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        virtual\n        returns (uint256);\n}\n",
		"../../staking/interfaces/IStructs.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IStructs {\n\n    /// @dev Stats for a pool that earned rewards.\n    /// @param feesCollected Fees collected in ETH by this pool.\n    /// @param weightedStake Amount of weighted stake in the pool.\n    /// @param membersStake Amount of non-operator stake in the pool.\n    struct PoolStats {\n        uint256 feesCollected;\n        uint256 weightedStake;\n        uint256 membersStake;\n    }\n\n    /// @dev Holds stats aggregated across a set of pools.\n    /// @param rewardsAvailable Rewards (ETH) available to the epoch\n    ///        being finalized (the previous epoch). This is simply the balance\n    ///        of the contract at the end of the epoch.\n    /// @param numPoolsToFinalize The number of pools that have yet to be finalized through `finalizePools()`.\n    /// @param totalFeesCollected The total fees collected for the epoch being finalized.\n    /// @param totalWeightedStake The total fees collected for the epoch being finalized.\n    /// @param totalRewardsFinalized Amount of rewards that have been paid during finalization.\n    struct AggregatedStats {\n        uint256 rewardsAvailable;\n        uint256 numPoolsToFinalize;\n        uint256 totalFeesCollected;\n        uint256 totalWeightedStake;\n        uint256 totalRewardsFinalized;\n    }\n\n    /// @dev Encapsulates a balance for the current and next epochs.\n    /// Note that these balances may be stale if the current epoch\n    /// is greater than `currentEpoch`.\n    /// @param currentEpoch The current epoch\n    /// @param currentEpochBalance Balance in the current epoch.\n    /// @param nextEpochBalance Balance in `currentEpoch+1`.\n    struct StoredBalance {\n        uint64 currentEpoch;\n        uint96 currentEpochBalance;\n        uint96 nextEpochBalance;\n    }\n\n    /// @dev Statuses that stake can exist in.\n    ///      Any stake can be (re)delegated effective at the next epoch\n    ///      Undelegated stake can be withdrawn if it is available in both the current and next epoch\n    enum StakeStatus {\n        UNDELEGATED,\n        DELEGATED\n    }\n\n    /// @dev Info used to describe a status.\n    /// @param status Status of the stake.\n    /// @param poolId Unique Id of pool. This is set when status=DELEGATED.\n    struct StakeInfo {\n        StakeStatus status;\n        bytes32 poolId;\n    }\n\n    /// @dev Struct to represent a fraction.\n    /// @param numerator Numerator of fraction.\n    /// @param denominator Denominator of fraction.\n    struct Fraction {\n        uint256 numerator;\n        uint256 denominator;\n    }\n\n    /// @dev Holds the metadata for a staking pool.\n    /// @param operator Operator of the pool.\n    /// @param stakingPal Staking pal of the pool.\n    /// @param operatorShare Fraction of the total balance owned by the operator, in ppm.\n    /// @param stakingPalShare Fraction of the operator reward owned by the staking pal, in ppm.\n    struct Pool {\n        address operator;\n        address stakingPal;\n        uint32 operatorShare;\n        uint32 stakingPalShare;\n    }\n}\n",
		"../../staking/interfaces/IGrgVault.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IGrgVault {\n\n    /// @dev Emmitted whenever a StakingProxy is set in a vault.\n    event StakingProxySet(address stakingProxyAddress);\n\n    /// @dev Emitted when the Staking contract is put into Catastrophic Failure Mode\n    /// @param sender Address of sender (`msg.sender`)\n    event InCatastrophicFailureMode(address sender);\n\n    /// @dev Emitted when Grg Tokens are deposited into the vault.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens deposited.\n    event Deposit(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted when Grg Tokens are withdrawn from the vault.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens withdrawn.\n    event Withdraw(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted whenever the GRG AssetProxy is set.\n    event GrgProxySet(address grgProxyAddress);\n\n    /// @dev Sets the address of the StakingProxy contract.\n    /// Note that only the contract staker can call this function.\n    /// @param _stakingProxyAddress Address of Staking proxy contract.\n    function setStakingProxy(address _stakingProxyAddress)\n        external;\n\n    /// @dev Vault enters into Catastrophic Failure Mode.\n    /// *** WARNING - ONCE IN CATOSTROPHIC FAILURE MODE, YOU CAN NEVER GO BACK! ***\n    /// Note that only the contract staker can call this function.\n    function enterCatastrophicFailure()\n        external;\n\n    /// @dev Sets the Grg proxy.\n    /// Note that only the contract staker can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param grgProxyAddress Address of the RigoBlock Grg Proxy.\n    function setGrgProxy(address grgProxyAddress)\n        external;\n\n    /// @dev Deposit an `amount` of Grg Tokens from `staker` into the vault.\n    /// Note that only the Staking contract can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens to deposit.\n    function depositFrom(address staker, uint256 amount)\n        external;\n\n    /// @dev Withdraw an `amount` of Grg Tokens to `staker` from the vault.\n    /// Note that only the Staking contract can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens to withdraw.\n    function withdrawFrom(address staker, uint256 amount)\n        external;\n\n    /// @dev Withdraw ALL Grg Tokens to `staker` from the vault.\n    /// Note that this can only be called when *in* Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    function withdrawAllFrom(address staker)\n        external\n        returns (uint256);\n\n    /// @dev Returns the balance in Grg Tokens of the `staker`\n    /// @return Balance in Grg.\n    function balanceOf(address staker)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the entire balance of Grg tokens in the vault.\n    function balanceOfGrgVault()\n        external\n        view\n        returns (uint256);\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.7.4+commit.3f05b770",
		"settings": {
			"remappings": [],
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}