{
	"schemaVersion": "2.0.0",
	"contractName": "StakingProxy",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakingContract",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "newStakingContractAddress",
						"type": "address"
					}
				],
				"name": "StakingContractAttachedToProxy",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "StakingContractDetachedFromProxy",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "addAuthorizedAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "aggregatedStatsByEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "rewardsAvailable",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "numPoolsToFinalize",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalFeesCollected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalWeightedStake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalRewardsFinalized",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "assertValidStorageParams",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakingContract",
						"type": "address"
					}
				],
				"name": "attachStakingContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "authorities",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "authorized",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "batchExecute",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "batchReturnData",
						"type": "bytes[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cobbDouglasAlphaDenominator",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cobbDouglasAlphaNumerator",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentEpochStartTimeInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "detachStakingContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "epochDurationInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAuthorizedAddresses",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "grgReservedForPoolRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastPoolId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minimumPoolStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "poolIdByRbPoolAccount",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "poolStatsByEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "feesCollected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "weightedStake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "membersStake",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "removeAuthorizedAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "removeAuthorizedAddressAtIndex",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardDelegatedStakeWeight",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "rewardsByPoolId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "validPops",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addAuthorizedAddress(address)": {
					"details": "Authorizes an address.",
					"params": {
						"target": "Address to authorize."
					}
				},
				"assertValidStorageParams()": {
					"details": "Asserts that an epoch is between 5 and 90 days long."
				},
				"attachStakingContract(address)": {
					"details": "Attach a staking contract; future calls will be delegated to the staking contract. Note that this is callable only by an authorized address.",
					"params": {
						"_stakingContract": "Address of staking contract."
					}
				},
				"batchExecute(bytes[])": {
					"details": "Batch executes a series of calls to the staking contract.",
					"params": {
						"data": "An array of data that encodes a sequence of functions to             call in the staking contracts."
					}
				},
				"constructor": {
					"details": "Constructor.",
					"params": {
						"_stakingContract": "Staking contract to delegate calls to."
					}
				},
				"detachStakingContract()": {
					"details": "Detach the current staking contract. Note that this is callable only by an authorized address."
				},
				"getAuthorizedAddresses()": {
					"details": "Gets all authorized addresses.",
					"returns": {
						"_0": "Array of authorized addresses."
					}
				},
				"removeAuthorizedAddress(address)": {
					"details": "Removes authorizion of an address.",
					"params": {
						"target": "Address to remove authorization from."
					}
				},
				"removeAuthorizedAddressAtIndex(address,uint256)": {
					"details": "Removes authorizion of an address.",
					"params": {
						"index": "Index of target in authorities array.",
						"target": "Address to remove authorization from."
					}
				},
				"transferOwnership(address)": {
					"details": "Change the owner of this contract.",
					"params": {
						"newOwner": "New owner address."
					}
				}
			},
			"version": 1
		},
		"evm": {
			"bytecode": {
				"generatedSources": [
					{
						"ast": {
							"nodeType": "YulBlock",
							"src": "0:969:54",
							"statements": [
								{
									"nodeType": "YulBlock",
									"src": "6:3:54",
									"statements": []
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "95:229:54",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "141:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "150:6:54"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "158:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "143:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "143:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "143:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "116:7:54"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "125:9:54"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "112:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "112:23:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "137:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "108:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "108:32:54"
												},
												"nodeType": "YulIf",
												"src": "105:2:54"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "176:29:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "195:9:54"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "189:5:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "189:16:54"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "180:5:54",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "268:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "277:6:54"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "285:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "270:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "270:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "270:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "227:5:54"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "238:5:54"
																		},
																		{
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "253:3:54",
																							"type": "",
																							"value": "160"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "258:1:54",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "249:3:54"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "249:11:54"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "262:1:54",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "sub",
																				"nodeType": "YulIdentifier",
																				"src": "245:3:54"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "245:19:54"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "234:3:54"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "234:31:54"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "224:2:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "224:42:54"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "217:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "217:50:54"
												},
												"nodeType": "YulIf",
												"src": "214:2:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "303:15:54",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "313:5:54"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "303:6:54"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_address_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "61:9:54",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "72:7:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "84:6:54",
											"type": ""
										}
									],
									"src": "14:310:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "466:293:54",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "476:27:54",
												"value": {
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "496:6:54"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "490:5:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "490:13:54"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "480:6:54",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "512:12:54",
												"value": {
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "521:3:54"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "516:1:54",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "585:77:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "610:3:54"
																			},
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "615:1:54"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "606:3:54"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "606:11:54"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value0",
																								"nodeType": "YulIdentifier",
																								"src": "633:6:54"
																							},
																							{
																								"name": "i",
																								"nodeType": "YulIdentifier",
																								"src": "641:1:54"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "629:3:54"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "629:14:54"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "645:4:54",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "625:3:54"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "625:25:54"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "619:5:54"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "619:32:54"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "599:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "599:53:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "599:53:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "544:1:54"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "547:6:54"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "541:2:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "541:13:54"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "555:21:54",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "557:17:54",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "566:1:54"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "569:4:54",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "562:3:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "562:12:54"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "557:1:54"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "537:3:54",
													"statements": []
												},
												"src": "533:129:54"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "688:33:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "701:3:54"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "706:6:54"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "697:3:54"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "697:16:54"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "715:3:54"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "690:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "690:29:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "690:29:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "677:1:54"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "680:6:54"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "674:2:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "674:13:54"
												},
												"nodeType": "YulIf",
												"src": "671:2:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "730:23:54",
												"value": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "741:3:54"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "746:6:54"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "737:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "737:16:54"
												},
												"variableNames": [
													{
														"name": "end",
														"nodeType": "YulIdentifier",
														"src": "730:3:54"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "442:3:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "447:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "458:3:54",
											"type": ""
										}
									],
									"src": "329:430:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "865:102:54",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "875:26:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "887:9:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "898:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "883:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "883:18:54"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "875:4:54"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "917:9:54"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "932:6:54"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "948:3:54",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "953:1:54",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nodeType": "YulIdentifier",
																				"src": "944:3:54"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "944:11:54"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "957:1:54",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nodeType": "YulIdentifier",
																		"src": "940:3:54"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "940:19:54"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "928:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "928:32:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "910:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "910:51:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "910:51:54"
											}
										]
									},
									"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "834:9:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "845:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "856:4:54",
											"type": ""
										}
									],
									"src": "764:203:54"
								}
							]
						},
						"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := end\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        if gt(i, length) { mstore(add(pos, length), end) }\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}",
						"id": 54,
						"language": "Yul",
						"name": "#utility.yul"
					}
				],
				"linkReferences": {},
				"object": "0x60806040523480156200001157600080fd5b506040516200202a3803806200202a8339810160408190526200003491620006cc565b600080546001600160a01b03191633908117909155620000549062000073565b6200005f8162000176565b6200006c3360006200027a565b506200074c565b6001600160a01b038116620000ac57620000ac6200009b6200044160201b62000b931760201c565b6200045f60201b620005e81760201c565b6001600160a01b03811660009081526001602052604090205460ff1615620000e857620000e86200009b826200046760201b62000bca1760201c565b6001600160a01b0381166000818152600160208190526040808320805460ff19168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b03191684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b600380546001600160a01b0319166001600160a01b0383161790556040517f048368388f801041f7690185c4e28b6f3505c740c47be8ac104b55df666bfc8490620001c390839062000738565b60405180910390a160035460408051600481526024810182526020810180516001600160e01b03166370e39c9560e11b17905290516000926060926001600160a01b0390911691620002169190620006fc565b600060405180830381855af49150503d806000811462000253576040519150601f19603f3d011682016040523d82523d6000602084013e62000258565b606091505b5091509150816200026b57805160208201fd5b62000275620004af565b505050565b6001600160a01b03821660009081526001602052604090205460ff16620002b557620002b56200009b836200058a60201b62000c4e1760201c565b6002548110620002df57620002df6200009b82600280549050620005d260201b62000cd11760201c565b816001600160a01b031660028281548110620002f757fe5b6000918252602090912001546001600160a01b0316146200035057620003506200009b600283815481106200032857fe5b600091825260209182902001546001600160a01b031690859062000d4462000617821b17901c565b6001600160a01b0382166000908152600160205260409020805460ff191690556002805460001981019081106200038357fe5b600091825260209091200154600280546001600160a01b039092169183908110620003aa57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002805480620003e457fe5b600082815260208120820160001990810180546001600160a01b031916905590910190915560405133916001600160a01b038516917f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b09190a35050565b60408051808201909152600481526315d953f960e21b602082015290565b805160208201fd5b604080516001600160a01b0383166024808301919091528251808303909101815260449091019091526020810180516001600160e01b03166306f0b78d60e51b179052919050565b60115462069780811080620004c657506276a70081115b15620004e757620004e76200009b60046200066860201b62000dd01760201c565b60145463ffffffff6401000000008204811691168110806200050d575063ffffffff8116155b156200052e576200052e6200009b60006200066860201b62000dd01760201c565b601254620f424063ffffffff90911611156200055f576200055f6200009b60016200066860201b62000dd01760201c565b600260135410156200058657620005866200009b60036200066860201b62000dd01760201c565b5050565b604080516001600160a01b0383166024808301919091528251808303909101815260449091019091526020810180516001600160e01b03166375a8845160e11b179052919050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663e9f8377160e01b17905292915050565b604080516001600160a01b03808516602483015283166044808301919091528251808303909101815260649091019091526020810180516001600160e01b031663140a84db60e01b17905292915050565b606063fc45bd1160e01b8260048111156200067f57fe5b604051602401808260ff168152602001915050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050919050565b600060208284031215620006de578081fd5b81516001600160a01b0381168114620006f5578182fd5b9392505050565b60008251815b818110156200071e576020818601810151858301520162000702565b818111156200072d5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6118ce806200075c6000396000f3fe6080604052600436106101b05760003560e01c8063856a65eb116100ec578063c6f3a4271161008a578063e0ee036e11610064578063e0ee036e14610552578063e8eeb3f814610567578063ee99205c1461057c578063f2fde38b146105915761026d565b8063c6f3a42714610506578063d14dc2311461051b578063d39de6e9146105305761026d565b8063a26171e2116100c6578063a26171e21461049c578063a657e579146104b1578063b9181611146104c6578063c18c9141146104e65761026d565b8063856a65eb1461043a5780638da5cb5b146104675780639ad267441461047c5761026d565b8063587da02311610159578063707129391161013357806370712939146103c357806376671808146103e35780637fa140c7146103f857806381666796146104185761026d565b8063587da0231461036c578063634038011461038e57806366615d56146103a35761026d565b806342f1181e1161018a57806342f1181e146102f2578063494503d414610312578063540c2d531461033f5761026d565b80632a94c2791461027257806337b006a6146102aa57806338229d93146102c15761026d565b3661026d5760035473ffffffffffffffffffffffffffffffffffffffff16806101e3576101e36101de6105b1565b6105e8565b600060608273ffffffffffffffffffffffffffffffffffffffff1660003660405161020f929190611645565b600060405180830381855af49150503d806000811461024a576040519150601f19603f3d011682016040523d82523d6000602084013e61024f565b606091505b5091509150816000811461026557815182602001f35b815182602001fd5b600080fd5b34801561027e57600080fd5b5061029261028d366004611624565b6105f0565b6040516102a1939291906117b4565b60405180910390f35b3480156102b657600080fd5b506102bf61061c565b005b3480156102cd57600080fd5b506102e16102dc36600461160c565b610677565b6040516102a19594939291906117ca565b3480156102fe57600080fd5b506102bf61030d366004611553565b6106a6565b34801561031e57600080fd5b5061033261032d36600461160c565b6106ba565b6040516102a19190611671565b34801561034b57600080fd5b5061035f61035a366004611553565b6106f1565b6040516102a191906117a0565b34801561037857600080fd5b50610381610706565b6040516102a191906117ab565b34801561039a57600080fd5b5061038161070c565b3480156103af57600080fd5b506102bf6103be366004611553565b610712565b3480156103cf57600080fd5b506102bf6103de366004611553565b610723565b3480156103ef57600080fd5b506103816107d8565b34801561040457600080fd5b50610381610413366004611553565b6107de565b34801561042457600080fd5b5061042d6107f0565b6040516102a191906117ed565b34801561044657600080fd5b5061045a61045536600461159d565b6107fc565b6040516102a191906116ec565b34801561047357600080fd5b50610332610945565b34801561048857600080fd5b506102bf610497366004611574565b610961565b3480156104a857600080fd5b50610381610973565b3480156104bd57600080fd5b50610381610979565b3480156104d257600080fd5b5061035f6104e1366004611553565b61097f565b3480156104f257600080fd5b5061038161050136600461160c565b610994565b34801561051257600080fd5b506102bf6109a6565b34801561052757600080fd5b50610381610a3f565b34801561053c57600080fd5b50610545610a45565b6040516102a19190611692565b34801561055e57600080fd5b5061042d610ab4565b34801561057357600080fd5b5061042d610ac0565b34801561058857600080fd5b50610332610ad4565b34801561059d57600080fd5b506102bf6105ac366004611553565b610af0565b60408051808201909152600481527f6eff828500000000000000000000000000000000000000000000000000000000602082015290565b805160208201fd5b601560209081526000928352604080842090915290825290208054600182015460029092015490919083565b610624610e76565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556040517f6caedcb22a5c22c8ebd0caf751fec1228a6e006e6ee37169321e02d31ecc818390600090a1565b601660205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b6106ae610e9b565b6106b781610ee2565b50565b600281815481106106ca57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60106020526000908152604090205460ff1681565b600d5481565b60115481565b61071a610e76565b6106b781611013565b61072b610e9b565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff16610764576107646101de82610c4e565b60005b6002548110156107d4578173ffffffffffffffffffffffffffffffffffffffff166002828154811061079557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156107cc576107c7828261116e565b6107d4565b600101610767565b5050565b600c5481565b60096020526000908152604090205481565b60145463ffffffff1681565b6060600081838067ffffffffffffffff8111801561081957600080fd5b5060405190808252806020026020018201604052801561084d57816020015b60608152602001906001900390816108385790505b5060035490945073ffffffffffffffffffffffffffffffffffffffff168061087a5761087a6101de6105b1565b60005b82811461093a578173ffffffffffffffffffffffffffffffffffffffff168888838181106108a757fe5b90506020028101906108b991906117fe565b6040516108c7929190611645565b600060405180830381855af49150503d8060008114610902576040519150601f19603f3d011682016040523d82523d6000602084013e610907565b606091505b5090955093508461091a57835184602001fd5b8386828151811061092757fe5b602090810291909101015260010161087d565b505050505092915050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b610969610e9b565b6107d4828261116e565b60135481565b60085481565b60016020526000908152604090205460ff1681565b600b6020526000908152604090205481565b601154620697808110806109bc57506276a70081115b156109ce576109ce6101de6004610dd0565b60145463ffffffff6401000000008204811691168110806109f3575063ffffffff8116155b15610a0557610a056101de6000610dd0565b601254620f424063ffffffff9091161115610a2757610a276101de6001610dd0565b600260135410156107d4576107d46101de6003610dd0565b60175481565b60606002805480602002602001604051908101604052809291908181526020018280548015610aaa57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610a7f575b5050505050905090565b60125463ffffffff1681565b601454640100000000900463ffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b610af8610e9b565b73ffffffffffffffffffffffffffffffffffffffff8116610b2357610b1e6101de6113e9565b6106b7565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60408051808201909152600481527f57654fe400000000000000000000000000000000000000000000000000000000602082015290565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fde16f1a0000000000000000000000000000000000000000000000000000000001790525b919050565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167feb5108a200000000000000000000000000000000000000000000000000000000179052919050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe9f837710000000000000000000000000000000000000000000000000000000017905292915050565b6040805173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044808301919091528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f140a84db0000000000000000000000000000000000000000000000000000000017905292915050565b60607ffc45bd1100000000000000000000000000000000000000000000000000000000826004811115610dff57fe5b604051602401808260ff168152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b3360009081526001602052604090205460ff16610e9957610e996101de33611420565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e9957600054610e99906101de90339073ffffffffffffffffffffffffffffffffffffffff166114a3565b73ffffffffffffffffffffffffffffffffffffffff8116610f0857610f086101de610b93565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff1615610f4257610f426101de82610bca565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f048368388f801041f7690185c4e28b6f3505c740c47be8ac104b55df666bfc8490611083908390611671565b60405180910390a160035460408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe1c7392a00000000000000000000000000000000000000000000000000000000179052905160009260609273ffffffffffffffffffffffffffffffffffffffff9091169161110f9190611655565b600060405180830381855af49150503d806000811461114a576040519150601f19603f3d011682016040523d82523d6000602084013e61114f565b606091505b50915091508161116157805160208201fd5b6111696109a6565b505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090205460ff166111a7576111a76101de83610c4e565b60025481106111c2576111c26101de82600280549050610cd1565b8173ffffffffffffffffffffffffffffffffffffffff16600282815481106111e657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614611248576112486101de6002838154811061122057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1684610d44565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106112c357fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff90921691839081106112f657fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600280548061134957fe5b60008281526020812082017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055909101909155604051339173ffffffffffffffffffffffffffffffffffffffff8516917f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b09190a35050565b60408051808201909152600481527fe69edc3e00000000000000000000000000000000000000000000000000000000602082015290565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb65a25b900000000000000000000000000000000000000000000000000000000179052919050565b6040805173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044808301919091528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1de45ad10000000000000000000000000000000000000000000000000000000017905292915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c4957600080fd5b600060208284031215611564578081fd5b61156d8261152f565b9392505050565b60008060408385031215611586578081fd5b61158f8361152f565b946020939093013593505050565b600080602083850312156115af578182fd5b823567ffffffffffffffff808211156115c6578384fd5b818501915085601f8301126115d9578384fd5b8135818111156115e7578485fd5b86602080830285010111156115fa578485fd5b60209290920196919550909350505050565b60006020828403121561161d578081fd5b5035919050565b60008060408385031215611636578182fd5b50508035926020909101359150565b6000828483379101908152919050565b60008251611667818460208701611868565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156116e057835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016116ae565b50909695505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611793577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845281518051808752611756818989018a8501611868565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01695909501860194509285019290850190600101611711565b5092979650505050505050565b901515815260200190565b90815260200190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b63ffffffff91909116815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611832578283fd5b83018035915067ffffffffffffffff82111561184c578283fd5b60200191503681900382131561186157600080fd5b9250929050565b60005b8381101561188357818101518382015260200161186b565b83811115611892576000848401525b5050505056fea2646970667358221220a172af876a1a767b620f91dae6ed69a58316c5d89bf1eef3f5b59e87afe1d85264736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x202A CODESIZE SUB DUP1 PUSH3 0x202A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x6CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH3 0x54 SWAP1 PUSH3 0x73 JUMP JUMPDEST PUSH3 0x5F DUP2 PUSH3 0x176 JUMP JUMPDEST PUSH3 0x6C CALLER PUSH1 0x0 PUSH3 0x27A JUMP JUMPDEST POP PUSH3 0x74C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0xAC JUMPI PUSH3 0xAC PUSH3 0x9B PUSH3 0x441 PUSH1 0x20 SHL PUSH3 0xB93 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x45F PUSH1 0x20 SHL PUSH3 0x5E8 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0xE8 JUMPI PUSH3 0xE8 PUSH3 0x9B DUP3 PUSH3 0x467 PUSH1 0x20 SHL PUSH3 0xBCA OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 DUP4 ADD DUP2 SSTORE DUP4 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD CALLER SWAP3 SWAP2 PUSH32 0x3147867C59D17E8FA9D522465651D44AAE0A9E38F902F3475B97E58072F0ED4C SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x48368388F801041F7690185C4E28B6F3505C740C47BE8AC104B55DF666BFC84 SWAP1 PUSH3 0x1C3 SWAP1 DUP4 SWAP1 PUSH3 0x738 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x70E39C95 PUSH1 0xE1 SHL OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x60 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH3 0x216 SWAP2 SWAP1 PUSH3 0x6FC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x253 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x258 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH3 0x26B JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH3 0x275 PUSH3 0x4AF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x2B5 JUMPI PUSH3 0x2B5 PUSH3 0x9B DUP4 PUSH3 0x58A PUSH1 0x20 SHL PUSH3 0xC4E OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 LT PUSH3 0x2DF JUMPI PUSH3 0x2DF PUSH3 0x9B DUP3 PUSH1 0x2 DUP1 SLOAD SWAP1 POP PUSH3 0x5D2 PUSH1 0x20 SHL PUSH3 0xCD1 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH3 0x2F7 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x350 JUMPI PUSH3 0x350 PUSH3 0x9B PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH3 0x328 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP6 SWAP1 PUSH3 0xD44 PUSH3 0x617 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH3 0x383 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH3 0x3AA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 DUP1 SLOAD DUP1 PUSH3 0x3E4 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 DUP3 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE SWAP1 SWAP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x15D953F9 PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x6F0B78D PUSH1 0xE5 SHL OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH3 0x69780 DUP2 LT DUP1 PUSH3 0x4C6 JUMPI POP PUSH3 0x76A700 DUP2 GT JUMPDEST ISZERO PUSH3 0x4E7 JUMPI PUSH3 0x4E7 PUSH3 0x9B PUSH1 0x4 PUSH3 0x668 PUSH1 0x20 SHL PUSH3 0xDD0 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH4 0xFFFFFFFF PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP2 AND DUP2 LT DUP1 PUSH3 0x50D JUMPI POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH3 0x52E JUMPI PUSH3 0x52E PUSH3 0x9B PUSH1 0x0 PUSH3 0x668 PUSH1 0x20 SHL PUSH3 0xDD0 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH3 0xF4240 PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND GT ISZERO PUSH3 0x55F JUMPI PUSH3 0x55F PUSH3 0x9B PUSH1 0x1 PUSH3 0x668 PUSH1 0x20 SHL PUSH3 0xDD0 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x2 PUSH1 0x13 SLOAD LT ISZERO PUSH3 0x586 JUMPI PUSH3 0x586 PUSH3 0x9B PUSH1 0x3 PUSH3 0x668 PUSH1 0x20 SHL PUSH3 0xDD0 OR PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x75A88451 PUSH1 0xE1 SHL OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xE9F83771 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x140A84DB PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xFC45BD11 PUSH1 0xE0 SHL DUP3 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x67F JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x6DE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x6F5 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x71E JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH3 0x702 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x72D JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x18CE DUP1 PUSH3 0x75C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1B0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x856A65EB GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xC6F3A427 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE0EE036E GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE0EE036E EQ PUSH2 0x552 JUMPI DUP1 PUSH4 0xE8EEB3F8 EQ PUSH2 0x567 JUMPI DUP1 PUSH4 0xEE99205C EQ PUSH2 0x57C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x591 JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0xC6F3A427 EQ PUSH2 0x506 JUMPI DUP1 PUSH4 0xD14DC231 EQ PUSH2 0x51B JUMPI DUP1 PUSH4 0xD39DE6E9 EQ PUSH2 0x530 JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0xA26171E2 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0xA26171E2 EQ PUSH2 0x49C JUMPI DUP1 PUSH4 0xA657E579 EQ PUSH2 0x4B1 JUMPI DUP1 PUSH4 0xB9181611 EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0xC18C9141 EQ PUSH2 0x4E6 JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x856A65EB EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x467 JUMPI DUP1 PUSH4 0x9AD26744 EQ PUSH2 0x47C JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x587DA023 GT PUSH2 0x159 JUMPI DUP1 PUSH4 0x70712939 GT PUSH2 0x133 JUMPI DUP1 PUSH4 0x70712939 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x76671808 EQ PUSH2 0x3E3 JUMPI DUP1 PUSH4 0x7FA140C7 EQ PUSH2 0x3F8 JUMPI DUP1 PUSH4 0x81666796 EQ PUSH2 0x418 JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x587DA023 EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0x63403801 EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0x66615D56 EQ PUSH2 0x3A3 JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x42F1181E GT PUSH2 0x18A JUMPI DUP1 PUSH4 0x42F1181E EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x494503D4 EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0x540C2D53 EQ PUSH2 0x33F JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x2A94C279 EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x37B006A6 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0x38229D93 EQ PUSH2 0x2C1 JUMPI PUSH2 0x26D JUMP JUMPDEST CALLDATASIZE PUSH2 0x26D JUMPI PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x1E3 JUMPI PUSH2 0x1E3 PUSH2 0x1DE PUSH2 0x5B1 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x20F SWAP3 SWAP2 SWAP1 PUSH2 0x1645 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x24A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x24F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 DUP2 EQ PUSH2 0x265 JUMPI DUP2 MLOAD DUP3 PUSH1 0x20 ADD RETURN JUMPDEST DUP2 MLOAD DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x292 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x1624 JUMP JUMPDEST PUSH2 0x5F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x61C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x160C JUMP JUMPDEST PUSH2 0x677 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x6A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x332 PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0x160C JUMP JUMPDEST PUSH2 0x6BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1671 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x35F PUSH2 0x35A CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x6F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x17A0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x706 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x17AB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x70C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x3DE CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x723 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x7D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x404 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x413 CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x7DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x42D PUSH2 0x7F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x17ED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x446 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45A PUSH2 0x455 CALLDATASIZE PUSH1 0x4 PUSH2 0x159D JUMP JUMPDEST PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x16EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x332 PUSH2 0x945 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x497 CALLDATASIZE PUSH1 0x4 PUSH2 0x1574 JUMP JUMPDEST PUSH2 0x961 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x973 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x979 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x35F PUSH2 0x4E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x97F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x501 CALLDATASIZE PUSH1 0x4 PUSH2 0x160C JUMP JUMPDEST PUSH2 0x994 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x9A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0xA3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x545 PUSH2 0xA45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1692 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x42D PUSH2 0xAB4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x42D PUSH2 0xAC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x588 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x332 PUSH2 0xAD4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x5AC CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0x6EFF828500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH2 0x624 PUSH2 0xE76 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x6CAEDCB22A5C22C8EBD0CAF751FEC1228A6E006E6EE37169321E02D31ECC8183 SWAP1 PUSH1 0x0 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP6 JUMP JUMPDEST PUSH2 0x6AE PUSH2 0xE9B JUMP JUMPDEST PUSH2 0x6B7 DUP2 PUSH2 0xEE2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x6CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x71A PUSH2 0xE76 JUMP JUMPDEST PUSH2 0x6B7 DUP2 PUSH2 0x1013 JUMP JUMPDEST PUSH2 0x72B PUSH2 0xE9B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x764 JUMPI PUSH2 0x764 PUSH2 0x1DE DUP3 PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x7D4 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x795 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x7CC JUMPI PUSH2 0x7C7 DUP3 DUP3 PUSH2 0x116E JUMP JUMPDEST PUSH2 0x7D4 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x767 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP2 DUP4 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x84D JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x838 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x3 SLOAD SWAP1 SWAP5 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x87A JUMPI PUSH2 0x87A PUSH2 0x1DE PUSH2 0x5B1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 EQ PUSH2 0x93A JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x8A7 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x8B9 SWAP2 SWAP1 PUSH2 0x17FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C7 SWAP3 SWAP2 SWAP1 PUSH2 0x1645 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x902 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x907 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP6 POP SWAP4 POP DUP5 PUSH2 0x91A JUMPI DUP4 MLOAD DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP4 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x927 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x87D JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x969 PUSH2 0xE9B JUMP JUMPDEST PUSH2 0x7D4 DUP3 DUP3 PUSH2 0x116E JUMP JUMPDEST PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH3 0x69780 DUP2 LT DUP1 PUSH2 0x9BC JUMPI POP PUSH3 0x76A700 DUP2 GT JUMPDEST ISZERO PUSH2 0x9CE JUMPI PUSH2 0x9CE PUSH2 0x1DE PUSH1 0x4 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH4 0xFFFFFFFF PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP2 AND DUP2 LT DUP1 PUSH2 0x9F3 JUMPI POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0xA05 JUMPI PUSH2 0xA05 PUSH2 0x1DE PUSH1 0x0 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH3 0xF4240 PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND GT ISZERO PUSH2 0xA27 JUMPI PUSH2 0xA27 PUSH2 0x1DE PUSH1 0x1 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x13 SLOAD LT ISZERO PUSH2 0x7D4 JUMPI PUSH2 0x7D4 PUSH2 0x1DE PUSH1 0x3 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xAAA JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA7F JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xAF8 PUSH2 0xE9B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xB23 JUMPI PUSH2 0xB1E PUSH2 0x1DE PUSH2 0x13E9 JUMP JUMPDEST PUSH2 0x6B7 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 CALLER SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0x57654FE400000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDE16F1A000000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xEB5108A200000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE9F8377100000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x140A84DB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xFC45BD1100000000000000000000000000000000000000000000000000000000 DUP3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xDFF JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xE99 JUMPI PUSH2 0xE99 PUSH2 0x1DE CALLER PUSH2 0x1420 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xE99 JUMPI PUSH1 0x0 SLOAD PUSH2 0xE99 SWAP1 PUSH2 0x1DE SWAP1 CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14A3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xF08 JUMPI PUSH2 0xF08 PUSH2 0x1DE PUSH2 0xB93 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xF42 JUMPI PUSH2 0xF42 PUSH2 0x1DE DUP3 PUSH2 0xBCA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 DUP4 ADD DUP2 SSTORE DUP4 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD CALLER SWAP3 SWAP2 PUSH32 0x3147867C59D17E8FA9D522465651D44AAE0A9E38F902F3475B97E58072F0ED4C SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x48368388F801041F7690185C4E28B6F3505C740C47BE8AC104B55DF666BFC84 SWAP1 PUSH2 0x1083 SWAP1 DUP4 SWAP1 PUSH2 0x1671 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE1C7392A00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x60 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH2 0x110F SWAP2 SWAP1 PUSH2 0x1655 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x114A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x114F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1161 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH2 0x1169 PUSH2 0x9A6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x11A7 JUMPI PUSH2 0x11A7 PUSH2 0x1DE DUP4 PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 LT PUSH2 0x11C2 JUMPI PUSH2 0x11C2 PUSH2 0x1DE DUP3 PUSH1 0x2 DUP1 SLOAD SWAP1 POP PUSH2 0xCD1 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x11E6 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1248 JUMPI PUSH2 0x1248 PUSH2 0x1DE PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1220 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0xD44 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x12C3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x12F6 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 DUP1 SLOAD DUP1 PUSH2 0x1349 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE SWAP1 SWAP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP2 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xE69EDC3E00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB65A25B900000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1DE45AD100000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1564 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x156D DUP3 PUSH2 0x152F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1586 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x158F DUP4 PUSH2 0x152F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15AF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x15C6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15D9 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x15E7 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x15FA JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x161D JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1636 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1667 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1868 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x16E0 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x16AE JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1793 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE DUP2 MLOAD DUP1 MLOAD DUP1 DUP8 MSTORE PUSH2 0x1756 DUP2 DUP10 DUP10 ADD DUP11 DUP6 ADD PUSH2 0x1868 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP6 SWAP1 SWAP6 ADD DUP7 ADD SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1711 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1832 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x184C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x1861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1883 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x186B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1892 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 PUSH19 0xAF876A1A767B620F91DAE6ED69A58316C5D89B CALL 0xEE RETURN CREATE2 0xB5 SWAP15 DUP8 0xAF 0xE1 0xD8 MSTORE PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
				"sourceMap": "975:6397:9:-:0;;;1199:408;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;926:5:49;:18;;-1:-1:-1;;;;;;926:18:49;934:10;926:18;;;;;;1345:33:9::1;::::0;:21:::1;:33::i;:::-;1449:40;1472:16:::0;1449:22:::1;:40::i;:::-;1554:46;1586:10;1598:1;1554:31;:46::i;:::-;1199:408:::0;975:6397;;3361:602:36;-1:-1:-1;;;;;3502:20:36;;3498:127;;3538:76;3560:53;:51;;;;;:53;;:::i;:::-;3538:21;;;;;:76;;:::i;:::-;-1:-1:-1;;;;;3700:18:36;;;;;;:10;:18;;;;;;;;3696:134;;;3734:85;3756:62;3811:6;3756:54;;;;;:62;;:::i;3734:85::-;-1:-1:-1;;;;;3840:18:36;;;;;;3861:4;3840:18;;;;;;;;:25;;-1:-1:-1;;3840:25:36;;;;;3875:11;:24;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3875:24:36;;;;;3914:42;3945:10;;3840:18;3914:42;;;3361:602;:::o;6653:717:9:-;6781:15;:34;;-1:-1:-1;;;;;;6781:34:9;-1:-1:-1;;;;;6781:34:9;;;;;6830:48;;;;;;6781:34;;6830:48;:::i;:::-;;;;;;;;7014:15;;7056:53;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7056:53:9;-1:-1:-1;;;7056:53:9;;;7014:105;;6962:19;;6983:27;;-1:-1:-1;;;;;7014:15:9;;;;:105;;7056:53;7014:105;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6961:158;;;;7135:14;7130:142;;7232:14;7226:21;7219:4;7203:14;7199:25;7192:56;7174:88;7337:26;:24;:26::i;:::-;6653:717;;;:::o;4138:881:36:-;-1:-1:-1;;;;;4268:18:36;;;;;;:10;:18;;;;;;;;4263:131;;4302:81;4324:58;4375:6;4324:50;;;;;:58;;:::i;4302:81::-;4416:11;:18;4407:27;;4403:201;;4450:143;4472:120;4537:5;4560:11;:18;;;;4472:47;;;;;:120;;:::i;4450:143::-;4639:6;-1:-1:-1;;;;;4617:28:36;:11;4629:5;4617:18;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4617:18:36;:28;4613:212;;4661:153;4683:130;4757:11;4769:5;4757:18;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4757:18:36;;4793:6;;4683:56;;;;;:130;;:::i;4661:153::-;-1:-1:-1;;;;;4842:18:36;;;;;;:10;:18;;;;;4835:25;;-1:-1:-1;;4835:25:36;;;4891:11;4903:18;;-1:-1:-1;;4903:22:36;;;4891:35;;;;;;;;;;;;;;;;4870:11;:18;;-1:-1:-1;;;;;4891:35:36;;;;4882:5;;4870:18;;;;;;;;;;;;;;:56;;;;;-1:-1:-1;;;;;4870:56:36;;;;;-1:-1:-1;;;;;4870:56:36;;;;;;4936:11;:17;;;;;;;;;;;;;;;;-1:-1:-1;;4936:17:36;;;;;-1:-1:-1;;;;;;4936:17:36;;;;;;;;;4968:44;;5001:10;;-1:-1:-1;;;;;4968:44:36;;;;;4936:17;4968:44;4138:881;;:::o;3037:161:41:-;3156:35;;;;;;;;;;;;-1:-1:-1;;;3156:35:41;;;;3037:161;:::o;1559:170:46:-;1702:9;1696:16;1689:4;1678:9;1674:20;1667:46;2535:249:41;2671:106;;;-1:-1:-1;;;;;2671:106:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2671:106:41;-1:-1:-1;;;2671:106:41;;;2535:249;;;:::o;4912:1578:9:-;5100:22;;5162:6;5136:32;;;:69;;;5198:7;5172:23;:33;5136:69;5132:288;;;5221:188;5260:148;5325:69;5260:43;;;;;:148;;:::i;5221:188::-;5504:27;;;;;;;;;5545:25;:56;-1:-1:-1;5545:56:9;:93;;-1:-1:-1;5605:33:9;;;;5545:93;5541:315;;;5654:191;5693:151;5758:72;5693:43;;;;;:151;;:::i;5654:191::-;5923:26;;818:5:10;5923:44:9;:26;;;:44;5919:276;;;5983:201;6022:161;6087:82;6022:43;;;;;:161;;:::i;5983:201::-;6265:1;6246:16;;:20;6242:242;;;6282:191;6321:151;6386:72;6321:43;;;;;:151;;:::i;6282:191::-;4912:1578;;:::o;2790:241:41:-;2922:102;;;-1:-1:-1;;;;;2922:102:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2922:102:41;-1:-1:-1;;;2922:102:41;;;2790:241;;;:::o;1990:292::-;2156:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2156:119:41;-1:-1:-1;;;2156:119:41;;;1990:292;;;;:::o;1665:319::-;1845:132;;;-1:-1:-1;;;;;1845:132:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1845:132:41;-1:-1:-1;;;1845:132:41;;;1665:319;;;;:::o;7536:260:23:-;7649:12;-1:-1:-1;;;7774:4:23;7768:11;;;;;;;;7684:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7684:105:23;;;;;;;-1:-1:-1;;;;;7684:105:23;;;;;;;;;;;7677:112;;7536:260;;;:::o;14:310:54:-;;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;189:16;;-1:-1:-1;;;;;234:31:54;;224:42;;214:2;;285:6;277;270:22;214:2;313:5;95:229;-1:-1:-1;;;95:229:54:o;329:430::-;;496:6;490:13;521:3;533:129;547:6;544:1;541:13;533:129;;;645:4;629:14;;;625:25;;619:32;606:11;;;599:53;562:12;533:129;;;680:6;677:1;674:13;671:2;;;715:3;706:6;701:3;697:16;690:29;671:2;-1:-1:-1;737:16:54;;;;;466:293;-1:-1:-1;;466:293:54:o;764:203::-;-1:-1:-1;;;;;928:32:54;;;;910:51;;898:2;883:18;;865:102::o;:::-;975:6397:9;;;;;;"
			},
			"deployedBytecode": {
				"generatedSources": [
					{
						"ast": {
							"nodeType": "YulBlock",
							"src": "0:7031:54",
							"statements": [
								{
									"nodeType": "YulBlock",
									"src": "6:3:54",
									"statements": []
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "65:147:54",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "75:29:54",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "97:6:54"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "84:12:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "84:20:54"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "75:5:54"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "190:16:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "199:1:54",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "202:1:54",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "192:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "192:12:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "192:12:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "126:5:54"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "137:5:54"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "144:42:54",
																			"type": "",
																			"value": "0xffffffffffffffffffffffffffffffffffffffff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "133:3:54"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "133:54:54"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "123:2:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "123:65:54"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "116:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "116:73:54"
												},
												"nodeType": "YulIf",
												"src": "113:2:54"
											}
										]
									},
									"name": "abi_decode_t_address",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "44:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "55:5:54",
											"type": ""
										}
									],
									"src": "14:198:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "287:128:54",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "333:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "342:6:54"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "350:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "335:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "335:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "335:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "308:7:54"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "317:9:54"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "304:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "304:23:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "329:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "300:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "300:32:54"
												},
												"nodeType": "YulIf",
												"src": "297:2:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "368:41:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "399:9:54"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "378:20:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "378:31:54"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "368:6:54"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_address",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "253:9:54",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "264:7:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "276:6:54",
											"type": ""
										}
									],
									"src": "217:198:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "507:179:54",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "553:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "562:6:54"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "570:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "555:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "555:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "555:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "528:7:54"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "537:9:54"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "524:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "524:23:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "549:2:54",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "520:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "520:32:54"
												},
												"nodeType": "YulIf",
												"src": "517:2:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "588:41:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "619:9:54"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "598:20:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "598:31:54"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "588:6:54"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "638:42:54",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "665:9:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "676:2:54",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "661:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "661:18:54"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "648:12:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "648:32:54"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "638:6:54"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_addresst_uint256",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "465:9:54",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "476:7:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "488:6:54",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "496:6:54",
											"type": ""
										}
									],
									"src": "420:266:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "807:561:54",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "853:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "862:6:54"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "870:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "855:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "855:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "855:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "828:7:54"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "837:9:54"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "824:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "824:23:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "849:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "820:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "820:32:54"
												},
												"nodeType": "YulIf",
												"src": "817:2:54"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "888:37:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "915:9:54"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "902:12:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "902:23:54"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "892:6:54",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "934:28:54",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "944:18:54",
													"type": "",
													"value": "0xffffffffffffffff"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "938:2:54",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "989:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "998:6:54"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1006:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "991:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "991:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "991:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "977:6:54"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "985:2:54"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "974:2:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "974:14:54"
												},
												"nodeType": "YulIf",
												"src": "971:2:54"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1024:32:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1038:9:54"
														},
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "1049:6:54"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1034:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1034:22:54"
												},
												"variables": [
													{
														"name": "_2",
														"nodeType": "YulTypedName",
														"src": "1028:2:54",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1104:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1113:6:54"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1121:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1106:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "1106:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1106:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "1083:2:54"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1087:4:54",
																			"type": "",
																			"value": "0x1f"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "1079:3:54"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1079:13:54"
																},
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "1094:7:54"
																}
															],
															"functionName": {
																"name": "slt",
																"nodeType": "YulIdentifier",
																"src": "1075:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "1075:27:54"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "1068:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1068:35:54"
												},
												"nodeType": "YulIf",
												"src": "1065:2:54"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1139:30:54",
												"value": {
													"arguments": [
														{
															"name": "_2",
															"nodeType": "YulIdentifier",
															"src": "1166:2:54"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1153:12:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1153:16:54"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1143:6:54",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1196:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1205:6:54"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1213:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1198:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "1198:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1198:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "1184:6:54"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "1192:2:54"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "1181:2:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1181:14:54"
												},
												"nodeType": "YulIf",
												"src": "1178:2:54"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1281:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1290:6:54"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1298:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1283:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "1283:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1283:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "1245:2:54"
																		},
																		{
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1253:6:54"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1261:2:54",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "1249:3:54"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1249:15:54"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "1241:3:54"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1241:24:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1267:2:54",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1237:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "1237:33:54"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1272:7:54"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "1234:2:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1234:46:54"
												},
												"nodeType": "YulIf",
												"src": "1231:2:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1316:21:54",
												"value": {
													"arguments": [
														{
															"name": "_2",
															"nodeType": "YulIdentifier",
															"src": "1330:2:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1334:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1326:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1326:11:54"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1316:6:54"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1346:16:54",
												"value": {
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "1356:6:54"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "1346:6:54"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "765:9:54",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "776:7:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "788:6:54",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "796:6:54",
											"type": ""
										}
									],
									"src": "691:677:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1443:120:54",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1489:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1498:6:54"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1506:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1491:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "1491:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1491:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "1464:7:54"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1473:9:54"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "1460:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "1460:23:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1485:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "1456:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1456:32:54"
												},
												"nodeType": "YulIf",
												"src": "1453:2:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1524:33:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1547:9:54"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1534:12:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1534:23:54"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1524:6:54"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_bytes32",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1409:9:54",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "1420:7:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "1432:6:54",
											"type": ""
										}
									],
									"src": "1373:190:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1655:171:54",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1701:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1710:6:54"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1718:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1703:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "1703:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1703:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "1676:7:54"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1685:9:54"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "1672:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "1672:23:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1697:2:54",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "1668:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1668:32:54"
												},
												"nodeType": "YulIf",
												"src": "1665:2:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1736:33:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1759:9:54"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1746:12:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1746:23:54"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1736:6:54"
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1778:42:54",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1805:9:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1816:2:54",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1801:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "1801:18:54"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1788:12:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1788:32:54"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "1778:6:54"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_bytes32t_uint256",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1613:9:54",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "1624:7:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "1636:6:54",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "1644:6:54",
											"type": ""
										}
									],
									"src": "1568:258:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1901:120:54",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1947:26:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1956:6:54"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1964:6:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1949:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "1949:22:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1949:22:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "1922:7:54"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1931:9:54"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "1918:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "1918:23:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1943:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "1914:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1914:32:54"
												},
												"nodeType": "YulIf",
												"src": "1911:2:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1982:33:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2005:9:54"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1992:12:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "1992:23:54"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1982:6:54"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_uint256",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "1867:9:54",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "1878:7:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "1890:6:54",
											"type": ""
										}
									],
									"src": "1831:190:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2173:126:54",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "2196:3:54"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "2201:6:54"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "2209:6:54"
														}
													],
													"functionName": {
														"name": "calldatacopy",
														"nodeType": "YulIdentifier",
														"src": "2183:12:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "2183:33:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2183:33:54"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2225:26:54",
												"value": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "2239:3:54"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "2244:6:54"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2235:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "2235:16:54"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "2229:2:54",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "2267:2:54"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "2271:3:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2260:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "2260:15:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2260:15:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2284:9:54",
												"value": {
													"name": "_1",
													"nodeType": "YulIdentifier",
													"src": "2291:2:54"
												},
												"variableNames": [
													{
														"name": "end",
														"nodeType": "YulIdentifier",
														"src": "2284:3:54"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "2141:3:54",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "2146:6:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "2154:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "2165:3:54",
											"type": ""
										}
									],
									"src": "2026:273:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2441:137:54",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2451:27:54",
												"value": {
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "2471:6:54"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "2465:5:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "2465:13:54"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2455:6:54",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2513:6:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2521:4:54",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2509:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "2509:17:54"
														},
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "2528:3:54"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "2533:6:54"
														}
													],
													"functionName": {
														"name": "copy_memory_to_memory",
														"nodeType": "YulIdentifier",
														"src": "2487:21:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "2487:53:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2487:53:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "2549:23:54",
												"value": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "2560:3:54"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "2565:6:54"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2556:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "2556:16:54"
												},
												"variableNames": [
													{
														"name": "end",
														"nodeType": "YulIdentifier",
														"src": "2549:3:54"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "2417:3:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "2422:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "2433:3:54",
											"type": ""
										}
									],
									"src": "2304:274:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2684:125:54",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "2694:26:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2706:9:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2717:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2702:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "2702:18:54"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "2694:4:54"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2736:9:54"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2751:6:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "2759:42:54",
																	"type": "",
																	"value": "0xffffffffffffffffffffffffffffffffffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "2747:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "2747:55:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2729:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "2729:74:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2729:74:54"
											}
										]
									},
									"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "2653:9:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "2664:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "2675:4:54",
											"type": ""
										}
									],
									"src": "2583:226:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2965:533:54",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2975:12:54",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2985:2:54",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "2979:2:54",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2996:32:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3014:9:54"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "3025:2:54"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3010:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3010:18:54"
												},
												"variables": [
													{
														"name": "tail_1",
														"nodeType": "YulTypedName",
														"src": "3000:6:54",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3044:9:54"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "3055:2:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3037:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3037:21:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3037:21:54"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3067:17:54",
												"value": {
													"name": "tail_1",
													"nodeType": "YulIdentifier",
													"src": "3078:6:54"
												},
												"variables": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3071:3:54",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3093:27:54",
												"value": {
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "3113:6:54"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "3107:5:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3107:13:54"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "3097:6:54",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "tail_1",
															"nodeType": "YulIdentifier",
															"src": "3136:6:54"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "3144:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3129:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3129:22:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3129:22:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "3160:25:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3171:9:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3182:2:54",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3167:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3167:18:54"
												},
												"variableNames": [
													{
														"name": "pos",
														"nodeType": "YulIdentifier",
														"src": "3160:3:54"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3194:29:54",
												"value": {
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "3212:6:54"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "3220:2:54"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3208:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3208:15:54"
												},
												"variables": [
													{
														"name": "srcPtr",
														"nodeType": "YulTypedName",
														"src": "3198:6:54",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3232:13:54",
												"value": {
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "3241:4:54"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "3236:1:54",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3303:169:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3324:3:54"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "srcPtr",
																						"nodeType": "YulIdentifier",
																						"src": "3339:6:54"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "3333:5:54"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3333:13:54"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3348:42:54",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3329:3:54"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3329:62:54"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3317:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "3317:75:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3317:75:54"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3405:19:54",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3416:3:54"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3421:2:54"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3412:3:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "3412:12:54"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3405:3:54"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3437:25:54",
															"value": {
																"arguments": [
																	{
																		"name": "srcPtr",
																		"nodeType": "YulIdentifier",
																		"src": "3451:6:54"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3459:2:54"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3447:3:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "3447:15:54"
															},
															"variableNames": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulIdentifier",
																	"src": "3437:6:54"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "3265:1:54"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "3268:6:54"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "3262:2:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3262:13:54"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "3276:18:54",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3278:14:54",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "3287:1:54"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3290:1:54",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3283:3:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "3283:9:54"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "3278:1:54"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "3258:3:54",
													"statements": []
												},
												"src": "3254:218:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "3481:11:54",
												"value": {
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3489:3:54"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "3481:4:54"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "2934:9:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "2945:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "2956:4:54",
											"type": ""
										}
									],
									"src": "2814:684:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "3672:952:54",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3682:12:54",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3692:2:54",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "3686:2:54",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3703:32:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3721:9:54"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "3732:2:54"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3717:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3717:18:54"
												},
												"variables": [
													{
														"name": "tail_1",
														"nodeType": "YulTypedName",
														"src": "3707:6:54",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3751:9:54"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "3762:2:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3744:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3744:21:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3744:21:54"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3774:17:54",
												"value": {
													"name": "tail_1",
													"nodeType": "YulIdentifier",
													"src": "3785:6:54"
												},
												"variables": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3778:3:54",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3800:27:54",
												"value": {
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "3820:6:54"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "3814:5:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3814:13:54"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "3804:6:54",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "tail_1",
															"nodeType": "YulIdentifier",
															"src": "3843:6:54"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "3851:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3836:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3836:22:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3836:22:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "3867:25:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3878:9:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3889:2:54",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3874:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3874:18:54"
												},
												"variableNames": [
													{
														"name": "pos",
														"nodeType": "YulIdentifier",
														"src": "3867:3:54"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3901:54:54",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "3923:9:54"
																},
																{
																	"arguments": [
																		{
																			"name": "length",
																			"nodeType": "YulIdentifier",
																			"src": "3938:6:54"
																		},
																		{
																			"name": "_1",
																			"nodeType": "YulIdentifier",
																			"src": "3946:2:54"
																		}
																	],
																	"functionName": {
																		"name": "mul",
																		"nodeType": "YulIdentifier",
																		"src": "3934:3:54"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3934:15:54"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3919:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "3919:31:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3952:2:54",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3915:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3915:40:54"
												},
												"variables": [
													{
														"name": "tail_2",
														"nodeType": "YulTypedName",
														"src": "3905:6:54",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3964:29:54",
												"value": {
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "3982:6:54"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "3990:2:54"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3978:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "3978:15:54"
												},
												"variables": [
													{
														"name": "srcPtr",
														"nodeType": "YulTypedName",
														"src": "3968:6:54",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4002:13:54",
												"value": {
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "4011:4:54"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "4006:1:54",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4073:522:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4094:3:54"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "tail_2",
																						"nodeType": "YulIdentifier",
																						"src": "4107:6:54"
																					},
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4115:9:54"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4103:3:54"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4103:22:54"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4127:66:54",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4099:3:54"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4099:95:54"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4087:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "4087:108:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4087:108:54"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4208:23:54",
															"value": {
																"arguments": [
																	{
																		"name": "srcPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4224:6:54"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4218:5:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "4218:13:54"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "4212:2:54",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4244:25:54",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "4266:2:54"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4260:5:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "4260:9:54"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "4248:8:54",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_2",
																		"nodeType": "YulIdentifier",
																		"src": "4289:6:54"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "4297:8:54"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4282:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "4282:24:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4282:24:54"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4345:2:54"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4349:2:54"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4341:3:54"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4341:11:54"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_2",
																				"nodeType": "YulIdentifier",
																				"src": "4358:6:54"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4366:2:54"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4354:3:54"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4354:15:54"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "4371:8:54"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "4319:21:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "4319:61:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4319:61:54"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4393:122:54",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "tail_2",
																				"nodeType": "YulIdentifier",
																				"src": "4411:6:54"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length_1",
																								"nodeType": "YulIdentifier",
																								"src": "4427:8:54"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4437:2:54",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "4423:3:54"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4423:17:54"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4442:66:54",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "4419:3:54"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4419:90:54"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4407:3:54"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4407:103:54"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4512:2:54"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4403:3:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "4403:112:54"
															},
															"variableNames": [
																{
																	"name": "tail_2",
																	"nodeType": "YulIdentifier",
																	"src": "4393:6:54"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4528:25:54",
															"value": {
																"arguments": [
																	{
																		"name": "srcPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4542:6:54"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4550:2:54"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4538:3:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "4538:15:54"
															},
															"variableNames": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulIdentifier",
																	"src": "4528:6:54"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4566:19:54",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4577:3:54"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4582:2:54"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4573:3:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "4573:12:54"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4566:3:54"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "4035:1:54"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "4038:6:54"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "4032:2:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "4032:13:54"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "4046:18:54",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4048:14:54",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "4057:1:54"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4060:1:54",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4053:3:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "4053:9:54"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "4048:1:54"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "4028:3:54",
													"statements": []
												},
												"src": "4024:571:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4604:14:54",
												"value": {
													"name": "tail_2",
													"nodeType": "YulIdentifier",
													"src": "4612:6:54"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "4604:4:54"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "3641:9:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "3652:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "3663:4:54",
											"type": ""
										}
									],
									"src": "3503:1121:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4724:92:54",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "4734:26:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4746:9:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4757:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4742:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "4742:18:54"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "4734:4:54"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4776:9:54"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4801:6:54"
																		}
																	],
																	"functionName": {
																		"name": "iszero",
																		"nodeType": "YulIdentifier",
																		"src": "4794:6:54"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "4794:14:54"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "4787:6:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "4787:22:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4769:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "4769:41:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4769:41:54"
											}
										]
									},
									"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4693:9:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "4704:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "4715:4:54",
											"type": ""
										}
									],
									"src": "4629:187:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4922:76:54",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "4932:26:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4944:9:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4955:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4940:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "4940:18:54"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "4932:4:54"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4974:9:54"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "4985:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4967:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "4967:25:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4967:25:54"
											}
										]
									},
									"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4891:9:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "4902:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "4913:4:54",
											"type": ""
										}
									],
									"src": "4821:177:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "5104:76:54",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "5114:26:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5126:9:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5137:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5122:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5122:18:54"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "5114:4:54"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5156:9:54"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "5167:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5149:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5149:25:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5149:25:54"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "5073:9:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "5084:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "5095:4:54",
											"type": ""
										}
									],
									"src": "5003:177:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "5342:162:54",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "5352:26:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5364:9:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5375:2:54",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5360:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5360:18:54"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "5352:4:54"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5394:9:54"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "5405:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5387:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5387:25:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5387:25:54"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5432:9:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5443:2:54",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5428:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "5428:18:54"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "5448:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5421:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5421:34:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5421:34:54"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5475:9:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5486:2:54",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5471:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "5471:18:54"
														},
														{
															"name": "value2",
															"nodeType": "YulIdentifier",
															"src": "5491:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5464:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5464:34:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5464:34:54"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "5295:9:54",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "5306:6:54",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "5314:6:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "5322:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "5333:4:54",
											"type": ""
										}
									],
									"src": "5185:319:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "5722:250:54",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "5732:27:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5744:9:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5755:3:54",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5740:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5740:19:54"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "5732:4:54"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5775:9:54"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "5786:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5768:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5768:25:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5768:25:54"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5813:9:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5824:2:54",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5809:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "5809:18:54"
														},
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "5829:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5802:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5802:34:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5802:34:54"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5856:9:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5867:2:54",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5852:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "5852:18:54"
														},
														{
															"name": "value2",
															"nodeType": "YulIdentifier",
															"src": "5872:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5845:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5845:34:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5845:34:54"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5899:9:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5910:2:54",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5895:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "5895:18:54"
														},
														{
															"name": "value3",
															"nodeType": "YulIdentifier",
															"src": "5915:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5888:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5888:34:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5888:34:54"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5942:9:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5953:3:54",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5938:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "5938:19:54"
														},
														{
															"name": "value4",
															"nodeType": "YulIdentifier",
															"src": "5959:6:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5931:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "5931:35:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5931:35:54"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "5659:9:54",
											"type": ""
										},
										{
											"name": "value4",
											"nodeType": "YulTypedName",
											"src": "5670:6:54",
											"type": ""
										},
										{
											"name": "value3",
											"nodeType": "YulTypedName",
											"src": "5678:6:54",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "5686:6:54",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "5694:6:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "5702:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "5713:4:54",
											"type": ""
										}
									],
									"src": "5509:463:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "6076:93:54",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "6086:26:54",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6098:9:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6109:2:54",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6094:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "6094:18:54"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "6086:4:54"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6128:9:54"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6143:6:54"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "6151:10:54",
																	"type": "",
																	"value": "0xffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "6139:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "6139:23:54"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "6121:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "6121:42:54"
												},
												"nodeType": "YulExpressionStatement",
												"src": "6121:42:54"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "6045:9:54",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "6056:6:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "6067:4:54",
											"type": ""
										}
									],
									"src": "5977:192:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "6268:498:54",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6278:51:54",
												"value": {
													"arguments": [
														{
															"name": "ptr_to_tail",
															"nodeType": "YulIdentifier",
															"src": "6317:11:54"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "6304:12:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "6304:25:54"
												},
												"variables": [
													{
														"name": "rel_offset_of_tail",
														"nodeType": "YulTypedName",
														"src": "6282:18:54",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6477:22:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "6486:4:54"
																	},
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "6492:4:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6479:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "6479:18:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6479:18:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "rel_offset_of_tail",
																	"nodeType": "YulIdentifier",
																	"src": "6352:18:54"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "calldatasize",
																						"nodeType": "YulIdentifier",
																						"src": "6380:12:54"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6380:14:54"
																				},
																				{
																					"name": "base_ref",
																					"nodeType": "YulIdentifier",
																					"src": "6396:8:54"
																				}
																			],
																			"functionName": {
																				"name": "sub",
																				"nodeType": "YulIdentifier",
																				"src": "6376:3:54"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6376:29:54"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "6407:66:54",
																			"type": "",
																			"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "6372:3:54"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "6372:102:54"
																}
															],
															"functionName": {
																"name": "slt",
																"nodeType": "YulIdentifier",
																"src": "6348:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "6348:127:54"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "6341:6:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "6341:135:54"
												},
												"nodeType": "YulIf",
												"src": "6338:2:54"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6508:47:54",
												"value": {
													"arguments": [
														{
															"name": "base_ref",
															"nodeType": "YulIdentifier",
															"src": "6526:8:54"
														},
														{
															"name": "rel_offset_of_tail",
															"nodeType": "YulIdentifier",
															"src": "6536:18:54"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6522:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "6522:33:54"
												},
												"variables": [
													{
														"name": "addr_1",
														"nodeType": "YulTypedName",
														"src": "6512:6:54",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "6564:30:54",
												"value": {
													"arguments": [
														{
															"name": "addr_1",
															"nodeType": "YulIdentifier",
															"src": "6587:6:54"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "6574:12:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "6574:20:54"
												},
												"variableNames": [
													{
														"name": "length",
														"nodeType": "YulIdentifier",
														"src": "6564:6:54"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6637:22:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "6646:4:54"
																	},
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "6652:4:54"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6639:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "6639:18:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6639:18:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "6609:6:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6617:18:54",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "6606:2:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "6606:30:54"
												},
												"nodeType": "YulIf",
												"src": "6603:2:54"
											},
											{
												"nodeType": "YulAssignment",
												"src": "6668:25:54",
												"value": {
													"arguments": [
														{
															"name": "addr_1",
															"nodeType": "YulIdentifier",
															"src": "6680:6:54"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6688:4:54",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6676:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "6676:17:54"
												},
												"variableNames": [
													{
														"name": "addr",
														"nodeType": "YulIdentifier",
														"src": "6668:4:54"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6744:16:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6753:1:54",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6756:1:54",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6746:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "6746:12:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6746:12:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "addr",
															"nodeType": "YulIdentifier",
															"src": "6709:4:54"
														},
														{
															"arguments": [
																{
																	"arguments": [],
																	"functionName": {
																		"name": "calldatasize",
																		"nodeType": "YulIdentifier",
																		"src": "6719:12:54"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "6719:14:54"
																},
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "6735:6:54"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "6715:3:54"
															},
															"nodeType": "YulFunctionCall",
															"src": "6715:27:54"
														}
													],
													"functionName": {
														"name": "sgt",
														"nodeType": "YulIdentifier",
														"src": "6705:3:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "6705:38:54"
												},
												"nodeType": "YulIf",
												"src": "6702:2:54"
											}
										]
									},
									"name": "access_calldata_tail_t_bytes_calldata_ptr",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "base_ref",
											"nodeType": "YulTypedName",
											"src": "6225:8:54",
											"type": ""
										},
										{
											"name": "ptr_to_tail",
											"nodeType": "YulTypedName",
											"src": "6235:11:54",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "addr",
											"nodeType": "YulTypedName",
											"src": "6251:4:54",
											"type": ""
										},
										{
											"name": "length",
											"nodeType": "YulTypedName",
											"src": "6257:6:54",
											"type": ""
										}
									],
									"src": "6174:592:54"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "6824:205:54",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6834:10:54",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6843:1:54",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "6838:1:54",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6903:63:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "6928:3:54"
																			},
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "6933:1:54"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6924:3:54"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6924:11:54"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "src",
																						"nodeType": "YulIdentifier",
																						"src": "6947:3:54"
																					},
																					{
																						"name": "i",
																						"nodeType": "YulIdentifier",
																						"src": "6952:1:54"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6943:3:54"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6943:11:54"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "6937:5:54"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6937:18:54"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6917:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "6917:39:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6917:39:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "6864:1:54"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "6867:6:54"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "6861:2:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "6861:13:54"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "6875:19:54",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6877:15:54",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "6886:1:54"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6889:2:54",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6882:3:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "6882:10:54"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "6877:1:54"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "6857:3:54",
													"statements": []
												},
												"src": "6853:113:54"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6992:31:54",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "7005:3:54"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "7010:6:54"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7001:3:54"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7001:16:54"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7019:1:54",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6994:6:54"
																},
																"nodeType": "YulFunctionCall",
																"src": "6994:27:54"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6994:27:54"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "6981:1:54"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "6984:6:54"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "6978:2:54"
													},
													"nodeType": "YulFunctionCall",
													"src": "6978:13:54"
												},
												"nodeType": "YulIf",
												"src": "6975:2:54"
											}
										]
									},
									"name": "copy_memory_to_memory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "src",
											"nodeType": "YulTypedName",
											"src": "6802:3:54",
											"type": ""
										},
										{
											"name": "dst",
											"nodeType": "YulTypedName",
											"src": "6807:3:54",
											"type": ""
										},
										{
											"name": "length",
											"nodeType": "YulTypedName",
											"src": "6812:6:54",
											"type": ""
										}
									],
									"src": "6771:258:54"
								}
							]
						},
						"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value0, value0) }\n        if gt(add(add(_2, mul(length, 32)), 32), dataEnd) { revert(value0, value0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, end)\n        end := _1\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, mul(length, _1)), 64)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0))\n            let _2 := mload(srcPtr)\n            let length_1 := mload(_2)\n            mstore(tail_2, length_1)\n            copy_memory_to_memory(add(_2, _1), add(tail_2, _1), length_1)\n            tail_2 := add(add(tail_2, and(add(length_1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), _1)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(addr, addr) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(addr, addr) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n}",
						"id": 54,
						"language": "Yul",
						"name": "#utility.yul"
					}
				],
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x6080604052600436106101b05760003560e01c8063856a65eb116100ec578063c6f3a4271161008a578063e0ee036e11610064578063e0ee036e14610552578063e8eeb3f814610567578063ee99205c1461057c578063f2fde38b146105915761026d565b8063c6f3a42714610506578063d14dc2311461051b578063d39de6e9146105305761026d565b8063a26171e2116100c6578063a26171e21461049c578063a657e579146104b1578063b9181611146104c6578063c18c9141146104e65761026d565b8063856a65eb1461043a5780638da5cb5b146104675780639ad267441461047c5761026d565b8063587da02311610159578063707129391161013357806370712939146103c357806376671808146103e35780637fa140c7146103f857806381666796146104185761026d565b8063587da0231461036c578063634038011461038e57806366615d56146103a35761026d565b806342f1181e1161018a57806342f1181e146102f2578063494503d414610312578063540c2d531461033f5761026d565b80632a94c2791461027257806337b006a6146102aa57806338229d93146102c15761026d565b3661026d5760035473ffffffffffffffffffffffffffffffffffffffff16806101e3576101e36101de6105b1565b6105e8565b600060608273ffffffffffffffffffffffffffffffffffffffff1660003660405161020f929190611645565b600060405180830381855af49150503d806000811461024a576040519150601f19603f3d011682016040523d82523d6000602084013e61024f565b606091505b5091509150816000811461026557815182602001f35b815182602001fd5b600080fd5b34801561027e57600080fd5b5061029261028d366004611624565b6105f0565b6040516102a1939291906117b4565b60405180910390f35b3480156102b657600080fd5b506102bf61061c565b005b3480156102cd57600080fd5b506102e16102dc36600461160c565b610677565b6040516102a19594939291906117ca565b3480156102fe57600080fd5b506102bf61030d366004611553565b6106a6565b34801561031e57600080fd5b5061033261032d36600461160c565b6106ba565b6040516102a19190611671565b34801561034b57600080fd5b5061035f61035a366004611553565b6106f1565b6040516102a191906117a0565b34801561037857600080fd5b50610381610706565b6040516102a191906117ab565b34801561039a57600080fd5b5061038161070c565b3480156103af57600080fd5b506102bf6103be366004611553565b610712565b3480156103cf57600080fd5b506102bf6103de366004611553565b610723565b3480156103ef57600080fd5b506103816107d8565b34801561040457600080fd5b50610381610413366004611553565b6107de565b34801561042457600080fd5b5061042d6107f0565b6040516102a191906117ed565b34801561044657600080fd5b5061045a61045536600461159d565b6107fc565b6040516102a191906116ec565b34801561047357600080fd5b50610332610945565b34801561048857600080fd5b506102bf610497366004611574565b610961565b3480156104a857600080fd5b50610381610973565b3480156104bd57600080fd5b50610381610979565b3480156104d257600080fd5b5061035f6104e1366004611553565b61097f565b3480156104f257600080fd5b5061038161050136600461160c565b610994565b34801561051257600080fd5b506102bf6109a6565b34801561052757600080fd5b50610381610a3f565b34801561053c57600080fd5b50610545610a45565b6040516102a19190611692565b34801561055e57600080fd5b5061042d610ab4565b34801561057357600080fd5b5061042d610ac0565b34801561058857600080fd5b50610332610ad4565b34801561059d57600080fd5b506102bf6105ac366004611553565b610af0565b60408051808201909152600481527f6eff828500000000000000000000000000000000000000000000000000000000602082015290565b805160208201fd5b601560209081526000928352604080842090915290825290208054600182015460029092015490919083565b610624610e76565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556040517f6caedcb22a5c22c8ebd0caf751fec1228a6e006e6ee37169321e02d31ecc818390600090a1565b601660205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b6106ae610e9b565b6106b781610ee2565b50565b600281815481106106ca57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60106020526000908152604090205460ff1681565b600d5481565b60115481565b61071a610e76565b6106b781611013565b61072b610e9b565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff16610764576107646101de82610c4e565b60005b6002548110156107d4578173ffffffffffffffffffffffffffffffffffffffff166002828154811061079557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156107cc576107c7828261116e565b6107d4565b600101610767565b5050565b600c5481565b60096020526000908152604090205481565b60145463ffffffff1681565b6060600081838067ffffffffffffffff8111801561081957600080fd5b5060405190808252806020026020018201604052801561084d57816020015b60608152602001906001900390816108385790505b5060035490945073ffffffffffffffffffffffffffffffffffffffff168061087a5761087a6101de6105b1565b60005b82811461093a578173ffffffffffffffffffffffffffffffffffffffff168888838181106108a757fe5b90506020028101906108b991906117fe565b6040516108c7929190611645565b600060405180830381855af49150503d8060008114610902576040519150601f19603f3d011682016040523d82523d6000602084013e610907565b606091505b5090955093508461091a57835184602001fd5b8386828151811061092757fe5b602090810291909101015260010161087d565b505050505092915050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b610969610e9b565b6107d4828261116e565b60135481565b60085481565b60016020526000908152604090205460ff1681565b600b6020526000908152604090205481565b601154620697808110806109bc57506276a70081115b156109ce576109ce6101de6004610dd0565b60145463ffffffff6401000000008204811691168110806109f3575063ffffffff8116155b15610a0557610a056101de6000610dd0565b601254620f424063ffffffff9091161115610a2757610a276101de6001610dd0565b600260135410156107d4576107d46101de6003610dd0565b60175481565b60606002805480602002602001604051908101604052809291908181526020018280548015610aaa57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610a7f575b5050505050905090565b60125463ffffffff1681565b601454640100000000900463ffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b610af8610e9b565b73ffffffffffffffffffffffffffffffffffffffff8116610b2357610b1e6101de6113e9565b6106b7565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60408051808201909152600481527f57654fe400000000000000000000000000000000000000000000000000000000602082015290565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fde16f1a0000000000000000000000000000000000000000000000000000000001790525b919050565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167feb5108a200000000000000000000000000000000000000000000000000000000179052919050565b604080516024810184905260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe9f837710000000000000000000000000000000000000000000000000000000017905292915050565b6040805173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044808301919091528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f140a84db0000000000000000000000000000000000000000000000000000000017905292915050565b60607ffc45bd1100000000000000000000000000000000000000000000000000000000826004811115610dff57fe5b604051602401808260ff168152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b3360009081526001602052604090205460ff16610e9957610e996101de33611420565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e9957600054610e99906101de90339073ffffffffffffffffffffffffffffffffffffffff166114a3565b73ffffffffffffffffffffffffffffffffffffffff8116610f0857610f086101de610b93565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff1615610f4257610f426101de82610bca565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517f048368388f801041f7690185c4e28b6f3505c740c47be8ac104b55df666bfc8490611083908390611671565b60405180910390a160035460408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe1c7392a00000000000000000000000000000000000000000000000000000000179052905160009260609273ffffffffffffffffffffffffffffffffffffffff9091169161110f9190611655565b600060405180830381855af49150503d806000811461114a576040519150601f19603f3d011682016040523d82523d6000602084013e61114f565b606091505b50915091508161116157805160208201fd5b6111696109a6565b505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090205460ff166111a7576111a76101de83610c4e565b60025481106111c2576111c26101de82600280549050610cd1565b8173ffffffffffffffffffffffffffffffffffffffff16600282815481106111e657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614611248576112486101de6002838154811061122057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1684610d44565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106112c357fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff90921691839081106112f657fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600280548061134957fe5b60008281526020812082017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055909101909155604051339173ffffffffffffffffffffffffffffffffffffffff8516917f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b09190a35050565b60408051808201909152600481527fe69edc3e00000000000000000000000000000000000000000000000000000000602082015290565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb65a25b900000000000000000000000000000000000000000000000000000000179052919050565b6040805173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044808301919091528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1de45ad10000000000000000000000000000000000000000000000000000000017905292915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c4957600080fd5b600060208284031215611564578081fd5b61156d8261152f565b9392505050565b60008060408385031215611586578081fd5b61158f8361152f565b946020939093013593505050565b600080602083850312156115af578182fd5b823567ffffffffffffffff808211156115c6578384fd5b818501915085601f8301126115d9578384fd5b8135818111156115e7578485fd5b86602080830285010111156115fa578485fd5b60209290920196919550909350505050565b60006020828403121561161d578081fd5b5035919050565b60008060408385031215611636578182fd5b50508035926020909101359150565b6000828483379101908152919050565b60008251611667818460208701611868565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156116e057835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016116ae565b50909695505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611793577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845281518051808752611756818989018a8501611868565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01695909501860194509285019290850190600101611711565b5092979650505050505050565b901515815260200190565b90815260200190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b63ffffffff91909116815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611832578283fd5b83018035915067ffffffffffffffff82111561184c578283fd5b60200191503681900382131561186157600080fd5b9250929050565b60005b8381101561188357818101518382015260200161186b565b83811115611892576000848401525b5050505056fea2646970667358221220a172af876a1a767b620f91dae6ed69a58316c5d89bf1eef3f5b59e87afe1d85264736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1B0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x856A65EB GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xC6F3A427 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE0EE036E GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE0EE036E EQ PUSH2 0x552 JUMPI DUP1 PUSH4 0xE8EEB3F8 EQ PUSH2 0x567 JUMPI DUP1 PUSH4 0xEE99205C EQ PUSH2 0x57C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x591 JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0xC6F3A427 EQ PUSH2 0x506 JUMPI DUP1 PUSH4 0xD14DC231 EQ PUSH2 0x51B JUMPI DUP1 PUSH4 0xD39DE6E9 EQ PUSH2 0x530 JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0xA26171E2 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0xA26171E2 EQ PUSH2 0x49C JUMPI DUP1 PUSH4 0xA657E579 EQ PUSH2 0x4B1 JUMPI DUP1 PUSH4 0xB9181611 EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0xC18C9141 EQ PUSH2 0x4E6 JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x856A65EB EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x467 JUMPI DUP1 PUSH4 0x9AD26744 EQ PUSH2 0x47C JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x587DA023 GT PUSH2 0x159 JUMPI DUP1 PUSH4 0x70712939 GT PUSH2 0x133 JUMPI DUP1 PUSH4 0x70712939 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x76671808 EQ PUSH2 0x3E3 JUMPI DUP1 PUSH4 0x7FA140C7 EQ PUSH2 0x3F8 JUMPI DUP1 PUSH4 0x81666796 EQ PUSH2 0x418 JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x587DA023 EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0x63403801 EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0x66615D56 EQ PUSH2 0x3A3 JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x42F1181E GT PUSH2 0x18A JUMPI DUP1 PUSH4 0x42F1181E EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x494503D4 EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0x540C2D53 EQ PUSH2 0x33F JUMPI PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x2A94C279 EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x37B006A6 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0x38229D93 EQ PUSH2 0x2C1 JUMPI PUSH2 0x26D JUMP JUMPDEST CALLDATASIZE PUSH2 0x26D JUMPI PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x1E3 JUMPI PUSH2 0x1E3 PUSH2 0x1DE PUSH2 0x5B1 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x20F SWAP3 SWAP2 SWAP1 PUSH2 0x1645 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x24A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x24F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 DUP2 EQ PUSH2 0x265 JUMPI DUP2 MLOAD DUP3 PUSH1 0x20 ADD RETURN JUMPDEST DUP2 MLOAD DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x292 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x1624 JUMP JUMPDEST PUSH2 0x5F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x61C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x160C JUMP JUMPDEST PUSH2 0x677 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x6A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x332 PUSH2 0x32D CALLDATASIZE PUSH1 0x4 PUSH2 0x160C JUMP JUMPDEST PUSH2 0x6BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1671 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x35F PUSH2 0x35A CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x6F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x17A0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x706 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x17AB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x70C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x3DE CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x723 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x7D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x404 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x413 CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x7DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x42D PUSH2 0x7F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x17ED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x446 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45A PUSH2 0x455 CALLDATASIZE PUSH1 0x4 PUSH2 0x159D JUMP JUMPDEST PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x16EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x332 PUSH2 0x945 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x497 CALLDATASIZE PUSH1 0x4 PUSH2 0x1574 JUMP JUMPDEST PUSH2 0x961 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x973 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x979 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x35F PUSH2 0x4E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0x97F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0x501 CALLDATASIZE PUSH1 0x4 PUSH2 0x160C JUMP JUMPDEST PUSH2 0x994 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x9A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x381 PUSH2 0xA3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x545 PUSH2 0xA45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1692 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x42D PUSH2 0xAB4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x573 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x42D PUSH2 0xAC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x588 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x332 PUSH2 0xAD4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x5AC CALLDATASIZE PUSH1 0x4 PUSH2 0x1553 JUMP JUMPDEST PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0x6EFF828500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH2 0x624 PUSH2 0xE76 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x6CAEDCB22A5C22C8EBD0CAF751FEC1228A6E006E6EE37169321E02D31ECC8183 SWAP1 PUSH1 0x0 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP6 JUMP JUMPDEST PUSH2 0x6AE PUSH2 0xE9B JUMP JUMPDEST PUSH2 0x6B7 DUP2 PUSH2 0xEE2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x6CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x71A PUSH2 0xE76 JUMP JUMPDEST PUSH2 0x6B7 DUP2 PUSH2 0x1013 JUMP JUMPDEST PUSH2 0x72B PUSH2 0xE9B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x764 JUMPI PUSH2 0x764 PUSH2 0x1DE DUP3 PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x7D4 JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x795 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x7CC JUMPI PUSH2 0x7C7 DUP3 DUP3 PUSH2 0x116E JUMP JUMPDEST PUSH2 0x7D4 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x767 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP2 DUP4 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x84D JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x838 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x3 SLOAD SWAP1 SWAP5 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x87A JUMPI PUSH2 0x87A PUSH2 0x1DE PUSH2 0x5B1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 EQ PUSH2 0x93A JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x8A7 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x8B9 SWAP2 SWAP1 PUSH2 0x17FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C7 SWAP3 SWAP2 SWAP1 PUSH2 0x1645 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x902 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x907 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP6 POP SWAP4 POP DUP5 PUSH2 0x91A JUMPI DUP4 MLOAD DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP4 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x927 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x87D JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x969 PUSH2 0xE9B JUMP JUMPDEST PUSH2 0x7D4 DUP3 DUP3 PUSH2 0x116E JUMP JUMPDEST PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH3 0x69780 DUP2 LT DUP1 PUSH2 0x9BC JUMPI POP PUSH3 0x76A700 DUP2 GT JUMPDEST ISZERO PUSH2 0x9CE JUMPI PUSH2 0x9CE PUSH2 0x1DE PUSH1 0x4 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH4 0xFFFFFFFF PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP2 AND DUP2 LT DUP1 PUSH2 0x9F3 JUMPI POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0xA05 JUMPI PUSH2 0xA05 PUSH2 0x1DE PUSH1 0x0 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH3 0xF4240 PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND GT ISZERO PUSH2 0xA27 JUMPI PUSH2 0xA27 PUSH2 0x1DE PUSH1 0x1 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x13 SLOAD LT ISZERO PUSH2 0x7D4 JUMPI PUSH2 0x7D4 PUSH2 0x1DE PUSH1 0x3 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xAAA JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA7F JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xAF8 PUSH2 0xE9B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xB23 JUMPI PUSH2 0xB1E PUSH2 0x1DE PUSH2 0x13E9 JUMP JUMPDEST PUSH2 0x6B7 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 CALLER SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0x57654FE400000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDE16F1A000000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xEB5108A200000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE9F8377100000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x140A84DB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xFC45BD1100000000000000000000000000000000000000000000000000000000 DUP3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xDFF JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xE99 JUMPI PUSH2 0xE99 PUSH2 0x1DE CALLER PUSH2 0x1420 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xE99 JUMPI PUSH1 0x0 SLOAD PUSH2 0xE99 SWAP1 PUSH2 0x1DE SWAP1 CALLER SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14A3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xF08 JUMPI PUSH2 0xF08 PUSH2 0x1DE PUSH2 0xB93 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xF42 JUMPI PUSH2 0xF42 PUSH2 0x1DE DUP3 PUSH2 0xBCA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 DUP4 ADD DUP2 SSTORE DUP4 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD CALLER SWAP3 SWAP2 PUSH32 0x3147867C59D17E8FA9D522465651D44AAE0A9E38F902F3475B97E58072F0ED4C SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x48368388F801041F7690185C4E28B6F3505C740C47BE8AC104B55DF666BFC84 SWAP1 PUSH2 0x1083 SWAP1 DUP4 SWAP1 PUSH2 0x1671 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE1C7392A00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x60 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH2 0x110F SWAP2 SWAP1 PUSH2 0x1655 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x114A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x114F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1161 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH2 0x1169 PUSH2 0x9A6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x11A7 JUMPI PUSH2 0x11A7 PUSH2 0x1DE DUP4 PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 LT PUSH2 0x11C2 JUMPI PUSH2 0x11C2 PUSH2 0x1DE DUP3 PUSH1 0x2 DUP1 SLOAD SWAP1 POP PUSH2 0xCD1 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x11E6 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1248 JUMPI PUSH2 0x1248 PUSH2 0x1DE PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1220 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0xD44 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x12C3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x12F6 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x2 DUP1 SLOAD DUP1 PUSH2 0x1349 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE SWAP1 SWAP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP2 PUSH32 0x1F32C1B084E2DE0713B8FB16BD46BB9DF710A3DBEAE2F3CA93AF46E016DCC6B0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xE69EDC3E00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB65A25B900000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x1DE45AD100000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1564 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x156D DUP3 PUSH2 0x152F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1586 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x158F DUP4 PUSH2 0x152F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15AF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x15C6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15D9 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x15E7 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x15FA JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x161D JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1636 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1667 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1868 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x16E0 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x16AE JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1793 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE DUP2 MLOAD DUP1 MLOAD DUP1 DUP8 MSTORE PUSH2 0x1756 DUP2 DUP10 DUP10 ADD DUP11 DUP6 ADD PUSH2 0x1868 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP6 SWAP1 SWAP6 ADD DUP7 ADD SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1711 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1832 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x184C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x1861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1883 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x186B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1892 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 PUSH19 0xAF876A1A767B620F91DAE6ED69A58316C5D89B CALL 0xEE RETURN CREATE2 0xB5 SWAP15 DUP8 0xAF 0xE1 0xD8 MSTORE PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
				"sourceMap": "975:6397:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1829:15;;;;1858:31;1854:170;;1905:108;1944:55;:53;:55::i;:::-;1905:21;:108::i;:::-;2100:12;2114:23;2141:16;:29;;2171:8;;2141:39;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2099:81;;;;2272:7;2297:1;2292:87;;;;2454:10;2448:17;2435:10;2429:4;2425:21;2418:48;2292:87;2353:10;2347:17;2334:10;2328:4;2324:21;2317:48;975:6397;;;;3994:84:12;;;;;;;;;;-1:-1:-1;3994:84:12;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;3022:189:9;;;;;;;;;;;;;:::i;:::-;;4317:75:12;;;;;;;;;;-1:-1:-1;4317:75:12;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;1628:148:36:-;;;;;;;;;;-1:-1:-1;1628:148:36;;;;;:::i;:::-;;:::i;1423:28::-;;;;;;;;;;-1:-1:-1;1423:28:36;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3144:42:12:-;;;;;;;;;;-1:-1:-1;3144:42:12;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2611:45::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3264:37::-;;;;;;;;;;;;;:::i;2725:175:9:-;;;;;;;;;;-1:-1:-1;2725:175:9;;;;;:::i;:::-;;:::i;1890:462:36:-;;;;;;;;;;-1:-1:-1;1890:462:36;;;;;:::i;:::-;;:::i;2540:27:12:-;;;;;;;;;;;;;:::i;2141:57::-;;;;;;;;;;-1:-1:-1;2141:57:12;;;;;:::i;:::-;;:::i;3582:39::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3416:1203:9:-;;;;;;;;;;-1:-1:-1;3416:1203:9;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;870:20:49:-;;;;;;;;;;;;;:::i;2525:212:36:-;;;;;;;;;;-1:-1:-1;2525:212:36;;;;;:::i;:::-;;:::i;3496:31:12:-;;;;;;;;;;;;;:::i;1947:25::-;;;;;;;;;;;;;:::i;1216:43:36:-;;;;;;;;;;-1:-1:-1;1216:43:36;;;;;:::i;:::-;;:::i;2456:51:12:-;;;;;;;;;;-1:-1:-1;2456:51:12;;;;;:::i;:::-;;:::i;4912:1578:9:-;;;;;;;;;;;;;:::i;4487:40:12:-;;;;;;;;;;;;;:::i;2834:155:36:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3379:40:12:-;;;;;;;;;;;;;:::i;3678:41::-;;;;;;;;;;;;;:::i;1125:30::-;;;;;;;;;;;;;:::i;:346:49:-;;;;;;;;;;-1:-1:-1;1125:346:49;;;;;:::i;:::-;;:::i;7802:170:23:-;7928:37;;;;;;;;;;;;;;;;;7802:170;:::o;1559::46:-;1702:9;1696:16;1689:4;1678:9;1674:20;1667:46;3994:84:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3022:189:9:-;1003:27:36;:25;:27::i;:::-;3126:15:9::1;:29:::0;;;::::1;::::0;;3170:34:::1;::::0;::::1;::::0;983:42:10::1;::::0;3170:34:9::1;3022:189::o:0;4317:75:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1628:148:36:-;988:22:49;:20;:22::i;:::-;1740:29:36::1;1762:6;1740:21;:29::i;:::-;1628:148:::0;:::o;1423:28::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1423:28:36;:::o;3144:42:12:-;;;;;;;;;;;;;;;:::o;2611:45::-;;;;:::o;3264:37::-;;;;:::o;2725:175:9:-;1003:27:36;:25;:27::i;:::-;2853:40:9::1;2876:16;2853:22;:40::i;1890:462:36:-:0;988:22:49;:20;:22::i;:::-;2010:18:36::1;::::0;::::1;;::::0;;;:10:::1;:18;::::0;;;;;::::1;;2005:131;;2044:81;2066:58;2117:6;2066:50;:58::i;2044:81::-;2150:9;2145:201;2169:11;:18:::0;2165:22;::::1;2145:201;;;2230:6;2212:24;;:11;2224:1;2212:14;;;;;;;;;::::0;;;::::1;::::0;;;::::1;::::0;::::1;;:24;2208:128;;;2256:42;2288:6;2296:1;2256:31;:42::i;:::-;2316:5;;2208:128;2189:3;;2145:201;;;;1890:462:::0;:::o;2540:27:12:-;;;;:::o;2141:57::-;;;;;;;;;;;;;:::o;3582:39::-;;;;;;:::o;3416:1203:9:-;3495:30;3588:12;3495:30;3664:4;;3703:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3754:15:9;;3685:41;;-1:-1:-1;3754:15:9;;3858:22;3854:161;;3896:108;3935:55;:53;:55::i;3896:108::-;4100:9;4095:485;4120:10;4115:1;:15;4095:485;;4244:7;:20;;4265:4;;4270:1;4265:7;;;;;;;;;;;;;;;;;;:::i;:::-;4244:29;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4220:53:9;;-1:-1:-1;4220:53:9;-1:-1:-1;4220:53:9;4322:143;;4421:10;4415:17;4402:10;4396:4;4392:21;4385:48;4363:88;4559:10;4538:15;4554:1;4538:18;;;;;;;;;;;;;;;;;:31;4132:3;;4095:485;;;;4590:22;;;;3416:1203;;;;:::o;870:20:49:-;;;;;;:::o;2525:212:36:-;988:22:49;:20;:22::i;:::-;2684:46:36::1;2716:6;2724:5;2684:31;:46::i;3496:31:12:-:0;;;;:::o;1947:25::-;;;;:::o;1216:43:36:-;;;;;;;;;;;;;;;:::o;2456:51:12:-;;;;;;;;;;;;;:::o;4912:1578:9:-;5100:22;;5162:6;5136:32;;;:69;;;5198:7;5172:23;:33;5136:69;5132:288;;;5221:188;5260:148;5325:69;5260:43;:148::i;5221:188::-;5504:27;;;;;;;;;5545:25;:56;-1:-1:-1;5545:56:9;:93;;-1:-1:-1;5605:33:9;;;;5545:93;5541:315;;;5654:191;5693:151;5758:72;5693:43;:151::i;5654:191::-;5923:26;;818:5:10;5923:44:9;:26;;;:44;5919:276;;;5983:201;6022:161;6087:82;6022:43;:161::i;5983:201::-;6265:1;6246:16;;:20;6242:242;;;6282:191;6321:151;6386:72;6321:43;:151::i;4487:40:12:-;;;;:::o;2834:155:36:-;2932:16;2971:11;2964:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2834:155;:::o;3379:40:12:-;;;;;;:::o;3678:41::-;;;;;;;;;:::o;1125:30::-;;;;;;:::o;:346:49:-;988:22;:20;:22::i;:::-;1238::::1;::::0;::::1;1234:231;;1276:70;1298:47;:45;:47::i;1276:70::-;1234:231;;;1377:5;:16:::0;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;1412:42:::1;::::0;1377:16;;1433:10:::1;::::0;1412:42:::1;::::0;1377:5;1412:42:::1;1125:346:::0;:::o;3037:161:41:-;3156:35;;;;;;;;;;;;;;;;;3037:161;:::o;2535:249::-;2671:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2707:40;2671:106;;;2535:249;;;;:::o;2790:241::-;2922:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2958:36;2922:102;;;2790:241;;;:::o;1990:292::-;2156:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2192:34;2156:119;;;1990:292;;;;:::o;1665:319::-;1845:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1881:42;1845:132;;;1665:319;;;;:::o;7536:260:23:-;7649:12;7720:34;7774:4;7768:11;;;;;;;;7684:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7677:112;;7536:260;;;:::o;3049:226:36:-;3146:10;3135:22;;;;:10;:22;;;;;;;;3130:139;;3173:85;3195:62;3246:10;3195:50;:62::i;3173:85::-;3049:226::o;1477:255:49:-;1571:5;;;;1557:10;:19;1553:173;;1695:5;;1592:123;;1614:100;;1667:10;;1695:5;;1614:35;:100::i;3361:602:36:-;3502:20;;;3498:127;;3538:76;3560:53;:51;:53::i;3538:76::-;3700:18;;;;;;;:10;:18;;;;;;;;3696:134;;;3734:85;3756:62;3811:6;3756:54;:62::i;3734:85::-;3840:18;;;;;;;3861:4;3840:18;;;;;;;;:25;;;;;;;;3875:11;:24;;;;;;;;;;;;;;;;;;;;;3914:42;3945:10;;3840:18;3914:42;;;3361:602;:::o;6653:717:9:-;6781:15;:34;;;;;;;;;;6830:48;;;;;;6781:34;;6830:48;:::i;:::-;;;;;;;;7014:15;;7056:53;;;;;;;;;;;;;;;;;;7079:29;7056:53;;;7014:105;;6962:19;;6983:27;;7014:15;;;;;:105;;7056:53;7014:105;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6961:158;;;;7135:14;7130:142;;7232:14;7226:21;7219:4;7203:14;7199:25;7192:56;7174:88;7337:26;:24;:26::i;:::-;6653:717;;;:::o;4138:881:36:-;4268:18;;;;;;;:10;:18;;;;;;;;4263:131;;4302:81;4324:58;4375:6;4324:50;:58::i;4302:81::-;4416:11;:18;4407:27;;4403:201;;4450:143;4472:120;4537:5;4560:11;:18;;;;4472:47;:120::i;4450:143::-;4639:6;4617:28;;:11;4629:5;4617:18;;;;;;;;;;;;;;;;;;;;:28;4613:212;;4661:153;4683:130;4757:11;4769:5;4757:18;;;;;;;;;;;;;;;;;;;;4793:6;4683:56;:130::i;4661:153::-;4842:18;;;;;;;:10;:18;;;;;4835:25;;;;;;4891:11;4903:18;;:22;;;;4891:35;;;;;;;;;;;;;;;;4870:11;:18;;4891:35;;;;;4882:5;;4870:18;;;;;;;;;;;;;;:56;;;;;;;;;;;;;;;;;;4936:11;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4968:44;;5001:10;;4936:17;4968:44;;;;;4936:17;4968:44;4138:881;;:::o;717:159:45:-;835:34;;;;;;;;;;;;;;;;;717:159;:::o;2288:241:41:-;2420:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2456:36;2420:102;;;2288:241;;;:::o;435:276:45:-;594:110;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;630:25;594:110;;;435:276;;;;:::o;14:198:54:-;84:20;;144:42;133:54;;123:65;;113:2;;202:1;199;192:12;217:198;;329:2;317:9;308:7;304:23;300:32;297:2;;;350:6;342;335:22;297:2;378:31;399:9;378:31;:::i;:::-;368:41;287:128;-1:-1:-1;;;287:128:54:o;420:266::-;;;549:2;537:9;528:7;524:23;520:32;517:2;;;570:6;562;555:22;517:2;598:31;619:9;598:31;:::i;:::-;588:41;676:2;661:18;;;;648:32;;-1:-1:-1;;;507:179:54:o;691:677::-;;;849:2;837:9;828:7;824:23;820:32;817:2;;;870:6;862;855:22;817:2;915:9;902:23;944:18;985:2;977:6;974:14;971:2;;;1006:6;998;991:22;971:2;1049:6;1038:9;1034:22;1024:32;;1094:7;1087:4;1083:2;1079:13;1075:27;1065:2;;1121:6;1113;1106:22;1065:2;1166;1153:16;1192:2;1184:6;1181:14;1178:2;;;1213:6;1205;1198:22;1178:2;1272:7;1267:2;1261;1253:6;1249:15;1245:2;1241:24;1237:33;1234:46;1231:2;;;1298:6;1290;1283:22;1231:2;1334;1326:11;;;;;1356:6;;-1:-1:-1;807:561:54;;-1:-1:-1;;;;807:561:54:o;1373:190::-;;1485:2;1473:9;1464:7;1460:23;1456:32;1453:2;;;1506:6;1498;1491:22;1453:2;-1:-1:-1;1534:23:54;;1443:120;-1:-1:-1;1443:120:54:o;1568:258::-;;;1697:2;1685:9;1676:7;1672:23;1668:32;1665:2;;;1718:6;1710;1703:22;1665:2;-1:-1:-1;;1746:23:54;;;1816:2;1801:18;;;1788:32;;-1:-1:-1;1655:171:54:o;2026:273::-;;2209:6;2201;2196:3;2183:33;2235:16;;2260:15;;;2235:16;2173:126;-1:-1:-1;2173:126:54:o;2304:274::-;;2471:6;2465:13;2487:53;2533:6;2528:3;2521:4;2513:6;2509:17;2487:53;:::i;:::-;2556:16;;;;;2441:137;-1:-1:-1;;2441:137:54:o;2583:226::-;2759:42;2747:55;;;;2729:74;;2717:2;2702:18;;2684:125::o;2814:684::-;2985:2;3037:21;;;3107:13;;3010:18;;;3129:22;;;2814:684;;2985:2;3208:15;;;;3182:2;3167:18;;;2814:684;3254:218;3268:6;3265:1;3262:13;3254:218;;;3333:13;;3348:42;3329:62;3317:75;;3447:15;;;;3412:12;;;;3290:1;3283:9;3254:218;;;-1:-1:-1;3489:3:54;;2965:533;-1:-1:-1;;;;;;2965:533:54:o;3503:1121::-;;3692:2;3732;3721:9;3717:18;3762:2;3751:9;3744:21;3785:6;3820;3814:13;3851:6;3843;3836:22;3889:2;3878:9;3874:18;3867:25;;3952:2;3946;3938:6;3934:15;3923:9;3919:31;3915:40;3901:54;;3990:2;3982:6;3978:15;4011:4;4024:571;4038:6;4035:1;4032:13;4024:571;;;4127:66;4115:9;4107:6;4103:22;4099:95;4094:3;4087:108;4224:6;4218:13;4266:2;4260:9;4297:8;4289:6;4282:24;4319:61;4371:8;4366:2;4358:6;4354:15;4349:2;4345;4341:11;4319:61;:::i;:::-;4437:2;4423:17;4442:66;4419:90;4407:103;;;;4403:112;;;-1:-1:-1;4573:12:54;;;;4538:15;;;;4060:1;4053:9;4024:571;;;-1:-1:-1;4612:6:54;;3672:952;-1:-1:-1;;;;;;;3672:952:54:o;4629:187::-;4794:14;;4787:22;4769:41;;4757:2;4742:18;;4724:92::o;4821:177::-;4967:25;;;4955:2;4940:18;;4922:76::o;5185:319::-;5387:25;;;5443:2;5428:18;;5421:34;;;;5486:2;5471:18;;5464:34;5375:2;5360:18;;5342:162::o;5509:463::-;5768:25;;;5824:2;5809:18;;5802:34;;;;5867:2;5852:18;;5845:34;;;;5910:2;5895:18;;5888:34;5953:3;5938:19;;5931:35;5755:3;5740:19;;5722:250::o;5977:192::-;6151:10;6139:23;;;;6121:42;;6109:2;6094:18;;6076:93::o;6174:592::-;;;6317:11;6304:25;6407:66;6396:8;6380:14;6376:29;6372:102;6352:18;6348:127;6338:2;;6492:4;6486;6479:18;6338:2;6522:33;;6574:20;;;-1:-1:-1;6617:18:54;6606:30;;6603:2;;;6652:4;6646;6639:18;6603:2;6688:4;6676:17;;-1:-1:-1;6719:14:54;6715:27;;;6705:38;;6702:2;;;6756:1;6753;6746:12;6702:2;6268:498;;;;;:::o;6771:258::-;6843:1;6853:113;6867:6;6864:1;6861:13;6853:113;;;6943:11;;;6937:18;6924:11;;;6917:39;6889:2;6882:10;6853:113;;;6984:6;6981:1;6978:13;6975:2;;;7019:1;7010:6;7005:3;7001:16;6994:27;6975:2;;6824:205;;;:::o"
			}
		}
	},
	"sourceTreeHashHex": "0x83410b475f691410d13f3271db51d4d2be1d39cb2f03430ab83736bf5b3e797c",
	"sources": {
		"./StakingProxy.sol": {
			"id": 9
		},
		"./libs/LibSafeDowncast.sol": {
			"id": 22
		},
		"../utils/0xUtils/LibRichErrors.sol": {
			"id": 46
		},
		"../utils/0xUtils/LibSafeMathRichErrors.sol": {
			"id": 48
		},
		"./immutable/MixinStorage.sol": {
			"id": 12
		},
		"./immutable/MixinConstants.sol": {
			"id": 10
		},
		"../utils/0xUtils/Authorizable.sol": {
			"id": 36
		},
		"../utils/0xUtils/interfaces/IAuthorizable.sol": {
			"id": 50
		},
		"../utils/0xUtils/interfaces/IOwnable.sol": {
			"id": 51
		},
		"../utils/0xUtils/LibAuthorizableRichErrors.sol": {
			"id": 41
		},
		"../utils/0xUtils/Ownable.sol": {
			"id": 49
		},
		"../utils/0xUtils/LibOwnableRichErrors.sol": {
			"id": 45
		},
		"./interfaces/IGrgVault.sol": {
			"id": 13
		},
		"./interfaces/IStructs.sol": {
			"id": 18
		},
		"./libs/LibStakingRichErrors.sol": {
			"id": 23
		},
		"./interfaces/IStorageInit.sol": {
			"id": 17
		},
		"./interfaces/IStakingProxy.sol": {
			"id": 16
		}
	},
	"sourceCodes": {
		"./StakingProxy.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.7.4;\npragma experimental ABIEncoderV2;\n\nimport \"./libs/LibSafeDowncast.sol\";\nimport \"./immutable/MixinStorage.sol\";\nimport \"./immutable/MixinConstants.sol\";\nimport \"./interfaces/IStorageInit.sol\";\nimport \"./interfaces/IStakingProxy.sol\";\n\n\n/// #dev The RigoBlock Staking contract.\ncontract StakingProxy is\n    IStakingProxy,\n    MixinStorage,\n    MixinConstants\n{\n    using LibSafeDowncast for uint256;\n\n    /// @dev Constructor.\n    /// @param _stakingContract Staking contract to delegate calls to.\n    constructor(address _stakingContract)\n        MixinStorage()\n    {\n        // Deployer address must be authorized in order to call `init`\n        _addAuthorizedAddress(msg.sender);\n\n        // Attach the staking contract and initialize state\n        _attachStakingContract(_stakingContract);\n\n        // Remove the sender as an authorized address\n        _removeAuthorizedAddressAtIndex(msg.sender, 0);\n    }\n\n    /// @dev Delegates calls to the staking contract, if it is set.\n    receive()\n        external\n        payable\n    {\n        // Sanity check that we have a staking contract to call\n        address stakingContract_ = stakingContract;\n        if (stakingContract_ == NIL_ADDRESS) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.ProxyDestinationCannotBeNilError()\n            );\n        }\n\n        // Call the staking contract with the provided calldata.\n        (bool success, bytes memory returnData) = stakingContract_.delegatecall(msg.data);\n\n        // Revert on failure or return on success.\n        assembly {\n            switch success\n            case 0 {\n                revert(add(0x20, returnData), mload(returnData))\n            }\n            default {\n                return(add(0x20, returnData), mload(returnData))\n            }\n        }\n    }\n\n    /// @dev Attach a staking contract; future calls will be delegated to the staking contract.\n    /// Note that this is callable only by an authorized address.\n    /// @param _stakingContract Address of staking contract.\n    function attachStakingContract(address _stakingContract)\n        external\n        override\n        onlyAuthorized\n    {\n        _attachStakingContract(_stakingContract);\n    }\n\n    /// @dev Detach the current staking contract.\n    /// Note that this is callable only by an authorized address.\n    function detachStakingContract()\n        external\n        override\n        onlyAuthorized\n    {\n        stakingContract = NIL_ADDRESS;\n        emit StakingContractDetachedFromProxy();\n    }\n\n    /// @dev Batch executes a series of calls to the staking contract.\n    /// @param data An array of data that encodes a sequence of functions to\n    ///             call in the staking contracts.\n    function batchExecute(bytes[] calldata data)\n        external\n        returns (bytes[] memory batchReturnData)\n    {\n        // Initialize commonly used variables.\n        bool success;\n        bytes memory returnData;\n        uint256 dataLength = data.length;\n        batchReturnData = new bytes[](dataLength);\n        address staking = stakingContract;\n\n        // Ensure that a staking contract has been attached to the proxy.\n        if (staking == NIL_ADDRESS) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.ProxyDestinationCannotBeNilError()\n            );\n        }\n\n        // Execute all of the calls encoded in the provided calldata.\n        for (uint256 i = 0; i != dataLength; i++) {\n            // Call the staking contract with the provided calldata.\n            (success, returnData) = staking.delegatecall(data[i]);\n\n            // Revert on failure.\n            if (!success) {\n                assembly {\n                    revert(add(0x20, returnData), mload(returnData))\n                }\n            }\n\n            // Add the returndata to the batch returndata.\n            batchReturnData[i] = returnData;\n        }\n\n        return batchReturnData;\n    }\n\n    /// @dev Asserts that an epoch is between 5 and 90 days long.\n    //       Asserts that 0 < cobb douglas alpha value <= 1.\n    //       Asserts that a stake weight is <= 100%.\n    //       Asserts that pools allow >= 1 maker.\n    //       Asserts that all addresses are initialized.\n    function assertValidStorageParams()\n        public\n        view\n        override\n    {\n        // Epoch length must be between 5 and 90 days long\n        uint256 _epochDurationInSeconds = epochDurationInSeconds;\n        if (_epochDurationInSeconds < 5 days || _epochDurationInSeconds > 90 days) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InvalidParamValueError(\n                    LibStakingRichErrors.InvalidParamValueErrorCodes.InvalidEpochDuration\n            ));\n        }\n\n        // Alpha must be 0 < x <= 1\n        uint32 _cobbDouglasAlphaDenominator = cobbDouglasAlphaDenominator;\n        if (cobbDouglasAlphaNumerator > _cobbDouglasAlphaDenominator || _cobbDouglasAlphaDenominator == 0) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InvalidParamValueError(\n                    LibStakingRichErrors.InvalidParamValueErrorCodes.InvalidCobbDouglasAlpha\n            ));\n        }\n\n        // Weight of delegated stake must be <= 100%\n        if (rewardDelegatedStakeWeight > PPM_DENOMINATOR) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InvalidParamValueError(\n                    LibStakingRichErrors.InvalidParamValueErrorCodes.InvalidRewardDelegatedStakeWeight\n            ));\n        }\n\n        // Minimum stake must be > 1\n        if (minimumPoolStake < 2) {\n            LibRichErrors.rrevert(\n                LibStakingRichErrors.InvalidParamValueError(\n                    LibStakingRichErrors.InvalidParamValueErrorCodes.InvalidMinimumPoolStake\n            ));\n        }\n    }\n\n    /// @dev Attach a staking contract; future calls will be delegated to the staking contract.\n    /// @param _stakingContract Address of staking contract.\n    function _attachStakingContract(address _stakingContract)\n        internal\n    {\n        // Attach the staking contract\n        stakingContract = _stakingContract;\n        emit StakingContractAttachedToProxy(_stakingContract);\n\n        // Call `init()` on the staking contract to initialize storage.\n        (bool didInitSucceed, bytes memory initReturnData) = stakingContract.delegatecall(\n            abi.encodeWithSelector(IStorageInit(0).init.selector)\n        );\n\n        if (!didInitSucceed) {\n            assembly {\n                revert(add(initReturnData, 0x20), mload(initReturnData))\n            }\n        }\n\n        // Assert initialized storage values are valid\n        assertValidStorageParams();\n    }\n}\n",
		"./libs/LibSafeDowncast.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeDowncast {\n\n    /// @dev Safely downcasts to a uint96\n    /// Note that this reverts if the input value is too large.\n    function downcastToUint96(uint256 a)\n        internal\n        pure\n        returns (uint96 b)\n    {\n        b = uint96(a);\n        if (uint256(b) != a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256DowncastError(\n                LibSafeMathRichErrors.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n                a\n            ));\n        }\n        return b;\n    }\n\n    /// @dev Safely downcasts to a uint64\n    /// Note that this reverts if the input value is too large.\n    function downcastToUint64(uint256 a)\n        internal\n        pure\n        returns (uint64 b)\n    {\n        b = uint64(a);\n        if (uint256(b) != a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256DowncastError(\n                LibSafeMathRichErrors.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n                a\n            ));\n        }\n        return b;\n    }\n\n    /// @dev Safely downcasts to a uint32\n    /// Note that this reverts if the input value is too large.\n    function downcastToUint32(uint256 a)\n        internal\n        pure\n        returns (uint32 b)\n    {\n        b = uint32(a);\n        if (uint256(b) != a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256DowncastError(\n                LibSafeMathRichErrors.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n                a\n            ));\n        }\n        return b;\n    }\n}\n",
		"../utils/0xUtils/LibRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
		"../utils/0xUtils/LibSafeMathRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity >=0.5.4 <0.8.0;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
		"./immutable/MixinStorage.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./MixinConstants.sol\";\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../../utils/0xUtils/Authorizable.sol\";\nimport \"../interfaces/IGrgVault.sol\";\nimport \"../interfaces/IStructs.sol\";\nimport \"../libs/LibStakingRichErrors.sol\";\n\n\n// solhint-disable max-states-count, no-empty-blocks\ncontract MixinStorage is\n    Authorizable\n{\n    // address of staking contract\n    address public stakingContract;\n\n    // mapping from StakeStatus to global stored balance\n    // NOTE: only Status.DELEGATED is used to access this mapping, but this format\n    // is used for extensibility\n    mapping (uint8 => IStructs.StoredBalance) internal _globalStakeByStatus;\n\n    // mapping from StakeStatus to address of staker to stored balance\n    mapping (uint8 => mapping (address => IStructs.StoredBalance)) internal _ownerStakeByStatus;\n\n    // Mapping from Owner to Pool Id to Amount Delegated\n    mapping (address => mapping (bytes32 => IStructs.StoredBalance)) internal _delegatedStakeToPoolByOwner;\n\n    // Mapping from Pool Id to Amount Delegated\n    mapping (bytes32 => IStructs.StoredBalance) internal _delegatedStakeByPoolId;\n\n    // tracking Pool Id, a unique identifier for each staking pool.\n    bytes32 public lastPoolId;\n\n    /// @dev Mapping from RigoBlock pool subaccount to pool Id of rigoblock pool\n    /// @dev 0 RigoBlock pool subaccount address.\n    /// @return 0 The pool ID.\n    mapping (address => bytes32) public poolIdByRbPoolAccount;\n\n    // mapping from Pool Id to Pool\n    mapping (bytes32 => IStructs.Pool) internal _poolById;\n\n    /// @dev mapping from pool ID to reward balance of members\n    /// @dev 0 Pool ID.\n    /// @return 0 The total reward balance of members in this pool.\n    mapping (bytes32 => uint256) public rewardsByPoolId;\n\n    // The current epoch.\n    uint256 public currentEpoch;\n\n    // The current epoch start time.\n    uint256 public currentEpochStartTimeInSeconds;\n\n    // mapping from Pool Id to Epoch to Reward Ratio\n    mapping (bytes32 => mapping (uint256 => IStructs.Fraction)) internal _cumulativeRewardsByPool;\n\n    // mapping from Pool Id to Epoch\n    mapping (bytes32 => uint256) internal _cumulativeRewardsByPoolLastStored;\n\n    /// @dev Registered RigoBlock Proof_of_Performance contracts, capable of paying protocol fees.\n    /// @dev 0 The address to check.\n    /// @return 0 Whether the address is a registered proof_of_performance.\n    mapping (address => bool) public validPops;\n\n    /* Tweakable parameters */\n\n    // Minimum seconds between epochs.\n    uint256 public epochDurationInSeconds;\n\n    // How much delegated stake is weighted vs operator stake, in ppm.\n    uint32 public rewardDelegatedStakeWeight;\n\n    // Minimum amount of stake required in a pool to collect rewards.\n    uint256 public minimumPoolStake;\n\n    // Numerator for cobb douglas alpha factor.\n    uint32 public cobbDouglasAlphaNumerator;\n\n    // Denominator for cobb douglas alpha factor.\n    uint32 public cobbDouglasAlphaDenominator;\n\n    /* State for finalization */\n\n    /// @dev Stats for each pool that generated fees with sufficient stake to earn rewards.\n    ///      See `_minimumPoolStake` in `MixinParams`.\n    /// @dev 0 Pool ID.\n    /// @dev 1 Epoch number.\n    /// @return 0 Pool fee stats.\n    mapping (bytes32 => mapping (uint256 => IStructs.PoolStats)) public poolStatsByEpoch;\n\n    /// @dev Aggregated stats across all pools that generated fees with sufficient stake to earn rewards.\n    ///      See `_minimumPoolStake` in MixinParams.\n    /// @dev 0 Epoch number.\n    /// @return 0 Reward computation stats.\n    mapping (uint256 => IStructs.AggregatedStats) public aggregatedStatsByEpoch;\n\n    /// @dev The GRG balance of this contract that is reserved for pool reward payouts.\n    uint256 public grgReservedForPoolRewards;\n}\n",
		"./immutable/MixinConstants.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ncontract MixinConstants {\n\n    // 100% in parts-per-million.\n    uint32 constant internal PPM_DENOMINATOR = 10**6;\n\n    bytes32 constant internal NIL_POOL_ID = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    address constant internal NIL_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n    uint256 constant internal MIN_TOKEN_VALUE = 10**18;\n}\n",
		"../utils/0xUtils/Authorizable.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./interfaces/IAuthorizable.sol\";\nimport \"./LibAuthorizableRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\nimport \"./Ownable.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract Authorizable is\n    Ownable,\n    IAuthorizable\n{\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        _assertSenderIsAuthorized();\n        _;\n    }\n\n    /// @dev Whether an address is authorized to call privileged functions.\n    /// @dev 0 Address to query.\n    /// @return 0 Whether the address is authorized.\n    mapping (address => bool) public authorized;\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @dev 0 Index of authorized address.\n    /// @return 0 Authorized address.\n    address[] public authorities;\n\n    /// @dev Initializes the `owner` address.\n    constructor()\n        Ownable()\n    {}\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        _addAuthorizedAddress(target);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        if (!authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetNotAuthorizedError(target));\n        }\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                _removeAuthorizedAddressAtIndex(target, i);\n                break;\n            }\n        }\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        override\n        onlyOwner\n    {\n        _removeAuthorizedAddressAtIndex(target, index);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        override\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n\n    /// @dev Reverts if msg.sender is not authorized.\n    function _assertSenderIsAuthorized()\n        internal\n        view\n    {\n        if (!authorized[msg.sender]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.SenderNotAuthorizedError(msg.sender));\n        }\n    }\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function _addAuthorizedAddress(address target)\n        internal\n    {\n        // Ensure that the target is not the zero address.\n        if (target == address(0)) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.ZeroCantBeAuthorizedError());\n        }\n\n        // Ensure that the target is not already authorized.\n        if (authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetAlreadyAuthorizedError(target));\n        }\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorization of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function _removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        internal\n    {\n        if (!authorized[target]) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.TargetNotAuthorizedError(target));\n        }\n        if (index >= authorities.length) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.IndexOutOfBoundsError(\n                index,\n                authorities.length\n            ));\n        }\n        if (authorities[index] != target) {\n            LibRichErrors.rrevert(LibAuthorizableRichErrors.AuthorizedAddressMismatchError(\n                authorities[index],\n                target\n            ));\n        }\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.pop();\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n}\n",
		"../utils/0xUtils/interfaces/IAuthorizable.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./IOwnable.sol\";\n\n\nabstract contract IAuthorizable is\n    IOwnable\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        virtual;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        virtual;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        virtual;\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        virtual\n        returns (address[] memory);\n}\n",
		"../utils/0xUtils/interfaces/IOwnable.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nabstract contract IOwnable {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner)\n        public\n        virtual;\n}\n",
		"../utils/0xUtils/LibAuthorizableRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nlibrary LibAuthorizableRichErrors {\n\n    // bytes4(keccak256(\"AuthorizedAddressMismatchError(address,address)\"))\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\n        0x140a84db;\n\n    // bytes4(keccak256(\"IndexOutOfBoundsError(uint256,uint256)\"))\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\n        0xe9f83771;\n\n    // bytes4(keccak256(\"SenderNotAuthorizedError(address)\"))\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xb65a25b9;\n\n    // bytes4(keccak256(\"TargetAlreadyAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\n        0xde16f1a0;\n\n    // bytes4(keccak256(\"TargetNotAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xeb5108a2;\n\n    // bytes4(keccak256(\"ZeroCantBeAuthorizedError()\"))\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\n        hex\"57654fe4\";\n\n    // solhint-disable func-name-mixedcase\n    function AuthorizedAddressMismatchError(\n        address authorized,\n        address target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\n            authorized,\n            target\n        );\n    }\n\n    function IndexOutOfBoundsError(\n        uint256 index,\n        uint256 length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\n            index,\n            length\n        );\n    }\n\n    function SenderNotAuthorizedError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\n            sender\n        );\n    }\n\n    function TargetAlreadyAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function TargetNotAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function ZeroCantBeAuthorizedError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\n    }\n}\n",
		"../utils/0xUtils/Ownable.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n  Copyright 2019 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"./interfaces/IOwnable.sol\";\nimport \"./LibOwnableRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\ncontract Ownable is\n    IOwnable\n{\n    /// @dev The owner of this contract.\n    /// @return 0 The owner address.\n    address public owner;\n\n    constructor ()\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    /// @dev Change the owner of this contract.\n    /// @param newOwner New owner address.\n    function transferOwnership(address newOwner)\n        public\n        override\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            LibRichErrors.rrevert(LibOwnableRichErrors.TransferOwnerToZeroError());\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            LibRichErrors.rrevert(LibOwnableRichErrors.OnlyOwnerError(\n                msg.sender,\n                owner\n            ));\n        }\n    }\n}\n",
		"../utils/0xUtils/LibOwnableRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\npragma solidity >=0.5.9 <0.8.0;\n\n\nlibrary LibOwnableRichErrors {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n",
		"./interfaces/IGrgVault.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IGrgVault {\n\n    /// @dev Emmitted whenever a StakingProxy is set in a vault.\n    event StakingProxySet(address stakingProxyAddress);\n\n    /// @dev Emitted when the Staking contract is put into Catastrophic Failure Mode\n    /// @param sender Address of sender (`msg.sender`)\n    event InCatastrophicFailureMode(address sender);\n\n    /// @dev Emitted when Grg Tokens are deposited into the vault.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens deposited.\n    event Deposit(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted when Grg Tokens are withdrawn from the vault.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens withdrawn.\n    event Withdraw(\n        address indexed staker,\n        uint256 amount\n    );\n\n    /// @dev Emitted whenever the GRG AssetProxy is set.\n    event GrgProxySet(address grgProxyAddress);\n\n    /// @dev Sets the address of the StakingProxy contract.\n    /// Note that only the contract staker can call this function.\n    /// @param _stakingProxyAddress Address of Staking proxy contract.\n    function setStakingProxy(address _stakingProxyAddress)\n        external;\n\n    /// @dev Vault enters into Catastrophic Failure Mode.\n    /// *** WARNING - ONCE IN CATOSTROPHIC FAILURE MODE, YOU CAN NEVER GO BACK! ***\n    /// Note that only the contract staker can call this function.\n    function enterCatastrophicFailure()\n        external;\n\n    /// @dev Sets the Grg proxy.\n    /// Note that only the contract staker can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param grgProxyAddress Address of the RigoBlock Grg Proxy.\n    function setGrgProxy(address grgProxyAddress)\n        external;\n\n    /// @dev Deposit an `amount` of Grg Tokens from `staker` into the vault.\n    /// Note that only the Staking contract can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens to deposit.\n    function depositFrom(address staker, uint256 amount)\n        external;\n\n    /// @dev Withdraw an `amount` of Grg Tokens to `staker` from the vault.\n    /// Note that only the Staking contract can call this.\n    /// Note that this can only be called when *not* in Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    /// @param amount of Grg Tokens to withdraw.\n    function withdrawFrom(address staker, uint256 amount)\n        external;\n\n    /// @dev Withdraw ALL Grg Tokens to `staker` from the vault.\n    /// Note that this can only be called when *in* Catastrophic Failure mode.\n    /// @param staker of Grg Tokens.\n    function withdrawAllFrom(address staker)\n        external\n        returns (uint256);\n\n    /// @dev Returns the balance in Grg Tokens of the `staker`\n    /// @return Balance in Grg.\n    function balanceOf(address staker)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the entire balance of Grg tokens in the vault.\n    function balanceOfGrgVault()\n        external\n        view\n        returns (uint256);\n}\n",
		"./interfaces/IStructs.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IStructs {\n\n    /// @dev Stats for a pool that earned rewards.\n    /// @param feesCollected Fees collected in ETH by this pool.\n    /// @param weightedStake Amount of weighted stake in the pool.\n    /// @param membersStake Amount of non-operator stake in the pool.\n    struct PoolStats {\n        uint256 feesCollected;\n        uint256 weightedStake;\n        uint256 membersStake;\n    }\n\n    /// @dev Holds stats aggregated across a set of pools.\n    /// @param rewardsAvailable Rewards (ETH) available to the epoch\n    ///        being finalized (the previous epoch). This is simply the balance\n    ///        of the contract at the end of the epoch.\n    /// @param numPoolsToFinalize The number of pools that have yet to be finalized through `finalizePools()`.\n    /// @param totalFeesCollected The total fees collected for the epoch being finalized.\n    /// @param totalWeightedStake The total fees collected for the epoch being finalized.\n    /// @param totalRewardsFinalized Amount of rewards that have been paid during finalization.\n    struct AggregatedStats {\n        uint256 rewardsAvailable;\n        uint256 numPoolsToFinalize;\n        uint256 totalFeesCollected;\n        uint256 totalWeightedStake;\n        uint256 totalRewardsFinalized;\n    }\n\n    /// @dev Encapsulates a balance for the current and next epochs.\n    /// Note that these balances may be stale if the current epoch\n    /// is greater than `currentEpoch`.\n    /// @param currentEpoch The current epoch\n    /// @param currentEpochBalance Balance in the current epoch.\n    /// @param nextEpochBalance Balance in `currentEpoch+1`.\n    struct StoredBalance {\n        uint64 currentEpoch;\n        uint96 currentEpochBalance;\n        uint96 nextEpochBalance;\n    }\n\n    /// @dev Statuses that stake can exist in.\n    ///      Any stake can be (re)delegated effective at the next epoch\n    ///      Undelegated stake can be withdrawn if it is available in both the current and next epoch\n    enum StakeStatus {\n        UNDELEGATED,\n        DELEGATED\n    }\n\n    /// @dev Info used to describe a status.\n    /// @param status Status of the stake.\n    /// @param poolId Unique Id of pool. This is set when status=DELEGATED.\n    struct StakeInfo {\n        StakeStatus status;\n        bytes32 poolId;\n    }\n\n    /// @dev Struct to represent a fraction.\n    /// @param numerator Numerator of fraction.\n    /// @param denominator Denominator of fraction.\n    struct Fraction {\n        uint256 numerator;\n        uint256 denominator;\n    }\n\n    /// @dev Holds the metadata for a staking pool.\n    /// @param operator Operator of the pool.\n    /// @param stakingPal Staking pal of the pool.\n    /// @param operatorShare Fraction of the total balance owned by the operator, in ppm.\n    /// @param stakingPalShare Fraction of the operator reward owned by the staking pal, in ppm.\n    struct Pool {\n        address operator;\n        address stakingPal;\n        uint32 operatorShare;\n        uint32 stakingPalShare;\n    }\n}\n",
		"./libs/LibStakingRichErrors.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\nimport \"../../utils/0xUtils/LibRichErrors.sol\";\nimport \"../interfaces/IStructs.sol\";\n\n\nlibrary LibStakingRichErrors {\n\n    enum OperatorShareErrorCodes {\n        OperatorShareTooLarge,\n        CanOnlyDecreaseOperatorShare\n    }\n\n    enum InitializationErrorCodes {\n        MixinSchedulerAlreadyInitialized,\n        MixinParamsAlreadyInitialized\n    }\n\n    enum InvalidParamValueErrorCodes {\n        InvalidCobbDouglasAlpha,\n        InvalidRewardDelegatedStakeWeight,\n        InvalidMaximumMakersInPool,\n        InvalidMinimumPoolStake,\n        InvalidEpochDuration\n    }\n\n    enum PopManagerErrorCodes {\n        PopAlreadyRegistered,\n        PopNotRegistered\n    }\n\n    // bytes4(keccak256(\"OnlyCallableByPopError(address)\"))\n    bytes4 internal constant ONLY_CALLABLE_BY_POP_ERROR_SELECTOR =\n        0x61ecb802;\n\n    // bytes4(keccak256(\"PopManagerError(uint8,address)\"))\n    bytes4 internal constant POP_MANAGER_ERROR_SELECTOR =\n        0xb9588e43;\n\n    // bytes4(keccak256(\"InsufficientBalanceError(uint256,uint256)\"))\n    bytes4 internal constant INSUFFICIENT_BALANCE_ERROR_SELECTOR =\n        0x84c8b7c9;\n\n    // bytes4(keccak256(\"OnlyCallableByPoolOperatorError(address,bytes32)\"))\n    bytes4 internal constant ONLY_CALLABLE_BY_POOL_OPERATOR_ERROR_SELECTOR =\n        0x82ded785;\n\n    // bytes4(keccak256(\"BlockTimestampTooLowError(uint256,uint256)\"))\n    bytes4 internal constant BLOCK_TIMESTAMP_TOO_LOW_ERROR_SELECTOR =\n        0xa6bcde47;\n\n    // bytes4(keccak256(\"OnlyCallableByStakingContractError(address)\"))\n    bytes4 internal constant ONLY_CALLABLE_BY_STAKING_CONTRACT_ERROR_SELECTOR =\n        0xca1d07a2;\n\n    // bytes4(keccak256(\"OnlyCallableIfInCatastrophicFailureError()\"))\n    bytes internal constant ONLY_CALLABLE_IF_IN_CATASTROPHIC_FAILURE_ERROR =\n        hex\"3ef081cc\";\n\n    // bytes4(keccak256(\"OnlyCallableIfNotInCatastrophicFailureError()\"))\n    bytes internal constant ONLY_CALLABLE_IF_NOT_IN_CATASTROPHIC_FAILURE_ERROR =\n        hex\"7dd020ce\";\n\n    // bytes4(keccak256(\"OperatorShareError(uint8,bytes32,uint32)\"))\n    bytes4 internal constant OPERATOR_SHARE_ERROR_SELECTOR =\n        0x22df9597;\n\n    // bytes4(keccak256(\"PoolExistenceError(bytes32,bool)\"))\n    bytes4 internal constant POOL_EXISTENCE_ERROR_SELECTOR =\n        0x9ae94f01;\n\n    // bytes4(keccak256(\"ProxyDestinationCannotBeNilError()\"))\n    bytes internal constant PROXY_DESTINATION_CANNOT_BE_NIL_ERROR =\n        hex\"6eff8285\";\n\n    // bytes4(keccak256(\"InitializationError(uint8)\"))\n    bytes4 internal constant INITIALIZATION_ERROR_SELECTOR =\n        0x0b02d773;\n\n    // bytes4(keccak256(\"InvalidParamValueError(uint8)\"))\n    bytes4 internal constant INVALID_PARAM_VALUE_ERROR_SELECTOR =\n        0xfc45bd11;\n\n    // bytes4(keccak256(\"InvalidProtocolFeePaymentError(uint256,uint256)\"))\n    bytes4 internal constant INVALID_PROTOCOL_FEE_PAYMENT_ERROR_SELECTOR =\n        0x31d7a505;\n\n    // bytes4(keccak256(\"PreviousEpochNotFinalizedError(uint256,uint256)\"))\n    bytes4 internal constant PREVIOUS_EPOCH_NOT_FINALIZED_ERROR_SELECTOR =\n        0x614b800a;\n\n    // bytes4(keccak256(\"PoolNotFinalizedError(bytes32,uint256)\"))\n    bytes4 internal constant POOL_NOT_FINALIZED_ERROR_SELECTOR =\n        0x5caa0b05;\n\n    // solhint-disable func-name-mixedcase\n    function OnlyCallableByPopError(\n        address senderAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_CALLABLE_BY_POP_ERROR_SELECTOR,\n            senderAddress\n        );\n    }\n\n    function PopManagerError(\n        PopManagerErrorCodes errorCodes,\n        address popAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            POP_MANAGER_ERROR_SELECTOR,\n            errorCodes,\n            popAddress\n        );\n    }\n\n    function InsufficientBalanceError(\n        uint256 amount,\n        uint256 balance\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INSUFFICIENT_BALANCE_ERROR_SELECTOR,\n            amount,\n            balance\n        );\n    }\n\n    function OnlyCallableByPoolOperatorError(\n        address senderAddress,\n        bytes32 poolId\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_CALLABLE_BY_POOL_OPERATOR_ERROR_SELECTOR,\n            senderAddress,\n            poolId\n        );\n    }\n\n    function BlockTimestampTooLowError(\n        uint256 epochEndTime,\n        uint256 currentBlockTimestamp\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            BLOCK_TIMESTAMP_TOO_LOW_ERROR_SELECTOR,\n            epochEndTime,\n            currentBlockTimestamp\n        );\n    }\n\n    function OnlyCallableByStakingContractError(\n        address senderAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_CALLABLE_BY_STAKING_CONTRACT_ERROR_SELECTOR,\n            senderAddress\n        );\n    }\n\n    function OnlyCallableIfInCatastrophicFailureError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ONLY_CALLABLE_IF_IN_CATASTROPHIC_FAILURE_ERROR;\n    }\n\n    function OnlyCallableIfNotInCatastrophicFailureError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ONLY_CALLABLE_IF_NOT_IN_CATASTROPHIC_FAILURE_ERROR;\n    }\n\n    function OperatorShareError(\n        OperatorShareErrorCodes errorCodes,\n        bytes32 poolId,\n        uint32 operatorShare\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            OPERATOR_SHARE_ERROR_SELECTOR,\n            errorCodes,\n            poolId,\n            operatorShare\n        );\n    }\n\n    function PoolExistenceError(\n        bytes32 poolId,\n        bool alreadyExists\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            POOL_EXISTENCE_ERROR_SELECTOR,\n            poolId,\n            alreadyExists\n        );\n    }\n\n    function InvalidProtocolFeePaymentError(\n        uint256 expectedProtocolFeePaid,\n        uint256 actualProtocolFeePaid\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_PROTOCOL_FEE_PAYMENT_ERROR_SELECTOR,\n            expectedProtocolFeePaid,\n            actualProtocolFeePaid\n        );\n    }\n\n    function InitializationError(InitializationErrorCodes code)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INITIALIZATION_ERROR_SELECTOR,\n            uint8(code)\n        );\n    }\n\n    function InvalidParamValueError(InvalidParamValueErrorCodes code)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_PARAM_VALUE_ERROR_SELECTOR,\n            uint8(code)\n        );\n    }\n\n    function ProxyDestinationCannotBeNilError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return PROXY_DESTINATION_CANNOT_BE_NIL_ERROR;\n    }\n\n    function PreviousEpochNotFinalizedError(\n        uint256 unfinalizedEpoch,\n        uint256 unfinalizedPoolsRemaining\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            PREVIOUS_EPOCH_NOT_FINALIZED_ERROR_SELECTOR,\n            unfinalizedEpoch,\n            unfinalizedPoolsRemaining\n        );\n    }\n\n    function PoolNotFinalizedError(\n        bytes32 poolId,\n        uint256 epoch\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            POOL_NOT_FINALIZED_ERROR_SELECTOR,\n            poolId,\n            epoch\n        );\n    }\n}\n",
		"./interfaces/IStorageInit.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\n\n\ninterface IStorageInit {\n\n    /// @dev Initialize storage owned by this contract.\n    function init()\n        external;\n}\n",
		"./interfaces/IStakingProxy.sol": "// SPDX-License-Identifier: Apache 2.0\n\n/*\n\n  Original work Copyright 2019 ZeroEx Intl.\n  Modified work Copyright 2020 Rigo Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.5.9 <0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IStructs.sol\";\n\n\nabstract contract IStakingProxy {\n\n    /// @dev Emitted by StakingProxy when a staking contract is attached.\n    /// @param newStakingContractAddress Address of newly attached staking contract.\n    event StakingContractAttachedToProxy(\n        address newStakingContractAddress\n    );\n\n    /// @dev Emitted by StakingProxy when a staking contract is detached.\n    event StakingContractDetachedFromProxy();\n\n    /// @dev Attach a staking contract; future calls will be delegated to the staking contract.\n    /// Note that this is callable only by an authorized address.\n    /// @param _stakingContract Address of staking contract.\n    function attachStakingContract(address _stakingContract)\n        external\n        virtual;\n\n    /// @dev Detach the current staking contract.\n    /// Note that this is callable only by an authorized address.\n    function detachStakingContract()\n        external\n        virtual;\n\n    /// @dev Asserts that an epoch is between 5 and 30 days long.\n    //       Asserts that 0 < cobb douglas alpha value <= 1.\n    //       Asserts that a stake weight is <= 100%.\n    //       Asserts that pools allow >= 1 maker.\n    //       Asserts that all addresses are initialized.\n    function assertValidStorageParams()\n        external\n        view\n        virtual;\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.7.4+commit.3f05b770",
		"settings": {
			"remappings": [],
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}