{
	"compiler": {
		"version": "0.5.17+commit.d19bba13"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "addPopAddress",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "member",
						"type": "address"
					}
				],
				"name": "computeRewardBalanceOfDelegator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "computeRewardBalanceOfOperator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint32",
						"name": "operatorShare",
						"type": "uint32"
					},
					{
						"internalType": "bool",
						"name": "addOperatorAsMaker",
						"type": "bool"
					}
				],
				"name": "createStakingPool",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "uint32",
						"name": "newOperatorShare",
						"type": "uint32"
					}
				],
				"name": "decreaseStakingPoolOperatorShare",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "endEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "finalizePool",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getCurrentEpochEarliestEndTimeInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "enum IStructs.StakeStatus",
						"name": "stakeStatus",
						"type": "uint8"
					}
				],
				"name": "getGlobalStakeByStatus",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getGrgVault",
				"outputs": [
					{
						"internalType": "contract IGrgVault",
						"name": "grgVault",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"internalType": "enum IStructs.StakeStatus",
						"name": "stakeStatus",
						"type": "uint8"
					}
				],
				"name": "getOwnerStakeByStatus",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getParams",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_minimumPoolStake",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaNumerator",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaDenominator",
						"type": "uint32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "stakingPoolId",
						"type": "bytes32"
					}
				],
				"name": "getPoolsAddressesByStakingPoolId",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakeDelegatedToPoolByOwner",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakingPool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "operator",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "operatorShare",
								"type": "uint32"
							}
						],
						"internalType": "struct IStructs.Pool",
						"name": "",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakingPoolStatsThisEpoch",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "feesCollected",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "weightedStake",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "membersStake",
								"type": "uint256"
							}
						],
						"internalType": "struct IStructs.PoolStats",
						"name": "",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getTotalStakeDelegatedToPool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getWethContract",
				"outputs": [
					{
						"internalType": "contract IEtherToken",
						"name": "wethContract",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "init",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "stakingPoolId",
						"type": "bytes32"
					}
				],
				"name": "joinStakingPoolAsRbPool",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum IStructs.StakeStatus",
								"name": "status",
								"type": "uint8"
							},
							{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}
						],
						"internalType": "struct IStructs.StakeInfo",
						"name": "from",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "enum IStructs.StakeStatus",
								"name": "status",
								"type": "uint8"
							},
							{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							}
						],
						"internalType": "struct IStructs.StakeInfo",
						"name": "to",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "moveStake",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "makerAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "payerAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "protocolFee",
						"type": "uint256"
					}
				],
				"name": "payProtocolFee",
				"outputs": [],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "removePopAddress",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_minimumPoolStake",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaNumerator",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "_cobbDouglasAlphaDenominator",
						"type": "uint32"
					}
				],
				"name": "setParams",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "unstake",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "withdrawDelegatorRewards",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"addPopAddress(address)": {
					"details": "Adds a new proof_of_performance address",
					"params": {
						"addr": "Address of proof_of_performance contract to add"
					}
				},
				"computeRewardBalanceOfDelegator(bytes32,address)": {
					"details": "Computes the reward balance in ETH of a specific member of a pool.",
					"params": {
						"member": "The member of the pool.",
						"poolId": "Unique id of pool."
					},
					"return": "reward Balance in ETH."
				},
				"computeRewardBalanceOfOperator(bytes32)": {
					"details": "Computes the reward balance in ETH of the operator of a pool.",
					"params": {
						"poolId": "Unique id of pool."
					},
					"return": "reward Balance in ETH."
				},
				"createStakingPool(uint32,bool)": {
					"details": "Create a new staking pool. The sender will be the operator of this pool. Note that an operator must be payable.",
					"params": {
						"addOperatorAsMaker": "Adds operator to the created pool as a maker for convenience iff true.",
						"operatorShare": "Portion of rewards owned by the operator, in ppm."
					},
					"return": "poolId The unique pool id generated for this pool."
				},
				"decreaseStakingPoolOperatorShare(bytes32,uint32)": {
					"details": "Decreases the operator share for the given pool (i.e. increases pool rewards for members).",
					"params": {
						"newOperatorShare": "The newly decreased percentage of any rewards owned by the operator.",
						"poolId": "Unique Id of pool."
					}
				},
				"endEpoch()": {
					"details": "Begins a new epoch, preparing the prior one for finalization.      Throws if not enough time has passed between epochs or if the      previous epoch was not fully finalized.",
					"return": "numPoolsToFinalize The number of unfinalized pools."
				},
				"finalizePool(bytes32)": {
					"details": "Instantly finalizes a single pool that earned rewards in the previous      epoch, crediting it rewards for members and withdrawing operator's      rewards as WETH. This can be called by internal functions that need      to finalize a pool immediately. Does nothing if the pool is already      finalized or did not earn rewards in the previous epoch.",
					"params": {
						"poolId": "The pool ID to finalize."
					}
				},
				"getCurrentEpochEarliestEndTimeInSeconds()": {
					"details": "Returns the earliest end time in seconds of this epoch.      The next epoch can begin once this time is reached.      Epoch period = [startTimeInSeconds..endTimeInSeconds)",
					"return": "Time in seconds."
				},
				"getGlobalStakeByStatus(uint8)": {
					"details": "Gets global stake for a given status.",
					"params": {
						"stakeStatus": "UNDELEGATED or DELEGATED"
					},
					"return": "balance Global stake for given status."
				},
				"getGrgVault()": {
					"details": "An overridable way to access the deployed grgVault.      Must be view to allow overrides to access state.",
					"return": "grgVault The grgVault contract."
				},
				"getOwnerStakeByStatus(address,uint8)": {
					"details": "Gets an owner's stake balances by status.",
					"params": {
						"stakeStatus": "UNDELEGATED or DELEGATED",
						"staker": "Owner of stake."
					},
					"return": "balance Owner's stake balances for given status."
				},
				"getParams()": {
					"details": "Retrieves all configurable parameter values.",
					"return": "_epochDurationInSeconds Minimum seconds between epochs._rewardDelegatedStakeWeight How much delegated stake is weighted vs operator stake, in ppm._minimumPoolStake Minimum amount of stake required in a pool to collect rewards._cobbDouglasAlphaNumerator Numerator for cobb douglas alpha factor._cobbDouglasAlphaDenominator Denominator for cobb douglas alpha factor."
				},
				"getPoolsAddressesByStakingPoolId(bytes32)": {
					"details": "Get list of rigoblock pools addresses by staking pool Id.",
					"params": {
						"stakingPoolId": "Staking pool Id to query."
					},
					"return": "List of addresses."
				},
				"getStakeDelegatedToPoolByOwner(address,bytes32)": {
					"params": {
						"poolId": "Unique Id of pool.",
						"staker": "of stake."
					},
					"return": "balance Stake delegated to pool by staker."
				},
				"getStakingPool(bytes32)": {
					"details": "Returns a staking pool",
					"params": {
						"poolId": "Unique id of pool."
					}
				},
				"getStakingPoolStatsThisEpoch(bytes32)": {
					"details": "Get stats on a staking pool in this epoch.",
					"params": {
						"poolId": "Pool Id to query."
					},
					"return": "PoolStats struct for pool id."
				},
				"getTotalStakeDelegatedToPool(bytes32)": {
					"details": "Returns the total stake delegated to a specific staking pool,      across all members.",
					"params": {
						"poolId": "Unique Id of pool."
					},
					"return": "balance Total stake delegated to pool."
				},
				"getWethContract()": {
					"details": "An overridable way to access the deployed WETH contract.      Must be view to allow overrides to access state.",
					"return": "wethContract The WETH contract instance."
				},
				"init()": {
					"details": "Initialize storage owned by this contract.      This function should not be called directly.      The StakingProxy contract will call it in `attachStakingContract()`."
				},
				"joinStakingPoolAsRbPool(bytes32)": {
					"details": "Allows caller to join a staking pool as a rigoblock pool id.",
					"params": {
						"stakingPoolId": "Unique id of staking pool."
					}
				},
				"moveStake((uint8,bytes32),(uint8,bytes32),uint256)": {
					"details": "Moves stake between statuses: 'undelegated' or 'delegated'.      Delegated stake can also be moved between pools.      This change comes into effect next epoch.",
					"params": {
						"amount": "of stake to move.",
						"from": "status to move stake out of.",
						"to": "status to move stake into."
					}
				},
				"payProtocolFee(address,address,uint256)": {
					"details": "Pays a protocol fee in ETH.",
					"params": {
						"makerAddress": "The address of the order's maker.",
						"payerAddress": "The address that is responsible for paying the protocol fee.",
						"protocolFee": "The amount of protocol fees that should be paid."
					}
				},
				"removePopAddress(address)": {
					"details": "Removes an existing proof_of_performance address",
					"params": {
						"addr": "Address of proof_of_performance contract to remove"
					}
				},
				"setParams(uint256,uint32,uint256,uint32,uint32)": {
					"details": "Set all configurable parameters at once.",
					"params": {
						"_cobbDouglasAlphaDenominator": "Denominator for cobb douglas alpha factor.",
						"_cobbDouglasAlphaNumerator": "Numerator for cobb douglas alpha factor.",
						"_epochDurationInSeconds": "Minimum seconds between epochs.",
						"_minimumPoolStake": "Minimum amount of stake required in a pool to collect rewards.",
						"_rewardDelegatedStakeWeight": "How much delegated stake is weighted vs operator stake, in ppm."
					}
				},
				"stake(uint256)": {
					"details": "Stake GRG tokens. Tokens are deposited into the GRG Vault.      Unstake to retrieve the GRG. Stake is in the 'Active' status.",
					"params": {
						"amount": "of GRG to stake."
					}
				},
				"unstake(uint256)": {
					"details": "Unstake. Tokens are withdrawn from the GRG Vault and returned to      the staker. Stake must be in the 'undelegated' status in both the      current and next epoch in order to be unstaked.",
					"params": {
						"amount": "of GRG to unstake."
					}
				},
				"withdrawDelegatorRewards(bytes32)": {
					"details": "Withdraws the caller's WETH rewards that have accumulated      until the last epoch.",
					"params": {
						"poolId": "Unique id of pool."
					}
				}
			}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/staking/interfaces/IStaking.sol": "IStaking"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/staking/interfaces/IGrgVault.sol": {
			"keccak256": "0x3b6c339568dd8b7e8f330702c2edac7c58dbbe420952e56e4badd420394d78fd",
			"urls": [
				"bzz-raw://cc5eaed08f91f75b8f8b450f5f69ba6d07f3b8455844692fde62de001a47babb",
				"dweb:/ipfs/QmV1jufafpt2jrjLzEkqTycGyeyp1x7Hu11ZdsNcmK9Dyi"
			]
		},
		"localhost/staking/interfaces/IStaking.sol": {
			"keccak256": "0x404a43bfb62321b562e6aac58ffa3584b1b934ee36dd83d5242f5a6506234b22",
			"urls": [
				"bzz-raw://ee88fdd8351613828f88515d222f1dcce4fe2cb7fcf2bf8e63910dea385f32d8",
				"dweb:/ipfs/QmbASJtkEA8vaeR1RMktPourtrZMCVb6FhBykb4fVZASxe"
			]
		},
		"localhost/staking/interfaces/IStructs.sol": {
			"keccak256": "0xc3dcf7e7748029bbd5cb4731a892343812e92df6ce040ecca5dd2469658a7cf1",
			"urls": [
				"bzz-raw://1d96267f18df5646f4859735640eef63f8cd23e3b6be3827e2c84a93a6d5ec3b",
				"dweb:/ipfs/QmQ33qAfNcCCDBjDN2TF1oPLGFa3uHmkY68HxLhAKFxkGb"
			]
		},
		"localhost/utils/0xUtils/IERC20Token.sol": {
			"keccak256": "0x4eab85561a24071b7fa2229035daa1e9beb9d18b5f78f56b0cf8f0b094c5f8e3",
			"urls": [
				"bzz-raw://5be7f8843d72ad86d7926d32396bcc01b82b29d977b6e695c81d273e331ba91f",
				"dweb:/ipfs/QmWjhz3QYkJpgpiLyuX4mShSV44314FuVYCHViSvoSCqhY"
			]
		},
		"localhost/utils/0xUtils/IEtherToken.sol": {
			"keccak256": "0xfd4a5af3c7700a3df24a297262a863969e3672f0c6c033c8c3088933b97059bf",
			"urls": [
				"bzz-raw://3c7f5f6a066f7614c8c2ffd9695f8cf4f9427c5c935662092e9cf76203cb1b84",
				"dweb:/ipfs/QmQn4BbuXFtoAxkbQQfrB7bKBxbDSswGLHnCCvX6EKfWZr"
			]
		}
	},
	"version": 1
}