{
	"compiler": {
		"version": "0.5.17+commit.d19bba13"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "AuthorizedAddressRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "numPoolsToFinalize",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsAvailable",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalFeesCollected",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalWeightedStake",
						"type": "uint256"
					}
				],
				"name": "EpochEnded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsPaid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardsRemaining",
						"type": "uint256"
					}
				],
				"name": "EpochFinalized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "exchangeAddress",
						"type": "address"
					}
				],
				"name": "ExchangeAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "exchangeAddress",
						"type": "address"
					}
				],
				"name": "ExchangeRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "fromStatus",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "fromPool",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "toStatus",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "toPool",
						"type": "bytes32"
					}
				],
				"name": "MoveStake",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "oldOperatorShare",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "newOperatorShare",
						"type": "uint32"
					}
				],
				"name": "OperatorShareDecreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "epochDurationInSeconds",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "rewardDelegatedStakeWeight",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "minimumPoolStake",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "cobbDouglasAlphaNumerator",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "cobbDouglasAlphaDenominator",
						"type": "uint256"
					}
				],
				"name": "ParamsSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "rbPoolAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "RbPoolStakingPoolSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "operatorReward",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "membersReward",
						"type": "uint256"
					}
				],
				"name": "RewardsPaid",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Stake",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "operatorShare",
						"type": "uint32"
					}
				],
				"name": "StakingPoolCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "StakingPoolEarnedRewardsInEpoch",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Unstake",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "addAuthorizedAddress",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "aggregatedStatsByEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "rewardsAvailable",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "numPoolsToFinalize",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalFeesCollected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalWeightedStake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalRewardsFinalized",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "authorities",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "authorized",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "cobbDouglasAlphaDenominator",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "cobbDouglasAlphaNumerator",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "member",
						"type": "address"
					}
				],
				"name": "computeRewardBalanceOfDelegator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "computeRewardBalanceOfOperator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "rigoblockPoolAddress",
						"type": "address"
					}
				],
				"name": "createStakingPool",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "currentEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "currentEpochStartTimeInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "uint32",
						"name": "newOperatorShare",
						"type": "uint32"
					}
				],
				"name": "decreaseStakingPoolOperatorShare",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "epochDurationInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getAuthorizedAddresses",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getCurrentEpochEarliestEndTimeInSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "enum IStructs.StakeStatus",
						"name": "stakeStatus",
						"type": "uint8"
					}
				],
				"name": "getGlobalStakeByStatus",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getGrgVault",
				"outputs": [
					{
						"internalType": "contract IGrgVault",
						"name": "grgVault",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"internalType": "enum IStructs.StakeStatus",
						"name": "stakeStatus",
						"type": "uint8"
					}
				],
				"name": "getOwnerStakeByStatus",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakeDelegatedToPoolByOwner",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getStakingPool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "operator",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "operatorShare",
								"type": "uint32"
							}
						],
						"internalType": "struct IStructs.Pool",
						"name": "",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "staker",
						"type": "address"
					}
				],
				"name": "getTotalStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "getTotalStakeDelegatedToPool",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "currentEpoch",
								"type": "uint64"
							},
							{
								"internalType": "uint96",
								"name": "currentEpochBalance",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "nextEpochBalance",
								"type": "uint96"
							}
						],
						"internalType": "struct IStructs.StoredBalance",
						"name": "balance",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getWethContract",
				"outputs": [
					{
						"internalType": "contract IEtherToken",
						"name": "wethContract",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "rigoblockPoolAddress",
						"type": "address"
					}
				],
				"name": "joinStakingPoolAsRbPool",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "lastPoolId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "minimumPoolStake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "poolIdByRbPool",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "poolStatsByEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "feesCollected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "weightedStake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "membersStake",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "removeAuthorizedAddress",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "removeAuthorizedAddressAtIndex",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "rewardDelegatedStakeWeight",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "rewardsByPoolId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "rigoblockOperatorPools",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "stakingContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "validExchanges",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "wethReservedForPoolRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					}
				],
				"name": "withdrawDelegatorRewards",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"addAuthorizedAddress(address)": {
					"details": "Authorizes an address.",
					"params": {
						"target": "Address to authorize."
					}
				},
				"computeRewardBalanceOfDelegator(bytes32,address)": {
					"details": "Computes the reward balance in ETH of a specific member of a pool.",
					"params": {
						"member": "The member of the pool.",
						"poolId": "Unique id of pool."
					},
					"return": "totalReward Balance in ETH."
				},
				"computeRewardBalanceOfOperator(bytes32)": {
					"details": "Computes the reward balance in ETH of the operator of a pool.",
					"params": {
						"poolId": "Unique id of pool."
					},
					"return": "totalReward Balance in ETH."
				},
				"createStakingPool(address)": {
					"details": "Create a new staking pool. The sender will be the operator of this pool. Note that an operator must be payable.",
					"params": {
						"rigoblockPoolAddress": "Adds rigoblock pool to the created staking pool for convenience if non-null."
					},
					"return": "poolId The unique pool id generated for this pool."
				},
				"decreaseStakingPoolOperatorShare(bytes32,uint32)": {
					"details": "Decreases the operator share for the given pool (i.e. increases pool rewards for members).",
					"params": {
						"newOperatorShare": "The newly decreased percentage of any rewards owned by the operator.",
						"poolId": "Unique Id of pool."
					}
				},
				"getAuthorizedAddresses()": {
					"details": "Gets all authorized addresses.",
					"return": "Array of authorized addresses."
				},
				"getCurrentEpochEarliestEndTimeInSeconds()": {
					"details": "Returns the earliest end time in seconds of this epoch.      The next epoch can begin once this time is reached.      Epoch period = [startTimeInSeconds..endTimeInSeconds)",
					"return": "Time in seconds."
				},
				"getGlobalStakeByStatus(uint8)": {
					"details": "Gets global stake for a given status.",
					"params": {
						"stakeStatus": "UNDELEGATED or DELEGATED"
					},
					"return": "Global stake for given status."
				},
				"getGrgVault()": {
					"details": "An overridable way to access the deployed grgVault.      Must be view to allow overrides to access state.",
					"return": "grgVault The grgVault contract."
				},
				"getOwnerStakeByStatus(address,uint8)": {
					"details": "Gets an owner's stake balances by status.",
					"params": {
						"stakeStatus": "UNDELEGATED or DELEGATED",
						"staker": "Owner of stake."
					},
					"return": "Owner's stake balances for given status."
				},
				"getStakeDelegatedToPoolByOwner(address,bytes32)": {
					"details": "Returns the stake delegated to a specific staking pool, by a given staker.",
					"params": {
						"poolId": "Unique Id of pool.",
						"staker": "of stake."
					},
					"return": "Stake delegated to pool by staker."
				},
				"getStakingPool(bytes32)": {
					"details": "Returns a staking pool",
					"params": {
						"poolId": "Unique id of pool."
					}
				},
				"getTotalStake(address)": {
					"details": "Returns the total stake for a given staker.",
					"params": {
						"staker": "of stake."
					},
					"return": "Total GRG staked by `staker`."
				},
				"getTotalStakeDelegatedToPool(bytes32)": {
					"details": "Returns the total stake delegated to a specific staking pool,      across all members.",
					"params": {
						"poolId": "Unique Id of pool."
					},
					"return": "Total stake delegated to pool."
				},
				"getWethContract()": {
					"details": "An overridable way to access the deployed WETH contract.      Must be view to allow overrides to access state.",
					"return": "wethContract The WETH contract instance."
				},
				"joinStakingPoolAsRbPool(bytes32,address)": {
					"details": "Allows caller to join a staking pool as a rigoblock pool.",
					"params": {
						"poolId": "Unique id of pool."
					}
				},
				"removeAuthorizedAddress(address)": {
					"details": "Removes authorizion of an address.",
					"params": {
						"target": "Address to remove authorization from."
					}
				},
				"removeAuthorizedAddressAtIndex(address,uint256)": {
					"details": "Removes authorizion of an address.",
					"params": {
						"index": "Index of target in authorities array.",
						"target": "Address to remove authorization from."
					}
				},
				"transferOwnership(address)": {
					"details": "Change the owner of this contract.",
					"params": {
						"newOwner": "New owner address."
					}
				},
				"withdrawDelegatorRewards(bytes32)": {
					"details": "Withdraws the caller's WETH rewards that have accumulated      until the last epoch.",
					"params": {
						"poolId": "Unique id of pool."
					}
				}
			}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/staking/staking_pools/MixinStakingPool.sol": "MixinStakingPool"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/staking/immutable/MixinConstants.sol": {
			"keccak256": "0xcf9b9250913f00b59c147b42eec5b03078e586797072745dd1ec586f58adad57",
			"urls": [
				"bzz-raw://d5fdecbbb37b21bf090c4c3e578a3c98cae2853404fae4b1ea99774d91a932f3",
				"dweb:/ipfs/QmWwAi2QGei9oJQiCQYczEsQkBC8UUFP65RkbPERSEfjQp"
			]
		},
		"localhost/staking/immutable/MixinDeploymentConstants.sol": {
			"keccak256": "0x0ee79f1ccfef16ff698a13ec5f21748acf18102a3f0e3e5cf217d8bca74ab0b4",
			"urls": [
				"bzz-raw://a0861d60ca88b31de95f6db1fab04c354febe4a742bacad867becad43b154d04",
				"dweb:/ipfs/QmNb1e7ZpDoqfUcgQNzgour89ikcQTcr78khPbmfUAhTwx"
			]
		},
		"localhost/staking/immutable/MixinStorage.sol": {
			"keccak256": "0x29f1af986aca61b3e49ea40d81fbb2454ba2e65895d4450fe935c00b34891669",
			"urls": [
				"bzz-raw://08de106074f0c57c36e785a2755139bcbe5cbee2d90e313a1296f006fab8e55b",
				"dweb:/ipfs/QmV2kiY7RX3V59uzeiEr9WwA2DkGvEkci4iPGQd9fqMCTB"
			]
		},
		"localhost/staking/interfaces/IGrgVault.sol": {
			"keccak256": "0x3b6c339568dd8b7e8f330702c2edac7c58dbbe420952e56e4badd420394d78fd",
			"urls": [
				"bzz-raw://cc5eaed08f91f75b8f8b450f5f69ba6d07f3b8455844692fde62de001a47babb",
				"dweb:/ipfs/QmV1jufafpt2jrjLzEkqTycGyeyp1x7Hu11ZdsNcmK9Dyi"
			]
		},
		"localhost/staking/interfaces/IStakingEvents.sol": {
			"keccak256": "0xb2f681b66d6e02fc79a33d00e57d9fd19848b14fb9b024a22f577aecebcffcb8",
			"urls": [
				"bzz-raw://b40712bd4417030b883ff745c188c600a31d6aca857d18b42861072ff487839e",
				"dweb:/ipfs/QmPK2PbmEpvoxxt7XG9uEZffbDTb5tsKdkstYtNhimVKDT"
			]
		},
		"localhost/staking/interfaces/IStructs.sol": {
			"keccak256": "0xc3dcf7e7748029bbd5cb4731a892343812e92df6ce040ecca5dd2469658a7cf1",
			"urls": [
				"bzz-raw://1d96267f18df5646f4859735640eef63f8cd23e3b6be3827e2c84a93a6d5ec3b",
				"dweb:/ipfs/QmQ33qAfNcCCDBjDN2TF1oPLGFa3uHmkY68HxLhAKFxkGb"
			]
		},
		"localhost/staking/libs/LibSafeDowncast.sol": {
			"keccak256": "0x6524dae8f89e36d263300e2000a55982c09cc88cdfc51ea8b905e97a6045f211",
			"urls": [
				"bzz-raw://4652ee709dd8238a2579f4206187b2debac7effa13d896929dc5b50f30ab869e",
				"dweb:/ipfs/QmQuVqi3DeMDiXc5EcxUrCtqSyBkwCqacFo9BUrMSiQV7C"
			]
		},
		"localhost/staking/libs/LibStakingRichErrors.sol": {
			"keccak256": "0x9fd346514f4493fe6c8be681740af0600ec9771fcbdb7bfe61d548e91e26181b",
			"urls": [
				"bzz-raw://d560d782da1824a4c2eb5f67802187da2b56debe062370af6b136ae26cbcc986",
				"dweb:/ipfs/QmZ8hUGjKH2H4q7rWfA1RWDfxyCWg1ykaRVw2jXF11ZEwe"
			]
		},
		"localhost/staking/stake/MixinStakeBalances.sol": {
			"keccak256": "0x0f78b6a7d72165de233348189c95469ed5f3e992829e9a1f23dbbc36f6bd7a98",
			"urls": [
				"bzz-raw://446ba038d150f532ebfb9be27233dedbec62c000fd8f728d84290dc7ff220861",
				"dweb:/ipfs/QmVttnyPX6vP6t2fyFx5fiGT9i4CBY6eGi7SswjFhAvzXm"
			]
		},
		"localhost/staking/stake/MixinStakeStorage.sol": {
			"keccak256": "0x82e65b1aa789d828820bba843808b95e4d7120897406214b2148f629ab7f7dbd",
			"urls": [
				"bzz-raw://b4122e195497b614f8c7d23c069988b873e0e8feae3d5f6ee787ecdda6e3ef89",
				"dweb:/ipfs/QmZyPw1n5rzey4Tm1kkL2yCgTwLofHpD9iDipR3dMD4Nfr"
			]
		},
		"localhost/staking/staking_pools/MixinCumulativeRewards.sol": {
			"keccak256": "0x7dd83f9443343833bc977e8a99ef3d8b954e65262529b68033ca7c511f416cae",
			"urls": [
				"bzz-raw://667d93946d4dfee9a6642838609cc476653a1a29c2eb339b2d115c845203ad57",
				"dweb:/ipfs/QmT14CsRXFCBFFP6J1r5vonwD9YvCTkgPwi9NZa62RaVoR"
			]
		},
		"localhost/staking/staking_pools/MixinStakingPool.sol": {
			"keccak256": "0x3d45e34bd497703bce71b638e2a5718456417f7d46c68cc41ccf03c6fe661475",
			"urls": [
				"bzz-raw://a3c751f9b54e9e970332fa7a110bc541a936028e7b4e7efc8e9be36efd1d308c",
				"dweb:/ipfs/QmanpQThbpQEq8gtUwANYLyW4ZR8mfZM1vKjMV6UjFKKhW"
			]
		},
		"localhost/staking/staking_pools/MixinStakingPoolRewards.sol": {
			"keccak256": "0x943c2f8ceaf87296246ed6b6ba5366cf0cd5905a2d22689fb498df20c0d2d24a",
			"urls": [
				"bzz-raw://2d3535e262139b8c5594b58b3665659d9912f078a7d38c3c6f9cdd7a0fe59c62",
				"dweb:/ipfs/QmePrvagqoHgjwz96CQVMGXXSEKqMVG925bt5VRGxLkNUB"
			]
		},
		"localhost/staking/sys/MixinAbstract.sol": {
			"keccak256": "0xbb88f2980e6977510f5948a54d5a9292be2b0cbfcf465c9d5b1b4625497f593b",
			"urls": [
				"bzz-raw://ea353970c19021cc260b04409f81c2690377b85b7bdd2e22470c243d260c3dbb",
				"dweb:/ipfs/QmbQu7DJ8X78wsxLtnXNdrHG8eeJo3K7YwimmTX1KsE1VW"
			]
		},
		"localhost/staking/sys/MixinScheduler.sol": {
			"keccak256": "0x0cc2756bdd4d1f5b1699012e639df1812d261a671c80db669664a0a45f06807d",
			"urls": [
				"bzz-raw://8aef38d65e85dc0dbba6ae01fe054137ab56eb9334b6a2eea67c144d8cf06af1",
				"dweb:/ipfs/QmdyuX2nsKNk8UNwb5eNGNAigtz4oXqkauU1D91ewfLV4B"
			]
		},
		"localhost/utils/0xUtils/Authorizable.sol": {
			"keccak256": "0xca0e2034860168cf1abb698c4745650c8397cf850cc4c1e73f82279769037b81",
			"urls": [
				"bzz-raw://046ddd48ecae552a6f9e1ee8368938bc2d1ac21e52a48752efd23e2c733a27cd",
				"dweb:/ipfs/QmXqh4LZLqvvPbaYHHzXeujuPv4ggmdh5cbVAVH3kjrhjA"
			]
		},
		"localhost/utils/0xUtils/IERC20Token.sol": {
			"keccak256": "0x4eab85561a24071b7fa2229035daa1e9beb9d18b5f78f56b0cf8f0b094c5f8e3",
			"urls": [
				"bzz-raw://5be7f8843d72ad86d7926d32396bcc01b82b29d977b6e695c81d273e331ba91f",
				"dweb:/ipfs/QmWjhz3QYkJpgpiLyuX4mShSV44314FuVYCHViSvoSCqhY"
			]
		},
		"localhost/utils/0xUtils/IEtherToken.sol": {
			"keccak256": "0xfd4a5af3c7700a3df24a297262a863969e3672f0c6c033c8c3088933b97059bf",
			"urls": [
				"bzz-raw://3c7f5f6a066f7614c8c2ffd9695f8cf4f9427c5c935662092e9cf76203cb1b84",
				"dweb:/ipfs/QmQn4BbuXFtoAxkbQQfrB7bKBxbDSswGLHnCCvX6EKfWZr"
			]
		},
		"localhost/utils/0xUtils/LibAuthorizableRichErrors.sol": {
			"keccak256": "0xbf557501c90a4e53f6ee05bfc0ce09fb05395dfef56c3a653b2cd1a7327a4ebc",
			"urls": [
				"bzz-raw://bc3ae358626ce5cce9b5976f9633ad756a4d27156cb6af2db6fab69ab5da7965",
				"dweb:/ipfs/QmbAEiFR1wBLmfcKBRPHP432KtHNRnGA868oPMFidVjJMJ"
			]
		},
		"localhost/utils/0xUtils/LibFractions.sol": {
			"keccak256": "0x1dc5e79fbf32a2005677d4e4c0d24f5cd23436acf167daf201392594b87567db",
			"urls": [
				"bzz-raw://841beb587d0bde771457904a7afa2d8689d8076878304f5d45c12e2abd2d2c48",
				"dweb:/ipfs/QmNjFvGDCrMiCdtQbKvHw3gPftTFVvXUPTCPDEFxWKmMVS"
			]
		},
		"localhost/utils/0xUtils/LibMath.sol": {
			"keccak256": "0x6bd90e5c83d34d21a466a41d6f57a0547b49505d4be5dd61447a7d1dc21f9f25",
			"urls": [
				"bzz-raw://e1cb22812e006da65f243d561c7e0fcc4b8ee99852f45bec0d23547c1a3d4370",
				"dweb:/ipfs/QmTYS7ZxhZaJe6heYP2jyoykCPPJ9ufUv7xdPa2nM5JcQ2"
			]
		},
		"localhost/utils/0xUtils/LibMathRichErrors.sol": {
			"keccak256": "0xd2d047534facd6051467dd7a22d7ee9fd4e54e63bb5a5fae2511eac7332fad3d",
			"urls": [
				"bzz-raw://5e0aeedd55c996fd72004a14f5c528ed60b46631ca9599bbb7925c8342ca3be4",
				"dweb:/ipfs/QmNi1ozt4sYmn4pCobjU7FQ4KGUvK77pCyWUtbD18uQgVm"
			]
		},
		"localhost/utils/0xUtils/LibOwnableRichErrors.sol": {
			"keccak256": "0xfe1658c79678842a12d9b5841157eb871aaa810ed8a0223c715f49ad4c71d690",
			"urls": [
				"bzz-raw://1003baa4b726f5ea2256d1ac58e4d953756a657e786e7817a050786ac7819120",
				"dweb:/ipfs/QmWbiBGMegH2kkKJeCCkXfMJZYbvnoXrEJA2uuG1XCZ6iZ"
			]
		},
		"localhost/utils/0xUtils/LibRichErrors.sol": {
			"keccak256": "0xe3ce6ded2fea3cc80998ca4d364bda530e273af0ba1c78d22a6cdadb6f64186e",
			"urls": [
				"bzz-raw://8239629dbcee9797a8f8157f03c2b78827b446787b4d53b3033a3e1ab538ad0b",
				"dweb:/ipfs/QmbttkX94CxMkS6t1K4He5bNwGKCRUhKqTt9pNsAL5ynst"
			]
		},
		"localhost/utils/0xUtils/LibSafeMath.sol": {
			"keccak256": "0xd0da9ac1905381832f6612774cb7eced3b4b60459d6bafa59f5424955b44c935",
			"urls": [
				"bzz-raw://ede4bbe2dac43c6cc4e3b7a22285e00d55b31fb8cc00b375c6ac4714298b7e6d",
				"dweb:/ipfs/QmWbN5qbJSNYrMMZMugaH5itTVSexe9yPsCPuArQVCLUgi"
			]
		},
		"localhost/utils/0xUtils/LibSafeMathRichErrors.sol": {
			"keccak256": "0x4458a1c77afaa64c5b2984a1de042d017e043ba412fc12e33e215563a63f6f7e",
			"urls": [
				"bzz-raw://f7fb12481f64bc7088ed77d74ca5b628bdcc7462e750102131f509ad77140afc",
				"dweb:/ipfs/QmYxMBtzugoYPdCaHDJyw5mAYv2yr8GPuJdvNMGuqC9k3R"
			]
		},
		"localhost/utils/0xUtils/Ownable.sol": {
			"keccak256": "0x1e93522fe38a8408cdcb029fec6c9d021abab97b3d191cd95a46a64c3853ec06",
			"urls": [
				"bzz-raw://2fdc8b10a5e077ee5a87579718003fbfa49b34826b466d621ef11362390e7608",
				"dweb:/ipfs/QmdrZ8HkgiPQmrSB17Cz5VD6L217qoNcUBPaFkrt1QHnZA"
			]
		},
		"localhost/utils/0xUtils/interfaces/IAuthorizable.sol": {
			"keccak256": "0x961072f728ffdd8797ba433cf9d78715e88324e7e0eca3a33700b132ae67a1ca",
			"urls": [
				"bzz-raw://e72459eed8fb358b2abb571ef3ed581e97ea1aa4209d137522b8b60ecf516c4a",
				"dweb:/ipfs/QmWaoR21aj4CmtGHeM2oUU8zJVPpd7Y7jSGrL4xVMhxvp1"
			]
		},
		"localhost/utils/0xUtils/interfaces/IOwnable.sol": {
			"keccak256": "0x8a9c1243689632ecdf3e85d51c904ab61192bfe40e0115f37dc549c52e445ba2",
			"urls": [
				"bzz-raw://3d08b33cdabda90da9e6d0228649d9dabace9b19ebc22b5b718eff7f123bfef4",
				"dweb:/ipfs/QmS1o2HnyhsY5b35s1sADd2sZwq4QDE3rXk1UUC7JjPvCS"
			]
		}
	},
	"version": 1
}