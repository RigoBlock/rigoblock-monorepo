{
	"compiler": {
		"version": "0.5.4+commit.9549d8ff"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": true,
				"inputs": [],
				"name": "dragoRegistryAddress",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_ofGroup",
						"type": "address"
					},
					{
						"name": "_ratio",
						"type": "uint256"
					}
				],
				"name": "setRatio",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getHwm",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "addressFromId",
				"outputs": [
					{
						"name": "pool",
						"type": "address"
					},
					{
						"name": "group",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "calcPoolValue",
				"outputs": [
					{
						"name": "aum",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getRatio",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "proofOfPerformance",
				"outputs": [
					{
						"name": "popReward",
						"type": "uint256"
					},
					{
						"name": "performanceReward",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "rigoblockDaoAddress",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "isActive",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "stakingPoolId",
						"type": "bytes32"
					},
					{
						"name": "reward",
						"type": "uint256"
					}
				],
				"name": "claimPop",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getPoolPrice",
				"outputs": [
					{
						"name": "thePoolPrice",
						"type": "uint256"
					},
					{
						"name": "totalTokens",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "RIGOTOKENADDRESS",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_dragoRegistry",
						"type": "address"
					}
				],
				"name": "setRegistry",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_rigoblockDao",
						"type": "address"
					}
				],
				"name": "setRigoblockDao",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "STAKING_PROXY_ADDRESS",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getPoolData",
				"outputs": [
					{
						"name": "active",
						"type": "bool"
					},
					{
						"name": "poolAddress",
						"type": "address"
					},
					{
						"name": "poolGroup",
						"type": "address"
					},
					{
						"name": "poolPrice",
						"type": "uint256"
					},
					{
						"name": "poolSupply",
						"type": "uint256"
					},
					{
						"name": "poolValue",
						"type": "uint256"
					},
					{
						"name": "epochReward",
						"type": "uint256"
					},
					{
						"name": "ratio",
						"type": "uint256"
					},
					{
						"name": "pop",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "poolId",
						"type": "uint256"
					}
				],
				"name": "getEpochReward",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "stakingPoolId",
						"type": "bytes32"
					}
				],
				"name": "getPop",
				"outputs": [
					{
						"name": "popReward",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_rigoTokenAddress",
						"type": "address"
					},
					{
						"name": "_rigoblockDao",
						"type": "address"
					},
					{
						"name": "_dragoRegistry",
						"type": "address"
					},
					{
						"name": "_stakingProxyAddress",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"devdoc": {
			"author": "Gabriele Rigo - <gab@rigoblock.com>",
			"methods": {
				"addressFromId(uint256)": {
					"details": "Returns the address and the group of a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "pool Address of the target pool.group Address of the pool's group."
				},
				"calcPoolValue(uint256)": {
					"details": "Returns the value of a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "aum Total value of the pool in ETH."
				},
				"claimPop(bytes32,uint256)": {
					"details": "Allows staking proxy to allocate the pop reward to staking pool.",
					"params": {
						"reward": "Value of the stake-rebased reward.",
						"stakingPoolId": "Hex-encoded staking pool id."
					}
				},
				"getEpochReward(uint256)": {
					"details": "Returns the reward factor for a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "Value of the reward factor."
				},
				"getHwm(uint256)": {
					"details": "Returns the highwatermark of a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "Value of the all-time-high pool nav."
				},
				"getPoolData(uint256)": {
					"details": "Gets data of a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "active Bool the pool is active.poolAddress address of the pool.poolGroup address of the pool factory.poolPrice price of the pool in wei.poolSupply total supply of the pool in units.poolValue total value of the pool in wei.epochReward value of the reward factor or said pool.ratio of assets/performance reward (from 0 to 10000).pop value of the pop reward to be claimed in GRGs."
				},
				"getPoolPrice(uint256)": {
					"details": "Returns the price a pool from its id.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "thePoolPrice Price of the pool in wei.totalTokens Number of tokens of a pool (totalSupply)."
				},
				"getPop(bytes32)": {
					"details": "Returns the aggregated reward of all rigoblock pools belonging to a staking pool.",
					"params": {
						"stakingPoolId": "Hex-encoded staking pool id."
					},
					"return": "popReward Value of the aggregated reward."
				},
				"getRatio(uint256)": {
					"details": "Returns the split ratio of asset and performance reward.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "Value of the ratio from 1 to 100."
				},
				"isActive(uint256)": {
					"details": "Checks whether a pool is registered and active.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "Bool the pool is active."
				},
				"proofOfPerformance(uint256)": {
					"details": "Returns the proof of performance reward for a pool.",
					"params": {
						"poolId": "Id of the pool."
					},
					"return": "popReward Value of the pop reward in Rigo tokens.performanceReward Split of the performance reward in Rigo tokens."
				},
				"setRatio(address,uint256)": {
					"details": "Allows RigoBlock Dao to set the ratio between assets and performance reward for a group.",
					"params": {
						"_ofGroup": "Id of the pool.",
						"_ratio": "Id of the pool."
					}
				},
				"setRegistry(address)": {
					"details": "Allows RigoBlock Dao to update the pools registry.",
					"params": {
						"_dragoRegistry": "Address of new registry."
					}
				},
				"setRigoblockDao(address)": {
					"details": "Allows RigoBlock Dao to update its address.",
					"params": {
						"_rigoblockDao": "Address of new dao."
					}
				}
			},
			"title": "Proof of Performance - Controls parameters of inflation."
		},
		"userdoc": {
			"methods": {
				"proofOfPerformance(uint256)": {
					"notice": "epoch reward should be big enough that it.can be decreased if number of funds increases.should be at least 10^6 (just as pool base) to start with.rigo token has 10^18 decimals."
				},
				"setRatio(address,uint256)": {
					"notice": "onlyRigoblockDao can set ratio."
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/rigoToken/ProofOfPerformance/ProofOfPerformance.sol": "ProofOfPerformance"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/rigoToken/ProofOfPerformance/ProofOfPerformance.sol": {
			"keccak256": "0x32afbe908a62423a0c121ee1c90670763482d2449d772b02e9fe626986b3ac7c",
			"urls": [
				"bzzr://39d2a8f93b430d06d713e51a1fa4be83cd4b69922a445e8d295454835851cdfb"
			]
		},
		"localhost/rigoToken/ProofOfPerformance/ProofOfPerformanceFace.sol": {
			"keccak256": "0x3787ed779c2d22696ecc844069147b24dd601b097327e443aef223b9c23f5318",
			"urls": [
				"bzzr://e6436ee7dadb452c3ab733b805acb0aaace36bfdbf1c040eb4002218847697a3"
			]
		},
		"localhost/utils/Pool/Pool.sol": {
			"keccak256": "0xe18cb0d0ea553e0dadd213575a61831e2c20e45be68715dc994a897078bc2909",
			"urls": [
				"bzzr://a9c4a053aa0cea4c87c22ea0f44464461b8f91e71f7a9cc2421f56b714c783f7"
			]
		},
		"localhost/utils/ReentrancyGuard/ReentrancyGuard.sol": {
			"keccak256": "0x5e85ada215c542e3120aad9cf74e9a160fcdd169bd41913b534cc0121c12a8d2",
			"urls": [
				"bzzr://acd4f5853ebc7b2207bae4e9ab588f0887940c9639462aa7eb738ad99c729a88"
			]
		},
		"localhost/utils/SafeMath/SafeMath.sol": {
			"keccak256": "0x5fce40103165c675d5e12c07813bde1826416403a7be753c05c33f8f14039947",
			"urls": [
				"bzzr://ba92580e49f2fac69f6723c8a613d8f3dddc0a4d522cfeb02394ae5664f69ef2"
			]
		}
	},
	"version": 1
}