// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`VaultSelect component redirects if no vaults are present but we try to access a vault's address 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [Function],
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(vaultSelect)>
        <vaultSelect
          dispatch={[MockFunction]}
          location="/vaults/0"
          userType="manager"
          vaults={null}
        >
          <Button
            appearance="inverted"
            onClick={[Function]}
            type="button"
          >
            <withInk(withTooltip(Button))
              className="inverted-button"
              flat={true}
              inkTransitionEnterTimeout={450}
              inkTransitionLeaveTimeout={300}
              inkTransitionOverlap={150}
              onClick={[Function]}
              primary={true}
              swapTheming={true}
              type="button"
            >
              <withTooltip(Button)
                className="inverted-button"
                flat={true}
                ink={
                  <InkContainer
                    transitionEnterTimeout={450}
                    transitionLeaveTimeout={300}
                    transitionOverlap={150}
                  />
                }
                onClick={[Function]}
                primary={true}
                swapTheming={true}
                type="button"
              >
                <Button
                  className="inverted-button"
                  fixedPosition="br"
                  flat={true}
                  iconBefore={true}
                  ink={
                    <InkContainer
                      transitionEnterTimeout={450}
                      transitionLeaveTimeout={300}
                      transitionOverlap={150}
                    />
                  }
                  onClick={[Function]}
                  primary={true}
                  swapTheming={true}
                  type="button"
                >
                  <button
                    className="md-btn md-btn--flat md-btn--text md-pointer--hover md-background--primary md-background--primary-hover md-inline-block inverted-button"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchStart={[Function]}
                    type="button"
                  >
                    <InkContainer
                      key="ink-container"
                      transitionEnterTimeout={450}
                      transitionLeaveTimeout={300}
                      transitionOverlap={150}
                    >
                      <TransitionGroup
                        childFactory={[Function]}
                        className="md-ink-container"
                        component="div"
                      >
                        <div
                          className="md-ink-container"
                        />
                      </TransitionGroup>
                    </InkContainer>
                    New Vault
                  </button>
                </Button>
              </withTooltip(Button)>
            </withInk(withTooltip(Button))>
          </Button>
        </vaultSelect>
      </Connect(vaultSelect)>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`VaultSelect component renders correctly 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [Function],
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <Connect(vaultSelect)>
    <vaultSelect
      dispatch={[MockFunction]}
      location="/vaults/0"
      userType="manager"
      vaults={
        Object {
          "0x421e1cef6e85e78da2470e54af64a626f45afb85": Object {
            "group": "0x7ce6e371085cb611fb46d5065397223ef2f952ff",
            "id": "1",
            "name": "Third Vault",
            "owner": "0x7328ef1d7ab7583eb9968b2f4a9c900f8a2e2d6d",
            "symbol": "das",
            "totalSupply": "21343170000000000000",
            "transactionFee": "2.5",
          },
          "0x86a1ba4d485ce346bded508e2426798f825558be": Object {
            "group": "0x7ce6e371085cb611fb46d5065397223ef2f952ff",
            "id": "0",
            "name": "First Vault",
            "owner": "0x242b2dd21e7e1a2b2516d0a3a06b58e2d9bf9196",
            "symbol": "asd",
            "totalSupply": "28640000000000000000",
            "transactionFee": "2.5",
          },
        }
      }
    >
      <div
        className="vault-select"
      >
        <Button
          appearance="inverted"
          onClick={[Function]}
          type="button"
        >
          <withInk(withTooltip(Button))
            className="inverted-button"
            flat={true}
            inkTransitionEnterTimeout={450}
            inkTransitionLeaveTimeout={300}
            inkTransitionOverlap={150}
            onClick={[Function]}
            primary={true}
            swapTheming={true}
            type="button"
          >
            <withTooltip(Button)
              className="inverted-button"
              flat={true}
              ink={
                <InkContainer
                  transitionEnterTimeout={450}
                  transitionLeaveTimeout={300}
                  transitionOverlap={150}
                />
              }
              onClick={[Function]}
              primary={true}
              swapTheming={true}
              type="button"
            >
              <Button
                className="inverted-button"
                fixedPosition="br"
                flat={true}
                iconBefore={true}
                ink={
                  <InkContainer
                    transitionEnterTimeout={450}
                    transitionLeaveTimeout={300}
                    transitionOverlap={150}
                  />
                }
                onClick={[Function]}
                primary={true}
                swapTheming={true}
                type="button"
              >
                <button
                  className="md-btn md-btn--flat md-btn--text md-pointer--hover md-background--primary md-background--primary-hover md-inline-block inverted-button"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchStart={[Function]}
                  type="button"
                >
                  <InkContainer
                    key="ink-container"
                    transitionEnterTimeout={450}
                    transitionLeaveTimeout={300}
                    transitionOverlap={150}
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      className="md-ink-container"
                      component="div"
                    >
                      <div
                        className="md-ink-container"
                      />
                    </TransitionGroup>
                  </InkContainer>
                  New Vault
                </button>
              </Button>
            </withTooltip(Button)>
          </withInk(withTooltip(Button))>
        </Button>
        <List
          Component={[Function]}
          Divider={null}
          className={null}
          data={
            Array [
              Object {
                "className": "active",
                "id": "0",
                "itemName": "First Vault",
                "itemSymbol": "asd",
                "itemValue": "28.64",
                "onClick": [Function],
              },
              Object {
                "className": "",
                "id": "1",
                "itemName": "Third Vault",
                "itemSymbol": "das",
                "itemValue": "21.34317",
                "onClick": [Function],
              },
            ]
          }
        >
          <div
            className={null}
          >
            <ListItem
              className="active"
              currencyGrowth={null}
              growth={null}
              id={"0"}
              itemName="First Vault"
              itemSymbol="asd"
              itemValue={"28.64"}
              key="0"
              onClick={[Function]}
            >
              <div
                className="list-item active"
                id={"0"}
                onClick={[Function]}
              >
                <ItemName
                  name="First Vault"
                  symbol="asd"
                >
                  <div
                    className="no-events"
                  >
                    <span
                      className="item-symbol"
                    >
                      asd
                    </span>
                    <span
                      className="item-name"
                    >
                      First Vault
                    </span>
                  </div>
                </ItemName>
                <ItemValue
                  currency="ETH"
                  currencyGrowth={null}
                  growth={null}
                  itemValue={"28.64"}
                  precision={2}
                  valueSize="large"
                >
                  <div
                    className="no-events"
                  >
                    <span
                      className="item-value large"
                    >
                      28.64
                    </span>
                  </div>
                </ItemValue>
              </div>
            </ListItem>
            <ListItem
              className=""
              currencyGrowth={null}
              growth={null}
              id={"1"}
              itemName="Third Vault"
              itemSymbol="das"
              itemValue={"21.34317"}
              key="1"
              onClick={[Function]}
            >
              <div
                className="list-item"
                id={"1"}
                onClick={[Function]}
              >
                <ItemName
                  name="Third Vault"
                  symbol="das"
                >
                  <div
                    className="no-events"
                  >
                    <span
                      className="item-symbol"
                    >
                      das
                    </span>
                    <span
                      className="item-name"
                    >
                      Third Vault
                    </span>
                  </div>
                </ItemName>
                <ItemValue
                  currency="ETH"
                  currencyGrowth={null}
                  growth={null}
                  itemValue={"21.34317"}
                  precision={2}
                  valueSize="large"
                >
                  <div
                    className="no-events"
                  >
                    <span
                      className="item-value large"
                    >
                      21.34
                    </span>
                  </div>
                </ItemValue>
              </div>
            </ListItem>
          </div>
        </List>
      </div>
    </vaultSelect>
  </Connect(vaultSelect)>
</Provider>
`;

exports[`VaultSelect component renders correctly if there are no vaults on state 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [Function],
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <Connect(vaultSelect)>
    <vaultSelect
      dispatch={[MockFunction]}
      location="/vaults"
      userType="manager"
      vaults={null}
    >
      <Button
        appearance="inverted"
        onClick={[Function]}
        type="button"
      >
        <withInk(withTooltip(Button))
          className="inverted-button"
          flat={true}
          inkTransitionEnterTimeout={450}
          inkTransitionLeaveTimeout={300}
          inkTransitionOverlap={150}
          onClick={[Function]}
          primary={true}
          swapTheming={true}
          type="button"
        >
          <withTooltip(Button)
            className="inverted-button"
            flat={true}
            ink={
              <InkContainer
                transitionEnterTimeout={450}
                transitionLeaveTimeout={300}
                transitionOverlap={150}
              />
            }
            onClick={[Function]}
            primary={true}
            swapTheming={true}
            type="button"
          >
            <Button
              className="inverted-button"
              fixedPosition="br"
              flat={true}
              iconBefore={true}
              ink={
                <InkContainer
                  transitionEnterTimeout={450}
                  transitionLeaveTimeout={300}
                  transitionOverlap={150}
                />
              }
              onClick={[Function]}
              primary={true}
              swapTheming={true}
              type="button"
            >
              <button
                className="md-btn md-btn--flat md-btn--text md-pointer--hover md-background--primary md-background--primary-hover md-inline-block inverted-button"
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchStart={[Function]}
                type="button"
              >
                <InkContainer
                  key="ink-container"
                  transitionEnterTimeout={450}
                  transitionLeaveTimeout={300}
                  transitionOverlap={150}
                >
                  <TransitionGroup
                    childFactory={[Function]}
                    className="md-ink-container"
                    component="div"
                  >
                    <div
                      className="md-ink-container"
                    />
                  </TransitionGroup>
                </InkContainer>
                New Vault
              </button>
            </Button>
          </withTooltip(Button)>
        </withInk(withTooltip(Button))>
      </Button>
    </vaultSelect>
  </Connect(vaultSelect)>
</Provider>
`;
