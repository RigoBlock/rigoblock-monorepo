/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class Distribution extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [
          { name: "_fee", type: "uint256" },
          { name: "_distributor", type: "address" }
        ],
        name: "setFee",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_distributor", type: "address" }],
        name: "getFee",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_pool", type: "address" },
          { name: "_distributor", type: "address" },
          { name: "_buyer", type: "address" }
        ],
        name: "subscribe",
        outputs: [],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "buyer", type: "address" },
          { indexed: true, name: "distributor", type: "address" },
          { indexed: false, name: "amount", type: "uint256" }
        ],
        name: "Subscription",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Distribution> {
    const contract = new Distribution(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public getFee(_distributor: BigNumber | string): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getFee, [_distributor.toString()]);
  }

  public setFeeTx(
    _fee: BigNumber | number,
    _distributor: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setFee", [
      _fee.toString(),
      _distributor.toString()
    ]);
  }
  public subscribeTx(
    _pool: BigNumber | string,
    _distributor: BigNumber | string,
    _buyer: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "subscribe",
      [_pool.toString(), _distributor.toString(), _buyer.toString()]
    );
  }

  public SubscriptionEvent(eventFilter: {
    buyer?: BigNumber | string | Array<BigNumber | string>;
    distributor?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      buyer: BigNumber | string;
      distributor: BigNumber | string;
      amount: BigNumber | number;
    },
    {
      buyer?: BigNumber | string | Array<BigNumber | string>;
      distributor?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        buyer: BigNumber | string;
        distributor: BigNumber | string;
        amount: BigNumber | number;
      },
      {
        buyer?: BigNumber | string | Array<BigNumber | string>;
        distributor?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "Subscription", eventFilter);
  }
}
