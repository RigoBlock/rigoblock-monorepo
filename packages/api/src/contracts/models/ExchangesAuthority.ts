/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class ExchangesAuthority extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "_new", type: "address" }],
        name: "setOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "isCasperInitialized",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getCasper",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_authority", type: "address" }],
        name: "isAuthority",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_wrapper", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistWrapper",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_casper", type: "address" }],
        name: "setCasper",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_wrapper", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistTokenOnWrapper",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_exchange", type: "address" }],
        name: "getExchangeAdapter",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_wrapper", type: "address" }
        ],
        name: "canWrapTokenOnWrapper",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_tokenTransferProxy", type: "address" }],
        name: "isWhitelistedProxy",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getSigVerifier",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_method", type: "bytes4" },
          { name: "_adapter", type: "address" }
        ],
        name: "isMethodAllowed",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_exchange", type: "address" }],
        name: "isWhitelistedExchange",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_exchange", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistExchange",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_asset", type: "address" }],
        name: "isWhitelistedAsset",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_asset", type: "address" },
          { name: "_exchange", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistAssetOnExchange",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_exchangeEventful", type: "address" }],
        name: "setExchangeEventful",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_authority", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "setAuthority",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenTransferProxy", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistTokenTransferProxy",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_exchange", type: "address" },
          { name: "_adapter", type: "address" }
        ],
        name: "setExchangeAdapter",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_whitelister", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "setWhitelister",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_asset", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistAsset",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_sigVerifier", type: "address" }],
        name: "setSignatureVerifier",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_exchange", type: "address" }
        ],
        name: "canTradeTokenOnExchange",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_wrapper", type: "address" }],
        name: "isWhitelistedWrapper",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_method", type: "bytes4" },
          { name: "_adapter", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistMethod",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "authority", type: "address" }],
        name: "SetAuthority",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "whitelister", type: "address" }],
        name: "SetWhitelister",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "asset", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedAsset",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "exchange", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedExchange",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "wrapper", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedWrapper",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "proxy", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedProxy",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "method", type: "bytes4" },
          { indexed: true, name: "adapter", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedMethod",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "sigVerifier", type: "address" }],
        name: "NewSigVerifier",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "exchangeEventful", type: "address" }],
        name: "NewExchangeEventful",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "casper", type: "address" }],
        name: "NewCasper",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "old", type: "address" },
          { indexed: true, name: "current", type: "address" }
        ],
        name: "NewOwner",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<ExchangesAuthority> {
    const contract = new ExchangesAuthority(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get isCasperInitialized(): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isCasperInitialized, []);
  }

  public get getCasper(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getCasper, []);
  }

  public get getSigVerifier(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getSigVerifier, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public isAuthority(_authority: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isAuthority, [
      _authority.toString()
    ]);
  }

  public getExchangeAdapter(_exchange: BigNumber | string): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getExchangeAdapter, [
      _exchange.toString()
    ]);
  }

  public canWrapTokenOnWrapper(
    _token: BigNumber | string,
    _wrapper: BigNumber | string
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.canWrapTokenOnWrapper, [
      _token.toString(),
      _wrapper.toString()
    ]);
  }

  public isWhitelistedProxy(
    _tokenTransferProxy: BigNumber | string
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isWhitelistedProxy, [
      _tokenTransferProxy.toString()
    ]);
  }

  public isMethodAllowed(
    _method: string,
    _adapter: BigNumber | string
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isMethodAllowed, [
      _method.toString(),
      _adapter.toString()
    ]);
  }

  public isWhitelistedExchange(
    _exchange: BigNumber | string
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isWhitelistedExchange, [
      _exchange.toString()
    ]);
  }

  public isWhitelistedAsset(_asset: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isWhitelistedAsset, [
      _asset.toString()
    ]);
  }

  public canTradeTokenOnExchange(
    _token: BigNumber | string,
    _exchange: BigNumber | string
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.canTradeTokenOnExchange, [
      _token.toString(),
      _exchange.toString()
    ]);
  }

  public isWhitelistedWrapper(_wrapper: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isWhitelistedWrapper, [
      _wrapper.toString()
    ]);
  }

  public setOwnerTx(
    _new: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setOwner", [
      _new.toString()
    ]);
  }
  public whitelistWrapperTx(
    _wrapper: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistWrapper",
      [_wrapper.toString(), _isWhitelisted.toString()]
    );
  }
  public setCasperTx(
    _casper: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setCasper", [
      _casper.toString()
    ]);
  }
  public whitelistTokenOnWrapperTx(
    _token: BigNumber | string,
    _wrapper: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistTokenOnWrapper",
      [_token.toString(), _wrapper.toString(), _isWhitelisted.toString()]
    );
  }
  public whitelistExchangeTx(
    _exchange: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistExchange",
      [_exchange.toString(), _isWhitelisted.toString()]
    );
  }
  public whitelistAssetOnExchangeTx(
    _asset: BigNumber | string,
    _exchange: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistAssetOnExchange",
      [_asset.toString(), _exchange.toString(), _isWhitelisted.toString()]
    );
  }
  public setExchangeEventfulTx(
    _exchangeEventful: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setExchangeEventful",
      [_exchangeEventful.toString()]
    );
  }
  public setAuthorityTx(
    _authority: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setAuthority",
      [_authority.toString(), _isWhitelisted.toString()]
    );
  }
  public whitelistTokenTransferProxyTx(
    _tokenTransferProxy: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistTokenTransferProxy",
      [_tokenTransferProxy.toString(), _isWhitelisted.toString()]
    );
  }
  public setExchangeAdapterTx(
    _exchange: BigNumber | string,
    _adapter: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setExchangeAdapter",
      [_exchange.toString(), _adapter.toString()]
    );
  }
  public setWhitelisterTx(
    _whitelister: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setWhitelister",
      [_whitelister.toString(), _isWhitelisted.toString()]
    );
  }
  public whitelistAssetTx(
    _asset: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistAsset",
      [_asset.toString(), _isWhitelisted.toString()]
    );
  }
  public setSignatureVerifierTx(
    _sigVerifier: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setSignatureVerifier",
      [_sigVerifier.toString()]
    );
  }
  public whitelistMethodTx(
    _method: string,
    _adapter: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistMethod",
      [_method.toString(), _adapter.toString(), _isWhitelisted.toString()]
    );
  }

  public SetAuthorityEvent(eventFilter: {
    authority?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { authority: BigNumber | string },
    { authority?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { authority: BigNumber | string },
      { authority?: BigNumber | string | Array<BigNumber | string> }
    >(this, "SetAuthority", eventFilter);
  }
  public SetWhitelisterEvent(eventFilter: {
    whitelister?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { whitelister: BigNumber | string },
    { whitelister?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { whitelister: BigNumber | string },
      { whitelister?: BigNumber | string | Array<BigNumber | string> }
    >(this, "SetWhitelister", eventFilter);
  }
  public WhitelistedAssetEvent(eventFilter: {
    asset?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { asset: BigNumber | string; approved: boolean },
    { asset?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { asset: BigNumber | string; approved: boolean },
      { asset?: BigNumber | string | Array<BigNumber | string> }
    >(this, "WhitelistedAsset", eventFilter);
  }
  public WhitelistedExchangeEvent(eventFilter: {
    exchange?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { exchange: BigNumber | string; approved: boolean },
    { exchange?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { exchange: BigNumber | string; approved: boolean },
      { exchange?: BigNumber | string | Array<BigNumber | string> }
    >(this, "WhitelistedExchange", eventFilter);
  }
  public WhitelistedWrapperEvent(eventFilter: {
    wrapper?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { wrapper: BigNumber | string; approved: boolean },
    { wrapper?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { wrapper: BigNumber | string; approved: boolean },
      { wrapper?: BigNumber | string | Array<BigNumber | string> }
    >(this, "WhitelistedWrapper", eventFilter);
  }
  public WhitelistedProxyEvent(eventFilter: {
    proxy?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { proxy: BigNumber | string; approved: boolean },
    { proxy?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { proxy: BigNumber | string; approved: boolean },
      { proxy?: BigNumber | string | Array<BigNumber | string> }
    >(this, "WhitelistedProxy", eventFilter);
  }
  public WhitelistedMethodEvent(eventFilter: {
    method?: string | Array<string>;
    adapter?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { method: string; adapter: BigNumber | string; approved: boolean },
    {
      method?: string | Array<string>;
      adapter?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { method: string; adapter: BigNumber | string; approved: boolean },
      {
        method?: string | Array<string>;
        adapter?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "WhitelistedMethod", eventFilter);
  }
  public NewSigVerifierEvent(eventFilter: {
    sigVerifier?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { sigVerifier: BigNumber | string },
    { sigVerifier?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { sigVerifier: BigNumber | string },
      { sigVerifier?: BigNumber | string | Array<BigNumber | string> }
    >(this, "NewSigVerifier", eventFilter);
  }
  public NewExchangeEventfulEvent(eventFilter: {
    exchangeEventful?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { exchangeEventful: BigNumber | string },
    { exchangeEventful?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { exchangeEventful: BigNumber | string },
      { exchangeEventful?: BigNumber | string | Array<BigNumber | string> }
    >(this, "NewExchangeEventful", eventFilter);
  }
  public NewCasperEvent(eventFilter: {
    casper?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { casper: BigNumber | string },
    { casper?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { casper: BigNumber | string },
      { casper?: BigNumber | string | Array<BigNumber | string> }
    >(this, "NewCasper", eventFilter);
  }
  public NewOwnerEvent(eventFilter: {
    old?: BigNumber | string | Array<BigNumber | string>;
    current?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { old: BigNumber | string; current: BigNumber | string },
    {
      old?: BigNumber | string | Array<BigNumber | string>;
      current?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { old: BigNumber | string; current: BigNumber | string },
      {
        old?: BigNumber | string | Array<BigNumber | string>;
        current?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "NewOwner", eventFilter);
  }
}
