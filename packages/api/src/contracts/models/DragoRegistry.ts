/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class DragoRegistry extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "_newAddress", type: "address" }],
        name: "upgrade",
        outputs: [],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_new", type: "address" }],
        name: "setOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_id", type: "uint256" }],
        name: "updateOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_drago", type: "address" },
          { name: "_name", type: "string" },
          { name: "_symbol", type: "string" },
          { name: "_dragoId", type: "uint256" },
          { name: "_owner", type: "address" }
        ],
        name: "register",
        outputs: [{ name: "", type: "bool" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_version", type: "uint256" }],
        name: "setUpgraded",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_id", type: "uint256[]" }],
        name: "updateOwners",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_fee", type: "uint256" }],
        name: "setFee",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_id", type: "uint256" },
          { name: "_key", type: "bytes32" }
        ],
        name: "meta",
        outputs: [{ name: "", type: "bytes32" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "AUTHORITY",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "drain",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_id", type: "uint256" }],
        name: "unregister",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_pool", type: "address" }],
        name: "getNameFromAddress",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_name", type: "string" }],
        name: "fromName",
        outputs: [
          { name: "id", type: "uint256" },
          { name: "drago", type: "address" },
          { name: "symbol", type: "string" },
          { name: "dragoId", type: "uint256" },
          { name: "owner", type: "address" },
          { name: "group", type: "address" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_drago", type: "address" }],
        name: "fromAddress",
        outputs: [
          { name: "id", type: "uint256" },
          { name: "name", type: "string" },
          { name: "symbol", type: "string" },
          { name: "dragoId", type: "uint256" },
          { name: "owner", type: "address" },
          { name: "group", type: "address" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_id", type: "uint256" }],
        name: "fromId",
        outputs: [
          { name: "drago", type: "address" },
          { name: "name", type: "string" },
          { name: "symbol", type: "string" },
          { name: "dragoId", type: "uint256" },
          { name: "owner", type: "address" },
          { name: "group", type: "address" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getGroups",
        outputs: [{ name: "", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "dragoCount",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getFee",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_pool", type: "address" }],
        name: "getSymbolFromAddress",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_id", type: "uint256" },
          { name: "_key", type: "bytes32" },
          { name: "_value", type: "bytes32" }
        ],
        name: "setMeta",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "fee",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_group", type: "address" }],
        name: "addGroup",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [{ name: "_authority", type: "address" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "name", type: "string" },
          { indexed: false, name: "symbol", type: "string" },
          { indexed: false, name: "id", type: "uint256" },
          { indexed: true, name: "drago", type: "address" },
          { indexed: true, name: "owner", type: "address" },
          { indexed: true, name: "group", type: "address" }
        ],
        name: "Registered",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "name", type: "string" },
          { indexed: true, name: "symbol", type: "string" },
          { indexed: true, name: "id", type: "uint256" }
        ],
        name: "Unregistered",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "id", type: "uint256" },
          { indexed: true, name: "key", type: "bytes32" },
          { indexed: false, name: "value", type: "bytes32" }
        ],
        name: "MetaChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "old", type: "address" },
          { indexed: true, name: "current", type: "address" }
        ],
        name: "NewOwner",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<DragoRegistry> {
    const contract = new DragoRegistry(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get AUTHORITY(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.AUTHORITY, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get getGroups(): Promise<string[]> {
    return TC.promisify(this.rawWeb3Contract.getGroups, []);
  }

  public get dragoCount(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.dragoCount, []);
  }

  public get getFee(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.getFee, []);
  }

  public get fee(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.fee, []);
  }

  public get VERSION(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.VERSION, []);
  }

  public meta(_id: BigNumber | number, _key: string): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.meta, [
      _id.toString(),
      _key.toString()
    ]);
  }

  public getNameFromAddress(_pool: BigNumber | string): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getNameFromAddress, [
      _pool.toString()
    ]);
  }

  public fromName(
    _name: string
  ): Promise<[BigNumber, string, string, BigNumber, string, string]> {
    return TC.promisify(this.rawWeb3Contract.fromName, [_name.toString()]);
  }

  public fromAddress(
    _drago: BigNumber | string
  ): Promise<[BigNumber, string, string, BigNumber, string, string]> {
    return TC.promisify(this.rawWeb3Contract.fromAddress, [_drago.toString()]);
  }

  public fromId(
    _id: BigNumber | number
  ): Promise<[string, string, string, BigNumber, string, string]> {
    return TC.promisify(this.rawWeb3Contract.fromId, [_id.toString()]);
  }

  public getSymbolFromAddress(_pool: BigNumber | string): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getSymbolFromAddress, [
      _pool.toString()
    ]);
  }

  public upgradeTx(
    _newAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "upgrade",
      [_newAddress.toString()]
    );
  }
  public setOwnerTx(
    _new: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setOwner", [
      _new.toString()
    ]);
  }
  public updateOwnerTx(
    _id: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "updateOwner",
      [_id.toString()]
    );
  }
  public registerTx(
    _drago: BigNumber | string,
    _name: string,
    _symbol: string,
    _dragoId: BigNumber | number,
    _owner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "register",
      [
        _drago.toString(),
        _name.toString(),
        _symbol.toString(),
        _dragoId.toString(),
        _owner.toString()
      ]
    );
  }
  public setUpgradedTx(
    _version: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setUpgraded",
      [_version.toString()]
    );
  }
  public updateOwnersTx(
    _id: BigNumber[]
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "updateOwners",
      [_id.map(val => val.toString())]
    );
  }
  public setFeeTx(
    _fee: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setFee", [
      _fee.toString()
    ]);
  }
  public drainTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "drain", []);
  }
  public unregisterTx(
    _id: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "unregister", [
      _id.toString()
    ]);
  }
  public setMetaTx(
    _id: BigNumber | number,
    _key: string,
    _value: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setMeta", [
      _id.toString(),
      _key.toString(),
      _value.toString()
    ]);
  }
  public addGroupTx(
    _group: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "addGroup", [
      _group.toString()
    ]);
  }

  public RegisteredEvent(eventFilter: {
    drago?: BigNumber | string | Array<BigNumber | string>;
    owner?: BigNumber | string | Array<BigNumber | string>;
    group?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      name: string;
      symbol: string;
      id: BigNumber | number;
      drago: BigNumber | string;
      owner: BigNumber | string;
      group: BigNumber | string;
    },
    {
      drago?: BigNumber | string | Array<BigNumber | string>;
      owner?: BigNumber | string | Array<BigNumber | string>;
      group?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        name: string;
        symbol: string;
        id: BigNumber | number;
        drago: BigNumber | string;
        owner: BigNumber | string;
        group: BigNumber | string;
      },
      {
        drago?: BigNumber | string | Array<BigNumber | string>;
        owner?: BigNumber | string | Array<BigNumber | string>;
        group?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "Registered", eventFilter);
  }
  public UnregisteredEvent(eventFilter: {
    name?: string | Array<string>;
    symbol?: string | Array<string>;
    id?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    { name: string; symbol: string; id: BigNumber | number },
    {
      name?: string | Array<string>;
      symbol?: string | Array<string>;
      id?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { name: string; symbol: string; id: BigNumber | number },
      {
        name?: string | Array<string>;
        symbol?: string | Array<string>;
        id?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "Unregistered", eventFilter);
  }
  public MetaChangedEvent(eventFilter: {
    id?: BigNumber | number | Array<BigNumber | number>;
    key?: string | Array<string>;
  }): TC.DeferredEventWrapper<
    { id: BigNumber | number; key: string; value: string },
    {
      id?: BigNumber | number | Array<BigNumber | number>;
      key?: string | Array<string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { id: BigNumber | number; key: string; value: string },
      {
        id?: BigNumber | number | Array<BigNumber | number>;
        key?: string | Array<string>;
      }
    >(this, "MetaChanged", eventFilter);
  }
  public NewOwnerEvent(eventFilter: {
    old?: BigNumber | string | Array<BigNumber | string>;
    current?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { old: BigNumber | string; current: BigNumber | string },
    {
      old?: BigNumber | string | Array<BigNumber | string>;
      current?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { old: BigNumber | string; current: BigNumber | string },
      {
        old?: BigNumber | string | Array<BigNumber | string>;
        current?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "NewOwner", eventFilter);
  }
}
