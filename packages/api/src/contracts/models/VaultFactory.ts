/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class VaultFactory extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "_new", type: "address" }],
        name: "setOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_vaultDao", type: "address" }],
        name: "setBeneficiary",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getStorage",
        outputs: [
          { name: "vaultDao", type: "address" },
          { name: "version", type: "string" },
          { name: "nextVaultId", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newVaultDao", type: "address" }],
        name: "changeVaultDao",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getRegistry",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_fee", type: "uint256" }],
        name: "setFee",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getEventful",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "drain",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_name", type: "string" },
          { name: "_symbol", type: "string" }
        ],
        name: "createVault",
        outputs: [{ name: "success", type: "bool" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newRegistry", type: "address" }],
        name: "setRegistry",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_owner", type: "address" }],
        name: "getVaultsByAddress",
        outputs: [{ name: "", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_targetVault", type: "address" },
          { name: "_vaultDao", type: "address" }
        ],
        name: "setTargetVaultDao",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "VERSION",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          { name: "_registry", type: "address" },
          { name: "_vaultDao", type: "address" },
          { name: "_authority", type: "address" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "name", type: "string" },
          { indexed: false, name: "symbol", type: "string" },
          { indexed: true, name: "vault", type: "address" },
          { indexed: true, name: "owner", type: "address" },
          { indexed: false, name: "vaultId", type: "uint256" }
        ],
        name: "VaultCreated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "old", type: "address" },
          { indexed: true, name: "current", type: "address" }
        ],
        name: "NewOwner",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<VaultFactory> {
    const contract = new VaultFactory(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get getRegistry(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getRegistry, []);
  }

  public get getEventful(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getEventful, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get VERSION(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.VERSION, []);
  }

  public getStorage(): Promise<[string, string, BigNumber]> {
    return TC.promisify(this.rawWeb3Contract.getStorage, []);
  }

  public getVaultsByAddress(_owner: BigNumber | string): Promise<string[]> {
    return TC.promisify(this.rawWeb3Contract.getVaultsByAddress, [
      _owner.toString()
    ]);
  }

  public setOwnerTx(
    _new: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setOwner", [
      _new.toString()
    ]);
  }
  public setBeneficiaryTx(
    _vaultDao: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setBeneficiary",
      [_vaultDao.toString()]
    );
  }
  public changeVaultDaoTx(
    _newVaultDao: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "changeVaultDao",
      [_newVaultDao.toString()]
    );
  }
  public setFeeTx(
    _fee: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setFee", [
      _fee.toString()
    ]);
  }
  public drainTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "drain", []);
  }
  public createVaultTx(
    _name: string,
    _symbol: string
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "createVault",
      [_name.toString(), _symbol.toString()]
    );
  }
  public setRegistryTx(
    _newRegistry: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setRegistry",
      [_newRegistry.toString()]
    );
  }
  public setTargetVaultDaoTx(
    _targetVault: BigNumber | string,
    _vaultDao: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setTargetVaultDao",
      [_targetVault.toString(), _vaultDao.toString()]
    );
  }

  public VaultCreatedEvent(eventFilter: {
    vault?: BigNumber | string | Array<BigNumber | string>;
    owner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      name: string;
      symbol: string;
      vault: BigNumber | string;
      owner: BigNumber | string;
      vaultId: BigNumber | number;
    },
    {
      vault?: BigNumber | string | Array<BigNumber | string>;
      owner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        name: string;
        symbol: string;
        vault: BigNumber | string;
        owner: BigNumber | string;
        vaultId: BigNumber | number;
      },
      {
        vault?: BigNumber | string | Array<BigNumber | string>;
        owner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "VaultCreated", eventFilter);
  }
  public NewOwnerEvent(eventFilter: {
    old?: BigNumber | string | Array<BigNumber | string>;
    current?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { old: BigNumber | string; current: BigNumber | string },
    {
      old?: BigNumber | string | Array<BigNumber | string>;
      current?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { old: BigNumber | string; current: BigNumber | string },
      {
        old?: BigNumber | string | Array<BigNumber | string>;
        current?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "NewOwner", eventFilter);
  }
}
