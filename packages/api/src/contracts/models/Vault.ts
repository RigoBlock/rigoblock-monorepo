/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class Vault extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "_transactionFee", type: "uint256" }],
        name: "setTransactionFee",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_value", type: "uint256" },
          { name: "_forTime", type: "uint8" }
        ],
        name: "depositToken",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getVersion",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_new", type: "address" }],
        name: "setOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "totalSupply",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_token", type: "address" }],
        name: "tokensInVault",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_owner", type: "address" }
        ],
        name: "tokenBalanceOf",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_amount", type: "uint256" }],
        name: "sellVault",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getData",
        outputs: [
          { name: "name", type: "string" },
          { name: "symbol", type: "string" },
          { name: "sellPrice", type: "uint256" },
          { name: "buyPrice", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }, { name: "", type: "address" }],
        name: "tokenBalances",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_vaultDao", type: "address" }],
        name: "changeVaultDao",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_minPeriod", type: "uint32" }],
        name: "changeMinPeriod",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "updatePrice",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_from", type: "address" }],
        name: "balanceOf",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getEventful",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_user", type: "address" }
        ],
        name: "timeToUnlock",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getAdminData",
        outputs: [
          { name: "", type: "address" },
          { name: "feeCollector", type: "address" },
          { name: "vaultDao", type: "address" },
          { name: "ratio", type: "uint256" },
          { name: "transactionFee", type: "uint256" },
          { name: "minPeriod", type: "uint32" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_feeCollector", type: "address" }],
        name: "changeFeeCollector",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "calcSharePrice",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_value", type: "uint256" }
        ],
        name: "withdrawToken",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_hodler", type: "address" }],
        name: "buyVaultOnBehalf",
        outputs: [{ name: "success", type: "bool" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_hodler", type: "address" },
          { name: "_value", type: "uint256" },
          { name: "_forTime", type: "uint8" }
        ],
        name: "depositTokenOnBehalf",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "buyVault",
        outputs: [{ name: "success", type: "bool" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }, { name: "", type: "address" }],
        name: "depositLock",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_ratio", type: "uint256" }],
        name: "changeRatio",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          { name: "_vaultName", type: "string" },
          { name: "_vaultSymbol", type: "string" },
          { name: "_vaultId", type: "uint256" },
          { name: "_owner", type: "address" },
          { name: "_authority", type: "address" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "old", type: "address" },
          { indexed: true, name: "current", type: "address" }
        ],
        name: "NewOwner",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Vault> {
    const contract = new Vault(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get getVersion(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getVersion, []);
  }

  public get totalSupply(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.totalSupply, []);
  }

  public get getEventful(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getEventful, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get calcSharePrice(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.calcSharePrice, []);
  }

  public tokensInVault(_token: BigNumber | string): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.tokensInVault, [
      _token.toString()
    ]);
  }

  public tokenBalanceOf(
    _token: BigNumber | string,
    _owner: BigNumber | string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.tokenBalanceOf, [
      _token.toString(),
      _owner.toString()
    ]);
  }

  public getData(): Promise<[string, string, BigNumber, BigNumber]> {
    return TC.promisify(this.rawWeb3Contract.getData, []);
  }

  public tokenBalances(
    arg0: BigNumber | string,
    arg1: BigNumber | string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.tokenBalances, [
      arg0.toString(),
      arg1.toString()
    ]);
  }

  public balanceOf(_from: BigNumber | string): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.balanceOf, [_from.toString()]);
  }

  public timeToUnlock(
    _token: BigNumber | string,
    _user: BigNumber | string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.timeToUnlock, [
      _token.toString(),
      _user.toString()
    ]);
  }

  public getAdminData(): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber]
  > {
    return TC.promisify(this.rawWeb3Contract.getAdminData, []);
  }

  public depositLock(
    arg0: BigNumber | string,
    arg1: BigNumber | string
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.depositLock, [
      arg0.toString(),
      arg1.toString()
    ]);
  }

  public setTransactionFeeTx(
    _transactionFee: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setTransactionFee",
      [_transactionFee.toString()]
    );
  }
  public depositTokenTx(
    _token: BigNumber | string,
    _value: BigNumber | number,
    _forTime: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "depositToken",
      [_token.toString(), _value.toString(), _forTime.toString()]
    );
  }
  public setOwnerTx(
    _new: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setOwner", [
      _new.toString()
    ]);
  }
  public sellVaultTx(
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "sellVault", [
      _amount.toString()
    ]);
  }
  public changeVaultDaoTx(
    _vaultDao: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "changeVaultDao",
      [_vaultDao.toString()]
    );
  }
  public changeMinPeriodTx(
    _minPeriod: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "changeMinPeriod",
      [_minPeriod.toString()]
    );
  }
  public updatePriceTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "updatePrice",
      []
    );
  }
  public changeFeeCollectorTx(
    _feeCollector: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "changeFeeCollector",
      [_feeCollector.toString()]
    );
  }
  public withdrawTokenTx(
    _token: BigNumber | string,
    _value: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "withdrawToken",
      [_token.toString(), _value.toString()]
    );
  }
  public buyVaultOnBehalfTx(
    _hodler: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "buyVaultOnBehalf",
      [_hodler.toString()]
    );
  }
  public depositTokenOnBehalfTx(
    _token: BigNumber | string,
    _hodler: BigNumber | string,
    _value: BigNumber | number,
    _forTime: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "depositTokenOnBehalf",
      [
        _token.toString(),
        _hodler.toString(),
        _value.toString(),
        _forTime.toString()
      ]
    );
  }
  public buyVaultTx(): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "buyVault",
      []
    );
  }
  public changeRatioTx(
    _ratio: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "changeRatio",
      [_ratio.toString()]
    );
  }

  public NewOwnerEvent(eventFilter: {
    old?: BigNumber | string | Array<BigNumber | string>;
    current?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { old: BigNumber | string; current: BigNumber | string },
    {
      old?: BigNumber | string | Array<BigNumber | string>;
      current?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { old: BigNumber | string; current: BigNumber | string },
      {
        old?: BigNumber | string | Array<BigNumber | string>;
        current?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "NewOwner", eventFilter);
  }
}
