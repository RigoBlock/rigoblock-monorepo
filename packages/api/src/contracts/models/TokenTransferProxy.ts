/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class TokenTransferProxy extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "_new", type: "address" }],
        name: "setOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "token", type: "address" },
          { name: "from", type: "address" },
          { name: "to", type: "address" },
          { name: "value", type: "uint256" }
        ],
        name: "transferFrom",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "target", type: "address" }],
        name: "addAuthorizedAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "authorities",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "target", type: "address" }],
        name: "removeAuthorizedAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "authorized",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getAuthorizedAddresses",
        outputs: [{ name: "", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "target", type: "address" },
          { indexed: true, name: "caller", type: "address" }
        ],
        name: "LogAuthorizedAddressAdded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "target", type: "address" },
          { indexed: true, name: "caller", type: "address" }
        ],
        name: "LogAuthorizedAddressRemoved",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "old", type: "address" },
          { indexed: true, name: "current", type: "address" }
        ],
        name: "NewOwner",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TokenTransferProxy> {
    const contract = new TokenTransferProxy(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get getAuthorizedAddresses(): Promise<string[]> {
    return TC.promisify(this.rawWeb3Contract.getAuthorizedAddresses, []);
  }

  public authorities(arg0: BigNumber | number): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.authorities, [arg0.toString()]);
  }

  public authorized(arg0: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.authorized, [arg0.toString()]);
  }

  public setOwnerTx(
    _new: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setOwner", [
      _new.toString()
    ]);
  }
  public transferFromTx(
    token: BigNumber | string,
    from: BigNumber | string,
    to: BigNumber | string,
    value: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferFrom",
      [token.toString(), from.toString(), to.toString(), value.toString()]
    );
  }
  public addAuthorizedAddressTx(
    target: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addAuthorizedAddress",
      [target.toString()]
    );
  }
  public removeAuthorizedAddressTx(
    target: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeAuthorizedAddress",
      [target.toString()]
    );
  }

  public LogAuthorizedAddressAddedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
    caller?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string; caller: BigNumber | string },
    {
      target?: BigNumber | string | Array<BigNumber | string>;
      caller?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string; caller: BigNumber | string },
      {
        target?: BigNumber | string | Array<BigNumber | string>;
        caller?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "LogAuthorizedAddressAdded", eventFilter);
  }
  public LogAuthorizedAddressRemovedEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
    caller?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string; caller: BigNumber | string },
    {
      target?: BigNumber | string | Array<BigNumber | string>;
      caller?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string; caller: BigNumber | string },
      {
        target?: BigNumber | string | Array<BigNumber | string>;
        caller?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "LogAuthorizedAddressRemoved", eventFilter);
  }
  public NewOwnerEvent(eventFilter: {
    old?: BigNumber | string | Array<BigNumber | string>;
    current?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { old: BigNumber | string; current: BigNumber | string },
    {
      old?: BigNumber | string | Array<BigNumber | string>;
      current?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { old: BigNumber | string; current: BigNumber | string },
      {
        old?: BigNumber | string | Array<BigNumber | string>;
        current?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "NewOwner", eventFilter);
  }
}
