/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class NavVerifier extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [
          { name: "sellPrice", type: "uint256" },
          { name: "buyPrice", type: "uint256" },
          { name: "signaturevaliduntilBlock", type: "uint256" },
          { name: "hash", type: "bytes32" },
          { name: "signedData", type: "bytes" }
        ],
        name: "isValidNav",
        outputs: [{ name: "isValid", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<NavVerifier> {
    const contract = new NavVerifier(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public isValidNav(
    sellPrice: BigNumber | number,
    buyPrice: BigNumber | number,
    signaturevaliduntilBlock: BigNumber | number,
    hash: string,
    signedData: string[]
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isValidNav, [
      sellPrice.toString(),
      buyPrice.toString(),
      signaturevaliduntilBlock.toString(),
      hash.toString(),
      signedData.map(val => val.toString())
    ]);
  }
}
