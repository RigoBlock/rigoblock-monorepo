/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class Authority extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "getVaultEventful",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_new", type: "address" }],
        name: "setOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_vaultEventful", type: "address" }],
        name: "setVaultEventful",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_authority", type: "address" }],
        name: "isAuthority",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getDragoEventful",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_drago", type: "address" }],
        name: "isWhitelistedDrago",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_registry", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistRegistry",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_dragoEventful", type: "address" }],
        name: "setDragoEventful",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_factory", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistFactory",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getExchangesAuthority",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_navVerifier", type: "address" }],
        name: "setNavVerifier",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_exchangesAuthority", type: "address" }],
        name: "setExchangesAuthority",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_registry", type: "address" }],
        name: "isWhitelistedRegistry",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_target", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistUser",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_vault", type: "address" }],
        name: "isWhitelistedVault",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_drago", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistDrago",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_authority", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "setAuthority",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getNavVerifier",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_whitelister", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "setWhitelister",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_target", type: "address" }],
        name: "isWhitelistedUser",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_factory", type: "address" }],
        name: "isWhitelistedFactory",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_vault", type: "address" },
          { name: "_isWhitelisted", type: "bool" }
        ],
        name: "whitelistVault",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "authority", type: "address" }],
        name: "SetAuthority",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "whitelister", type: "address" }],
        name: "SetWhitelister",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "target", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedUser",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "registry", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedRegistry",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "factory", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedFactory",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "vault", type: "address" },
          { indexed: false, name: "approved", type: "bool" }
        ],
        name: "WhitelistedVault",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "drago", type: "address" },
          { indexed: false, name: "isWhitelisted", type: "bool" }
        ],
        name: "WhitelistedDrago",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "dragoEventful", type: "address" }],
        name: "NewDragoEventful",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "vaultEventful", type: "address" }],
        name: "NewVaultEventful",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "navVerifier", type: "address" }],
        name: "NewNavVerifier",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "exchangesAuthority", type: "address" }
        ],
        name: "NewExchangesAuthority",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "old", type: "address" },
          { indexed: true, name: "current", type: "address" }
        ],
        name: "NewOwner",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Authority> {
    const contract = new Authority(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get getVaultEventful(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getVaultEventful, []);
  }

  public get getDragoEventful(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getDragoEventful, []);
  }

  public get getExchangesAuthority(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getExchangesAuthority, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get getNavVerifier(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getNavVerifier, []);
  }

  public isAuthority(_authority: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isAuthority, [
      _authority.toString()
    ]);
  }

  public isWhitelistedDrago(_drago: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isWhitelistedDrago, [
      _drago.toString()
    ]);
  }

  public isWhitelistedRegistry(
    _registry: BigNumber | string
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isWhitelistedRegistry, [
      _registry.toString()
    ]);
  }

  public isWhitelistedVault(_vault: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isWhitelistedVault, [
      _vault.toString()
    ]);
  }

  public isWhitelistedUser(_target: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isWhitelistedUser, [
      _target.toString()
    ]);
  }

  public isWhitelistedFactory(_factory: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isWhitelistedFactory, [
      _factory.toString()
    ]);
  }

  public setOwnerTx(
    _new: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setOwner", [
      _new.toString()
    ]);
  }
  public setVaultEventfulTx(
    _vaultEventful: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setVaultEventful",
      [_vaultEventful.toString()]
    );
  }
  public whitelistRegistryTx(
    _registry: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistRegistry",
      [_registry.toString(), _isWhitelisted.toString()]
    );
  }
  public setDragoEventfulTx(
    _dragoEventful: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setDragoEventful",
      [_dragoEventful.toString()]
    );
  }
  public whitelistFactoryTx(
    _factory: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistFactory",
      [_factory.toString(), _isWhitelisted.toString()]
    );
  }
  public setNavVerifierTx(
    _navVerifier: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setNavVerifier",
      [_navVerifier.toString()]
    );
  }
  public setExchangesAuthorityTx(
    _exchangesAuthority: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setExchangesAuthority",
      [_exchangesAuthority.toString()]
    );
  }
  public whitelistUserTx(
    _target: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistUser",
      [_target.toString(), _isWhitelisted.toString()]
    );
  }
  public whitelistDragoTx(
    _drago: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistDrago",
      [_drago.toString(), _isWhitelisted.toString()]
    );
  }
  public setAuthorityTx(
    _authority: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setAuthority",
      [_authority.toString(), _isWhitelisted.toString()]
    );
  }
  public setWhitelisterTx(
    _whitelister: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setWhitelister",
      [_whitelister.toString(), _isWhitelisted.toString()]
    );
  }
  public whitelistVaultTx(
    _vault: BigNumber | string,
    _isWhitelisted: boolean
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "whitelistVault",
      [_vault.toString(), _isWhitelisted.toString()]
    );
  }

  public SetAuthorityEvent(eventFilter: {
    authority?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { authority: BigNumber | string },
    { authority?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { authority: BigNumber | string },
      { authority?: BigNumber | string | Array<BigNumber | string> }
    >(this, "SetAuthority", eventFilter);
  }
  public SetWhitelisterEvent(eventFilter: {
    whitelister?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { whitelister: BigNumber | string },
    { whitelister?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { whitelister: BigNumber | string },
      { whitelister?: BigNumber | string | Array<BigNumber | string> }
    >(this, "SetWhitelister", eventFilter);
  }
  public WhitelistedUserEvent(eventFilter: {
    target?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { target: BigNumber | string; approved: boolean },
    { target?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { target: BigNumber | string; approved: boolean },
      { target?: BigNumber | string | Array<BigNumber | string> }
    >(this, "WhitelistedUser", eventFilter);
  }
  public WhitelistedRegistryEvent(eventFilter: {
    registry?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { registry: BigNumber | string; approved: boolean },
    { registry?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { registry: BigNumber | string; approved: boolean },
      { registry?: BigNumber | string | Array<BigNumber | string> }
    >(this, "WhitelistedRegistry", eventFilter);
  }
  public WhitelistedFactoryEvent(eventFilter: {
    factory?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { factory: BigNumber | string; approved: boolean },
    { factory?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { factory: BigNumber | string; approved: boolean },
      { factory?: BigNumber | string | Array<BigNumber | string> }
    >(this, "WhitelistedFactory", eventFilter);
  }
  public WhitelistedVaultEvent(eventFilter: {
    vault?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { vault: BigNumber | string; approved: boolean },
    { vault?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { vault: BigNumber | string; approved: boolean },
      { vault?: BigNumber | string | Array<BigNumber | string> }
    >(this, "WhitelistedVault", eventFilter);
  }
  public WhitelistedDragoEvent(eventFilter: {
    drago?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { drago: BigNumber | string; isWhitelisted: boolean },
    { drago?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { drago: BigNumber | string; isWhitelisted: boolean },
      { drago?: BigNumber | string | Array<BigNumber | string> }
    >(this, "WhitelistedDrago", eventFilter);
  }
  public NewDragoEventfulEvent(eventFilter: {
    dragoEventful?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { dragoEventful: BigNumber | string },
    { dragoEventful?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { dragoEventful: BigNumber | string },
      { dragoEventful?: BigNumber | string | Array<BigNumber | string> }
    >(this, "NewDragoEventful", eventFilter);
  }
  public NewVaultEventfulEvent(eventFilter: {
    vaultEventful?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { vaultEventful: BigNumber | string },
    { vaultEventful?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { vaultEventful: BigNumber | string },
      { vaultEventful?: BigNumber | string | Array<BigNumber | string> }
    >(this, "NewVaultEventful", eventFilter);
  }
  public NewNavVerifierEvent(eventFilter: {
    navVerifier?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { navVerifier: BigNumber | string },
    { navVerifier?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { navVerifier: BigNumber | string },
      { navVerifier?: BigNumber | string | Array<BigNumber | string> }
    >(this, "NewNavVerifier", eventFilter);
  }
  public NewExchangesAuthorityEvent(eventFilter: {
    exchangesAuthority?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { exchangesAuthority: BigNumber | string },
    { exchangesAuthority?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { exchangesAuthority: BigNumber | string },
      { exchangesAuthority?: BigNumber | string | Array<BigNumber | string> }
    >(this, "NewExchangesAuthority", eventFilter);
  }
  public NewOwnerEvent(eventFilter: {
    old?: BigNumber | string | Array<BigNumber | string>;
    current?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { old: BigNumber | string; current: BigNumber | string },
    {
      old?: BigNumber | string | Array<BigNumber | string>;
      current?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { old: BigNumber | string; current: BigNumber | string },
      {
        old?: BigNumber | string | Array<BigNumber | string>;
        current?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "NewOwner", eventFilter);
  }
}
